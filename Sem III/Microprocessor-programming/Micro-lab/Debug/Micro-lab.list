
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004424  08004424  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800442c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  0800449c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800449c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0e2  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f8  00000000  00000000  0002b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c47  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a429  00000000  00000000  00054597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f19f2  00000000  00000000  0005e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001503b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f64  00000000  00000000  00150404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	080042d8 	.word	0x080042d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	080042d8 	.word	0x080042d8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <char_is_endmessage+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d101      	bne.n	800065a <char_is_endmessage+0x1a>
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <char_is_endmessage+0x1c>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <rx_has_data>:

uint8_t rx_has_data()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <rx_has_data+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <rx_has_data+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	d101      	bne.n	8000680 <rx_has_data+0x18>
	{
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <rx_has_data+0x1a>
	}
	else return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	20000136 	.word	0x20000136
 8000690:	20000137 	.word	0x20000137

08000694 <increase_rx_empty>:

void increase_rx_empty()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	rx_empty++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <increase_rx_empty+0x2c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b1e      	cmp	r3, #30
 80006ae:	d902      	bls.n	80006b6 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <increase_rx_empty+0x2c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	20000136 	.word	0x20000136

080006c4 <increase_rx_busy>:

void increase_rx_busy()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	rx_busy++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <increase_rx_busy+0x2c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(rx_busy>BUFFER_LENGTH)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b1e      	cmp	r3, #30
 80006de:	d902      	bls.n	80006e6 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <increase_rx_busy+0x2c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20000137 	.word	0x20000137

080006f4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <get_char+0x24>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <get_char+0x28>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000708:	f7ff ffdc 	bl	80006c4 <increase_rx_busy>
	return tmp;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000137 	.word	0x20000137
 800071c:	20000118 	.word	0x20000118

08000720 <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800072c:	e041      	b.n	80007b2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <get_message+0xa8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461c      	mov	r4, r3
 8000734:	f7ff ffde 	bl	80006f4 <get_char>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <get_message+0xac>)
 800073e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <get_message+0xa8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <get_message+0xac>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <char_is_endmessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d021      	beq.n	800079a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <get_message+0xa8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <get_message+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <get_message+0xac>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <get_message+0xa8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <get_message+0x48>
			}

			message_length = idx;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <get_message+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <get_message+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	e011      	b.n	80007be <get_message+0x9e>
		}
		else
		{
			idx++;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <get_message+0xa8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <get_message+0xa8>)
 80007a4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <get_message+0xa8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	d901      	bls.n	80007b2 <get_message+0x92>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e005      	b.n	80007be <get_message+0x9e>
	while(rx_has_data() == 1)
 80007b2:	f7ff ff59 	bl	8000668 <rx_has_data>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0b8      	beq.n	800072e <get_message+0xe>
		}
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000164 	.word	0x20000164
 80007cc:	20000168 	.word	0x20000168

080007d0 <turn_on_led>:

void turn_on_led()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <turn_on_led+0x14>)
 80007da:	f001 f8c3 	bl	8001964 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400

080007e8 <turn_off_led>:

void turn_off_led()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <turn_off_led+0x14>)
 80007f2:	f001 f8b7 	bl	8001964 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <led_delay>:

uint16_t led_delay(uint8_t blink_hz)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <led_delay+0x58>)
 800080c:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000818:	edd7 6a03 	vldr	s13, [r7, #12]
 800081c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000820:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000824:	edd7 7a03 	vldr	s15, [r7, #12]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f003 fcda 	bl	80041e8 <ceil>
 8000834:	eeb0 7b40 	vmov.f64	d7, d0
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay = (uint16_t)delay_f;
 8000840:	edd7 7a03 	vldr	s15, [r7, #12]
 8000844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	817b      	strh	r3, [r7, #10]
	return delay;
 800084e:	897b      	ldrh	r3, [r7, #10]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	447a0000 	.word	0x447a0000

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000862:	f000 fb05 	bl	8000e70 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000866:	f7ff fe69 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800086a:	f7ff fe8d 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fc2c 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f9fb 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fa85 	bl	8000d84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800087a:	f000 fa53 	bl	8000d24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	499a      	ldr	r1, [pc, #616]	; (8000aec <main+0x290>)
 8000882:	489b      	ldr	r0, [pc, #620]	; (8000af0 <main+0x294>)
 8000884:	f002 f9ac 	bl	8002be0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Command templates */
  uint8_t blink_cmd[6] = "BLINK,";
 8000888:	4a9a      	ldr	r2, [pc, #616]	; (8000af4 <main+0x298>)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000892:	6018      	str	r0, [r3, #0]
 8000894:	3304      	adds	r3, #4
 8000896:	8019      	strh	r1, [r3, #0]
  uint8_t delay_cmd[6] = "DELAY,";
 8000898:	4a97      	ldr	r2, [pc, #604]	; (8000af8 <main+0x29c>)
 800089a:	463b      	mov	r3, r7
 800089c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a0:	6018      	str	r0, [r3, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	8019      	strh	r1, [r3, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 80008a6:	4b91      	ldr	r3, [pc, #580]	; (8000aec <main+0x290>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b0a      	cmp	r3, #10
 80008ac:	d003      	beq.n	80008b6 <main+0x5a>
 80008ae:	4b8f      	ldr	r3, [pc, #572]	; (8000aec <main+0x290>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b0d      	cmp	r3, #13
 80008b4:	d106      	bne.n	80008c4 <main+0x68>
	{
		message_length = get_message(message);
 80008b6:	4891      	ldr	r0, [pc, #580]	; (8000afc <main+0x2a0>)
 80008b8:	f7ff ff32 	bl	8000720 <get_message>
 80008bc:	4603      	mov	r3, r0
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b8f      	ldr	r3, [pc, #572]	; (8000b00 <main+0x2a4>)
 80008c2:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 80008c4:	4b8e      	ldr	r3, [pc, #568]	; (8000b00 <main+0x2a4>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 81a6 	beq.w	8000c1c <main+0x3c0>
	{
		for (uint8_t i=0; i<message_length; i++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]
 80008d4:	e19b      	b.n	8000c0e <main+0x3b2>
		{
			/* Find command start */
			if (message[i] == 'L')
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
 80008d8:	4a88      	ldr	r2, [pc, #544]	; (8000afc <main+0x2a0>)
 80008da:	5cd3      	ldrb	r3, [r2, r3]
 80008dc:	2b4c      	cmp	r3, #76	; 0x4c
 80008de:	d105      	bne.n	80008ec <main+0x90>
			{
				i++;
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	3301      	adds	r3, #1
 80008e4:	75fb      	strb	r3, [r7, #23]
				frame_state = 1;
 80008e6:	4b87      	ldr	r3, [pc, #540]	; (8000b04 <main+0x2a8>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
			} /* if character is 'L' */
			if (message[i] == 'I')
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	4a83      	ldr	r2, [pc, #524]	; (8000afc <main+0x2a0>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	2b49      	cmp	r3, #73	; 0x49
 80008f4:	d105      	bne.n	8000902 <main+0xa6>
			{
				i++;
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
 80008f8:	3301      	adds	r3, #1
 80008fa:	75fb      	strb	r3, [r7, #23]
				frame_state = 1;
 80008fc:	4b81      	ldr	r3, [pc, #516]	; (8000b04 <main+0x2a8>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
			} /* if character is 'I' */

			switch (frame_state)
 8000902:	4b80      	ldr	r3, [pc, #512]	; (8000b04 <main+0x2a8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b03      	cmp	r3, #3
 800090a:	f000 813d 	beq.w	8000b88 <main+0x32c>
 800090e:	2b03      	cmp	r3, #3
 8000910:	f300 8176 	bgt.w	8000c00 <main+0x3a4>
 8000914:	2b01      	cmp	r3, #1
 8000916:	d002      	beq.n	800091e <main+0xc2>
 8000918:	2b02      	cmp	r3, #2
 800091a:	d03b      	beq.n	8000994 <main+0x138>
 800091c:	e170      	b.n	8000c00 <main+0x3a4>
			{
				case 1:
					if (message[i] == 'E' && message[i+1] == 'D')
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	4a76      	ldr	r2, [pc, #472]	; (8000afc <main+0x2a0>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
 8000924:	2b45      	cmp	r3, #69	; 0x45
 8000926:	d10c      	bne.n	8000942 <main+0xe6>
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	3301      	adds	r3, #1
 800092c:	4a73      	ldr	r2, [pc, #460]	; (8000afc <main+0x2a0>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	2b44      	cmp	r3, #68	; 0x44
 8000932:	d106      	bne.n	8000942 <main+0xe6>
					{
						i = i+1;
 8000934:	7dfb      	ldrb	r3, [r7, #23]
 8000936:	3301      	adds	r3, #1
 8000938:	75fb      	strb	r3, [r7, #23]
						frame_state = 2;
 800093a:	4b72      	ldr	r3, [pc, #456]	; (8000b04 <main+0x2a8>)
 800093c:	2202      	movs	r2, #2
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e027      	b.n	8000992 <main+0x136>
					} /* if 'LED' sequence found */
					else if (message[i] == 'N' && message[i+1] == 'S' && message[i+2] == 'E' && message[i+3] == 'R' && message[i+4] == 'T')
 8000942:	7dfb      	ldrb	r3, [r7, #23]
 8000944:	4a6d      	ldr	r2, [pc, #436]	; (8000afc <main+0x2a0>)
 8000946:	5cd3      	ldrb	r3, [r2, r3]
 8000948:	2b4e      	cmp	r3, #78	; 0x4e
 800094a:	d11e      	bne.n	800098a <main+0x12e>
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	3301      	adds	r3, #1
 8000950:	4a6a      	ldr	r2, [pc, #424]	; (8000afc <main+0x2a0>)
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	2b53      	cmp	r3, #83	; 0x53
 8000956:	d118      	bne.n	800098a <main+0x12e>
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	3302      	adds	r3, #2
 800095c:	4a67      	ldr	r2, [pc, #412]	; (8000afc <main+0x2a0>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	2b45      	cmp	r3, #69	; 0x45
 8000962:	d112      	bne.n	800098a <main+0x12e>
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	3303      	adds	r3, #3
 8000968:	4a64      	ldr	r2, [pc, #400]	; (8000afc <main+0x2a0>)
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	2b52      	cmp	r3, #82	; 0x52
 800096e:	d10c      	bne.n	800098a <main+0x12e>
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	3304      	adds	r3, #4
 8000974:	4a61      	ldr	r2, [pc, #388]	; (8000afc <main+0x2a0>)
 8000976:	5cd3      	ldrb	r3, [r2, r3]
 8000978:	2b54      	cmp	r3, #84	; 0x54
 800097a:	d106      	bne.n	800098a <main+0x12e>
					{
						i = i+4;
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	3304      	adds	r3, #4
 8000980:	75fb      	strb	r3, [r7, #23]
						frame_state = 2;
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <main+0x2a8>)
 8000984:	2202      	movs	r2, #2
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e003      	b.n	8000992 <main+0x136>
					} /* if 'INSERT' sequence found */
					else frame_state = 0;
 800098a:	4b5e      	ldr	r3, [pc, #376]	; (8000b04 <main+0x2a8>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
					break;
 8000990:	e13a      	b.n	8000c08 <main+0x3ac>
 8000992:	e139      	b.n	8000c08 <main+0x3ac>

				case 2:
					if (message[i] == '[' && message[i+1] == 'O' && message[i+2] == 'N')
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	4a59      	ldr	r2, [pc, #356]	; (8000afc <main+0x2a0>)
 8000998:	5cd3      	ldrb	r3, [r2, r3]
 800099a:	2b5b      	cmp	r3, #91	; 0x5b
 800099c:	d115      	bne.n	80009ca <main+0x16e>
 800099e:	7dfb      	ldrb	r3, [r7, #23]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a56      	ldr	r2, [pc, #344]	; (8000afc <main+0x2a0>)
 80009a4:	5cd3      	ldrb	r3, [r2, r3]
 80009a6:	2b4f      	cmp	r3, #79	; 0x4f
 80009a8:	d10f      	bne.n	80009ca <main+0x16e>
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	3302      	adds	r3, #2
 80009ae:	4a53      	ldr	r2, [pc, #332]	; (8000afc <main+0x2a0>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	2b4e      	cmp	r3, #78	; 0x4e
 80009b4:	d109      	bne.n	80009ca <main+0x16e>
					{
						i = i+2;
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	3302      	adds	r3, #2
 80009ba:	75fb      	strb	r3, [r7, #23]
						led_action = 1;
 80009bc:	4b52      	ldr	r3, [pc, #328]	; (8000b08 <main+0x2ac>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
						frame_state = 3;
 80009c2:	4b50      	ldr	r3, [pc, #320]	; (8000b04 <main+0x2a8>)
 80009c4:	2203      	movs	r2, #3
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e0dd      	b.n	8000b86 <main+0x32a>
					} /* if 'ON' sequence found */
					else if (message[i] == '[' && message[i+1] == 'O' && message[i+2] == 'F' && message[i+3] == 'F')
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
 80009cc:	4a4b      	ldr	r2, [pc, #300]	; (8000afc <main+0x2a0>)
 80009ce:	5cd3      	ldrb	r3, [r2, r3]
 80009d0:	2b5b      	cmp	r3, #91	; 0x5b
 80009d2:	d11b      	bne.n	8000a0c <main+0x1b0>
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a48      	ldr	r2, [pc, #288]	; (8000afc <main+0x2a0>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	2b4f      	cmp	r3, #79	; 0x4f
 80009de:	d115      	bne.n	8000a0c <main+0x1b0>
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	3302      	adds	r3, #2
 80009e4:	4a45      	ldr	r2, [pc, #276]	; (8000afc <main+0x2a0>)
 80009e6:	5cd3      	ldrb	r3, [r2, r3]
 80009e8:	2b46      	cmp	r3, #70	; 0x46
 80009ea:	d10f      	bne.n	8000a0c <main+0x1b0>
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
 80009ee:	3303      	adds	r3, #3
 80009f0:	4a42      	ldr	r2, [pc, #264]	; (8000afc <main+0x2a0>)
 80009f2:	5cd3      	ldrb	r3, [r2, r3]
 80009f4:	2b46      	cmp	r3, #70	; 0x46
 80009f6:	d109      	bne.n	8000a0c <main+0x1b0>
					{
						i = i+3;
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	3303      	adds	r3, #3
 80009fc:	75fb      	strb	r3, [r7, #23]
						led_action = 0;
 80009fe:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <main+0x2ac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
						frame_state = 3;
 8000a04:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <main+0x2a8>)
 8000a06:	2203      	movs	r2, #3
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e0bc      	b.n	8000b86 <main+0x32a>
					} /* if command 'OFF' found */
					else if (message[i] == '[' && message[i+1] == 'B')
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	4a3b      	ldr	r2, [pc, #236]	; (8000afc <main+0x2a0>)
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	2b5b      	cmp	r3, #91	; 0x5b
 8000a14:	d14b      	bne.n	8000aae <main+0x252>
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a38      	ldr	r2, [pc, #224]	; (8000afc <main+0x2a0>)
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
 8000a1e:	2b42      	cmp	r3, #66	; 0x42
 8000a20:	d145      	bne.n	8000aae <main+0x252>
					{
						i++;
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	3301      	adds	r3, #1
 8000a26:	75fb      	strb	r3, [r7, #23]
						for (uint8_t i=0; i<6; i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	75bb      	strb	r3, [r7, #22]
 8000a2c:	e010      	b.n	8000a50 <main+0x1f4>
						{
							if (message[i] != blink_cmd[i])
 8000a2e:	7dbb      	ldrb	r3, [r7, #22]
 8000a30:	4a32      	ldr	r2, [pc, #200]	; (8000afc <main+0x2a0>)
 8000a32:	5cd2      	ldrb	r2, [r2, r3]
 8000a34:	7dbb      	ldrb	r3, [r7, #22]
 8000a36:	3318      	adds	r3, #24
 8000a38:	443b      	add	r3, r7
 8000a3a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d003      	beq.n	8000a4a <main+0x1ee>
							{
								frame_state = 0;
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <main+0x2a8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
								break;
 8000a48:	e005      	b.n	8000a56 <main+0x1fa>
						for (uint8_t i=0; i<6; i++)
 8000a4a:	7dbb      	ldrb	r3, [r7, #22]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	75bb      	strb	r3, [r7, #22]
 8000a50:	7dbb      	ldrb	r3, [r7, #22]
 8000a52:	2b05      	cmp	r3, #5
 8000a54:	d9eb      	bls.n	8000a2e <main+0x1d2>
							} /* check for 'BLINK' sequence */
						}

						i = i+6;
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	3306      	adds	r3, #6
 8000a5a:	75fb      	strb	r3, [r7, #23]
						if (message[i] >= 0x30 && message[i] <= 0x39)
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	4a27      	ldr	r2, [pc, #156]	; (8000afc <main+0x2a0>)
 8000a60:	5cd3      	ldrb	r3, [r2, r3]
 8000a62:	2b2f      	cmp	r3, #47	; 0x2f
 8000a64:	f240 808e 	bls.w	8000b84 <main+0x328>
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	4a24      	ldr	r2, [pc, #144]	; (8000afc <main+0x2a0>)
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	2b39      	cmp	r3, #57	; 0x39
 8000a70:	f200 8088 	bhi.w	8000b84 <main+0x328>
						{
							/* Get blink delay */
							blink_delay = message[i];
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <main+0x2a0>)
 8000a78:	5cd2      	ldrb	r2, [r2, r3]
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <main+0x2b0>)
 8000a7c:	701a      	strb	r2, [r3, #0]
							delay = blink_delay - '0';
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <main+0x2b0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	3b30      	subs	r3, #48	; 0x30
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <main+0x2b4>)
 8000a8a:	701a      	strb	r2, [r3, #0]
							blink_ms = led_delay(delay);
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <main+0x2b4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff feb4 	bl	8000800 <led_delay>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <main+0x2b8>)
 8000a9e:	801a      	strh	r2, [r3, #0]
							/* convert char to int */
							led_action = 2;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <main+0x2ac>)
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	701a      	strb	r2, [r3, #0]
							frame_state = 3;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <main+0x2a8>)
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	701a      	strb	r2, [r3, #0]
						if (message[i] >= 0x30 && message[i] <= 0x39)
 8000aac:	e06a      	b.n	8000b84 <main+0x328>
						} /* if char is between '0' and '9' */
					} /* if command 'BLINK' found */
					else if (message[i] == '[' && message[i+1] == 'D')
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <main+0x2a0>)
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
 8000ab4:	2b5b      	cmp	r3, #91	; 0x5b
 8000ab6:	d161      	bne.n	8000b7c <main+0x320>
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <main+0x2a0>)
 8000abe:	5cd3      	ldrb	r3, [r2, r3]
 8000ac0:	2b44      	cmp	r3, #68	; 0x44
 8000ac2:	d15b      	bne.n	8000b7c <main+0x320>
					{
						i++;
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	75fb      	strb	r3, [r7, #23]
						for (uint8_t i=0; i<6; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	757b      	strb	r3, [r7, #21]
 8000ace:	e026      	b.n	8000b1e <main+0x2c2>
						{
							if (message[i] != delay_cmd[i])
 8000ad0:	7d7b      	ldrb	r3, [r7, #21]
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <main+0x2a0>)
 8000ad4:	5cd2      	ldrb	r2, [r2, r3]
 8000ad6:	7d7b      	ldrb	r3, [r7, #21]
 8000ad8:	3318      	adds	r3, #24
 8000ada:	443b      	add	r3, r7
 8000adc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d019      	beq.n	8000b18 <main+0x2bc>
							{
								frame_state = 0;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <main+0x2a8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
								break;
 8000aea:	e01b      	b.n	8000b24 <main+0x2c8>
 8000aec:	20000114 	.word	0x20000114
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	080042f0 	.word	0x080042f0
 8000af8:	080042f8 	.word	0x080042f8
 8000afc:	20000138 	.word	0x20000138
 8000b00:	20000156 	.word	0x20000156
 8000b04:	20000157 	.word	0x20000157
 8000b08:	20000158 	.word	0x20000158
 8000b0c:	2000015a 	.word	0x2000015a
 8000b10:	2000015b 	.word	0x2000015b
 8000b14:	2000015c 	.word	0x2000015c
						for (uint8_t i=0; i<6; i++)
 8000b18:	7d7b      	ldrb	r3, [r7, #21]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	757b      	strb	r3, [r7, #21]
 8000b1e:	7d7b      	ldrb	r3, [r7, #21]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d9d5      	bls.n	8000ad0 <main+0x274>
							} /* check for 'DELAY,' sequence */
						}

						i = i+6;
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	3306      	adds	r3, #6
 8000b28:	75fb      	strb	r3, [r7, #23]
						for (int y=0; y<4; y++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	e01a      	b.n	8000b66 <main+0x30a>
						{
							if (message[i+y] >= 0x30 && message[i+y] <= 0x39)
 8000b30:	7dfa      	ldrb	r2, [r7, #23]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <main+0x3ec>)
 8000b38:	5cd3      	ldrb	r3, [r2, r3]
 8000b3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000b3c:	d910      	bls.n	8000b60 <main+0x304>
 8000b3e:	7dfa      	ldrb	r2, [r7, #23]
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <main+0x3ec>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	2b39      	cmp	r3, #57	; 0x39
 8000b4a:	d809      	bhi.n	8000b60 <main+0x304>
							{
								temp[y] = message[i+y];
 8000b4c:	7dfa      	ldrb	r2, [r7, #23]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a3d      	ldr	r2, [pc, #244]	; (8000c48 <main+0x3ec>)
 8000b54:	5cd1      	ldrb	r1, [r2, r3]
 8000b56:	4a3d      	ldr	r2, [pc, #244]	; (8000c4c <main+0x3f0>)
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
						for (int y=0; y<4; y++)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	3301      	adds	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	dde1      	ble.n	8000b30 <main+0x2d4>
							}
						} /* store 4 chars as delay value */

						loop_delay = atoi(temp);
 8000b6c:	4837      	ldr	r0, [pc, #220]	; (8000c4c <main+0x3f0>)
 8000b6e:	f003 fa77 	bl	8004060 <atoi>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <main+0x3f4>)
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e004      	b.n	8000b86 <main+0x32a>
					} /* if command 'DELAY' found */
					else frame_state = 0;
 8000b7c:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <main+0x3f8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
					break;
 8000b82:	e041      	b.n	8000c08 <main+0x3ac>
						if (message[i] >= 0x30 && message[i] <= 0x39)
 8000b84:	bf00      	nop
					break;
 8000b86:	e03f      	b.n	8000c08 <main+0x3ac>

				case 3:
					if (message[i] == ']' && led_action == 0)
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <main+0x3ec>)
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	2b5d      	cmp	r3, #93	; 0x5d
 8000b90:	d10d      	bne.n	8000bae <main+0x352>
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <main+0x3fc>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d108      	bne.n	8000bae <main+0x352>
					{
						blink_active = 0;
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <main+0x400>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
						frame_state = 0;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <main+0x3f8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
						turn_off_led();
 8000ba8:	f7ff fe1e 	bl	80007e8 <turn_off_led>
 8000bac:	e027      	b.n	8000bfe <main+0x3a2>
					} /* toggle LED ON */
					else if (message[i] == ']' && led_action == 1)
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	4a25      	ldr	r2, [pc, #148]	; (8000c48 <main+0x3ec>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	2b5d      	cmp	r3, #93	; 0x5d
 8000bb6:	d10d      	bne.n	8000bd4 <main+0x378>
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <main+0x3fc>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d108      	bne.n	8000bd4 <main+0x378>
					{
						blink_active = 0;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <main+0x400>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
						frame_state = 0;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <main+0x3f8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
						turn_on_led();
 8000bce:	f7ff fdff 	bl	80007d0 <turn_on_led>
 8000bd2:	e014      	b.n	8000bfe <main+0x3a2>
					} /* toggle LED OFF */
					else if (message[i] == ']' && led_action == 2)
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <main+0x3ec>)
 8000bd8:	5cd3      	ldrb	r3, [r2, r3]
 8000bda:	2b5d      	cmp	r3, #93	; 0x5d
 8000bdc:	d10b      	bne.n	8000bf6 <main+0x39a>
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <main+0x3fc>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d106      	bne.n	8000bf6 <main+0x39a>
					{
						blink_active = 1;
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <main+0x400>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
						frame_state = 0;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <main+0x3f8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e003      	b.n	8000bfe <main+0x3a2>
					} /* blink LED */
					else frame_state = 0;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <main+0x3f8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
					break;
 8000bfc:	e004      	b.n	8000c08 <main+0x3ac>
 8000bfe:	e003      	b.n	8000c08 <main+0x3ac>

				default:
					frame_state = 0;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <main+0x3f8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
					break;
 8000c06:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	75fb      	strb	r3, [r7, #23]
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <main+0x404>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	7dfa      	ldrb	r2, [r7, #23]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	f4ff ae5d 	bcc.w	80008d6 <main+0x7a>
		}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (blink_active == 1)
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <main+0x400>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d109      	bne.n	8000c3a <main+0x3de>
	{
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <main+0x408>)
 8000c2a:	f000 feb4 	bl	8001996 <HAL_GPIO_TogglePin>
		HAL_Delay(blink_ms);
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <main+0x40c>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 faa5 	bl	8001184 <HAL_Delay>

	} /* Blink LED */

	HAL_Delay(loop_delay);
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <main+0x3f4>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 faa0 	bl	8001184 <HAL_Delay>
	if (character == '\n' || character == '\r')
 8000c44:	e62f      	b.n	80008a6 <main+0x4a>
 8000c46:	bf00      	nop
 8000c48:	20000138 	.word	0x20000138
 8000c4c:	20000160 	.word	0x20000160
 8000c50:	2000015e 	.word	0x2000015e
 8000c54:	20000157 	.word	0x20000157
 8000c58:	20000158 	.word	0x20000158
 8000c5c:	20000159 	.word	0x20000159
 8000c60:	20000156 	.word	0x20000156
 8000c64:	40020400 	.word	0x40020400
 8000c68:	2000015c 	.word	0x2000015c

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	; 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2234      	movs	r2, #52	; 0x34
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fa1e 	bl	80040bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <SystemClock_Config+0xb0>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <SystemClock_Config+0xb0>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <SystemClock_Config+0xb0>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <SystemClock_Config+0xb4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <SystemClock_Config+0xb4>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <SystemClock_Config+0xb4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fe77 	bl	80019cc <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ce4:	f000 f8f0 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce8:	230f      	movs	r3, #15
 8000cea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f910 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d0e:	f000 f8db 	bl	8000ec8 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3750      	adds	r7, #80	; 0x50
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_USART3_UART_Init+0x5c>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART3_UART_Init+0x58>)
 8000d68:	f001 feec 	bl	8002b44 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d72:	f000 f8a9 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000008c 	.word	0x2000008c
 8000d80:	40004800 	.word	0x40004800

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_GPIO_Init+0x8c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <MX_GPIO_Init+0x90>)
 8000de8:	f000 fdbc 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_GPIO_Init+0x90>)
 8000e04:	f000 fc02 	bl	800160c <HAL_GPIO_Init>

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400

08000e18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_UART_RxCpltCallback+0x44>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fbf3 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <HAL_UART_RxCpltCallback+0x48>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d10e      	bne.n	8000e52 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_UART_RxCpltCallback+0x4c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_UART_RxCpltCallback+0x44>)
 8000e3e:	7819      	ldrb	r1, [r3, #0]
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_UART_RxCpltCallback+0x50>)
 8000e42:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8000e44:	f7ff fc26 	bl	8000694 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4904      	ldr	r1, [pc, #16]	; (8000e5c <HAL_UART_RxCpltCallback+0x44>)
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <HAL_UART_RxCpltCallback+0x54>)
 8000e4e:	f001 fec7 	bl	8002be0 <HAL_UART_Receive_IT>
	}
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000114 	.word	0x20000114
 8000e60:	40004800 	.word	0x40004800
 8000e64:	20000136 	.word	0x20000136
 8000e68:	20000118 	.word	0x20000118
 8000e6c:	2000008c 	.word	0x2000008c

08000e70 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e82:	f000 fab5 	bl	80013f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e92:	231f      	movs	r3, #31
 8000e94:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e96:	2387      	movs	r3, #135	; 0x87
 8000e98:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fad3 	bl	8001460 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000eba:	2004      	movs	r0, #4
 8000ebc:	f000 fab0 	bl	8001420 <HAL_MPU_Enable>

}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x44>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x44>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0ae      	sub	sp, #184	; 0xb8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2290      	movs	r2, #144	; 0x90
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 f8bd 	bl	80040bc <memset>
  if(huart->Instance==USART3)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <HAL_UART_MspInit+0xc4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d144      	bne.n	8000fd6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 f9ca 	bl	80022f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f66:	f7ff ffaf 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_UART_MspInit+0xc8>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <HAL_UART_MspInit+0xc8>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_UART_MspInit+0xc8>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_UART_MspInit+0xc8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_UART_MspInit+0xc8>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_UART_MspInit+0xc8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <HAL_UART_MspInit+0xcc>)
 8000fc2:	f000 fb23 	bl	800160c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2027      	movs	r0, #39	; 0x27
 8000fcc:	f000 f9d9 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fd0:	2027      	movs	r0, #39	; 0x27
 8000fd2:	f000 f9f2 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	37b8      	adds	r7, #184	; 0xb8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40004800 	.word	0x40004800
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020c00 	.word	0x40020c00

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f884 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <USART3_IRQHandler+0x10>)
 8001046:	f001 fe0f 	bl	8002c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c

08001054 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f002 ffe5 	bl	8004074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fbd7 	bl	800085c <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010bc:	0800442c 	.word	0x0800442c
  ldr r2, =_sbss
 80010c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c4:	2000018c 	.word	0x2000018c

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>

080010ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 f94c 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d4:	200f      	movs	r0, #15
 80010d6:	f000 f805 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fefb 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f967 	bl	80013d6 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f92f 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000188 	.word	0x20000188

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000188 	.word	0x20000188

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008

080011cc <__NVIC_SetPriorityGrouping>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x40>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	05fa0000 	.word	0x05fa0000

08001214 <__NVIC_GetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013f4:	f3bf 8f5f 	dmb	sy
}
 80013f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_MPU_Disable+0x28>)
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_MPU_Disable+0x28>)
 8001400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001404:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_MPU_Disable+0x2c>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	e000ed90 	.word	0xe000ed90

08001420 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_MPU_Enable+0x38>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_MPU_Enable+0x3c>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_MPU_Enable+0x3c>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800143e:	f3bf 8f4f 	dsb	sy
}
 8001442:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001444:	f3bf 8f6f 	isb	sy
}
 8001448:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed90 	.word	0xe000ed90
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	785a      	ldrb	r2, [r3, #1]
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_MPU_ConfigRegion+0x84>)
 800146e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d029      	beq.n	80014cc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001478:	4a1a      	ldr	r2, [pc, #104]	; (80014e4 <HAL_MPU_ConfigRegion+0x84>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7b1b      	ldrb	r3, [r3, #12]
 8001484:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7adb      	ldrb	r3, [r3, #11]
 800148a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800148c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7a9b      	ldrb	r3, [r3, #10]
 8001492:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001494:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7b5b      	ldrb	r3, [r3, #13]
 800149a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800149c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7b9b      	ldrb	r3, [r3, #14]
 80014a2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7bdb      	ldrb	r3, [r3, #15]
 80014aa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7a5b      	ldrb	r3, [r3, #9]
 80014b2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7a1b      	ldrb	r3, [r3, #8]
 80014ba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014bc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014c6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014c8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80014ca:	e005      	b.n	80014d8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_MPU_ConfigRegion+0x84>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <HAL_MPU_ConfigRegion+0x84>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed90 	.word	0xe000ed90

080014e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014f6:	f7ff fe39 	bl	800116c <HAL_GetTick>
 80014fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d008      	beq.n	800151a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e052      	b.n	80015c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0216 	bic.w	r2, r2, #22
 8001528:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001538:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <HAL_DMA_Abort+0x62>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0208 	bic.w	r2, r2, #8
 8001558:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156a:	e013      	b.n	8001594 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156c:	f7ff fdfe 	bl	800116c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b05      	cmp	r3, #5
 8001578:	d90c      	bls.n	8001594 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2220      	movs	r2, #32
 800157e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e015      	b.n	80015c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e4      	bne.n	800156c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	223f      	movs	r2, #63	; 0x3f
 80015a8:	409a      	lsls	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d004      	beq.n	80015e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00c      	b.n	8001600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e175      	b.n	8001918 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8164 	bne.w	8001912 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_GPIO_Init+0x56>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d130      	bne.n	80016c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d017      	beq.n	8001700 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80be 	beq.w	8001912 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_GPIO_Init+0x324>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a65      	ldr	r2, [pc, #404]	; (8001930 <HAL_GPIO_Init+0x324>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_GPIO_Init+0x324>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ae:	4a61      	ldr	r2, [pc, #388]	; (8001934 <HAL_GPIO_Init+0x328>)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_GPIO_Init+0x32c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d037      	beq.n	800184a <HAL_GPIO_Init+0x23e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a57      	ldr	r2, [pc, #348]	; (800193c <HAL_GPIO_Init+0x330>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d031      	beq.n	8001846 <HAL_GPIO_Init+0x23a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a56      	ldr	r2, [pc, #344]	; (8001940 <HAL_GPIO_Init+0x334>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d02b      	beq.n	8001842 <HAL_GPIO_Init+0x236>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a55      	ldr	r2, [pc, #340]	; (8001944 <HAL_GPIO_Init+0x338>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d025      	beq.n	800183e <HAL_GPIO_Init+0x232>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a54      	ldr	r2, [pc, #336]	; (8001948 <HAL_GPIO_Init+0x33c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01f      	beq.n	800183a <HAL_GPIO_Init+0x22e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a53      	ldr	r2, [pc, #332]	; (800194c <HAL_GPIO_Init+0x340>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0x22a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_GPIO_Init+0x344>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x226>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_GPIO_Init+0x348>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x222>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_GPIO_Init+0x34c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x21e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4f      	ldr	r2, [pc, #316]	; (800195c <HAL_GPIO_Init+0x350>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x21a>
 8001822:	2309      	movs	r3, #9
 8001824:	e012      	b.n	800184c <HAL_GPIO_Init+0x240>
 8001826:	230a      	movs	r3, #10
 8001828:	e010      	b.n	800184c <HAL_GPIO_Init+0x240>
 800182a:	2308      	movs	r3, #8
 800182c:	e00e      	b.n	800184c <HAL_GPIO_Init+0x240>
 800182e:	2307      	movs	r3, #7
 8001830:	e00c      	b.n	800184c <HAL_GPIO_Init+0x240>
 8001832:	2306      	movs	r3, #6
 8001834:	e00a      	b.n	800184c <HAL_GPIO_Init+0x240>
 8001836:	2305      	movs	r3, #5
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x240>
 800183a:	2304      	movs	r3, #4
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x240>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x240>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x240>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x240>
 800184a:	2300      	movs	r3, #0
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	; (8001934 <HAL_GPIO_Init+0x328>)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_GPIO_Init+0x354>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_GPIO_Init+0x354>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <HAL_GPIO_Init+0x354>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a29      	ldr	r2, [pc, #164]	; (8001960 <HAL_GPIO_Init+0x354>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018be:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_GPIO_Init+0x354>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e2:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <HAL_GPIO_Init+0x354>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_GPIO_Init+0x354>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_GPIO_Init+0x354>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b0f      	cmp	r3, #15
 800191c:	f67f ae86 	bls.w	800162c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40021400 	.word	0x40021400
 8001950:	40021800 	.word	0x40021800
 8001954:	40021c00 	.word	0x40021c00
 8001958:	40022000 	.word	0x40022000
 800195c:	40022400 	.word	0x40022400
 8001960:	40013c00 	.word	0x40013c00

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a8:	887a      	ldrh	r2, [r7, #2]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	041a      	lsls	r2, r3, #16
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	400b      	ands	r3, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e29b      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8087 	beq.w	8001afe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f0:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d00c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fc:	4b93      	ldr	r3, [pc, #588]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d112      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62>
 8001a08:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a14:	d10b      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	4b8d      	ldr	r3, [pc, #564]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d06c      	beq.n	8001afc <HAL_RCC_OscConfig+0x130>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d168      	bne.n	8001afc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e275      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x7a>
 8001a38:	4b84      	ldr	r3, [pc, #528]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a83      	ldr	r2, [pc, #524]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e02e      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd8>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x9c>
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7e      	ldr	r2, [pc, #504]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b7c      	ldr	r3, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a7b      	ldr	r2, [pc, #492]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01d      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0xc0>
 8001a72:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a72      	ldr	r2, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd8>
 8001a8c:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a6b      	ldr	r2, [pc, #428]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fb5e 	bl	800116c <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fb5a 	bl	800116c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e229      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xe8>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fb4a 	bl	800116c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fb46 	bl	800116c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e215      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x110>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d069      	beq.n	8001bde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d11c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x190>
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x17a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1e9      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	493d      	ldr	r1, [pc, #244]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e040      	b.n	8001bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d023      	beq.n	8001bac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fafc 	bl	800116c <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff faf8 	bl	800116c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1c7      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4929      	ldr	r1, [pc, #164]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
 8001baa:	e018      	b.n	8001bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fad8 	bl	800116c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fad4 	bl	800116c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1a3      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d038      	beq.n	8001c5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d019      	beq.n	8001c26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fab5 	bl	800116c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7ff fab1 	bl	800116c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e180      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x23a>
 8001c24:	e01a      	b.n	8001c5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7ff fa9b 	bl	800116c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fa97 	bl	800116c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d903      	bls.n	8001c50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e166      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
 8001c4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	4b92      	ldr	r3, [pc, #584]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ee      	bne.n	8001c3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a4 	beq.w	8001db2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b8c      	ldr	r3, [pc, #560]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10d      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b89      	ldr	r3, [pc, #548]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a88      	ldr	r2, [pc, #544]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b86      	ldr	r3, [pc, #536]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c92:	4b83      	ldr	r3, [pc, #524]	; (8001ea0 <HAL_RCC_OscConfig+0x4d4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c9e:	4b80      	ldr	r3, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x4d4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7f      	ldr	r2, [pc, #508]	; (8001ea0 <HAL_RCC_OscConfig+0x4d4>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fa5f 	bl	800116c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff fa5b 	bl	800116c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e12a      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc4:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x4d4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x31a>
 8001cd8:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a6f      	ldr	r2, [pc, #444]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_OscConfig+0x376>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x33c>
 8001cee:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a6a      	ldr	r2, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfa:	4b68      	ldr	r3, [pc, #416]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a67      	ldr	r2, [pc, #412]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	e01c      	b.n	8001d42 <HAL_RCC_OscConfig+0x376>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x35e>
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a61      	ldr	r2, [pc, #388]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	e00b      	b.n	8001d42 <HAL_RCC_OscConfig+0x376>
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a5b      	ldr	r2, [pc, #364]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fa0f 	bl	800116c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff fa0b 	bl	800116c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0d8      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ee      	beq.n	8001d52 <HAL_RCC_OscConfig+0x386>
 8001d74:	e014      	b.n	8001da0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f9f9 	bl	800116c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff f9f5 	bl	800116c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0c2      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a3c      	ldr	r2, [pc, #240]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80ae 	beq.w	8001f18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbc:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d06d      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d14b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f9c6 	bl	800116c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff f9c2 	bl	800116c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e091      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	071b      	lsls	r3, r3, #28
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff f994 	bl	800116c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff f990 	bl	800116c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e05f      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x47c>
 8001e66:	e057      	b.n	8001f18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f97a 	bl	800116c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f976 	bl	800116c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e045      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_RCC_OscConfig+0x4d0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4b0>
 8001e9a:	e03d      	b.n	8001f18 <HAL_RCC_OscConfig+0x54c>
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCC_OscConfig+0x558>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d030      	beq.n	8001f14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d129      	bne.n	8001f14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d122      	bne.n	8001f14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d119      	bne.n	8001f14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	3b01      	subs	r3, #1
 8001eee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d10f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0d0      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d910      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 020f 	bic.w	r2, r3, #15
 8001f56:	4965      	ldr	r1, [pc, #404]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0b8      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001faa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	494d      	ldr	r1, [pc, #308]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d040      	beq.n	800204c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e07f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e073      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06b      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4936      	ldr	r1, [pc, #216]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7ff f8a6 	bl	800116c <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7ff f8a2 	bl	800116c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e053      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d210      	bcs.n	800207c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 020f 	bic.w	r2, r3, #15
 8002062:	4922      	ldr	r1, [pc, #136]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e032      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ba:	f000 f821 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x1cc>)
 80020cc:	5ccb      	ldrb	r3, [r1, r3]
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1d0>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1d4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f802 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08004300 	.word	0x08004300
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b090      	sub	sp, #64	; 0x40
 8002106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_GetSysClockFreq+0x180>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d00d      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x40>
 8002124:	2b08      	cmp	r3, #8
 8002126:	f200 80a1 	bhi.w	800226c <HAL_RCC_GetSysClockFreq+0x16c>
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x34>
 800212e:	2b04      	cmp	r3, #4
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x3a>
 8002132:	e09b      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCC_GetSysClockFreq+0x184>)
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002138:	e09b      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800213a:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_RCC_GetSysClockFreq+0x188>)
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800213e:	e098      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002140:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <HAL_RCC_GetSysClockFreq+0x180>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800214a:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <HAL_RCC_GetSysClockFreq+0x180>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d028      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <HAL_RCC_GetSysClockFreq+0x180>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	2200      	movs	r2, #0
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	627a      	str	r2, [r7, #36]	; 0x24
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002168:	2100      	movs	r1, #0
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_GetSysClockFreq+0x188>)
 800216c:	fb03 f201 	mul.w	r2, r3, r1
 8002170:	2300      	movs	r3, #0
 8002172:	fb00 f303 	mul.w	r3, r0, r3
 8002176:	4413      	add	r3, r2
 8002178:	4a43      	ldr	r2, [pc, #268]	; (8002288 <HAL_RCC_GetSysClockFreq+0x188>)
 800217a:	fba0 1202 	umull	r1, r2, r0, r2
 800217e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002180:	460a      	mov	r2, r1
 8002182:	62ba      	str	r2, [r7, #40]	; 0x28
 8002184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002186:	4413      	add	r3, r2
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218c:	2200      	movs	r2, #0
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	61fa      	str	r2, [r7, #28]
 8002192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800219a:	f7fe f84d 	bl	8000238 <__aeabi_uldivmod>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4613      	mov	r3, r2
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a6:	e053      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_RCC_GetSysClockFreq+0x180>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	2200      	movs	r2, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	617a      	str	r2, [r7, #20]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021ba:	f04f 0b00 	mov.w	fp, #0
 80021be:	4652      	mov	r2, sl
 80021c0:	465b      	mov	r3, fp
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	0159      	lsls	r1, r3, #5
 80021cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d0:	0150      	lsls	r0, r2, #5
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	ebb2 080a 	subs.w	r8, r2, sl
 80021da:	eb63 090b 	sbc.w	r9, r3, fp
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021f2:	ebb2 0408 	subs.w	r4, r2, r8
 80021f6:	eb63 0509 	sbc.w	r5, r3, r9
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	00eb      	lsls	r3, r5, #3
 8002204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002208:	00e2      	lsls	r2, r4, #3
 800220a:	4614      	mov	r4, r2
 800220c:	461d      	mov	r5, r3
 800220e:	eb14 030a 	adds.w	r3, r4, sl
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	eb45 030b 	adc.w	r3, r5, fp
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002226:	4629      	mov	r1, r5
 8002228:	028b      	lsls	r3, r1, #10
 800222a:	4621      	mov	r1, r4
 800222c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002230:	4621      	mov	r1, r4
 8002232:	028a      	lsls	r2, r1, #10
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	2200      	movs	r2, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	60fa      	str	r2, [r7, #12]
 8002240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002244:	f7fd fff8 	bl	8000238 <__aeabi_uldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4613      	mov	r3, r2
 800224e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_GetSysClockFreq+0x180>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800226a:	e002      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetSysClockFreq+0x184>)
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002274:	4618      	mov	r0, r3
 8002276:	3740      	adds	r7, #64	; 0x40
 8002278:	46bd      	mov	sp, r7
 800227a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	00f42400 	.word	0x00f42400
 8002288:	017d7840 	.word	0x017d7840

0800228c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022a8:	f7ff fff0 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0a9b      	lsrs	r3, r3, #10
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	08004310 	.word	0x08004310

080022cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d0:	f7ff ffdc 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	0b5b      	lsrs	r3, r3, #13
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4903      	ldr	r1, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	08004310 	.word	0x08004310

080022f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800231c:	4b69      	ldr	r3, [pc, #420]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a68      	ldr	r2, [pc, #416]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002322:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	4964      	ldr	r1, [pc, #400]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d017      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	4959      	ldr	r1, [pc, #356]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800236c:	d101      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d017      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800238a:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002390:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	494a      	ldr	r1, [pc, #296]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a8:	d101      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 808b 	beq.w	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a39      	ldr	r2, [pc, #228]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
 80023e4:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a34      	ldr	r2, [pc, #208]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7fe feb6 	bl	800116c <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7fe feb2 	bl	800116c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e38f      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d035      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	429a      	cmp	r2, r3
 800243e:	d02e      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002440:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002448:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d114      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fe7a 	bl	800116c <HAL_GetTick>
 8002478:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	e00a      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fe76 	bl	800116c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e351      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ee      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024aa:	d111      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	4901      	ldr	r1, [pc, #4]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
 80024c2:	e00b      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000
 80024cc:	0ffffcff 	.word	0x0ffffcff
 80024d0:	4bac      	ldr	r3, [pc, #688]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4aab      	ldr	r2, [pc, #684]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024da:	6093      	str	r3, [r2, #8]
 80024dc:	4ba9      	ldr	r3, [pc, #676]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	49a6      	ldr	r1, [pc, #664]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024fa:	4ba2      	ldr	r3, [pc, #648]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002500:	4aa0      	ldr	r2, [pc, #640]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002506:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800250a:	4b9e      	ldr	r3, [pc, #632]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	499b      	ldr	r1, [pc, #620]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002528:	4b96      	ldr	r3, [pc, #600]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002536:	4993      	ldr	r1, [pc, #588]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800254a:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002558:	498a      	ldr	r1, [pc, #552]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256c:	4b85      	ldr	r3, [pc, #532]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	4982      	ldr	r1, [pc, #520]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4979      	ldr	r1, [pc, #484]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b0:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4971      	ldr	r1, [pc, #452]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025d2:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f023 020c 	bic.w	r2, r3, #12
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	4968      	ldr	r1, [pc, #416]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025f4:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	4960      	ldr	r1, [pc, #384]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002616:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002624:	4957      	ldr	r1, [pc, #348]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002638:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	494f      	ldr	r1, [pc, #316]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4946      	ldr	r1, [pc, #280]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	493e      	ldr	r1, [pc, #248]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	4935      	ldr	r1, [pc, #212]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026c0:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ce:	492d      	ldr	r1, [pc, #180]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d011      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026e2:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f0:	4924      	ldr	r1, [pc, #144]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	4914      	ldr	r1, [pc, #80]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002754:	490b      	ldr	r1, [pc, #44]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00f      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002778:	4902      	ldr	r1, [pc, #8]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002780:	e002      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002794:	4b8a      	ldr	r3, [pc, #552]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	4986      	ldr	r1, [pc, #536]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027b8:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c8:	497d      	ldr	r1, [pc, #500]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d006      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80d6 	beq.w	8002990 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027e4:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a75      	ldr	r2, [pc, #468]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f0:	f7fe fcbc 	bl	800116c <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027f8:	f7fe fcb8 	bl	800116c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e195      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800280a:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d021      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11d      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800282a:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800282c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002838:	4b61      	ldr	r3, [pc, #388]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283e:	0e1b      	lsrs	r3, r3, #24
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	019a      	lsls	r2, r3, #6
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	071b      	lsls	r3, r3, #28
 800285e:	4958      	ldr	r1, [pc, #352]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02e      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002890:	d129      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002892:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028a0:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a6:	0f1b      	lsrs	r3, r3, #28
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	019a      	lsls	r2, r3, #6
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	071b      	lsls	r3, r3, #28
 80028c6:	493e      	ldr	r1, [pc, #248]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d4:	f023 021f 	bic.w	r2, r3, #31
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	3b01      	subs	r3, #1
 80028de:	4938      	ldr	r1, [pc, #224]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01d      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f8:	0e1b      	lsrs	r3, r3, #24
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	0f1b      	lsrs	r3, r3, #28
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	019a      	lsls	r2, r3, #6
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	431a      	orrs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	071b      	lsls	r3, r3, #28
 8002926:	4926      	ldr	r1, [pc, #152]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d011      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	019a      	lsls	r2, r3, #6
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	071b      	lsls	r3, r3, #28
 8002956:	491a      	ldr	r1, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002964:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296a:	f7fe fbff 	bl	800116c <HAL_GetTick>
 800296e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002972:	f7fe fbfb 	bl	800116c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b64      	cmp	r3, #100	; 0x64
 800297e:	d901      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0d8      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	f040 80ce 	bne.w	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a4:	f7fe fbe2 	bl	800116c <HAL_GetTick>
 80029a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029aa:	e00b      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029ac:	f7fe fbde 	bl	800116c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d904      	bls.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0bb      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029c4:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d0:	d0ec      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02e      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d12a      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029fa:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a08:	4b4d      	ldr	r3, [pc, #308]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	0f1b      	lsrs	r3, r3, #28
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	019a      	lsls	r2, r3, #6
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	071b      	lsls	r3, r3, #28
 8002a2e:	4944      	ldr	r1, [pc, #272]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a36:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	493d      	ldr	r1, [pc, #244]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d022      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a64:	d11d      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a66:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	0e1b      	lsrs	r3, r3, #24
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a74:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	0f1b      	lsrs	r3, r3, #28
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	019a      	lsls	r2, r3, #6
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	061b      	lsls	r3, r3, #24
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	071b      	lsls	r3, r3, #28
 8002a9a:	4929      	ldr	r1, [pc, #164]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d028      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	0e1b      	lsrs	r3, r3, #24
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	019a      	lsls	r2, r3, #6
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	071b      	lsls	r3, r3, #28
 8002ae2:	4917      	ldr	r1, [pc, #92]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	4911      	ldr	r1, [pc, #68]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fb2e 	bl	800116c <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b14:	f7fe fb2a 	bl	800116c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e007      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b32:	d1ef      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e040      	b.n	8002bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe f9d8 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fb82 	bl	800328c <UART_SetConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e022      	b.n	8002bd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fdda 	bl	8003754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fe61 	bl	8003898 <UART_CheckIdleState>
 8002bd6:	4603      	mov	r3, r0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d132      	bne.n	8002c5e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_UART_Receive_IT+0x24>
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e02b      	b.n	8002c60 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d018      	beq.n	8002c4e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	69f9      	ldr	r1, [r7, #28]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e6      	bne.n	8002c1c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 ff33 	bl	8003ac0 <UART_Start_Receive_IT>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	e000      	b.n	8002c60 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3728      	adds	r7, #40	; 0x28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0ba      	sub	sp, #232	; 0xe8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c96:	4013      	ands	r3, r2
 8002c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d115      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 82ac 	beq.w	800321e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
      }
      return;
 8002cce:	e2a6      	b.n	800321e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8117 	beq.w	8002f08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ce6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_UART_IRQHandler+0x298>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 810a 	beq.w	8002f08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d011      	beq.n	8002d24 <HAL_UART_IRQHandler+0xbc>
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d011      	beq.n	8002d54 <HAL_UART_IRQHandler+0xec>
 8002d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2202      	movs	r2, #2
 8002d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d011      	beq.n	8002d84 <HAL_UART_IRQHandler+0x11c>
 8002d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2204      	movs	r2, #4
 8002d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7a:	f043 0202 	orr.w	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2208      	movs	r2, #8
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db6:	f043 0208 	orr.w	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_UART_IRQHandler+0x18a>
 8002dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8212 	beq.w	8003222 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d005      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04f      	beq.n	8002eea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fefe 	bl	8003c4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
 8002e5c:	d141      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3308      	adds	r3, #8
 8002e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3308      	adds	r3, #8
 8002e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1d9      	bne.n	8002e5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb6:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <HAL_UART_IRQHandler+0x29c>)
 8002eb8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fb82 	bl	80015c8 <HAL_DMA_Abort_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d017      	beq.n	8002efa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	e00f      	b.n	8002efa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9b6 	bl	800324c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee0:	e00b      	b.n	8002efa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9b2 	bl	800324c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	e007      	b.n	8002efa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9ae 	bl	800324c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ef8:	e193      	b.n	8003222 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efa:	bf00      	nop
    return;
 8002efc:	e191      	b.n	8003222 <HAL_UART_IRQHandler+0x5ba>
 8002efe:	bf00      	nop
 8002f00:	04000120 	.word	0x04000120
 8002f04:	08003d15 	.word	0x08003d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	f040 814c 	bne.w	80031aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8145 	beq.w	80031aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 813e 	beq.w	80031aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2210      	movs	r2, #16
 8002f34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	f040 80b6 	bne.w	80030b2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8165 	beq.w	8003226 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f080 815d 	bcs.w	8003226 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f80:	f000 8086 	beq.w	8003090 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1da      	bne.n	8002f84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3308      	adds	r3, #8
 8002fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ff2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e1      	bne.n	8002fce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3308      	adds	r3, #8
 8003010:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800301a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3308      	adds	r3, #8
 800302a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800302e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003030:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003034:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800303c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e3      	bne.n	800300a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800305e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003060:	f023 0310 	bic.w	r3, r3, #16
 8003064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003072:	65bb      	str	r3, [r7, #88]	; 0x58
 8003074:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e4      	bne.n	8003050 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fa2c 	bl	80014e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8d8 	bl	8003260 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030b0:	e0b9      	b.n	8003226 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80ab 	beq.w	800322a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80030d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a6 	beq.w	800322a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003100:	647b      	str	r3, [r7, #68]	; 0x44
 8003102:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800310e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e4      	bne.n	80030de <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3308      	adds	r3, #8
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	623b      	str	r3, [r7, #32]
   return(result);
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3308      	adds	r3, #8
 8003134:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003138:	633a      	str	r2, [r7, #48]	; 0x30
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800313e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e3      	bne.n	8003114 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	60fb      	str	r3, [r7, #12]
   return(result);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f023 0310 	bic.w	r3, r3, #16
 8003174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	617b      	str	r3, [r7, #20]
   return(result);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e4      	bne.n	8003160 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800319c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f85c 	bl	8003260 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031a8:	e03f      	b.n	800322a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00e      	beq.n	80031d4 <HAL_UART_IRQHandler+0x56c>
 80031b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f853 	bl	8003278 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031d2:	e02d      	b.n	8003230 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01c      	beq.n	800322e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
    }
    return;
 80031fc:	e017      	b.n	800322e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d012      	beq.n	8003230 <HAL_UART_IRQHandler+0x5c8>
 800320a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fd92 	bl	8003d40 <UART_EndTransmit_IT>
    return;
 800321c:	e008      	b.n	8003230 <HAL_UART_IRQHandler+0x5c8>
      return;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <HAL_UART_IRQHandler+0x5c8>
      return;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <HAL_UART_IRQHandler+0x5c8>
    return;
 800322e:	bf00      	nop
  }

}
 8003230:	37e8      	adds	r7, #232	; 0xe8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop

08003238 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4ba6      	ldr	r3, [pc, #664]	; (8003550 <UART_SetConfig+0x2c4>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a94      	ldr	r2, [pc, #592]	; (8003554 <UART_SetConfig+0x2c8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d120      	bne.n	800334a <UART_SetConfig+0xbe>
 8003308:	4b93      	ldr	r3, [pc, #588]	; (8003558 <UART_SetConfig+0x2cc>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b03      	cmp	r3, #3
 8003314:	d816      	bhi.n	8003344 <UART_SetConfig+0xb8>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <UART_SetConfig+0x90>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	0800332d 	.word	0x0800332d
 8003320:	08003339 	.word	0x08003339
 8003324:	08003333 	.word	0x08003333
 8003328:	0800333f 	.word	0x0800333f
 800332c:	2301      	movs	r3, #1
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e150      	b.n	80035d4 <UART_SetConfig+0x348>
 8003332:	2302      	movs	r3, #2
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e14d      	b.n	80035d4 <UART_SetConfig+0x348>
 8003338:	2304      	movs	r3, #4
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e14a      	b.n	80035d4 <UART_SetConfig+0x348>
 800333e:	2308      	movs	r3, #8
 8003340:	77fb      	strb	r3, [r7, #31]
 8003342:	e147      	b.n	80035d4 <UART_SetConfig+0x348>
 8003344:	2310      	movs	r3, #16
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e144      	b.n	80035d4 <UART_SetConfig+0x348>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a83      	ldr	r2, [pc, #524]	; (800355c <UART_SetConfig+0x2d0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d132      	bne.n	80033ba <UART_SetConfig+0x12e>
 8003354:	4b80      	ldr	r3, [pc, #512]	; (8003558 <UART_SetConfig+0x2cc>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d828      	bhi.n	80033b4 <UART_SetConfig+0x128>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0xdc>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	0800339d 	.word	0x0800339d
 800336c:	080033b5 	.word	0x080033b5
 8003370:	080033b5 	.word	0x080033b5
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033a9 	.word	0x080033a9
 800337c:	080033b5 	.word	0x080033b5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033b5 	.word	0x080033b5
 8003388:	080033a3 	.word	0x080033a3
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033b5 	.word	0x080033b5
 8003394:	080033b5 	.word	0x080033b5
 8003398:	080033af 	.word	0x080033af
 800339c:	2300      	movs	r3, #0
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e118      	b.n	80035d4 <UART_SetConfig+0x348>
 80033a2:	2302      	movs	r3, #2
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e115      	b.n	80035d4 <UART_SetConfig+0x348>
 80033a8:	2304      	movs	r3, #4
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e112      	b.n	80035d4 <UART_SetConfig+0x348>
 80033ae:	2308      	movs	r3, #8
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e10f      	b.n	80035d4 <UART_SetConfig+0x348>
 80033b4:	2310      	movs	r3, #16
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e10c      	b.n	80035d4 <UART_SetConfig+0x348>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a68      	ldr	r2, [pc, #416]	; (8003560 <UART_SetConfig+0x2d4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d120      	bne.n	8003406 <UART_SetConfig+0x17a>
 80033c4:	4b64      	ldr	r3, [pc, #400]	; (8003558 <UART_SetConfig+0x2cc>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033ce:	2b30      	cmp	r3, #48	; 0x30
 80033d0:	d013      	beq.n	80033fa <UART_SetConfig+0x16e>
 80033d2:	2b30      	cmp	r3, #48	; 0x30
 80033d4:	d814      	bhi.n	8003400 <UART_SetConfig+0x174>
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d009      	beq.n	80033ee <UART_SetConfig+0x162>
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d810      	bhi.n	8003400 <UART_SetConfig+0x174>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <UART_SetConfig+0x15c>
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d006      	beq.n	80033f4 <UART_SetConfig+0x168>
 80033e6:	e00b      	b.n	8003400 <UART_SetConfig+0x174>
 80033e8:	2300      	movs	r3, #0
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e0f2      	b.n	80035d4 <UART_SetConfig+0x348>
 80033ee:	2302      	movs	r3, #2
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e0ef      	b.n	80035d4 <UART_SetConfig+0x348>
 80033f4:	2304      	movs	r3, #4
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e0ec      	b.n	80035d4 <UART_SetConfig+0x348>
 80033fa:	2308      	movs	r3, #8
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e0e9      	b.n	80035d4 <UART_SetConfig+0x348>
 8003400:	2310      	movs	r3, #16
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e0e6      	b.n	80035d4 <UART_SetConfig+0x348>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a56      	ldr	r2, [pc, #344]	; (8003564 <UART_SetConfig+0x2d8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d120      	bne.n	8003452 <UART_SetConfig+0x1c6>
 8003410:	4b51      	ldr	r3, [pc, #324]	; (8003558 <UART_SetConfig+0x2cc>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800341a:	2bc0      	cmp	r3, #192	; 0xc0
 800341c:	d013      	beq.n	8003446 <UART_SetConfig+0x1ba>
 800341e:	2bc0      	cmp	r3, #192	; 0xc0
 8003420:	d814      	bhi.n	800344c <UART_SetConfig+0x1c0>
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d009      	beq.n	800343a <UART_SetConfig+0x1ae>
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d810      	bhi.n	800344c <UART_SetConfig+0x1c0>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <UART_SetConfig+0x1a8>
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d006      	beq.n	8003440 <UART_SetConfig+0x1b4>
 8003432:	e00b      	b.n	800344c <UART_SetConfig+0x1c0>
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e0cc      	b.n	80035d4 <UART_SetConfig+0x348>
 800343a:	2302      	movs	r3, #2
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e0c9      	b.n	80035d4 <UART_SetConfig+0x348>
 8003440:	2304      	movs	r3, #4
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e0c6      	b.n	80035d4 <UART_SetConfig+0x348>
 8003446:	2308      	movs	r3, #8
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e0c3      	b.n	80035d4 <UART_SetConfig+0x348>
 800344c:	2310      	movs	r3, #16
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e0c0      	b.n	80035d4 <UART_SetConfig+0x348>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a44      	ldr	r2, [pc, #272]	; (8003568 <UART_SetConfig+0x2dc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d125      	bne.n	80034a8 <UART_SetConfig+0x21c>
 800345c:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <UART_SetConfig+0x2cc>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800346a:	d017      	beq.n	800349c <UART_SetConfig+0x210>
 800346c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003470:	d817      	bhi.n	80034a2 <UART_SetConfig+0x216>
 8003472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003476:	d00b      	beq.n	8003490 <UART_SetConfig+0x204>
 8003478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347c:	d811      	bhi.n	80034a2 <UART_SetConfig+0x216>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <UART_SetConfig+0x1fe>
 8003482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003486:	d006      	beq.n	8003496 <UART_SetConfig+0x20a>
 8003488:	e00b      	b.n	80034a2 <UART_SetConfig+0x216>
 800348a:	2300      	movs	r3, #0
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e0a1      	b.n	80035d4 <UART_SetConfig+0x348>
 8003490:	2302      	movs	r3, #2
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e09e      	b.n	80035d4 <UART_SetConfig+0x348>
 8003496:	2304      	movs	r3, #4
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e09b      	b.n	80035d4 <UART_SetConfig+0x348>
 800349c:	2308      	movs	r3, #8
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e098      	b.n	80035d4 <UART_SetConfig+0x348>
 80034a2:	2310      	movs	r3, #16
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e095      	b.n	80035d4 <UART_SetConfig+0x348>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2f      	ldr	r2, [pc, #188]	; (800356c <UART_SetConfig+0x2e0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d125      	bne.n	80034fe <UART_SetConfig+0x272>
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <UART_SetConfig+0x2cc>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034c0:	d017      	beq.n	80034f2 <UART_SetConfig+0x266>
 80034c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034c6:	d817      	bhi.n	80034f8 <UART_SetConfig+0x26c>
 80034c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034cc:	d00b      	beq.n	80034e6 <UART_SetConfig+0x25a>
 80034ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d2:	d811      	bhi.n	80034f8 <UART_SetConfig+0x26c>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <UART_SetConfig+0x254>
 80034d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034dc:	d006      	beq.n	80034ec <UART_SetConfig+0x260>
 80034de:	e00b      	b.n	80034f8 <UART_SetConfig+0x26c>
 80034e0:	2301      	movs	r3, #1
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e076      	b.n	80035d4 <UART_SetConfig+0x348>
 80034e6:	2302      	movs	r3, #2
 80034e8:	77fb      	strb	r3, [r7, #31]
 80034ea:	e073      	b.n	80035d4 <UART_SetConfig+0x348>
 80034ec:	2304      	movs	r3, #4
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e070      	b.n	80035d4 <UART_SetConfig+0x348>
 80034f2:	2308      	movs	r3, #8
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e06d      	b.n	80035d4 <UART_SetConfig+0x348>
 80034f8:	2310      	movs	r3, #16
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e06a      	b.n	80035d4 <UART_SetConfig+0x348>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <UART_SetConfig+0x2e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d138      	bne.n	800357a <UART_SetConfig+0x2ee>
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <UART_SetConfig+0x2cc>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003516:	d017      	beq.n	8003548 <UART_SetConfig+0x2bc>
 8003518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800351c:	d82a      	bhi.n	8003574 <UART_SetConfig+0x2e8>
 800351e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003522:	d00b      	beq.n	800353c <UART_SetConfig+0x2b0>
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d824      	bhi.n	8003574 <UART_SetConfig+0x2e8>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <UART_SetConfig+0x2aa>
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003532:	d006      	beq.n	8003542 <UART_SetConfig+0x2b6>
 8003534:	e01e      	b.n	8003574 <UART_SetConfig+0x2e8>
 8003536:	2300      	movs	r3, #0
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e04b      	b.n	80035d4 <UART_SetConfig+0x348>
 800353c:	2302      	movs	r3, #2
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e048      	b.n	80035d4 <UART_SetConfig+0x348>
 8003542:	2304      	movs	r3, #4
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e045      	b.n	80035d4 <UART_SetConfig+0x348>
 8003548:	2308      	movs	r3, #8
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e042      	b.n	80035d4 <UART_SetConfig+0x348>
 800354e:	bf00      	nop
 8003550:	efff69f3 	.word	0xefff69f3
 8003554:	40011000 	.word	0x40011000
 8003558:	40023800 	.word	0x40023800
 800355c:	40004400 	.word	0x40004400
 8003560:	40004800 	.word	0x40004800
 8003564:	40004c00 	.word	0x40004c00
 8003568:	40005000 	.word	0x40005000
 800356c:	40011400 	.word	0x40011400
 8003570:	40007800 	.word	0x40007800
 8003574:	2310      	movs	r3, #16
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e02c      	b.n	80035d4 <UART_SetConfig+0x348>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a72      	ldr	r2, [pc, #456]	; (8003748 <UART_SetConfig+0x4bc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d125      	bne.n	80035d0 <UART_SetConfig+0x344>
 8003584:	4b71      	ldr	r3, [pc, #452]	; (800374c <UART_SetConfig+0x4c0>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800358e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003592:	d017      	beq.n	80035c4 <UART_SetConfig+0x338>
 8003594:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003598:	d817      	bhi.n	80035ca <UART_SetConfig+0x33e>
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359e:	d00b      	beq.n	80035b8 <UART_SetConfig+0x32c>
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a4:	d811      	bhi.n	80035ca <UART_SetConfig+0x33e>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <UART_SetConfig+0x326>
 80035aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ae:	d006      	beq.n	80035be <UART_SetConfig+0x332>
 80035b0:	e00b      	b.n	80035ca <UART_SetConfig+0x33e>
 80035b2:	2300      	movs	r3, #0
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e00d      	b.n	80035d4 <UART_SetConfig+0x348>
 80035b8:	2302      	movs	r3, #2
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e00a      	b.n	80035d4 <UART_SetConfig+0x348>
 80035be:	2304      	movs	r3, #4
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e007      	b.n	80035d4 <UART_SetConfig+0x348>
 80035c4:	2308      	movs	r3, #8
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e004      	b.n	80035d4 <UART_SetConfig+0x348>
 80035ca:	2310      	movs	r3, #16
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e001      	b.n	80035d4 <UART_SetConfig+0x348>
 80035d0:	2310      	movs	r3, #16
 80035d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035dc:	d15b      	bne.n	8003696 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d828      	bhi.n	8003636 <UART_SetConfig+0x3aa>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <UART_SetConfig+0x360>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003619 	.word	0x08003619
 80035f4:	08003621 	.word	0x08003621
 80035f8:	08003637 	.word	0x08003637
 80035fc:	08003627 	.word	0x08003627
 8003600:	08003637 	.word	0x08003637
 8003604:	08003637 	.word	0x08003637
 8003608:	08003637 	.word	0x08003637
 800360c:	0800362f 	.word	0x0800362f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003610:	f7fe fe48 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8003614:	61b8      	str	r0, [r7, #24]
        break;
 8003616:	e013      	b.n	8003640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003618:	f7fe fe58 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 800361c:	61b8      	str	r0, [r7, #24]
        break;
 800361e:	e00f      	b.n	8003640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003620:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <UART_SetConfig+0x4c4>)
 8003622:	61bb      	str	r3, [r7, #24]
        break;
 8003624:	e00c      	b.n	8003640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003626:	f7fe fd6b 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 800362a:	61b8      	str	r0, [r7, #24]
        break;
 800362c:	e008      	b.n	8003640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003632:	61bb      	str	r3, [r7, #24]
        break;
 8003634:	e004      	b.n	8003640 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	77bb      	strb	r3, [r7, #30]
        break;
 800363e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d074      	beq.n	8003730 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	005a      	lsls	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	d916      	bls.n	8003690 <UART_SetConfig+0x404>
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d212      	bcs.n	8003690 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	b29b      	uxth	r3, r3
 800366e:	f023 030f 	bic.w	r3, r3, #15
 8003672:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	b29a      	uxth	r2, r3
 8003680:	89fb      	ldrh	r3, [r7, #14]
 8003682:	4313      	orrs	r3, r2
 8003684:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	89fa      	ldrh	r2, [r7, #14]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	e04f      	b.n	8003730 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	77bb      	strb	r3, [r7, #30]
 8003694:	e04c      	b.n	8003730 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d828      	bhi.n	80036ee <UART_SetConfig+0x462>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x418>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d9 	.word	0x080036d9
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	080036e7 	.word	0x080036e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe fdec 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 80036cc:	61b8      	str	r0, [r7, #24]
        break;
 80036ce:	e013      	b.n	80036f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fdfc 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 80036d4:	61b8      	str	r0, [r7, #24]
        break;
 80036d6:	e00f      	b.n	80036f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <UART_SetConfig+0x4c4>)
 80036da:	61bb      	str	r3, [r7, #24]
        break;
 80036dc:	e00c      	b.n	80036f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7fe fd0f 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80036e2:	61b8      	str	r0, [r7, #24]
        break;
 80036e4:	e008      	b.n	80036f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	61bb      	str	r3, [r7, #24]
        break;
 80036ec:	e004      	b.n	80036f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	77bb      	strb	r3, [r7, #30]
        break;
 80036f6:	bf00      	nop
    }

    if (pclk != 0U)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	085a      	lsrs	r2, r3, #1
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	441a      	add	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d909      	bls.n	800372c <UART_SetConfig+0x4a0>
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371e:	d205      	bcs.n	800372c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	e001      	b.n	8003730 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800373c:	7fbb      	ldrb	r3, [r7, #30]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40007c00 	.word	0x40007c00
 800374c:	40023800 	.word	0x40023800
 8003750:	00f42400 	.word	0x00f42400

08003754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01a      	beq.n	800386a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003852:	d10a      	bne.n	800386a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038a8:	f7fd fc60 	bl	800116c <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d10e      	bne.n	80038da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f831 	bl	8003932 <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e027      	b.n	800392a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d10e      	bne.n	8003906 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f81b 	bl	8003932 <UART_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e011      	b.n	800392a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b09c      	sub	sp, #112	; 0x70
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003942:	e0a7      	b.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	f000 80a3 	beq.w	8003a94 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fd fc0d 	bl	800116c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <UART_WaitOnFlagUntilTimeout+0x32>
 800395e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003960:	2b00      	cmp	r3, #0
 8003962:	d13f      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003978:	667b      	str	r3, [r7, #100]	; 0x64
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003984:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e6      	bne.n	8003964 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3308      	adds	r3, #8
 800399c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	663b      	str	r3, [r7, #96]	; 0x60
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3308      	adds	r3, #8
 80039b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e5      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e068      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d050      	beq.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a00:	d148      	bne.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e6      	bne.n	8003a0c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3308      	adds	r3, #8
 8003a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a5e:	623a      	str	r2, [r7, #32]
 8003a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	69f9      	ldr	r1, [r7, #28]
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e010      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f43f af48 	beq.w	8003944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3770      	adds	r7, #112	; 0x70
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b097      	sub	sp, #92	; 0x5c
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d10e      	bne.n	8003b12 <UART_Start_Receive_IT+0x52>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <UART_Start_Receive_IT+0x48>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b06:	e02d      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b10:	e028      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <UART_Start_Receive_IT+0x76>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <UART_Start_Receive_IT+0x6c>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	22ff      	movs	r2, #255	; 0xff
 8003b26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b2a:	e01b      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	227f      	movs	r2, #127	; 0x7f
 8003b30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b34:	e016      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b3e:	d10d      	bne.n	8003b5c <UART_Start_Receive_IT+0x9c>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <UART_Start_Receive_IT+0x92>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	227f      	movs	r2, #127	; 0x7f
 8003b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b50:	e008      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b5a:	e003      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2222      	movs	r2, #34	; 0x22
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b94:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb0:	d107      	bne.n	8003bc2 <UART_Start_Receive_IT+0x102>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <UART_Start_Receive_IT+0x184>)
 8003bbe:	669a      	str	r2, [r3, #104]	; 0x68
 8003bc0:	e002      	b.n	8003bc8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <UART_Start_Receive_IT+0x188>)
 8003bc6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d019      	beq.n	8003c04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e6      	bne.n	8003bd0 <UART_Start_Receive_IT+0x110>
 8003c02:	e018      	b.n	8003c36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	613b      	str	r3, [r7, #16]
   return(result);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f043 0320 	orr.w	r3, r3, #32
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	69f9      	ldr	r1, [r7, #28]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e6      	bne.n	8003c04 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	375c      	adds	r7, #92	; 0x5c
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	08003efb 	.word	0x08003efb
 8003c48:	08003d95 	.word	0x08003d95

08003c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b095      	sub	sp, #84	; 0x54
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40
 8003c74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e6      	bne.n	8003c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d118      	bne.n	8003cf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f023 0310 	bic.w	r3, r3, #16
 8003cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6979      	ldr	r1, [r7, #20]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	613b      	str	r3, [r7, #16]
   return(result);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e6      	bne.n	8003cc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d08:	bf00      	nop
 8003d0a:	3754      	adds	r7, #84	; 0x54
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff fa8a 	bl	800324c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6979      	ldr	r1, [r7, #20]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	613b      	str	r3, [r7, #16]
   return(result);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e6      	bne.n	8003d48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fa56 	bl	8003238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d8c:	bf00      	nop
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b096      	sub	sp, #88	; 0x58
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003da2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dac:	2b22      	cmp	r3, #34	; 0x22
 8003dae:	f040 8098 	bne.w	8003ee2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dbc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003dc0:	b2d9      	uxtb	r1, r3
 8003dc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	400a      	ands	r2, r1
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d17b      	bne.n	8003ef2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e6      	bne.n	8003dfa <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e4c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d12e      	bne.n	8003eda <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0310 	bic.w	r3, r3, #16
 8003e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	617b      	str	r3, [r7, #20]
   return(result);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d103      	bne.n	8003eca <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff f9c4 	bl	8003260 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ed8:	e00b      	b.n	8003ef2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc ff9c 	bl	8000e18 <HAL_UART_RxCpltCallback>
}
 8003ee0:	e007      	b.n	8003ef2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0208 	orr.w	r2, r2, #8
 8003ef0:	619a      	str	r2, [r3, #24]
}
 8003ef2:	bf00      	nop
 8003ef4:	3758      	adds	r7, #88	; 0x58
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b096      	sub	sp, #88	; 0x58
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f12:	2b22      	cmp	r3, #34	; 0x22
 8003f14:	f040 8098 	bne.w	8004048 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f28:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003f2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f30:	4013      	ands	r3, r2
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f36:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	1c9a      	adds	r2, r3, #2
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d17b      	bne.n	8004058 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d12e      	bne.n	8004040 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 0310 	bic.w	r3, r3, #16
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6979      	ldr	r1, [r7, #20]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	613b      	str	r3, [r7, #16]
   return(result);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e6      	bne.n	8003fe8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b10      	cmp	r3, #16
 8004026:	d103      	bne.n	8004030 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2210      	movs	r2, #16
 800402e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff f911 	bl	8003260 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800403e:	e00b      	b.n	8004058 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fc fee9 	bl	8000e18 <HAL_UART_RxCpltCallback>
}
 8004046:	e007      	b.n	8004058 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0208 	orr.w	r2, r2, #8
 8004056:	619a      	str	r2, [r3, #24]
}
 8004058:	bf00      	nop
 800405a:	3758      	adds	r7, #88	; 0x58
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <atoi>:
 8004060:	220a      	movs	r2, #10
 8004062:	2100      	movs	r1, #0
 8004064:	f000 b8b4 	b.w	80041d0 <strtol>

08004068 <__errno>:
 8004068:	4b01      	ldr	r3, [pc, #4]	; (8004070 <__errno+0x8>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c

08004074 <__libc_init_array>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	4d0d      	ldr	r5, [pc, #52]	; (80040ac <__libc_init_array+0x38>)
 8004078:	4c0d      	ldr	r4, [pc, #52]	; (80040b0 <__libc_init_array+0x3c>)
 800407a:	1b64      	subs	r4, r4, r5
 800407c:	10a4      	asrs	r4, r4, #2
 800407e:	2600      	movs	r6, #0
 8004080:	42a6      	cmp	r6, r4
 8004082:	d109      	bne.n	8004098 <__libc_init_array+0x24>
 8004084:	4d0b      	ldr	r5, [pc, #44]	; (80040b4 <__libc_init_array+0x40>)
 8004086:	4c0c      	ldr	r4, [pc, #48]	; (80040b8 <__libc_init_array+0x44>)
 8004088:	f000 f926 	bl	80042d8 <_init>
 800408c:	1b64      	subs	r4, r4, r5
 800408e:	10a4      	asrs	r4, r4, #2
 8004090:	2600      	movs	r6, #0
 8004092:	42a6      	cmp	r6, r4
 8004094:	d105      	bne.n	80040a2 <__libc_init_array+0x2e>
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	f855 3b04 	ldr.w	r3, [r5], #4
 800409c:	4798      	blx	r3
 800409e:	3601      	adds	r6, #1
 80040a0:	e7ee      	b.n	8004080 <__libc_init_array+0xc>
 80040a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a6:	4798      	blx	r3
 80040a8:	3601      	adds	r6, #1
 80040aa:	e7f2      	b.n	8004092 <__libc_init_array+0x1e>
 80040ac:	08004424 	.word	0x08004424
 80040b0:	08004424 	.word	0x08004424
 80040b4:	08004424 	.word	0x08004424
 80040b8:	08004428 	.word	0x08004428

080040bc <memset>:
 80040bc:	4402      	add	r2, r0
 80040be:	4603      	mov	r3, r0
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d100      	bne.n	80040c6 <memset+0xa>
 80040c4:	4770      	bx	lr
 80040c6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ca:	e7f9      	b.n	80040c0 <memset+0x4>

080040cc <_strtol_l.constprop.0>:
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d2:	d001      	beq.n	80040d8 <_strtol_l.constprop.0+0xc>
 80040d4:	2b24      	cmp	r3, #36	; 0x24
 80040d6:	d906      	bls.n	80040e6 <_strtol_l.constprop.0+0x1a>
 80040d8:	f7ff ffc6 	bl	8004068 <__errno>
 80040dc:	2316      	movs	r3, #22
 80040de:	6003      	str	r3, [r0, #0]
 80040e0:	2000      	movs	r0, #0
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80041cc <_strtol_l.constprop.0+0x100>
 80040ea:	460d      	mov	r5, r1
 80040ec:	462e      	mov	r6, r5
 80040ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040f2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80040f6:	f017 0708 	ands.w	r7, r7, #8
 80040fa:	d1f7      	bne.n	80040ec <_strtol_l.constprop.0+0x20>
 80040fc:	2c2d      	cmp	r4, #45	; 0x2d
 80040fe:	d132      	bne.n	8004166 <_strtol_l.constprop.0+0x9a>
 8004100:	782c      	ldrb	r4, [r5, #0]
 8004102:	2701      	movs	r7, #1
 8004104:	1cb5      	adds	r5, r6, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d05b      	beq.n	80041c2 <_strtol_l.constprop.0+0xf6>
 800410a:	2b10      	cmp	r3, #16
 800410c:	d109      	bne.n	8004122 <_strtol_l.constprop.0+0x56>
 800410e:	2c30      	cmp	r4, #48	; 0x30
 8004110:	d107      	bne.n	8004122 <_strtol_l.constprop.0+0x56>
 8004112:	782c      	ldrb	r4, [r5, #0]
 8004114:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004118:	2c58      	cmp	r4, #88	; 0x58
 800411a:	d14d      	bne.n	80041b8 <_strtol_l.constprop.0+0xec>
 800411c:	786c      	ldrb	r4, [r5, #1]
 800411e:	2310      	movs	r3, #16
 8004120:	3502      	adds	r5, #2
 8004122:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004126:	f108 38ff 	add.w	r8, r8, #4294967295
 800412a:	f04f 0c00 	mov.w	ip, #0
 800412e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004132:	4666      	mov	r6, ip
 8004134:	fb03 8a19 	mls	sl, r3, r9, r8
 8004138:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800413c:	f1be 0f09 	cmp.w	lr, #9
 8004140:	d816      	bhi.n	8004170 <_strtol_l.constprop.0+0xa4>
 8004142:	4674      	mov	r4, lr
 8004144:	42a3      	cmp	r3, r4
 8004146:	dd24      	ble.n	8004192 <_strtol_l.constprop.0+0xc6>
 8004148:	f1bc 0f00 	cmp.w	ip, #0
 800414c:	db1e      	blt.n	800418c <_strtol_l.constprop.0+0xc0>
 800414e:	45b1      	cmp	r9, r6
 8004150:	d31c      	bcc.n	800418c <_strtol_l.constprop.0+0xc0>
 8004152:	d101      	bne.n	8004158 <_strtol_l.constprop.0+0x8c>
 8004154:	45a2      	cmp	sl, r4
 8004156:	db19      	blt.n	800418c <_strtol_l.constprop.0+0xc0>
 8004158:	fb06 4603 	mla	r6, r6, r3, r4
 800415c:	f04f 0c01 	mov.w	ip, #1
 8004160:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004164:	e7e8      	b.n	8004138 <_strtol_l.constprop.0+0x6c>
 8004166:	2c2b      	cmp	r4, #43	; 0x2b
 8004168:	bf04      	itt	eq
 800416a:	782c      	ldrbeq	r4, [r5, #0]
 800416c:	1cb5      	addeq	r5, r6, #2
 800416e:	e7ca      	b.n	8004106 <_strtol_l.constprop.0+0x3a>
 8004170:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004174:	f1be 0f19 	cmp.w	lr, #25
 8004178:	d801      	bhi.n	800417e <_strtol_l.constprop.0+0xb2>
 800417a:	3c37      	subs	r4, #55	; 0x37
 800417c:	e7e2      	b.n	8004144 <_strtol_l.constprop.0+0x78>
 800417e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004182:	f1be 0f19 	cmp.w	lr, #25
 8004186:	d804      	bhi.n	8004192 <_strtol_l.constprop.0+0xc6>
 8004188:	3c57      	subs	r4, #87	; 0x57
 800418a:	e7db      	b.n	8004144 <_strtol_l.constprop.0+0x78>
 800418c:	f04f 3cff 	mov.w	ip, #4294967295
 8004190:	e7e6      	b.n	8004160 <_strtol_l.constprop.0+0x94>
 8004192:	f1bc 0f00 	cmp.w	ip, #0
 8004196:	da05      	bge.n	80041a4 <_strtol_l.constprop.0+0xd8>
 8004198:	2322      	movs	r3, #34	; 0x22
 800419a:	6003      	str	r3, [r0, #0]
 800419c:	4646      	mov	r6, r8
 800419e:	b942      	cbnz	r2, 80041b2 <_strtol_l.constprop.0+0xe6>
 80041a0:	4630      	mov	r0, r6
 80041a2:	e79e      	b.n	80040e2 <_strtol_l.constprop.0+0x16>
 80041a4:	b107      	cbz	r7, 80041a8 <_strtol_l.constprop.0+0xdc>
 80041a6:	4276      	negs	r6, r6
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	d0f9      	beq.n	80041a0 <_strtol_l.constprop.0+0xd4>
 80041ac:	f1bc 0f00 	cmp.w	ip, #0
 80041b0:	d000      	beq.n	80041b4 <_strtol_l.constprop.0+0xe8>
 80041b2:	1e69      	subs	r1, r5, #1
 80041b4:	6011      	str	r1, [r2, #0]
 80041b6:	e7f3      	b.n	80041a0 <_strtol_l.constprop.0+0xd4>
 80041b8:	2430      	movs	r4, #48	; 0x30
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1b1      	bne.n	8004122 <_strtol_l.constprop.0+0x56>
 80041be:	2308      	movs	r3, #8
 80041c0:	e7af      	b.n	8004122 <_strtol_l.constprop.0+0x56>
 80041c2:	2c30      	cmp	r4, #48	; 0x30
 80041c4:	d0a5      	beq.n	8004112 <_strtol_l.constprop.0+0x46>
 80041c6:	230a      	movs	r3, #10
 80041c8:	e7ab      	b.n	8004122 <_strtol_l.constprop.0+0x56>
 80041ca:	bf00      	nop
 80041cc:	08004319 	.word	0x08004319

080041d0 <strtol>:
 80041d0:	4613      	mov	r3, r2
 80041d2:	460a      	mov	r2, r1
 80041d4:	4601      	mov	r1, r0
 80041d6:	4802      	ldr	r0, [pc, #8]	; (80041e0 <strtol+0x10>)
 80041d8:	6800      	ldr	r0, [r0, #0]
 80041da:	f7ff bf77 	b.w	80040cc <_strtol_l.constprop.0>
 80041de:	bf00      	nop
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	00000000 	.word	0x00000000

080041e8 <ceil>:
 80041e8:	ee10 1a90 	vmov	r1, s1
 80041ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80041f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80041f4:	2b13      	cmp	r3, #19
 80041f6:	b530      	push	{r4, r5, lr}
 80041f8:	ee10 0a10 	vmov	r0, s0
 80041fc:	ee10 5a10 	vmov	r5, s0
 8004200:	dc2f      	bgt.n	8004262 <ceil+0x7a>
 8004202:	2b00      	cmp	r3, #0
 8004204:	da13      	bge.n	800422e <ceil+0x46>
 8004206:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80042c8 <ceil+0xe0>
 800420a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800420e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004216:	dd05      	ble.n	8004224 <ceil+0x3c>
 8004218:	2900      	cmp	r1, #0
 800421a:	db4c      	blt.n	80042b6 <ceil+0xce>
 800421c:	4301      	orrs	r1, r0
 800421e:	d04e      	beq.n	80042be <ceil+0xd6>
 8004220:	492b      	ldr	r1, [pc, #172]	; (80042d0 <ceil+0xe8>)
 8004222:	2000      	movs	r0, #0
 8004224:	460b      	mov	r3, r1
 8004226:	4602      	mov	r2, r0
 8004228:	ec43 2b10 	vmov	d0, r2, r3
 800422c:	e020      	b.n	8004270 <ceil+0x88>
 800422e:	4a29      	ldr	r2, [pc, #164]	; (80042d4 <ceil+0xec>)
 8004230:	411a      	asrs	r2, r3
 8004232:	ea01 0402 	and.w	r4, r1, r2
 8004236:	4304      	orrs	r4, r0
 8004238:	d01a      	beq.n	8004270 <ceil+0x88>
 800423a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80042c8 <ceil+0xe0>
 800423e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004242:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424a:	ddeb      	ble.n	8004224 <ceil+0x3c>
 800424c:	2900      	cmp	r1, #0
 800424e:	bfc2      	ittt	gt
 8004250:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8004254:	fa40 f303 	asrgt.w	r3, r0, r3
 8004258:	18c9      	addgt	r1, r1, r3
 800425a:	ea21 0102 	bic.w	r1, r1, r2
 800425e:	2000      	movs	r0, #0
 8004260:	e7e0      	b.n	8004224 <ceil+0x3c>
 8004262:	2b33      	cmp	r3, #51	; 0x33
 8004264:	dd05      	ble.n	8004272 <ceil+0x8a>
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426a:	d101      	bne.n	8004270 <ceil+0x88>
 800426c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004270:	bd30      	pop	{r4, r5, pc}
 8004272:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	40e2      	lsrs	r2, r4
 800427c:	4202      	tst	r2, r0
 800427e:	d0f7      	beq.n	8004270 <ceil+0x88>
 8004280:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80042c8 <ceil+0xe0>
 8004284:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004288:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	ddc8      	ble.n	8004224 <ceil+0x3c>
 8004292:	2900      	cmp	r1, #0
 8004294:	dd02      	ble.n	800429c <ceil+0xb4>
 8004296:	2b14      	cmp	r3, #20
 8004298:	d103      	bne.n	80042a2 <ceil+0xba>
 800429a:	3101      	adds	r1, #1
 800429c:	ea20 0002 	bic.w	r0, r0, r2
 80042a0:	e7c0      	b.n	8004224 <ceil+0x3c>
 80042a2:	2401      	movs	r4, #1
 80042a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80042a8:	fa04 f303 	lsl.w	r3, r4, r3
 80042ac:	4418      	add	r0, r3
 80042ae:	42a8      	cmp	r0, r5
 80042b0:	bf38      	it	cc
 80042b2:	1909      	addcc	r1, r1, r4
 80042b4:	e7f2      	b.n	800429c <ceil+0xb4>
 80042b6:	2000      	movs	r0, #0
 80042b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80042bc:	e7b2      	b.n	8004224 <ceil+0x3c>
 80042be:	4608      	mov	r0, r1
 80042c0:	e7b0      	b.n	8004224 <ceil+0x3c>
 80042c2:	bf00      	nop
 80042c4:	f3af 8000 	nop.w
 80042c8:	8800759c 	.word	0x8800759c
 80042cc:	7e37e43c 	.word	0x7e37e43c
 80042d0:	3ff00000 	.word	0x3ff00000
 80042d4:	000fffff 	.word	0x000fffff

080042d8 <_init>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr

080042e4 <_fini>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr
