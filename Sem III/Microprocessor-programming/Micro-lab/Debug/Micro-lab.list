
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004030  08004030  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004038  08004038  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  0800404c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800404c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1c7  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190b  00000000  00000000  0002b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cad  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a347  00000000  00000000  00054695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1ab3  00000000  00000000  0005e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015048f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ecc  00000000  00000000  001504e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003ffc 	.word	0x08003ffc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003ffc 	.word	0x08003ffc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <char_is_endmessage+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d101      	bne.n	800065a <char_is_endmessage+0x1a>
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <char_is_endmessage+0x1c>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <rx_has_data>:

uint8_t rx_has_data()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <rx_has_data+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <rx_has_data+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	d101      	bne.n	8000680 <rx_has_data+0x18>
	{
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <rx_has_data+0x1a>
	}
	else return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	200000d2 	.word	0x200000d2
 8000690:	200000d3 	.word	0x200000d3

08000694 <increase_rx_empty>:

void increase_rx_empty()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	rx_empty++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <increase_rx_empty+0x2c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b1d      	cmp	r3, #29
 80006ae:	d902      	bls.n	80006b6 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <increase_rx_empty+0x2c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	200000d2 	.word	0x200000d2

080006c4 <increase_rx_busy>:

void increase_rx_busy()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	rx_busy++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <increase_rx_busy+0x2c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b1d      	cmp	r3, #29
 80006de:	d902      	bls.n	80006e6 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <increase_rx_busy+0x2c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	200000d3 	.word	0x200000d3

080006f4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <get_char+0x24>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <get_char+0x28>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000708:	f7ff ffdc 	bl	80006c4 <increase_rx_busy>
	return tmp;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000d3 	.word	0x200000d3
 800071c:	200000b4 	.word	0x200000b4

08000720 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800072c:	e041      	b.n	80007b2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <get_message+0xa8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461c      	mov	r4, r3
 8000734:	f7ff ffde 	bl	80006f4 <get_char>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <get_message+0xac>)
 800073e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <get_message+0xa8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <get_message+0xac>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <char_is_endmessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d021      	beq.n	800079a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <get_message+0xa8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <get_message+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <get_message+0xac>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <get_message+0xa8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <get_message+0x48>
			}

			message_length = idx;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <get_message+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <get_message+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	e011      	b.n	80007be <get_message+0x9e>
		}
		else
		{
			idx++;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <get_message+0xa8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <get_message+0xa8>)
 80007a4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <get_message+0xa8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	d901      	bls.n	80007b2 <get_message+0x92>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e005      	b.n	80007be <get_message+0x9e>
	while(rx_has_data() == 1)
 80007b2:	f7ff ff59 	bl	8000668 <rx_has_data>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0b8      	beq.n	800072e <get_message+0xe>
		}
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000126 	.word	0x20000126
 80007cc:	20000128 	.word	0x20000128

080007d0 <turn_on_led>:

void turn_on_led()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <turn_on_led+0x14>)
 80007da:	f001 f843 	bl	8001864 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400

080007e8 <turn_off_led>:

void turn_off_led()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <turn_off_led+0x14>)
 80007f2:	f001 f837 	bl	8001864 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000806:	f000 fab3 	bl	8000d70 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800080a:	f7ff fe97 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800080e:	f7ff febb 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f000 fbda 	bl	8000fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f9a9 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 fa33 	bl	8000c84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800081e:	f000 fa01 	bl	8000c24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	4990      	ldr	r1, [pc, #576]	; (8000a68 <main+0x268>)
 8000826:	4891      	ldr	r0, [pc, #580]	; (8000a6c <main+0x26c>)
 8000828:	f002 f95a 	bl	8002ae0 <HAL_UART_Receive_IT>
  // Temporary command array
//  uint8_t command[BUFFER_LENGTH];

  // LED command parameters
//  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 800082c:	4a90      	ldr	r2, [pc, #576]	; (8000a70 <main+0x270>)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	4611      	mov	r1, r2
 8000836:	8019      	strh	r1, [r3, #0]
 8000838:	3302      	adds	r3, #2
 800083a:	0c12      	lsrs	r2, r2, #16
 800083c:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 800083e:	4b8d      	ldr	r3, [pc, #564]	; (8000a74 <main+0x274>)
 8000840:	607b      	str	r3, [r7, #4]
  // Error message content
//  char error_message[] = "Error: Command not found\r\n";

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000842:	4b89      	ldr	r3, [pc, #548]	; (8000a68 <main+0x268>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b0a      	cmp	r3, #10
 8000848:	d003      	beq.n	8000852 <main+0x52>
 800084a:	4b87      	ldr	r3, [pc, #540]	; (8000a68 <main+0x268>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b0d      	cmp	r3, #13
 8000850:	d106      	bne.n	8000860 <main+0x60>
	{
		message_length = get_message(message);
 8000852:	4889      	ldr	r0, [pc, #548]	; (8000a78 <main+0x278>)
 8000854:	f7ff ff64 	bl	8000720 <get_message>
 8000858:	4603      	mov	r3, r0
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b87      	ldr	r3, [pc, #540]	; (8000a7c <main+0x27c>)
 800085e:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000860:	4b86      	ldr	r3, [pc, #536]	; (8000a7c <main+0x27c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0eb      	beq.n	8000842 <main+0x42>
	{
		for (uint8_t i=0; i<message_length; i++)
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
 800086e:	e161      	b.n	8000b34 <main+0x334>
		{
			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000870:	4b83      	ldr	r3, [pc, #524]	; (8000a80 <main+0x280>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d104      	bne.n	8000882 <main+0x82>
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	4a7f      	ldr	r2, [pc, #508]	; (8000a78 <main+0x278>)
 800087c:	5cd3      	ldrb	r3, [r2, r3]
 800087e:	2b4c      	cmp	r3, #76	; 0x4c
 8000880:	d008      	beq.n	8000894 <main+0x94>
 8000882:	4b7f      	ldr	r3, [pc, #508]	; (8000a80 <main+0x280>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d107      	bne.n	800089a <main+0x9a>
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	4a7a      	ldr	r2, [pc, #488]	; (8000a78 <main+0x278>)
 800088e:	5cd3      	ldrb	r3, [r2, r3]
 8000890:	2b49      	cmp	r3, #73	; 0x49
 8000892:	d102      	bne.n	800089a <main+0x9a>
				sw_state = 1;
 8000894:	4b7a      	ldr	r3, [pc, #488]	; (8000a80 <main+0x280>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 800089a:	4b79      	ldr	r3, [pc, #484]	; (8000a80 <main+0x280>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3b01      	subs	r3, #1
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	f200 8124 	bhi.w	8000aee <main+0x2ee>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <main+0xac>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	080008c1 	.word	0x080008c1
 80008b0:	080008ef 	.word	0x080008ef
 80008b4:	08000923 	.word	0x08000923
 80008b8:	08000957 	.word	0x08000957
 80008bc:	080009cf 	.word	0x080009cf
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a6c      	ldr	r2, [pc, #432]	; (8000a78 <main+0x278>)
 80008c6:	5cd3      	ldrb	r3, [r2, r3]
 80008c8:	2b45      	cmp	r3, #69	; 0x45
 80008ca:	d10c      	bne.n	80008e6 <main+0xe6>
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	3302      	adds	r3, #2
 80008d0:	4a69      	ldr	r2, [pc, #420]	; (8000a78 <main+0x278>)
 80008d2:	5cd3      	ldrb	r3, [r2, r3]
 80008d4:	2b44      	cmp	r3, #68	; 0x44
 80008d6:	d106      	bne.n	80008e6 <main+0xe6>
				{
					i = i+2;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	3302      	adds	r3, #2
 80008dc:	73fb      	strb	r3, [r7, #15]
					sw_state = 2;
 80008de:	4b68      	ldr	r3, [pc, #416]	; (8000a80 <main+0x280>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
				}
				else
					sw_state = 0;
				break;
 80008e4:	e103      	b.n	8000aee <main+0x2ee>
					sw_state = 0;
 80008e6:	4b66      	ldr	r3, [pc, #408]	; (8000a80 <main+0x280>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
				break;
 80008ec:	e0ff      	b.n	8000aee <main+0x2ee>
				// If index was previously found, search for next one
//				if (open_bracket != NULL)
//					open_bracket += 1;

				// Get opening bracket index
				open_bracket = strchr(message, '[');
 80008ee:	215b      	movs	r1, #91	; 0x5b
 80008f0:	4861      	ldr	r0, [pc, #388]	; (8000a78 <main+0x278>)
 80008f2:	f003 fb61 	bl	8003fb8 <strchr>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a62      	ldr	r2, [pc, #392]	; (8000a84 <main+0x284>)
 80008fa:	6013      	str	r3, [r2, #0]

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 80008fc:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <main+0x284>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d103      	bne.n	800090c <main+0x10c>
					sw_state = 0;
 8000904:	4b5e      	ldr	r3, [pc, #376]	; (8000a80 <main+0x280>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 800090a:	e0f0      	b.n	8000aee <main+0x2ee>
					open_idx = (uint16_t)(open_bracket - message);
 800090c:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <main+0x284>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a59      	ldr	r2, [pc, #356]	; (8000a78 <main+0x278>)
 8000912:	1a9b      	subs	r3, r3, r2
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b5c      	ldr	r3, [pc, #368]	; (8000a88 <main+0x288>)
 8000918:	801a      	strh	r2, [r3, #0]
					sw_state = 3;
 800091a:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <main+0x280>)
 800091c:	2203      	movs	r2, #3
 800091e:	701a      	strb	r2, [r3, #0]
				break;
 8000920:	e0e5      	b.n	8000aee <main+0x2ee>
				// If index was previously found, search for next one
//				if (close_bracket != NULL)
//					close_bracket += 1;

				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000922:	215d      	movs	r1, #93	; 0x5d
 8000924:	4854      	ldr	r0, [pc, #336]	; (8000a78 <main+0x278>)
 8000926:	f003 fb47 	bl	8003fb8 <strchr>
 800092a:	4603      	mov	r3, r0
 800092c:	4a57      	ldr	r2, [pc, #348]	; (8000a8c <main+0x28c>)
 800092e:	6013      	str	r3, [r2, #0]

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000930:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <main+0x28c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <main+0x140>
					sw_state = 0;
 8000938:	4b51      	ldr	r3, [pc, #324]	; (8000a80 <main+0x280>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 800093e:	e0d6      	b.n	8000aee <main+0x2ee>
					close_idx = (uint16_t)(close_bracket - message);
 8000940:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <main+0x28c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <main+0x278>)
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <main+0x290>)
 800094c:	801a      	strh	r2, [r3, #0]
					sw_state = 4;
 800094e:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <main+0x280>)
 8000950:	2204      	movs	r2, #4
 8000952:	701a      	strb	r2, [r3, #0]
				break;
 8000954:	e0cb      	b.n	8000aee <main+0x2ee>

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000956:	4b4e      	ldr	r3, [pc, #312]	; (8000a90 <main+0x290>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b4a      	ldr	r3, [pc, #296]	; (8000a88 <main+0x288>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b29b      	uxth	r3, r3
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	3b01      	subs	r3, #1
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <main+0x294>)
 800096c:	801a      	strh	r2, [r3, #0]

				// Place chars between the brackets into temporary command array
//				char command[BUFFER_LENGTH];
				command_length = 0;
 800096e:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <main+0x298>)
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	73bb      	strb	r3, [r7, #14]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000978:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <main+0x288>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	3301      	adds	r3, #1
 8000980:	81bb      	strh	r3, [r7, #12]
 8000982:	e00f      	b.n	80009a4 <main+0x1a4>
				{
					command[j] = message[y];
 8000984:	89ba      	ldrh	r2, [r7, #12]
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	493b      	ldr	r1, [pc, #236]	; (8000a78 <main+0x278>)
 800098a:	5c89      	ldrb	r1, [r1, r2]
 800098c:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <main+0x29c>)
 800098e:	54d1      	strb	r1, [r2, r3]
					j++;
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	3301      	adds	r3, #1
 8000994:	73bb      	strb	r3, [r7, #14]
					command_length = j;
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	b29a      	uxth	r2, r3
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <main+0x298>)
 800099c:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 800099e:	89bb      	ldrh	r3, [r7, #12]
 80009a0:	3301      	adds	r3, #1
 80009a2:	81bb      	strh	r3, [r7, #12]
 80009a4:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <main+0x290>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	89ba      	ldrh	r2, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3e9      	bcc.n	8000984 <main+0x184>
				}

				if (command_length == param_length)
 80009b0:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <main+0x298>)
 80009b2:	881a      	ldrh	r2, [r3, #0]
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <main+0x294>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d103      	bne.n	80009c6 <main+0x1c6>
					sw_state = 5;
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <main+0x280>)
 80009c0:	2205      	movs	r2, #5
 80009c2:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 80009c4:	e093      	b.n	8000aee <main+0x2ee>
					sw_state = 0;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <main+0x280>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
				break;
 80009cc:	e08f      	b.n	8000aee <main+0x2ee>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <main+0x290>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <main+0x278>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	2b3b      	cmp	r3, #59	; 0x3b
 80009dc:	d00c      	beq.n	80009f8 <main+0x1f8>
				{
					uart_print(message[close_idx+1]);
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <main+0x290>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <main+0x278>)
 80009e8:	5cd3      	ldrb	r3, [r2, r3]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fe10 	bl	8000610 <uart_print>
					sw_state = 0;
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <main+0x280>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
					break;
 80009f6:	e07a      	b.n	8000aee <main+0x2ee>
				}

				// Test CRC validation
				for (uint8_t y=0; y<param_length; y++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	e008      	b.n	8000a10 <main+0x210>
					uart_print(command[y]);
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <main+0x29c>)
 8000a02:	5cd3      	ldrb	r3, [r2, r3]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe03 	bl	8000610 <uart_print>
				for (uint8_t y=0; y<param_length; y++)
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	72fb      	strb	r3, [r7, #11]
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <main+0x294>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d3ef      	bcc.n	80009fe <main+0x1fe>
				uart_print('\r');
 8000a1e:	200d      	movs	r0, #13
 8000a20:	f7ff fdf6 	bl	8000610 <uart_print>
				uart_print('\n');
 8000a24:	200a      	movs	r0, #10
 8000a26:	f7ff fdf3 	bl	8000610 <uart_print>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <main+0x294>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	603b      	str	r3, [r7, #0]
				if (strncmp(command, on_cmd, len) == 0)
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	; (8000a9c <main+0x29c>)
 8000a3c:	f003 fac9 	bl	8003fd2 <strncmp>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d103      	bne.n	8000a4e <main+0x24e>
				{
					// Turn on LED
					led_action = 1;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <main+0x2a0>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e033      	b.n	8000ab6 <main+0x2b6>
				}
				else if (strncmp(command, off_cmd, len) == 0)
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <main+0x29c>)
 8000a56:	f003 fabc 	bl	8003fd2 <strncmp>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d121      	bne.n	8000aa4 <main+0x2a4>
				{
					// Turn off LED
					led_action = 0;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <main+0x2a0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e026      	b.n	8000ab6 <main+0x2b6>
 8000a68:	200000b0 	.word	0x200000b0
 8000a6c:	20000028 	.word	0x20000028
 8000a70:	08004014 	.word	0x08004014
 8000a74:	0046464f 	.word	0x0046464f
 8000a78:	200000d4 	.word	0x200000d4
 8000a7c:	200000f2 	.word	0x200000f2
 8000a80:	200000f3 	.word	0x200000f3
 8000a84:	200000f8 	.word	0x200000f8
 8000a88:	200000fc 	.word	0x200000fc
 8000a8c:	20000100 	.word	0x20000100
 8000a90:	20000104 	.word	0x20000104
 8000a94:	20000106 	.word	0x20000106
 8000a98:	20000146 	.word	0x20000146
 8000a9c:	20000108 	.word	0x20000108
 8000aa0:	200000f4 	.word	0x200000f4
				}
				else
				{
					// DEBUG: Print '#' on error
					uart_print('#');
 8000aa4:	2023      	movs	r0, #35	; 0x23
 8000aa6:	f7ff fdb3 	bl	8000610 <uart_print>
					uart_print('\r');
 8000aaa:	200d      	movs	r0, #13
 8000aac:	f7ff fdb0 	bl	8000610 <uart_print>
					uart_print('\n');
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f7ff fdad 	bl	8000610 <uart_print>
				}

				// Clear the first bracket indexes of the message array
				message[open_idx] = '*';
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <main+0x344>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <main+0x348>)
 8000ac0:	212a      	movs	r1, #42	; 0x2a
 8000ac2:	5499      	strb	r1, [r3, r2]
				message[close_idx] = '*';
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <main+0x34c>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <main+0x348>)
 8000ace:	212a      	movs	r1, #42	; 0x2a
 8000ad0:	5499      	strb	r1, [r3, r2]
				open_bracket++;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <main+0x350>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <main+0x350>)
 8000ada:	6013      	str	r3, [r2, #0]
				close_bracket++;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <main+0x354>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <main+0x354>)
 8000ae4:	6013      	str	r3, [r2, #0]
//				open_bracket = '\0';
//				close_bracket = '\0';

				// Reset sw_state
				sw_state = 0;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <main+0x358>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
				break;
 8000aec:	bf00      	nop
			} /* sw_state switch end */

			// Diode control switch
			switch (led_action)
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <main+0x35c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d81b      	bhi.n	8000b2e <main+0x32e>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <main+0x2fc>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b0d 	.word	0x08000b0d
 8000b00:	08000b13 	.word	0x08000b13
 8000b04:	08000b19 	.word	0x08000b19
 8000b08:	08000b2f 	.word	0x08000b2f
			{
			case 0:
				// Turn off LED
				turn_off_led();
 8000b0c:	f7ff fe6c 	bl	80007e8 <turn_off_led>
				break;
 8000b10:	e00d      	b.n	8000b2e <main+0x32e>

			case 1:
				// Turn on LED
				turn_on_led();
 8000b12:	f7ff fe5d 	bl	80007d0 <turn_on_led>
				break;
 8000b16:	e00a      	b.n	8000b2e <main+0x32e>

			case 2:
				// Blink LED with delay
				HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <main+0x360>)
 8000b1c:	f000 febb 	bl	8001896 <HAL_GPIO_TogglePin>
				HAL_Delay(blink_ms);
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <main+0x364>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 faac 	bl	8001084 <HAL_Delay>
				break;
 8000b2c:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	3301      	adds	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <main+0x368>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	7bfa      	ldrb	r2, [r7, #15]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f4ff ae97 	bcc.w	8000870 <main+0x70>
	if (character == '\n' || character == '\r')
 8000b42:	e67e      	b.n	8000842 <main+0x42>
 8000b44:	200000fc 	.word	0x200000fc
 8000b48:	200000d4 	.word	0x200000d4
 8000b4c:	20000104 	.word	0x20000104
 8000b50:	200000f8 	.word	0x200000f8
 8000b54:	20000100 	.word	0x20000100
 8000b58:	200000f3 	.word	0x200000f3
 8000b5c:	200000f4 	.word	0x200000f4
 8000b60:	40020400 	.word	0x40020400
 8000b64:	200000f6 	.word	0x200000f6
 8000b68:	200000f2 	.word	0x200000f2

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	; 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2234      	movs	r2, #52	; 0x34
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fa14 	bl	8003fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <SystemClock_Config+0xb0>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <SystemClock_Config+0xb0>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <SystemClock_Config+0xb0>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <SystemClock_Config+0xb4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <SystemClock_Config+0xb4>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <SystemClock_Config+0xb4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fe77 	bl	80018cc <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000be4:	f000 f8f0 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f910 	bl	8001e28 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c0e:	f000 f8db 	bl	8000dc8 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3750      	adds	r7, #80	; 0x50
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <MX_USART3_UART_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART3_UART_Init+0x58>)
 8000c68:	f001 feec 	bl	8002a44 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f8a9 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000028 	.word	0x20000028
 8000c80:	40004800 	.word	0x40004800

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_GPIO_Init+0x8c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	480b      	ldr	r0, [pc, #44]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000ce8:	f000 fdbc 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_GPIO_Init+0x90>)
 8000d04:	f000 fc02 	bl	800150c <HAL_GPIO_Init>

}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400

08000d18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_UART_RxCpltCallback+0x44>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fc73 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <HAL_UART_RxCpltCallback+0x48>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d10e      	bne.n	8000d52 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_UART_RxCpltCallback+0x4c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <HAL_UART_RxCpltCallback+0x44>)
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_UART_RxCpltCallback+0x50>)
 8000d42:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8000d44:	f7ff fca6 	bl	8000694 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4904      	ldr	r1, [pc, #16]	; (8000d5c <HAL_UART_RxCpltCallback+0x44>)
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <HAL_UART_RxCpltCallback+0x54>)
 8000d4e:	f001 fec7 	bl	8002ae0 <HAL_UART_Receive_IT>
	}
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000b0 	.word	0x200000b0
 8000d60:	40004800 	.word	0x40004800
 8000d64:	200000d2 	.word	0x200000d2
 8000d68:	200000b4 	.word	0x200000b4
 8000d6c:	20000028 	.word	0x20000028

08000d70 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d82:	f000 fab5 	bl	80012f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d86:	2301      	movs	r3, #1
 8000d88:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d92:	231f      	movs	r3, #31
 8000d94:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d96:	2387      	movs	r3, #135	; 0x87
 8000d98:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000da2:	2301      	movs	r3, #1
 8000da4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000db2:	463b      	mov	r3, r7
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fad3 	bl	8001360 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dba:	2004      	movs	r0, #4
 8000dbc:	f000 fab0 	bl	8001320 <HAL_MPU_Enable>

}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_MspInit+0x44>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x44>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x44>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x44>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x44>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ae      	sub	sp, #184	; 0xb8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2290      	movs	r2, #144	; 0x90
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 f8b3 	bl	8003fa8 <memset>
  if(huart->Instance==USART3)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_UART_MspInit+0xc4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d144      	bne.n	8000ed6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f9ca 	bl	80021f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e66:	f7ff ffaf 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <HAL_UART_MspInit+0xc8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_UART_MspInit+0xc8>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <HAL_UART_MspInit+0xc8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_UART_MspInit+0xc8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <HAL_UART_MspInit+0xc8>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0xc8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <HAL_UART_MspInit+0xcc>)
 8000ec2:	f000 fb23 	bl	800150c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2027      	movs	r0, #39	; 0x27
 8000ecc:	f000 f9d9 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ed0:	2027      	movs	r0, #39	; 0x27
 8000ed2:	f000 f9f2 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	37b8      	adds	r7, #184	; 0xb8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004800 	.word	0x40004800
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f884 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <USART3_IRQHandler+0x10>)
 8000f46:	f001 fe0f 	bl	8002b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000028 	.word	0x20000028

08000f54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f94:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa2:	f7ff ffd7 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f002 ffdb 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fc29 	bl	8000800 <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fbc:	08004040 	.word	0x08004040
  ldr r2, =_sbss
 8000fc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fc4:	2000014c 	.word	0x2000014c

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>

08000fca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f000 f94c 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	f000 f805 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fda:	f7ff fefb 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f967 	bl	80012d6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f92f 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	20000148 	.word	0x20000148

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000148 	.word	0x20000148

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012f4:	f3bf 8f5f 	dmb	sy
}
 80012f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_MPU_Disable+0x28>)
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_MPU_Disable+0x28>)
 8001300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001304:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_MPU_Disable+0x2c>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	e000ed90 	.word	0xe000ed90

08001320 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_MPU_Enable+0x38>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_MPU_Enable+0x3c>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_MPU_Enable+0x3c>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800133e:	f3bf 8f4f 	dsb	sy
}
 8001342:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001344:	f3bf 8f6f 	isb	sy
}
 8001348:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed90 	.word	0xe000ed90
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	785a      	ldrb	r2, [r3, #1]
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 800136e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d029      	beq.n	80013cc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001378:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7adb      	ldrb	r3, [r3, #11]
 800138a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800138c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7a9b      	ldrb	r3, [r3, #10]
 8001392:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001394:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7b5b      	ldrb	r3, [r3, #13]
 800139a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800139c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7b9b      	ldrb	r3, [r3, #14]
 80013a2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7bdb      	ldrb	r3, [r3, #15]
 80013aa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7a5b      	ldrb	r3, [r3, #9]
 80013b2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7a1b      	ldrb	r3, [r3, #8]
 80013ba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013bc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013c6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80013ca:	e005      	b.n	80013d8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed90 	.word	0xe000ed90

080013e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013f6:	f7ff fe39 	bl	800106c <HAL_GetTick>
 80013fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d008      	beq.n	800141a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e052      	b.n	80014c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0216 	bic.w	r2, r2, #22
 8001428:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001438:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <HAL_DMA_Abort+0x62>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0208 	bic.w	r2, r2, #8
 8001458:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146a:	e013      	b.n	8001494 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146c:	f7ff fdfe 	bl	800106c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b05      	cmp	r3, #5
 8001478:	d90c      	bls.n	8001494 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2220      	movs	r2, #32
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2203      	movs	r2, #3
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e015      	b.n	80014c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1e4      	bne.n	800146c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	223f      	movs	r2, #63	; 0x3f
 80014a8:	409a      	lsls	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d004      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00c      	b.n	8001500 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2205      	movs	r2, #5
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e175      	b.n	8001818 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8164 	bne.w	8001812 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d005      	beq.n	8001562 <HAL_GPIO_Init+0x56>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d130      	bne.n	80015c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d017      	beq.n	8001600 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80be 	beq.w	8001812 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b66      	ldr	r3, [pc, #408]	; (8001830 <HAL_GPIO_Init+0x324>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_GPIO_Init+0x324>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_GPIO_Init+0x324>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016ae:	4a61      	ldr	r2, [pc, #388]	; (8001834 <HAL_GPIO_Init+0x328>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_GPIO_Init+0x32c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d037      	beq.n	800174a <HAL_GPIO_Init+0x23e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a57      	ldr	r2, [pc, #348]	; (800183c <HAL_GPIO_Init+0x330>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d031      	beq.n	8001746 <HAL_GPIO_Init+0x23a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a56      	ldr	r2, [pc, #344]	; (8001840 <HAL_GPIO_Init+0x334>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d02b      	beq.n	8001742 <HAL_GPIO_Init+0x236>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a55      	ldr	r2, [pc, #340]	; (8001844 <HAL_GPIO_Init+0x338>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d025      	beq.n	800173e <HAL_GPIO_Init+0x232>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a54      	ldr	r2, [pc, #336]	; (8001848 <HAL_GPIO_Init+0x33c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01f      	beq.n	800173a <HAL_GPIO_Init+0x22e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a53      	ldr	r2, [pc, #332]	; (800184c <HAL_GPIO_Init+0x340>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d019      	beq.n	8001736 <HAL_GPIO_Init+0x22a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_GPIO_Init+0x344>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0x226>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a51      	ldr	r2, [pc, #324]	; (8001854 <HAL_GPIO_Init+0x348>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00d      	beq.n	800172e <HAL_GPIO_Init+0x222>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a50      	ldr	r2, [pc, #320]	; (8001858 <HAL_GPIO_Init+0x34c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d007      	beq.n	800172a <HAL_GPIO_Init+0x21e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4f      	ldr	r2, [pc, #316]	; (800185c <HAL_GPIO_Init+0x350>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_GPIO_Init+0x21a>
 8001722:	2309      	movs	r3, #9
 8001724:	e012      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001726:	230a      	movs	r3, #10
 8001728:	e010      	b.n	800174c <HAL_GPIO_Init+0x240>
 800172a:	2308      	movs	r3, #8
 800172c:	e00e      	b.n	800174c <HAL_GPIO_Init+0x240>
 800172e:	2307      	movs	r3, #7
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001732:	2306      	movs	r3, #6
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x240>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x240>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x240>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x240>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <HAL_GPIO_Init+0x328>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_GPIO_Init+0x354>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178e:	4a34      	ldr	r2, [pc, #208]	; (8001860 <HAL_GPIO_Init+0x354>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <HAL_GPIO_Init+0x354>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b8:	4a29      	ldr	r2, [pc, #164]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_GPIO_Init+0x354>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_GPIO_Init+0x354>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f ae86 	bls.w	800152c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40022000 	.word	0x40022000
 800185c:	40022400 	.word	0x40022400
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	400b      	ands	r3, r1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	619a      	str	r2, [r3, #24]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e29b      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f0:	4b96      	ldr	r3, [pc, #600]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d00c      	beq.n	8001916 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fc:	4b93      	ldr	r3, [pc, #588]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d112      	bne.n	800192e <HAL_RCC_OscConfig+0x62>
 8001908:	4b90      	ldr	r3, [pc, #576]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001914:	d10b      	bne.n	800192e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	4b8d      	ldr	r3, [pc, #564]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d06c      	beq.n	80019fc <HAL_RCC_OscConfig+0x130>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d168      	bne.n	80019fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e275      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x7a>
 8001938:	4b84      	ldr	r3, [pc, #528]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a83      	ldr	r2, [pc, #524]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e02e      	b.n	80019a4 <HAL_RCC_OscConfig+0xd8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x9c>
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7e      	ldr	r2, [pc, #504]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7b      	ldr	r2, [pc, #492]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e01d      	b.n	80019a4 <HAL_RCC_OscConfig+0xd8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0xc0>
 8001972:	4b76      	ldr	r3, [pc, #472]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a75      	ldr	r2, [pc, #468]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b73      	ldr	r3, [pc, #460]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a72      	ldr	r2, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0xd8>
 800198c:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6b      	ldr	r2, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 800199e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb5e 	bl	800106c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fb5a 	bl	800106c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e229      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b61      	ldr	r3, [pc, #388]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe8>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fb4a 	bl	800106c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fb46 	bl	800106c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e215      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x110>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d069      	beq.n	8001ade <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0a:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a16:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x190>
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d116      	bne.n	8001a5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x17a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1e9      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	493d      	ldr	r1, [pc, #244]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	e040      	b.n	8001ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d023      	beq.n	8001aac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a64:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fafc 	bl	800106c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff faf8 	bl	800106c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1c7      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4929      	ldr	r1, [pc, #164]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
 8001aaa:	e018      	b.n	8001ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fad8 	bl	800106c <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fad4 	bl	800106c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1a3      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d038      	beq.n	8001b5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d019      	beq.n	8001b26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff fab5 	bl	800106c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff fab1 	bl	800106c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e180      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x23a>
 8001b24:	e01a      	b.n	8001b5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff fa9b 	bl	800106c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fa97 	bl	800106c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d903      	bls.n	8001b50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e166      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
 8001b4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80a4 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a88      	ldr	r2, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b86      	ldr	r3, [pc, #536]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b92:	4b83      	ldr	r3, [pc, #524]	; (8001da0 <HAL_RCC_OscConfig+0x4d4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b9e:	4b80      	ldr	r3, [pc, #512]	; (8001da0 <HAL_RCC_OscConfig+0x4d4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7f      	ldr	r2, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x4d4>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fa5f 	bl	800106c <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff fa5b 	bl	800106c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e12a      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc4:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <HAL_RCC_OscConfig+0x4d4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x31a>
 8001bd8:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a6f      	ldr	r2, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	e02d      	b.n	8001c42 <HAL_RCC_OscConfig+0x376>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x33c>
 8001bee:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a67      	ldr	r2, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	e01c      	b.n	8001c42 <HAL_RCC_OscConfig+0x376>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d10c      	bne.n	8001c2a <HAL_RCC_OscConfig+0x35e>
 8001c10:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a61      	ldr	r2, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a5e      	ldr	r2, [pc, #376]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	e00b      	b.n	8001c42 <HAL_RCC_OscConfig+0x376>
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6713      	str	r3, [r2, #112]	; 0x70
 8001c36:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d015      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa0f 	bl	800106c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fa0b 	bl	800106c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0d8      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ee      	beq.n	8001c52 <HAL_RCC_OscConfig+0x386>
 8001c74:	e014      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff f9f9 	bl	800106c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff f9f5 	bl	800106c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0c2      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a3c      	ldr	r2, [pc, #240]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80ae 	beq.w	8001e18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d06d      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d14b      	bne.n	8001d68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f9c6 	bl	800106c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f9c2 	bl	800106c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e091      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	071b      	lsls	r3, r3, #28
 8001d2e:	491b      	ldr	r1, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f994 	bl	800106c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7ff f990 	bl	800106c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e05f      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x47c>
 8001d66:	e057      	b.n	8001e18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff f97a 	bl	800106c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff f976 	bl	800106c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e045      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8e:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4b0>
 8001d9a:	e03d      	b.n	8001e18 <HAL_RCC_OscConfig+0x54c>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_RCC_OscConfig+0x558>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d030      	beq.n	8001e14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d129      	bne.n	8001e14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d122      	bne.n	8001e14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d119      	bne.n	8001e14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	3b01      	subs	r3, #1
 8001dee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d10f      	bne.n	8001e14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d0      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 020f 	bic.w	r2, r3, #15
 8001e56:	4965      	ldr	r1, [pc, #404]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d040      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e073      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06b      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1c:	f7ff f8a6 	bl	800106c <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7ff f8a2 	bl	800106c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e053      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 020c 	and.w	r2, r3, #12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d210      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 020f 	bic.w	r2, r3, #15
 8001f62:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1d4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f802 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08004018 	.word	0x08004018
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002004:	b090      	sub	sp, #64	; 0x40
 8002006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
 800200c:	2300      	movs	r3, #0
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d00d      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x40>
 8002024:	2b08      	cmp	r3, #8
 8002026:	f200 80a1 	bhi.w	800216c <HAL_RCC_GetSysClockFreq+0x16c>
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x34>
 800202e:	2b04      	cmp	r3, #4
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x3a>
 8002032:	e09b      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_GetSysClockFreq+0x184>)
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002038:	e09b      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800203a:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_GetSysClockFreq+0x188>)
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800203e:	e098      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800204a:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d028      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	2200      	movs	r2, #0
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	627a      	str	r2, [r7, #36]	; 0x24
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002068:	2100      	movs	r1, #0
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_GetSysClockFreq+0x188>)
 800206c:	fb03 f201 	mul.w	r2, r3, r1
 8002070:	2300      	movs	r3, #0
 8002072:	fb00 f303 	mul.w	r3, r0, r3
 8002076:	4413      	add	r3, r2
 8002078:	4a43      	ldr	r2, [pc, #268]	; (8002188 <HAL_RCC_GetSysClockFreq+0x188>)
 800207a:	fba0 1202 	umull	r1, r2, r0, r2
 800207e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002080:	460a      	mov	r2, r1
 8002082:	62ba      	str	r2, [r7, #40]	; 0x28
 8002084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002086:	4413      	add	r3, r2
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	2200      	movs	r2, #0
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	61fa      	str	r2, [r7, #28]
 8002092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800209a:	f7fe f8cd 	bl	8000238 <__aeabi_uldivmod>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4613      	mov	r3, r2
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a6:	e053      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	2200      	movs	r2, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	617a      	str	r2, [r7, #20]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020ba:	f04f 0b00 	mov.w	fp, #0
 80020be:	4652      	mov	r2, sl
 80020c0:	465b      	mov	r3, fp
 80020c2:	f04f 0000 	mov.w	r0, #0
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	0159      	lsls	r1, r3, #5
 80020cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d0:	0150      	lsls	r0, r2, #5
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	ebb2 080a 	subs.w	r8, r2, sl
 80020da:	eb63 090b 	sbc.w	r9, r3, fp
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020f2:	ebb2 0408 	subs.w	r4, r2, r8
 80020f6:	eb63 0509 	sbc.w	r5, r3, r9
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	00eb      	lsls	r3, r5, #3
 8002104:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002108:	00e2      	lsls	r2, r4, #3
 800210a:	4614      	mov	r4, r2
 800210c:	461d      	mov	r5, r3
 800210e:	eb14 030a 	adds.w	r3, r4, sl
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	eb45 030b 	adc.w	r3, r5, fp
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002126:	4629      	mov	r1, r5
 8002128:	028b      	lsls	r3, r1, #10
 800212a:	4621      	mov	r1, r4
 800212c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002130:	4621      	mov	r1, r4
 8002132:	028a      	lsls	r2, r1, #10
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	2200      	movs	r2, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	60fa      	str	r2, [r7, #12]
 8002140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002144:	f7fe f878 	bl	8000238 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4613      	mov	r3, r2
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	3301      	adds	r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800216a:	e002      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetSysClockFreq+0x184>)
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002174:	4618      	mov	r0, r3
 8002176:	3740      	adds	r7, #64	; 0x40
 8002178:	46bd      	mov	sp, r7
 800217a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	00f42400 	.word	0x00f42400
 8002188:	017d7840 	.word	0x017d7840

0800218c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a8:	f7ff fff0 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0a9b      	lsrs	r3, r3, #10
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08004028 	.word	0x08004028

080021cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d0:	f7ff ffdc 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0b5b      	lsrs	r3, r3, #13
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4903      	ldr	r1, [pc, #12]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08004028 	.word	0x08004028

080021f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	4964      	ldr	r1, [pc, #400]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d017      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800224e:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	4959      	ldr	r1, [pc, #356]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226c:	d101      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d017      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800228a:	4b4e      	ldr	r3, [pc, #312]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	494a      	ldr	r1, [pc, #296]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a8:	d101      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 808b 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	4a39      	ldr	r2, [pc, #228]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	; 0x40
 80022e4:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022f0:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fc:	f7fe feb6 	bl	800106c <HAL_GetTick>
 8002300:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7fe feb2 	bl	800106c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e38f      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d035      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d02e      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d114      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fe7a 	bl	800106c <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe fe76 	bl	800106c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e351      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ee      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023aa:	d111      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023ba:	400b      	ands	r3, r1
 80023bc:	4901      	ldr	r1, [pc, #4]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
 80023c2:	e00b      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	0ffffcff 	.word	0x0ffffcff
 80023d0:	4bac      	ldr	r3, [pc, #688]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4aab      	ldr	r2, [pc, #684]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023da:	6093      	str	r3, [r2, #8]
 80023dc:	4ba9      	ldr	r3, [pc, #676]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	49a6      	ldr	r1, [pc, #664]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d010      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023fa:	4ba2      	ldr	r3, [pc, #648]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002400:	4aa0      	ldr	r2, [pc, #640]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002406:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800240a:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	499b      	ldr	r1, [pc, #620]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002428:	4b96      	ldr	r3, [pc, #600]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002436:	4993      	ldr	r1, [pc, #588]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800244a:	4b8e      	ldr	r3, [pc, #568]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002458:	498a      	ldr	r1, [pc, #552]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800246c:	4b85      	ldr	r3, [pc, #532]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247a:	4982      	ldr	r1, [pc, #520]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800248e:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4979      	ldr	r1, [pc, #484]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b0:	4b74      	ldr	r3, [pc, #464]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4971      	ldr	r1, [pc, #452]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d2:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f023 020c 	bic.w	r2, r3, #12
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e0:	4968      	ldr	r1, [pc, #416]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f4:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4960      	ldr	r1, [pc, #384]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002516:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002524:	4957      	ldr	r1, [pc, #348]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002538:	4b52      	ldr	r3, [pc, #328]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	494f      	ldr	r1, [pc, #316]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4946      	ldr	r1, [pc, #280]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800257c:	4b41      	ldr	r3, [pc, #260]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	493e      	ldr	r1, [pc, #248]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ac:	4935      	ldr	r1, [pc, #212]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ce:	492d      	ldr	r1, [pc, #180]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f0:	4924      	ldr	r1, [pc, #144]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	4914      	ldr	r1, [pc, #80]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002654:	490b      	ldr	r1, [pc, #44]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00f      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002678:	4902      	ldr	r1, [pc, #8]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002680:	e002      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002694:	4b8a      	ldr	r3, [pc, #552]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	4986      	ldr	r1, [pc, #536]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026b8:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c8:	497d      	ldr	r1, [pc, #500]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d006      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80d6 	beq.w	8002890 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026e4:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a75      	ldr	r2, [pc, #468]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fcbc 	bl	800106c <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026f8:	f7fe fcb8 	bl	800106c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e195      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d021      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11d      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800272a:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002738:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273e:	0e1b      	lsrs	r3, r3, #24
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	019a      	lsls	r2, r3, #6
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	041b      	lsls	r3, r3, #16
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	071b      	lsls	r3, r3, #28
 800275e:	4958      	ldr	r1, [pc, #352]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002784:	2b00      	cmp	r3, #0
 8002786:	d02e      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002790:	d129      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002792:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a6:	0f1b      	lsrs	r3, r3, #28
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	019a      	lsls	r2, r3, #6
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	061b      	lsls	r3, r3, #24
 80027c0:	431a      	orrs	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	071b      	lsls	r3, r3, #28
 80027c6:	493e      	ldr	r1, [pc, #248]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d4:	f023 021f 	bic.w	r2, r3, #31
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	3b01      	subs	r3, #1
 80027de:	4938      	ldr	r1, [pc, #224]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01d      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	0e1b      	lsrs	r3, r3, #24
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002800:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002806:	0f1b      	lsrs	r3, r3, #28
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	019a      	lsls	r2, r3, #6
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	4926      	ldr	r1, [pc, #152]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d011      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	019a      	lsls	r2, r3, #6
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	071b      	lsls	r3, r3, #28
 8002856:	491a      	ldr	r1, [pc, #104]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286a:	f7fe fbff 	bl	800106c <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002872:	f7fe fbfb 	bl	800106c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0d8      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b01      	cmp	r3, #1
 8002894:	f040 80ce 	bne.w	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f7fe fbe2 	bl	800106c <HAL_GetTick>
 80028a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028aa:	e00b      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028ac:	f7fe fbde 	bl	800106c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d904      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0bb      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d0:	d0ec      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d12a      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002908:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	0f1b      	lsrs	r3, r3, #28
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	019a      	lsls	r2, r3, #6
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	071b      	lsls	r3, r3, #28
 800292e:	4944      	ldr	r1, [pc, #272]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002936:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	493d      	ldr	r1, [pc, #244]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d022      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002964:	d11d      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	0e1b      	lsrs	r3, r3, #24
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	0f1b      	lsrs	r3, r3, #28
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	019a      	lsls	r2, r3, #6
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	431a      	orrs	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	431a      	orrs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	4929      	ldr	r1, [pc, #164]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d028      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	0e1b      	lsrs	r3, r3, #24
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	019a      	lsls	r2, r3, #6
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	071b      	lsls	r3, r3, #28
 80029e2:	4917      	ldr	r1, [pc, #92]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	4911      	ldr	r1, [pc, #68]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fb2e 	bl	800106c <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a14:	f7fe fb2a 	bl	800106c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e007      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a32:	d1ef      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e040      	b.n	8002ad8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe f9d8 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	; 0x24
 8002a70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fb82 	bl	800318c <UART_SetConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e022      	b.n	8002ad8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fdda 	bl	8003654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fe61 	bl	8003798 <UART_CheckIdleState>
 8002ad6:	4603      	mov	r3, r0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d132      	bne.n	8002b5e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_UART_Receive_IT+0x24>
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e02b      	b.n	8002b60 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d018      	beq.n	8002b4e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	613b      	str	r3, [r7, #16]
   return(result);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	69f9      	ldr	r1, [r7, #28]
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e6      	bne.n	8002b1c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	461a      	mov	r2, r3
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 ff33 	bl	80039c0 <UART_Start_Receive_IT>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	e000      	b.n	8002b60 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3728      	adds	r7, #40	; 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0ba      	sub	sp, #232	; 0xe8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b96:	4013      	ands	r3, r2
 8002b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d115      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00f      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 82ac 	beq.w	800311e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
      }
      return;
 8002bce:	e2a6      	b.n	800311e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8117 	beq.w	8002e08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002be6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bea:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <HAL_UART_IRQHandler+0x298>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 810a 	beq.w	8002e08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d011      	beq.n	8002c24 <HAL_UART_IRQHandler+0xbc>
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d011      	beq.n	8002c54 <HAL_UART_IRQHandler+0xec>
 8002c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2202      	movs	r2, #2
 8002c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4a:	f043 0204 	orr.w	r2, r3, #4
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d011      	beq.n	8002c84 <HAL_UART_IRQHandler+0x11c>
 8002c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2204      	movs	r2, #4
 8002c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ca0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2208      	movs	r2, #8
 8002cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb6:	f043 0208 	orr.w	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d012      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x18a>
 8002ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00c      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8212 	beq.w	8003122 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d005      	beq.n	8002d4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d04f      	beq.n	8002dea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fefe 	bl	8003b4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d141      	bne.n	8002de2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3308      	adds	r3, #8
 8002d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3308      	adds	r3, #8
 8002d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1d9      	bne.n	8002d5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d013      	beq.n	8002dda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <HAL_UART_IRQHandler+0x29c>)
 8002db8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fb82 	bl	80014c8 <HAL_DMA_Abort_IT>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d017      	beq.n	8002dfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e00f      	b.n	8002dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9b6 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de0:	e00b      	b.n	8002dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9b2 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	e007      	b.n	8002dfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9ae 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002df8:	e193      	b.n	8003122 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfa:	bf00      	nop
    return;
 8002dfc:	e191      	b.n	8003122 <HAL_UART_IRQHandler+0x5ba>
 8002dfe:	bf00      	nop
 8002e00:	04000120 	.word	0x04000120
 8002e04:	08003c15 	.word	0x08003c15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 814c 	bne.w	80030aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8145 	beq.w	80030aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 813e 	beq.w	80030aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	f040 80b6 	bne.w	8002fb2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8165 	beq.w	8003126 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e66:	429a      	cmp	r2, r3
 8002e68:	f080 815d 	bcs.w	8003126 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e80:	f000 8086 	beq.w	8002f90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1da      	bne.n	8002e84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3308      	adds	r3, #8
 8002eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ef2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e1      	bne.n	8002ece <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f14:	e853 3f00 	ldrex	r3, [r3]
 8002f18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e3      	bne.n	8002f0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f60:	f023 0310 	bic.w	r3, r3, #16
 8002f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e4      	bne.n	8002f50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fa2c 	bl	80013e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f8d8 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fb0:	e0b9      	b.n	8003126 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80ab 	beq.w	800312a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a6 	beq.w	800312a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	e853 3f00 	ldrex	r3, [r3]
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
 8003002:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e4      	bne.n	8002fde <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	e853 3f00 	ldrex	r3, [r3]
 8003022:	623b      	str	r3, [r7, #32]
   return(result);
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3308      	adds	r3, #8
 8003034:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003038:	633a      	str	r2, [r7, #48]	; 0x30
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800303e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e3      	bne.n	8003014 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	60fb      	str	r3, [r7, #12]
   return(result);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0310 	bic.w	r3, r3, #16
 8003074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	69b9      	ldr	r1, [r7, #24]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	617b      	str	r3, [r7, #20]
   return(result);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e4      	bne.n	8003060 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2202      	movs	r2, #2
 800309a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800309c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f85c 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030a8:	e03f      	b.n	800312a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00e      	beq.n	80030d4 <HAL_UART_IRQHandler+0x56c>
 80030b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f853 	bl	8003178 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030d2:	e02d      	b.n	8003130 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01c      	beq.n	800312e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
    }
    return;
 80030fc:	e017      	b.n	800312e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <HAL_UART_IRQHandler+0x5c8>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fd92 	bl	8003c40 <UART_EndTransmit_IT>
    return;
 800311c:	e008      	b.n	8003130 <HAL_UART_IRQHandler+0x5c8>
      return;
 800311e:	bf00      	nop
 8003120:	e006      	b.n	8003130 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003122:	bf00      	nop
 8003124:	e004      	b.n	8003130 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <HAL_UART_IRQHandler+0x5c8>
      return;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <HAL_UART_IRQHandler+0x5c8>
    return;
 800312e:	bf00      	nop
  }

}
 8003130:	37e8      	adds	r7, #232	; 0xe8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4ba6      	ldr	r3, [pc, #664]	; (8003450 <UART_SetConfig+0x2c4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a94      	ldr	r2, [pc, #592]	; (8003454 <UART_SetConfig+0x2c8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d120      	bne.n	800324a <UART_SetConfig+0xbe>
 8003208:	4b93      	ldr	r3, [pc, #588]	; (8003458 <UART_SetConfig+0x2cc>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b03      	cmp	r3, #3
 8003214:	d816      	bhi.n	8003244 <UART_SetConfig+0xb8>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <UART_SetConfig+0x90>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	0800322d 	.word	0x0800322d
 8003220:	08003239 	.word	0x08003239
 8003224:	08003233 	.word	0x08003233
 8003228:	0800323f 	.word	0x0800323f
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e150      	b.n	80034d4 <UART_SetConfig+0x348>
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e14d      	b.n	80034d4 <UART_SetConfig+0x348>
 8003238:	2304      	movs	r3, #4
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e14a      	b.n	80034d4 <UART_SetConfig+0x348>
 800323e:	2308      	movs	r3, #8
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e147      	b.n	80034d4 <UART_SetConfig+0x348>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e144      	b.n	80034d4 <UART_SetConfig+0x348>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a83      	ldr	r2, [pc, #524]	; (800345c <UART_SetConfig+0x2d0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d132      	bne.n	80032ba <UART_SetConfig+0x12e>
 8003254:	4b80      	ldr	r3, [pc, #512]	; (8003458 <UART_SetConfig+0x2cc>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d828      	bhi.n	80032b4 <UART_SetConfig+0x128>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <UART_SetConfig+0xdc>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800329d 	.word	0x0800329d
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032b5 	.word	0x080032b5
 8003274:	080032b5 	.word	0x080032b5
 8003278:	080032a9 	.word	0x080032a9
 800327c:	080032b5 	.word	0x080032b5
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080032b5 	.word	0x080032b5
 8003288:	080032a3 	.word	0x080032a3
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032b5 	.word	0x080032b5
 8003298:	080032af 	.word	0x080032af
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e118      	b.n	80034d4 <UART_SetConfig+0x348>
 80032a2:	2302      	movs	r3, #2
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e115      	b.n	80034d4 <UART_SetConfig+0x348>
 80032a8:	2304      	movs	r3, #4
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e112      	b.n	80034d4 <UART_SetConfig+0x348>
 80032ae:	2308      	movs	r3, #8
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e10f      	b.n	80034d4 <UART_SetConfig+0x348>
 80032b4:	2310      	movs	r3, #16
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e10c      	b.n	80034d4 <UART_SetConfig+0x348>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a68      	ldr	r2, [pc, #416]	; (8003460 <UART_SetConfig+0x2d4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d120      	bne.n	8003306 <UART_SetConfig+0x17a>
 80032c4:	4b64      	ldr	r3, [pc, #400]	; (8003458 <UART_SetConfig+0x2cc>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032ce:	2b30      	cmp	r3, #48	; 0x30
 80032d0:	d013      	beq.n	80032fa <UART_SetConfig+0x16e>
 80032d2:	2b30      	cmp	r3, #48	; 0x30
 80032d4:	d814      	bhi.n	8003300 <UART_SetConfig+0x174>
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d009      	beq.n	80032ee <UART_SetConfig+0x162>
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d810      	bhi.n	8003300 <UART_SetConfig+0x174>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <UART_SetConfig+0x15c>
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d006      	beq.n	80032f4 <UART_SetConfig+0x168>
 80032e6:	e00b      	b.n	8003300 <UART_SetConfig+0x174>
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e0f2      	b.n	80034d4 <UART_SetConfig+0x348>
 80032ee:	2302      	movs	r3, #2
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e0ef      	b.n	80034d4 <UART_SetConfig+0x348>
 80032f4:	2304      	movs	r3, #4
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e0ec      	b.n	80034d4 <UART_SetConfig+0x348>
 80032fa:	2308      	movs	r3, #8
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e0e9      	b.n	80034d4 <UART_SetConfig+0x348>
 8003300:	2310      	movs	r3, #16
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e0e6      	b.n	80034d4 <UART_SetConfig+0x348>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a56      	ldr	r2, [pc, #344]	; (8003464 <UART_SetConfig+0x2d8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d120      	bne.n	8003352 <UART_SetConfig+0x1c6>
 8003310:	4b51      	ldr	r3, [pc, #324]	; (8003458 <UART_SetConfig+0x2cc>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800331a:	2bc0      	cmp	r3, #192	; 0xc0
 800331c:	d013      	beq.n	8003346 <UART_SetConfig+0x1ba>
 800331e:	2bc0      	cmp	r3, #192	; 0xc0
 8003320:	d814      	bhi.n	800334c <UART_SetConfig+0x1c0>
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d009      	beq.n	800333a <UART_SetConfig+0x1ae>
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	d810      	bhi.n	800334c <UART_SetConfig+0x1c0>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <UART_SetConfig+0x1a8>
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d006      	beq.n	8003340 <UART_SetConfig+0x1b4>
 8003332:	e00b      	b.n	800334c <UART_SetConfig+0x1c0>
 8003334:	2300      	movs	r3, #0
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e0cc      	b.n	80034d4 <UART_SetConfig+0x348>
 800333a:	2302      	movs	r3, #2
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e0c9      	b.n	80034d4 <UART_SetConfig+0x348>
 8003340:	2304      	movs	r3, #4
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e0c6      	b.n	80034d4 <UART_SetConfig+0x348>
 8003346:	2308      	movs	r3, #8
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	e0c3      	b.n	80034d4 <UART_SetConfig+0x348>
 800334c:	2310      	movs	r3, #16
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e0c0      	b.n	80034d4 <UART_SetConfig+0x348>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a44      	ldr	r2, [pc, #272]	; (8003468 <UART_SetConfig+0x2dc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d125      	bne.n	80033a8 <UART_SetConfig+0x21c>
 800335c:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <UART_SetConfig+0x2cc>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800336a:	d017      	beq.n	800339c <UART_SetConfig+0x210>
 800336c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003370:	d817      	bhi.n	80033a2 <UART_SetConfig+0x216>
 8003372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003376:	d00b      	beq.n	8003390 <UART_SetConfig+0x204>
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d811      	bhi.n	80033a2 <UART_SetConfig+0x216>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <UART_SetConfig+0x1fe>
 8003382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003386:	d006      	beq.n	8003396 <UART_SetConfig+0x20a>
 8003388:	e00b      	b.n	80033a2 <UART_SetConfig+0x216>
 800338a:	2300      	movs	r3, #0
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e0a1      	b.n	80034d4 <UART_SetConfig+0x348>
 8003390:	2302      	movs	r3, #2
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e09e      	b.n	80034d4 <UART_SetConfig+0x348>
 8003396:	2304      	movs	r3, #4
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e09b      	b.n	80034d4 <UART_SetConfig+0x348>
 800339c:	2308      	movs	r3, #8
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e098      	b.n	80034d4 <UART_SetConfig+0x348>
 80033a2:	2310      	movs	r3, #16
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e095      	b.n	80034d4 <UART_SetConfig+0x348>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <UART_SetConfig+0x2e0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d125      	bne.n	80033fe <UART_SetConfig+0x272>
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <UART_SetConfig+0x2cc>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033c0:	d017      	beq.n	80033f2 <UART_SetConfig+0x266>
 80033c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033c6:	d817      	bhi.n	80033f8 <UART_SetConfig+0x26c>
 80033c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033cc:	d00b      	beq.n	80033e6 <UART_SetConfig+0x25a>
 80033ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d2:	d811      	bhi.n	80033f8 <UART_SetConfig+0x26c>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <UART_SetConfig+0x254>
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d006      	beq.n	80033ec <UART_SetConfig+0x260>
 80033de:	e00b      	b.n	80033f8 <UART_SetConfig+0x26c>
 80033e0:	2301      	movs	r3, #1
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e076      	b.n	80034d4 <UART_SetConfig+0x348>
 80033e6:	2302      	movs	r3, #2
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e073      	b.n	80034d4 <UART_SetConfig+0x348>
 80033ec:	2304      	movs	r3, #4
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e070      	b.n	80034d4 <UART_SetConfig+0x348>
 80033f2:	2308      	movs	r3, #8
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e06d      	b.n	80034d4 <UART_SetConfig+0x348>
 80033f8:	2310      	movs	r3, #16
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e06a      	b.n	80034d4 <UART_SetConfig+0x348>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <UART_SetConfig+0x2e4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d138      	bne.n	800347a <UART_SetConfig+0x2ee>
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <UART_SetConfig+0x2cc>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003412:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003416:	d017      	beq.n	8003448 <UART_SetConfig+0x2bc>
 8003418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800341c:	d82a      	bhi.n	8003474 <UART_SetConfig+0x2e8>
 800341e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003422:	d00b      	beq.n	800343c <UART_SetConfig+0x2b0>
 8003424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003428:	d824      	bhi.n	8003474 <UART_SetConfig+0x2e8>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <UART_SetConfig+0x2aa>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d006      	beq.n	8003442 <UART_SetConfig+0x2b6>
 8003434:	e01e      	b.n	8003474 <UART_SetConfig+0x2e8>
 8003436:	2300      	movs	r3, #0
 8003438:	77fb      	strb	r3, [r7, #31]
 800343a:	e04b      	b.n	80034d4 <UART_SetConfig+0x348>
 800343c:	2302      	movs	r3, #2
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e048      	b.n	80034d4 <UART_SetConfig+0x348>
 8003442:	2304      	movs	r3, #4
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e045      	b.n	80034d4 <UART_SetConfig+0x348>
 8003448:	2308      	movs	r3, #8
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e042      	b.n	80034d4 <UART_SetConfig+0x348>
 800344e:	bf00      	nop
 8003450:	efff69f3 	.word	0xefff69f3
 8003454:	40011000 	.word	0x40011000
 8003458:	40023800 	.word	0x40023800
 800345c:	40004400 	.word	0x40004400
 8003460:	40004800 	.word	0x40004800
 8003464:	40004c00 	.word	0x40004c00
 8003468:	40005000 	.word	0x40005000
 800346c:	40011400 	.word	0x40011400
 8003470:	40007800 	.word	0x40007800
 8003474:	2310      	movs	r3, #16
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e02c      	b.n	80034d4 <UART_SetConfig+0x348>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a72      	ldr	r2, [pc, #456]	; (8003648 <UART_SetConfig+0x4bc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d125      	bne.n	80034d0 <UART_SetConfig+0x344>
 8003484:	4b71      	ldr	r3, [pc, #452]	; (800364c <UART_SetConfig+0x4c0>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800348e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003492:	d017      	beq.n	80034c4 <UART_SetConfig+0x338>
 8003494:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003498:	d817      	bhi.n	80034ca <UART_SetConfig+0x33e>
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349e:	d00b      	beq.n	80034b8 <UART_SetConfig+0x32c>
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a4:	d811      	bhi.n	80034ca <UART_SetConfig+0x33e>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <UART_SetConfig+0x326>
 80034aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ae:	d006      	beq.n	80034be <UART_SetConfig+0x332>
 80034b0:	e00b      	b.n	80034ca <UART_SetConfig+0x33e>
 80034b2:	2300      	movs	r3, #0
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e00d      	b.n	80034d4 <UART_SetConfig+0x348>
 80034b8:	2302      	movs	r3, #2
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e00a      	b.n	80034d4 <UART_SetConfig+0x348>
 80034be:	2304      	movs	r3, #4
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e007      	b.n	80034d4 <UART_SetConfig+0x348>
 80034c4:	2308      	movs	r3, #8
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e004      	b.n	80034d4 <UART_SetConfig+0x348>
 80034ca:	2310      	movs	r3, #16
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e001      	b.n	80034d4 <UART_SetConfig+0x348>
 80034d0:	2310      	movs	r3, #16
 80034d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d15b      	bne.n	8003596 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d828      	bhi.n	8003536 <UART_SetConfig+0x3aa>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x360>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003519 	.word	0x08003519
 80034f4:	08003521 	.word	0x08003521
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003527 	.word	0x08003527
 8003500:	08003537 	.word	0x08003537
 8003504:	08003537 	.word	0x08003537
 8003508:	08003537 	.word	0x08003537
 800350c:	0800352f 	.word	0x0800352f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe fe48 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8003514:	61b8      	str	r0, [r7, #24]
        break;
 8003516:	e013      	b.n	8003540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7fe fe58 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 800351c:	61b8      	str	r0, [r7, #24]
        break;
 800351e:	e00f      	b.n	8003540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003520:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <UART_SetConfig+0x4c4>)
 8003522:	61bb      	str	r3, [r7, #24]
        break;
 8003524:	e00c      	b.n	8003540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7fe fd6b 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 800352a:	61b8      	str	r0, [r7, #24]
        break;
 800352c:	e008      	b.n	8003540 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	61bb      	str	r3, [r7, #24]
        break;
 8003534:	e004      	b.n	8003540 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	77bb      	strb	r3, [r7, #30]
        break;
 800353e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d074      	beq.n	8003630 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	005a      	lsls	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b0f      	cmp	r3, #15
 8003560:	d916      	bls.n	8003590 <UART_SetConfig+0x404>
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d212      	bcs.n	8003590 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	b29b      	uxth	r3, r3
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	b29a      	uxth	r2, r3
 8003580:	89fb      	ldrh	r3, [r7, #14]
 8003582:	4313      	orrs	r3, r2
 8003584:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	89fa      	ldrh	r2, [r7, #14]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	e04f      	b.n	8003630 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	77bb      	strb	r3, [r7, #30]
 8003594:	e04c      	b.n	8003630 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003596:	7ffb      	ldrb	r3, [r7, #31]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d828      	bhi.n	80035ee <UART_SetConfig+0x462>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <UART_SetConfig+0x418>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035c9 	.word	0x080035c9
 80035a8:	080035d1 	.word	0x080035d1
 80035ac:	080035d9 	.word	0x080035d9
 80035b0:	080035ef 	.word	0x080035ef
 80035b4:	080035df 	.word	0x080035df
 80035b8:	080035ef 	.word	0x080035ef
 80035bc:	080035ef 	.word	0x080035ef
 80035c0:	080035ef 	.word	0x080035ef
 80035c4:	080035e7 	.word	0x080035e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c8:	f7fe fdec 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 80035cc:	61b8      	str	r0, [r7, #24]
        break;
 80035ce:	e013      	b.n	80035f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d0:	f7fe fdfc 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 80035d4:	61b8      	str	r0, [r7, #24]
        break;
 80035d6:	e00f      	b.n	80035f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <UART_SetConfig+0x4c4>)
 80035da:	61bb      	str	r3, [r7, #24]
        break;
 80035dc:	e00c      	b.n	80035f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035de:	f7fe fd0f 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 80035e2:	61b8      	str	r0, [r7, #24]
        break;
 80035e4:	e008      	b.n	80035f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e004      	b.n	80035f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	77bb      	strb	r3, [r7, #30]
        break;
 80035f6:	bf00      	nop
    }

    if (pclk != 0U)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d018      	beq.n	8003630 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	085a      	lsrs	r2, r3, #1
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	441a      	add	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b0f      	cmp	r3, #15
 8003616:	d909      	bls.n	800362c <UART_SetConfig+0x4a0>
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361e:	d205      	bcs.n	800362c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	e001      	b.n	8003630 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800363c:	7fbb      	ldrb	r3, [r7, #30]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40007c00 	.word	0x40007c00
 800364c:	40023800 	.word	0x40023800
 8003650:	00f42400 	.word	0x00f42400

08003654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01a      	beq.n	800376a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003752:	d10a      	bne.n	800376a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a8:	f7fd fc60 	bl	800106c <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d10e      	bne.n	80037da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f831 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e027      	b.n	800382a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d10e      	bne.n	8003806 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f81b 	bl	8003832 <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e011      	b.n	800382a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b09c      	sub	sp, #112	; 0x70
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003842:	e0a7      	b.n	8003994 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	f000 80a3 	beq.w	8003994 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fd fc0d 	bl	800106c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <UART_WaitOnFlagUntilTimeout+0x32>
 800385e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003860:	2b00      	cmp	r3, #0
 8003862:	d13f      	bne.n	80038e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003878:	667b      	str	r3, [r7, #100]	; 0x64
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003884:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e6      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3308      	adds	r3, #8
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	663b      	str	r3, [r7, #96]	; 0x60
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3308      	adds	r3, #8
 80038b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80038b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e5      	bne.n	8003896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e068      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d050      	beq.n	8003994 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003900:	d148      	bne.n	8003994 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800390a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392a:	637b      	str	r3, [r7, #52]	; 0x34
 800392c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e6      	bne.n	800390c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3308      	adds	r3, #8
 8003944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	613b      	str	r3, [r7, #16]
   return(result);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	66bb      	str	r3, [r7, #104]	; 0x68
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800395e:	623a      	str	r2, [r7, #32]
 8003960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	69f9      	ldr	r1, [r7, #28]
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	61bb      	str	r3, [r7, #24]
   return(result);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e5      	bne.n	800393e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e010      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4013      	ands	r3, r2
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	f43f af48 	beq.w	8003844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3770      	adds	r7, #112	; 0x70
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b097      	sub	sp, #92	; 0x5c
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d10e      	bne.n	8003a12 <UART_Start_Receive_IT+0x52>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <UART_Start_Receive_IT+0x48>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a06:	e02d      	b.n	8003a64 <UART_Start_Receive_IT+0xa4>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a10:	e028      	b.n	8003a64 <UART_Start_Receive_IT+0xa4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10d      	bne.n	8003a36 <UART_Start_Receive_IT+0x76>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <UART_Start_Receive_IT+0x6c>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	22ff      	movs	r2, #255	; 0xff
 8003a26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a2a:	e01b      	b.n	8003a64 <UART_Start_Receive_IT+0xa4>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	227f      	movs	r2, #127	; 0x7f
 8003a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a34:	e016      	b.n	8003a64 <UART_Start_Receive_IT+0xa4>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a3e:	d10d      	bne.n	8003a5c <UART_Start_Receive_IT+0x9c>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <UART_Start_Receive_IT+0x92>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	227f      	movs	r2, #127	; 0x7f
 8003a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a50:	e008      	b.n	8003a64 <UART_Start_Receive_IT+0xa4>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	223f      	movs	r2, #63	; 0x3f
 8003a56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a5a:	e003      	b.n	8003a64 <UART_Start_Receive_IT+0xa4>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2222      	movs	r2, #34	; 0x22
 8003a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a94:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a96:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d107      	bne.n	8003ac2 <UART_Start_Receive_IT+0x102>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <UART_Start_Receive_IT+0x184>)
 8003abe:	669a      	str	r2, [r3, #104]	; 0x68
 8003ac0:	e002      	b.n	8003ac8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a20      	ldr	r2, [pc, #128]	; (8003b48 <UART_Start_Receive_IT+0x188>)
 8003ac6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d019      	beq.n	8003b04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
 8003af0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e6      	bne.n	8003ad0 <UART_Start_Receive_IT+0x110>
 8003b02:	e018      	b.n	8003b36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	613b      	str	r3, [r7, #16]
   return(result);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f043 0320 	orr.w	r3, r3, #32
 8003b18:	653b      	str	r3, [r7, #80]	; 0x50
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	69f9      	ldr	r1, [r7, #28]
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e6      	bne.n	8003b04 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	375c      	adds	r7, #92	; 0x5c
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	08003dfb 	.word	0x08003dfb
 8003b48:	08003c95 	.word	0x08003c95

08003b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b095      	sub	sp, #84	; 0x54
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
 8003b74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e6      	bne.n	8003b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e5      	bne.n	8003b86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d118      	bne.n	8003bf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6979      	ldr	r1, [r7, #20]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	613b      	str	r3, [r7, #16]
   return(result);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e6      	bne.n	8003bc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c08:	bf00      	nop
 8003c0a:	3754      	adds	r7, #84	; 0x54
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fa8a 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	613b      	str	r3, [r7, #16]
   return(result);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e6      	bne.n	8003c48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fa56 	bl	8003138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b096      	sub	sp, #88	; 0x58
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ca2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cac:	2b22      	cmp	r3, #34	; 0x22
 8003cae:	f040 8098 	bne.w	8003de2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cbc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003cc0:	b2d9      	uxtb	r1, r3
 8003cc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	400a      	ands	r2, r1
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d17b      	bne.n	8003df2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d18:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e6      	bne.n	8003cfa <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d4c:	633a      	str	r2, [r7, #48]	; 0x30
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d12e      	bne.n	8003dda <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	617b      	str	r3, [r7, #20]
   return(result);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d103      	bne.n	8003dca <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff f9c4 	bl	8003160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dd8:	e00b      	b.n	8003df2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc ff9c 	bl	8000d18 <HAL_UART_RxCpltCallback>
}
 8003de0:	e007      	b.n	8003df2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0208 	orr.w	r2, r2, #8
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	3758      	adds	r7, #88	; 0x58
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b096      	sub	sp, #88	; 0x58
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e12:	2b22      	cmp	r3, #34	; 0x22
 8003e14:	f040 8098 	bne.w	8003f48 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e28:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003e2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e36:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d17b      	bne.n	8003f58 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e6      	bne.n	8003e60 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e5      	bne.n	8003e92 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d12e      	bne.n	8003f40 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0310 	bic.w	r3, r3, #16
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	613b      	str	r3, [r7, #16]
   return(result);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e6      	bne.n	8003ee8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d103      	bne.n	8003f30 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff f911 	bl	8003160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f3e:	e00b      	b.n	8003f58 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fc fee9 	bl	8000d18 <HAL_UART_RxCpltCallback>
}
 8003f46:	e007      	b.n	8003f58 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0208 	orr.w	r2, r2, #8
 8003f56:	619a      	str	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	3758      	adds	r7, #88	; 0x58
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4d0d      	ldr	r5, [pc, #52]	; (8003f98 <__libc_init_array+0x38>)
 8003f64:	4c0d      	ldr	r4, [pc, #52]	; (8003f9c <__libc_init_array+0x3c>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	42a6      	cmp	r6, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	4d0b      	ldr	r5, [pc, #44]	; (8003fa0 <__libc_init_array+0x40>)
 8003f72:	4c0c      	ldr	r4, [pc, #48]	; (8003fa4 <__libc_init_array+0x44>)
 8003f74:	f000 f842 	bl	8003ffc <_init>
 8003f78:	1b64      	subs	r4, r4, r5
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f88:	4798      	blx	r3
 8003f8a:	3601      	adds	r6, #1
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f92:	4798      	blx	r3
 8003f94:	3601      	adds	r6, #1
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	08004038 	.word	0x08004038
 8003f9c:	08004038 	.word	0x08004038
 8003fa0:	08004038 	.word	0x08004038
 8003fa4:	0800403c 	.word	0x0800403c

08003fa8 <memset>:
 8003fa8:	4402      	add	r2, r0
 8003faa:	4603      	mov	r3, r0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <memset+0xa>
 8003fb0:	4770      	bx	lr
 8003fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb6:	e7f9      	b.n	8003fac <memset+0x4>

08003fb8 <strchr>:
 8003fb8:	b2c9      	uxtb	r1, r1
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc0:	b11a      	cbz	r2, 8003fca <strchr+0x12>
 8003fc2:	428a      	cmp	r2, r1
 8003fc4:	d1f9      	bne.n	8003fba <strchr+0x2>
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	4770      	bx	lr
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	bf18      	it	ne
 8003fce:	2300      	movne	r3, #0
 8003fd0:	e7f9      	b.n	8003fc6 <strchr+0xe>

08003fd2 <strncmp>:
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	b17a      	cbz	r2, 8003ff6 <strncmp+0x24>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	3901      	subs	r1, #1
 8003fda:	1884      	adds	r4, r0, r2
 8003fdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003fe0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003fe4:	4290      	cmp	r0, r2
 8003fe6:	d101      	bne.n	8003fec <strncmp+0x1a>
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d101      	bne.n	8003ff0 <strncmp+0x1e>
 8003fec:	1a80      	subs	r0, r0, r2
 8003fee:	bd10      	pop	{r4, pc}
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d1f3      	bne.n	8003fdc <strncmp+0xa>
 8003ff4:	e7fa      	b.n	8003fec <strncmp+0x1a>
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	e7f9      	b.n	8003fee <strncmp+0x1c>
	...

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
