
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004320  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004664  08004664  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800466c  0800466c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  080046e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080046e4  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b273  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190b  00000000  00000000  0002b311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cad  00000000  00000000  0002daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4b8  00000000  00000000  000547a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1adb  00000000  00000000  0005ec5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb0  00000000  00000000  00150788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08004500 	.word	0x08004500

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08004500 	.word	0x08004500

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <char_is_endmessage+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d101      	bne.n	800065a <char_is_endmessage+0x1a>
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <char_is_endmessage+0x1c>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <rx_has_data>:

uint8_t rx_has_data()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <rx_has_data+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <rx_has_data+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	d101      	bne.n	8000680 <rx_has_data+0x18>
	{
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <rx_has_data+0x1a>
	}
	else return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000014a 	.word	0x2000014a
 8000690:	2000014b 	.word	0x2000014b

08000694 <increase_rx_empty>:

void increase_rx_empty()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	rx_empty++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <increase_rx_empty+0x2c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b31      	cmp	r3, #49	; 0x31
 80006ae:	d902      	bls.n	80006b6 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <increase_rx_empty+0x2c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	2000014a 	.word	0x2000014a

080006c4 <increase_rx_busy>:

void increase_rx_busy()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	rx_busy++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <increase_rx_busy+0x2c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b31      	cmp	r3, #49	; 0x31
 80006de:	d902      	bls.n	80006e6 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <increase_rx_busy+0x2c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	2000014b 	.word	0x2000014b

080006f4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <get_char+0x24>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <get_char+0x28>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000708:	f7ff ffdc 	bl	80006c4 <increase_rx_busy>
	return tmp;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000014b 	.word	0x2000014b
 800071c:	20000118 	.word	0x20000118

08000720 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800072c:	e041      	b.n	80007b2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <get_message+0xa8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461c      	mov	r4, r3
 8000734:	f7ff ffde 	bl	80006f4 <get_char>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <get_message+0xac>)
 800073e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <get_message+0xa8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <get_message+0xac>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <char_is_endmessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d021      	beq.n	800079a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <get_message+0xa8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <get_message+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <get_message+0xac>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <get_message+0xa8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <get_message+0x48>
			}

			message_length = idx;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <get_message+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <get_message+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	e011      	b.n	80007be <get_message+0x9e>
		}
		else
		{
			idx++;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <get_message+0xa8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <get_message+0xa8>)
 80007a4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <get_message+0xa8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b32      	cmp	r3, #50	; 0x32
 80007ac:	d901      	bls.n	80007b2 <get_message+0x92>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e005      	b.n	80007be <get_message+0x9e>
	while(rx_has_data() == 1)
 80007b2:	f7ff ff59 	bl	8000668 <rx_has_data>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0b8      	beq.n	800072e <get_message+0xe>
		}
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000019c 	.word	0x2000019c
 80007cc:	200001a0 	.word	0x200001a0

080007d0 <turn_on_led>:

void turn_on_led()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <turn_on_led+0x14>)
 80007da:	f001 f9b5 	bl	8001b48 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400

080007e8 <turn_off_led>:

void turn_off_led()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <turn_off_led+0x14>)
 80007f2:	f001 f9a9 	bl	8001b48 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <calculate_delay+0x58>)
 800080c:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000818:	edd7 6a03 	vldr	s13, [r7, #12]
 800081c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000820:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000824:	edd7 7a03 	vldr	s15, [r7, #12]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f003 fdee 	bl	8004410 <ceil>
 8000834:	eeb0 7b40 	vmov.f64	d7, d0
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000840:	edd7 7a03 	vldr	s15, [r7, #12]
 8000844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 800084e:	897b      	ldrh	r3, [r7, #10]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	447a0000 	.word	0x447a0000

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b09e      	sub	sp, #120	; 0x78
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000862:	f000 fbf7 	bl	8001054 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000866:	f7ff fe69 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800086a:	f7ff fe8d 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fd1e 	bl	80012ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 faed 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fb77 	bl	8000f68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800087a:	f000 fb45 	bl	8000f08 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	499d      	ldr	r1, [pc, #628]	; (8000af8 <main+0x29c>)
 8000882:	489e      	ldr	r0, [pc, #632]	; (8000afc <main+0x2a0>)
 8000884:	f002 fa9e 	bl	8002dc4 <HAL_UART_Receive_IT>
  // Temporary command array
//  uint8_t command[BUFFER_LENGTH];

  // LED command parameters
//  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000888:	4a9d      	ldr	r2, [pc, #628]	; (8000b00 <main+0x2a4>)
 800088a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	4611      	mov	r1, r2
 8000892:	8019      	strh	r1, [r3, #0]
 8000894:	3302      	adds	r3, #2
 8000896:	0c12      	lsrs	r2, r2, #16
 8000898:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 800089a:	4b9a      	ldr	r3, [pc, #616]	; (8000b04 <main+0x2a8>)
 800089c:	66bb      	str	r3, [r7, #104]	; 0x68
  char blink_cmd[] = "BLINK,";
 800089e:	4a9a      	ldr	r2, [pc, #616]	; (8000b08 <main+0x2ac>)
 80008a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a8:	6018      	str	r0, [r3, #0]
 80008aa:	3304      	adds	r3, #4
 80008ac:	8019      	strh	r1, [r3, #0]
 80008ae:	3302      	adds	r3, #2
 80008b0:	0c0a      	lsrs	r2, r1, #16
 80008b2:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 80008b4:	4a95      	ldr	r2, [pc, #596]	; (8000b0c <main+0x2b0>)
 80008b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008be:	6018      	str	r0, [r3, #0]
 80008c0:	3304      	adds	r3, #4
 80008c2:	8019      	strh	r1, [r3, #0]
 80008c4:	3302      	adds	r3, #2
 80008c6:	0c0a      	lsrs	r2, r1, #16
 80008c8:	701a      	strb	r2, [r3, #0]

  // Error message
  char error_message[] = "Error: Command not found\r\n";
 80008ca:	4b91      	ldr	r3, [pc, #580]	; (8000b10 <main+0x2b4>)
 80008cc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80008d0:	461d      	mov	r5, r3
 80008d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008da:	c403      	stmia	r4!, {r0, r1}
 80008dc:	8022      	strh	r2, [r4, #0]
 80008de:	3402      	adds	r4, #2
 80008e0:	0c13      	lsrs	r3, r2, #16
 80008e2:	7023      	strb	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 80008e4:	4b84      	ldr	r3, [pc, #528]	; (8000af8 <main+0x29c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b0a      	cmp	r3, #10
 80008ea:	d003      	beq.n	80008f4 <main+0x98>
 80008ec:	4b82      	ldr	r3, [pc, #520]	; (8000af8 <main+0x29c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b0d      	cmp	r3, #13
 80008f2:	d106      	bne.n	8000902 <main+0xa6>
	{
		message_length = get_message(message);
 80008f4:	4887      	ldr	r0, [pc, #540]	; (8000b14 <main+0x2b8>)
 80008f6:	f7ff ff13 	bl	8000720 <get_message>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b86      	ldr	r3, [pc, #536]	; (8000b18 <main+0x2bc>)
 8000900:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000902:	4b85      	ldr	r3, [pc, #532]	; (8000b18 <main+0x2bc>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	f000 8283 	beq.w	8000e14 <main+0x5b8>
	{
		for (uint8_t i=0; i<message_length; i++)
 800090e:	2300      	movs	r3, #0
 8000910:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000914:	e276      	b.n	8000e04 <main+0x5a8>
		{
			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000916:	4b81      	ldr	r3, [pc, #516]	; (8000b1c <main+0x2c0>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d105      	bne.n	800092c <main+0xd0>
 8000920:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000924:	4a7b      	ldr	r2, [pc, #492]	; (8000b14 <main+0x2b8>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	2b4c      	cmp	r3, #76	; 0x4c
 800092a:	d00a      	beq.n	8000942 <main+0xe6>
 800092c:	4b7b      	ldr	r3, [pc, #492]	; (8000b1c <main+0x2c0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d108      	bne.n	8000948 <main+0xec>
 8000936:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800093a:	4a76      	ldr	r2, [pc, #472]	; (8000b14 <main+0x2b8>)
 800093c:	5cd3      	ldrb	r3, [r2, r3]
 800093e:	2b49      	cmp	r3, #73	; 0x49
 8000940:	d102      	bne.n	8000948 <main+0xec>
				sw_state = 1;
 8000942:	4b76      	ldr	r3, [pc, #472]	; (8000b1c <main+0x2c0>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000948:	4b74      	ldr	r3, [pc, #464]	; (8000b1c <main+0x2c0>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3b01      	subs	r3, #1
 8000950:	2b04      	cmp	r3, #4
 8000952:	f200 81f6 	bhi.w	8000d42 <main+0x4e6>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <main+0x100>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	08000971 	.word	0x08000971
 8000960:	08000a01 	.word	0x08000a01
 8000964:	08000a35 	.word	0x08000a35
 8000968:	08000a69 	.word	0x08000a69
 800096c:	08000b39 	.word	0x08000b39
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000970:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000974:	3301      	adds	r3, #1
 8000976:	4a67      	ldr	r2, [pc, #412]	; (8000b14 <main+0x2b8>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	2b45      	cmp	r3, #69	; 0x45
 800097c:	d10f      	bne.n	800099e <main+0x142>
 800097e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000982:	3302      	adds	r3, #2
 8000984:	4a63      	ldr	r2, [pc, #396]	; (8000b14 <main+0x2b8>)
 8000986:	5cd3      	ldrb	r3, [r2, r3]
 8000988:	2b44      	cmp	r3, #68	; 0x44
 800098a:	d108      	bne.n	800099e <main+0x142>
				{
					i = i+2;
 800098c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000990:	3302      	adds	r3, #2
 8000992:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					sw_state = 2;
 8000996:	4b61      	ldr	r3, [pc, #388]	; (8000b1c <main+0x2c0>)
 8000998:	2202      	movs	r2, #2
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e02f      	b.n	80009fe <main+0x1a2>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 800099e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a5b      	ldr	r2, [pc, #364]	; (8000b14 <main+0x2b8>)
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	2b4e      	cmp	r3, #78	; 0x4e
 80009aa:	d124      	bne.n	80009f6 <main+0x19a>
 80009ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009b0:	3302      	adds	r3, #2
 80009b2:	4a58      	ldr	r2, [pc, #352]	; (8000b14 <main+0x2b8>)
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	2b53      	cmp	r3, #83	; 0x53
 80009b8:	d11d      	bne.n	80009f6 <main+0x19a>
 80009ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009be:	3303      	adds	r3, #3
 80009c0:	4a54      	ldr	r2, [pc, #336]	; (8000b14 <main+0x2b8>)
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	2b45      	cmp	r3, #69	; 0x45
 80009c6:	d116      	bne.n	80009f6 <main+0x19a>
 80009c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009cc:	3304      	adds	r3, #4
 80009ce:	4a51      	ldr	r2, [pc, #324]	; (8000b14 <main+0x2b8>)
 80009d0:	5cd3      	ldrb	r3, [r2, r3]
 80009d2:	2b52      	cmp	r3, #82	; 0x52
 80009d4:	d10f      	bne.n	80009f6 <main+0x19a>
 80009d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009da:	3305      	adds	r3, #5
 80009dc:	4a4d      	ldr	r2, [pc, #308]	; (8000b14 <main+0x2b8>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	2b54      	cmp	r3, #84	; 0x54
 80009e2:	d108      	bne.n	80009f6 <main+0x19a>
				{
					i = i+5;
 80009e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009e8:	3305      	adds	r3, #5
 80009ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					sw_state = 2;
 80009ee:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <main+0x2c0>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	e003      	b.n	80009fe <main+0x1a2>
				}
				else
					sw_state = 0;
 80009f6:	4b49      	ldr	r3, [pc, #292]	; (8000b1c <main+0x2c0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
				break;
 80009fc:	e1a1      	b.n	8000d42 <main+0x4e6>
 80009fe:	e1a0      	b.n	8000d42 <main+0x4e6>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000a00:	215b      	movs	r1, #91	; 0x5b
 8000a02:	4844      	ldr	r0, [pc, #272]	; (8000b14 <main+0x2b8>)
 8000a04:	f003 fc54 	bl	80042b0 <strchr>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a45      	ldr	r2, [pc, #276]	; (8000b20 <main+0x2c4>)
 8000a0c:	6013      	str	r3, [r2, #0]

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000a0e:	4b44      	ldr	r3, [pc, #272]	; (8000b20 <main+0x2c4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d103      	bne.n	8000a1e <main+0x1c2>
					sw_state = 0;
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <main+0x2c0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000a1c:	e191      	b.n	8000d42 <main+0x4e6>
					open_idx = (uint16_t)(open_bracket - message);
 8000a1e:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <main+0x2c4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a3c      	ldr	r2, [pc, #240]	; (8000b14 <main+0x2b8>)
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <main+0x2c8>)
 8000a2a:	801a      	strh	r2, [r3, #0]
					sw_state = 3;
 8000a2c:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <main+0x2c0>)
 8000a2e:	2203      	movs	r2, #3
 8000a30:	701a      	strb	r2, [r3, #0]
				break;
 8000a32:	e186      	b.n	8000d42 <main+0x4e6>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000a34:	215d      	movs	r1, #93	; 0x5d
 8000a36:	4837      	ldr	r0, [pc, #220]	; (8000b14 <main+0x2b8>)
 8000a38:	f003 fc3a 	bl	80042b0 <strchr>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <main+0x2cc>)
 8000a40:	6013      	str	r3, [r2, #0]

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000a42:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <main+0x2cc>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d103      	bne.n	8000a52 <main+0x1f6>
					sw_state = 0;
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <main+0x2c0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000a50:	e177      	b.n	8000d42 <main+0x4e6>
					close_idx = (uint16_t)(close_bracket - message);
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <main+0x2cc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <main+0x2b8>)
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <main+0x2d0>)
 8000a5e:	801a      	strh	r2, [r3, #0]
					sw_state = 4;
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <main+0x2c0>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	701a      	strb	r2, [r3, #0]
				break;
 8000a66:	e16c      	b.n	8000d42 <main+0x4e6>

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <main+0x2d0>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <main+0x2c8>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <main+0x2d4>)
 8000a7e:	801a      	strh	r2, [r3, #0]

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <main+0x2d8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <main+0x2c8>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3301      	adds	r3, #1
 8000a94:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000a98:	e018      	b.n	8000acc <main+0x270>
				{
					command[j] = message[y];
 8000a9a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000a9e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000aa2:	491c      	ldr	r1, [pc, #112]	; (8000b14 <main+0x2b8>)
 8000aa4:	5c8a      	ldrb	r2, [r1, r2]
 8000aa6:	3378      	adds	r3, #120	; 0x78
 8000aa8:	443b      	add	r3, r7
 8000aaa:	f803 2c74 	strb.w	r2, [r3, #-116]
					j++;
 8000aae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
					command_length = j;
 8000ab8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <main+0x2d8>)
 8000ac0:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000ac2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <main+0x2d0>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d3df      	bcc.n	8000a9a <main+0x23e>
				}

				if (command_length == param_length)
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <main+0x2d8>)
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <main+0x2d4>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d103      	bne.n	8000af0 <main+0x294>
					sw_state = 5;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <main+0x2c0>)
 8000aea:	2205      	movs	r2, #5
 8000aec:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 8000aee:	e128      	b.n	8000d42 <main+0x4e6>
					sw_state = 0;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <main+0x2c0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
				break;
 8000af6:	e124      	b.n	8000d42 <main+0x4e6>
 8000af8:	20000114 	.word	0x20000114
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	08004518 	.word	0x08004518
 8000b04:	0046464f 	.word	0x0046464f
 8000b08:	0800451c 	.word	0x0800451c
 8000b0c:	08004524 	.word	0x08004524
 8000b10:	0800452c 	.word	0x0800452c
 8000b14:	2000014c 	.word	0x2000014c
 8000b18:	2000017e 	.word	0x2000017e
 8000b1c:	2000017f 	.word	0x2000017f
 8000b20:	2000018c 	.word	0x2000018c
 8000b24:	20000190 	.word	0x20000190
 8000b28:	20000194 	.word	0x20000194
 8000b2c:	20000198 	.word	0x20000198
 8000b30:	2000019a 	.word	0x2000019a
 8000b34:	200001d2 	.word	0x200001d2

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 8000b38:	4ba4      	ldr	r3, [pc, #656]	; (8000dcc <main+0x570>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4aa3      	ldr	r2, [pc, #652]	; (8000dd0 <main+0x574>)
 8000b42:	5cd3      	ldrb	r3, [r2, r3]
 8000b44:	2b3b      	cmp	r3, #59	; 0x3b
 8000b46:	d00c      	beq.n	8000b62 <main+0x306>
				{
					uart_print(message[close_idx+1]);
 8000b48:	4ba0      	ldr	r3, [pc, #640]	; (8000dcc <main+0x570>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a9f      	ldr	r2, [pc, #636]	; (8000dd0 <main+0x574>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fd5b 	bl	8000610 <uart_print>
					sw_state = 0;
 8000b5a:	4b9e      	ldr	r3, [pc, #632]	; (8000dd4 <main+0x578>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
					break;
 8000b60:	e0ef      	b.n	8000d42 <main+0x4e6>
				}

				// Test CRC validation
				for (uint8_t y=0; y<param_length; y++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000b68:	e00d      	b.n	8000b86 <main+0x32a>
					uart_print(command[y]);
 8000b6a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000b6e:	3378      	adds	r3, #120	; 0x78
 8000b70:	443b      	add	r3, r7
 8000b72:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fd4a 	bl	8000610 <uart_print>
				for (uint8_t y=0; y<param_length; y++)
 8000b7c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000b80:	3301      	adds	r3, #1
 8000b82:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000b86:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b92      	ldr	r3, [pc, #584]	; (8000dd8 <main+0x57c>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3e9      	bcc.n	8000b6a <main+0x30e>
				uart_print('\r');
 8000b96:	200d      	movs	r0, #13
 8000b98:	f7ff fd3a 	bl	8000610 <uart_print>
				uart_print('\n');
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f7ff fd37 	bl	8000610 <uart_print>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 8000ba2:	4b8d      	ldr	r3, [pc, #564]	; (8000dd8 <main+0x57c>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 8000baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bac:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fb89 	bl	80042ca <strncmp>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <main+0x36a>
				{
					// Turn on LED
					led_action = 1;
 8000bbe:	4b87      	ldr	r3, [pc, #540]	; (8000ddc <main+0x580>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e0ab      	b.n	8000d1e <main+0x4c2>
				}
				else if (strncmp(command, off_cmd, len) == 0)
 8000bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bc8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fb7b 	bl	80042ca <strncmp>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d103      	bne.n	8000be2 <main+0x386>
				{
					// Turn off LED
					led_action = 0;
 8000bda:	4b80      	ldr	r3, [pc, #512]	; (8000ddc <main+0x580>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e09d      	b.n	8000d1e <main+0x4c2>
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 8000be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fb6c 	bl	80042ca <strncmp>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d130      	bne.n	8000c5a <main+0x3fe>
				{
					// Check if delay is a digit
					if (!(message[close_idx-1] >= 0x30 && message[close_idx-1] <= 0x39))
 8000bf8:	4b74      	ldr	r3, [pc, #464]	; (8000dcc <main+0x570>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	4a73      	ldr	r2, [pc, #460]	; (8000dd0 <main+0x574>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	2b2f      	cmp	r3, #47	; 0x2f
 8000c06:	d907      	bls.n	8000c18 <main+0x3bc>
 8000c08:	4b70      	ldr	r3, [pc, #448]	; (8000dcc <main+0x570>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a6f      	ldr	r2, [pc, #444]	; (8000dd0 <main+0x574>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	2b39      	cmp	r3, #57	; 0x39
 8000c16:	d919      	bls.n	8000c4c <main+0x3f0>
					{
						// Print error message
						for (uint8_t y=0; y<26; y++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8000c1e:	e00d      	b.n	8000c3c <main+0x3e0>
							uart_print(error_message[y]);
 8000c20:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000c24:	3378      	adds	r3, #120	; 0x78
 8000c26:	443b      	add	r3, r7
 8000c28:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fcef 	bl	8000610 <uart_print>
						for (uint8_t y=0; y<26; y++)
 8000c32:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000c36:	3301      	adds	r3, #1
 8000c38:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8000c3c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000c40:	2b19      	cmp	r3, #25
 8000c42:	d9ed      	bls.n	8000c20 <main+0x3c4>

						// Reset sw_state
						sw_state = 0;
 8000c44:	4b63      	ldr	r3, [pc, #396]	; (8000dd4 <main+0x578>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e068      	b.n	8000d1e <main+0x4c2>
					}
					else
					{
						// Enable LED blink
						blink_setup = 1;
 8000c4c:	4b64      	ldr	r3, [pc, #400]	; (8000de0 <main+0x584>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 8000c52:	4b62      	ldr	r3, [pc, #392]	; (8000ddc <main+0x580>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e061      	b.n	8000d1e <main+0x4c2>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 8000c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c5c:	1f1a      	subs	r2, r3, #4
 8000c5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fb30 	bl	80042ca <strncmp>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d14d      	bne.n	8000d0c <main+0x4b0>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8000c76:	e044      	b.n	8000d02 <main+0x4a6>
						if (!(message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39))
 8000c78:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <main+0x570>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	1f1a      	subs	r2, r3, #4
 8000c80:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000c84:	4413      	add	r3, r2
 8000c86:	4a52      	ldr	r2, [pc, #328]	; (8000dd0 <main+0x574>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	2b2f      	cmp	r3, #47	; 0x2f
 8000c8c:	d90a      	bls.n	8000ca4 <main+0x448>
 8000c8e:	4b4f      	ldr	r3, [pc, #316]	; (8000dcc <main+0x570>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	1f1a      	subs	r2, r3, #4
 8000c96:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <main+0x574>)
 8000c9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ca0:	2b39      	cmp	r3, #57	; 0x39
 8000ca2:	d919      	bls.n	8000cd8 <main+0x47c>
						{
							// Print error message
							for (uint8_t y=0; y<26; y++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8000caa:	e00d      	b.n	8000cc8 <main+0x46c>
								uart_print(error_message[y]);
 8000cac:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000cb0:	3378      	adds	r3, #120	; 0x78
 8000cb2:	443b      	add	r3, r7
 8000cb4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fca9 	bl	8000610 <uart_print>
							for (uint8_t y=0; y<26; y++)
 8000cbe:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8000cc8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	d9ed      	bls.n	8000cac <main+0x450>

							// Reset sw_state
							sw_state = 0;
 8000cd0:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <main+0x578>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e00f      	b.n	8000cf8 <main+0x49c>
						}
						else
						{
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 8000cd8:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <main+0x570>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	1f1a      	subs	r2, r3, #4
 8000ce0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000ce4:	441a      	add	r2, r3
 8000ce6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000cea:	4939      	ldr	r1, [pc, #228]	; (8000dd0 <main+0x574>)
 8000cec:	5c89      	ldrb	r1, [r1, r2]
 8000cee:	4a3d      	ldr	r2, [pc, #244]	; (8000de4 <main+0x588>)
 8000cf0:	54d1      	strb	r1, [r2, r3]

							// Enable the delay
							led_action = 3;
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <main+0x580>)
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	701a      	strb	r2, [r3, #0]
					for (uint8_t y=0; y<4; y++)
 8000cf8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8000d02:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d9b6      	bls.n	8000c78 <main+0x41c>
 8000d0a:	e008      	b.n	8000d1e <main+0x4c2>
						}
				}
				else
				{
					// DEBUG: Print '#' on error
					uart_print('#');
 8000d0c:	2023      	movs	r0, #35	; 0x23
 8000d0e:	f7ff fc7f 	bl	8000610 <uart_print>
					uart_print('\r');
 8000d12:	200d      	movs	r0, #13
 8000d14:	f7ff fc7c 	bl	8000610 <uart_print>
					uart_print('\n');
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f7ff fc79 	bl	8000610 <uart_print>
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <main+0x58c>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <main+0x574>)
 8000d28:	2123      	movs	r1, #35	; 0x23
 8000d2a:	5499      	strb	r1, [r3, r2]
				message[close_idx] = '#';
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <main+0x570>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <main+0x574>)
 8000d36:	2123      	movs	r1, #35	; 0x23
 8000d38:	5499      	strb	r1, [r3, r2]

				// Reset sw_state
				sw_state = 0;
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <main+0x578>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
				break;
 8000d40:	bf00      	nop
			} /* sw_state switch end */

			// Diode control switch
			switch (led_action)
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <main+0x580>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d856      	bhi.n	8000dfa <main+0x59e>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <main+0x4f8>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08000d6b 	.word	0x08000d6b
 8000d5c:	08000d71 	.word	0x08000d71
 8000d60:	08000dbd 	.word	0x08000dbd
			{
			case 0:
				// Turn off LED
				turn_off_led();
 8000d64:	f7ff fd40 	bl	80007e8 <turn_off_led>
				break;
 8000d68:	e047      	b.n	8000dfa <main+0x59e>

			case 1:
				// Turn on LED
				turn_on_led();
 8000d6a:	f7ff fd31 	bl	80007d0 <turn_on_led>
				break;
 8000d6e:	e044      	b.n	8000dfa <main+0x59e>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <main+0x584>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d13e      	bne.n	8000df8 <main+0x59c>
				{
					delay = message[close_idx-1] - '0';
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <main+0x570>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3b01      	subs	r3, #1
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <main+0x574>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <main+0x590>)
 8000d8c:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <main+0x590>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d103      	bne.n	8000da0 <main+0x544>
						blink_ms = 0;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <main+0x594>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
 8000d9e:	e009      	b.n	8000db4 <main+0x558>
					else
						blink_ms = calculate_delay(delay);
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <main+0x590>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fd2a 	bl	8000800 <calculate_delay>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <main+0x594>)
 8000db2:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <main+0x584>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000dba:	e01d      	b.n	8000df8 <main+0x59c>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <main+0x588>)
 8000dbe:	f003 fa41 	bl	8004244 <atoi>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <main+0x598>)
 8000dc8:	801a      	strh	r2, [r3, #0]
				break;
 8000dca:	e016      	b.n	8000dfa <main+0x59e>
 8000dcc:	20000198 	.word	0x20000198
 8000dd0:	2000014c 	.word	0x2000014c
 8000dd4:	2000017f 	.word	0x2000017f
 8000dd8:	2000019a 	.word	0x2000019a
 8000ddc:	20000180 	.word	0x20000180
 8000de0:	20000181 	.word	0x20000181
 8000de4:	20000188 	.word	0x20000188
 8000de8:	20000190 	.word	0x20000190
 8000dec:	20000182 	.word	0x20000182
 8000df0:	20000184 	.word	0x20000184
 8000df4:	20000186 	.word	0x20000186
				break;
 8000df8:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8000dfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <main+0x5e4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f4ff ad81 	bcc.w	8000916 <main+0xba>
		} /* for loop end */
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (blink_ms != 0)
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <main+0x5e8>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d009      	beq.n	8000e32 <main+0x5d6>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <main+0x5ec>)
 8000e22:	f000 feaa 	bl	8001b7a <HAL_GPIO_TogglePin>
		HAL_Delay(blink_ms);
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <main+0x5e8>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fa9b 	bl	8001368 <HAL_Delay>
	}

	// Start the delay
	HAL_Delay(loop_delay);
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <main+0x5f0>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fa96 	bl	8001368 <HAL_Delay>
	if (character == '\n' || character == '\r')
 8000e3c:	e552      	b.n	80008e4 <main+0x88>
 8000e3e:	bf00      	nop
 8000e40:	2000017e 	.word	0x2000017e
 8000e44:	20000184 	.word	0x20000184
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	20000186 	.word	0x20000186

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fa1e 	bl	80042a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <SystemClock_Config+0xb0>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <SystemClock_Config+0xb0>)
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <SystemClock_Config+0xb0>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <SystemClock_Config+0xb4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <SystemClock_Config+0xb4>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <SystemClock_Config+0xb4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fe77 	bl	8001bb0 <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ec8:	f000 f8f0 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 f910 	bl	800210c <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ef2:	f000 f8db 	bl	80010ac <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_USART3_UART_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f4c:	f001 feec 	bl	8002d28 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f56:	f000 f8a9 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000008c 	.word	0x2000008c
 8000f64:	40004800 	.word	0x40004800

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_GPIO_Init+0x8c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <MX_GPIO_Init+0x90>)
 8000fcc:	f000 fdbc 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_GPIO_Init+0x90>)
 8000fe8:	f000 fc02 	bl	80017f0 <HAL_GPIO_Init>

}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020400 	.word	0x40020400

08000ffc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_UART_RxCpltCallback+0x44>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fb01 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <HAL_UART_RxCpltCallback+0x48>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d10e      	bne.n	8001036 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_UART_RxCpltCallback+0x4c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_UART_RxCpltCallback+0x44>)
 8001022:	7819      	ldrb	r1, [r3, #0]
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_UART_RxCpltCallback+0x50>)
 8001026:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8001028:	f7ff fb34 	bl	8000694 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	4904      	ldr	r1, [pc, #16]	; (8001040 <HAL_UART_RxCpltCallback+0x44>)
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <HAL_UART_RxCpltCallback+0x54>)
 8001032:	f001 fec7 	bl	8002dc4 <HAL_UART_Receive_IT>
	}
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000114 	.word	0x20000114
 8001044:	40004800 	.word	0x40004800
 8001048:	2000014a 	.word	0x2000014a
 800104c:	20000118 	.word	0x20000118
 8001050:	2000008c 	.word	0x2000008c

08001054 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001066:	f000 fab5 	bl	80015d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800106a:	2301      	movs	r3, #1
 800106c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800106e:	2300      	movs	r3, #0
 8001070:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001076:	231f      	movs	r3, #31
 8001078:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800107a:	2387      	movs	r3, #135	; 0x87
 800107c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800107e:	2300      	movs	r3, #0
 8001080:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001082:	2300      	movs	r3, #0
 8001084:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001086:	2301      	movs	r3, #1
 8001088:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800108a:	2301      	movs	r3, #1
 800108c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001096:	463b      	mov	r3, r7
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fad3 	bl	8001644 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800109e:	2004      	movs	r0, #4
 80010a0:	f000 fab0 	bl	8001604 <HAL_MPU_Enable>

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x44>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x44>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x44>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x44>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x44>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ae      	sub	sp, #184	; 0xb8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2290      	movs	r2, #144	; 0x90
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f8bd 	bl	80042a0 <memset>
  if(huart->Instance==USART3)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HAL_UART_MspInit+0xc4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d144      	bne.n	80011ba <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4618      	mov	r0, r3
 8001140:	f001 f9ca 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800114a:	f7ff ffaf 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_UART_MspInit+0xc8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001198:	2307      	movs	r3, #7
 800119a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <HAL_UART_MspInit+0xcc>)
 80011a6:	f000 fb23 	bl	80017f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2027      	movs	r0, #39	; 0x27
 80011b0:	f000 f9d9 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011b4:	2027      	movs	r0, #39	; 0x27
 80011b6:	f000 f9f2 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	37b8      	adds	r7, #184	; 0xb8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40004800 	.word	0x40004800
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020c00 	.word	0x40020c00

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f884 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <USART3_IRQHandler+0x10>)
 800122a:	f001 fe0f 	bl	8002e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000008c 	.word	0x2000008c

08001238 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f002 ffe5 	bl	8004258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fae5 	bl	800085c <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a0:	08004674 	.word	0x08004674
  ldr r2, =_sbss
 80012a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012a8:	200001d8 	.word	0x200001d8

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>

080012ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f94c 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b8:	200f      	movs	r0, #15
 80012ba:	f000 f805 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012be:	f7ff fefb 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f967 	bl	80015ba <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f92f 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20000008 	.word	0x20000008
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008
 800134c:	200001d4 	.word	0x200001d4

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200001d4 	.word	0x200001d4

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008

080013b0 <__NVIC_SetPriorityGrouping>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x40>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00
 80013f4:	05fa0000 	.word	0x05fa0000

080013f8 <__NVIC_GetPriorityGrouping>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015d8:	f3bf 8f5f 	dmb	sy
}
 80015dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_MPU_Disable+0x28>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_MPU_Disable+0x28>)
 80015e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_MPU_Disable+0x2c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00
 8001600:	e000ed90 	.word	0xe000ed90

08001604 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_MPU_Enable+0x38>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_MPU_Enable+0x3c>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_MPU_Enable+0x3c>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001622:	f3bf 8f4f 	dsb	sy
}
 8001626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001628:	f3bf 8f6f 	isb	sy
}
 800162c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed90 	.word	0xe000ed90
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	785a      	ldrb	r2, [r3, #1]
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_MPU_ConfigRegion+0x84>)
 8001652:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d029      	beq.n	80016b0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800165c:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <HAL_MPU_ConfigRegion+0x84>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7adb      	ldrb	r3, [r3, #11]
 800166e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001670:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7a9b      	ldrb	r3, [r3, #10]
 8001676:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001678:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b5b      	ldrb	r3, [r3, #13]
 800167e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001680:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7b9b      	ldrb	r3, [r3, #14]
 8001686:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001688:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7bdb      	ldrb	r3, [r3, #15]
 800168e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001690:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7a5b      	ldrb	r3, [r3, #9]
 8001696:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001698:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7a1b      	ldrb	r3, [r3, #8]
 800169e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016a0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016aa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016ac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80016ae:	e005      	b.n	80016bc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_MPU_ConfigRegion+0x84>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_MPU_ConfigRegion+0x84>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed90 	.word	0xe000ed90

080016cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016da:	f7ff fe39 	bl	8001350 <HAL_GetTick>
 80016de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d008      	beq.n	80016fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e052      	b.n	80017a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0216 	bic.w	r2, r2, #22
 800170c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800171c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <HAL_DMA_Abort+0x62>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0208 	bic.w	r2, r2, #8
 800173c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174e:	e013      	b.n	8001778 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001750:	f7ff fdfe 	bl	8001350 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b05      	cmp	r3, #5
 800175c:	d90c      	bls.n	8001778 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2203      	movs	r2, #3
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e015      	b.n	80017a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1e4      	bne.n	8001750 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	223f      	movs	r2, #63	; 0x3f
 800178c:	409a      	lsls	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d004      	beq.n	80017ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00c      	b.n	80017e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2205      	movs	r2, #5
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e175      	b.n	8001afc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8164 	bne.w	8001af6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d005      	beq.n	8001846 <HAL_GPIO_Init+0x56>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d017      	beq.n	80018e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d123      	bne.n	8001938 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80be 	beq.w	8001af6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b66      	ldr	r3, [pc, #408]	; (8001b14 <HAL_GPIO_Init+0x324>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a65      	ldr	r2, [pc, #404]	; (8001b14 <HAL_GPIO_Init+0x324>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_GPIO_Init+0x324>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001992:	4a61      	ldr	r2, [pc, #388]	; (8001b18 <HAL_GPIO_Init+0x328>)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_GPIO_Init+0x32c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d037      	beq.n	8001a2e <HAL_GPIO_Init+0x23e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_GPIO_Init+0x330>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d031      	beq.n	8001a2a <HAL_GPIO_Init+0x23a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a56      	ldr	r2, [pc, #344]	; (8001b24 <HAL_GPIO_Init+0x334>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d02b      	beq.n	8001a26 <HAL_GPIO_Init+0x236>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a55      	ldr	r2, [pc, #340]	; (8001b28 <HAL_GPIO_Init+0x338>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d025      	beq.n	8001a22 <HAL_GPIO_Init+0x232>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a54      	ldr	r2, [pc, #336]	; (8001b2c <HAL_GPIO_Init+0x33c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01f      	beq.n	8001a1e <HAL_GPIO_Init+0x22e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a53      	ldr	r2, [pc, #332]	; (8001b30 <HAL_GPIO_Init+0x340>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d019      	beq.n	8001a1a <HAL_GPIO_Init+0x22a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_GPIO_Init+0x344>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_GPIO_Init+0x226>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <HAL_GPIO_Init+0x348>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00d      	beq.n	8001a12 <HAL_GPIO_Init+0x222>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a50      	ldr	r2, [pc, #320]	; (8001b3c <HAL_GPIO_Init+0x34c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x21e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <HAL_GPIO_Init+0x350>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_GPIO_Init+0x21a>
 8001a06:	2309      	movs	r3, #9
 8001a08:	e012      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	e010      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a0e:	2308      	movs	r3, #8
 8001a10:	e00e      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a16:	2306      	movs	r3, #6
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x240>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a40:	4935      	ldr	r1, [pc, #212]	; (8001b18 <HAL_GPIO_Init+0x328>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a72:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a9c:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_GPIO_Init+0x354>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	f67f ae86 	bls.w	8001810 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40021400 	.word	0x40021400
 8001b34:	40021800 	.word	0x40021800
 8001b38:	40021c00 	.word	0x40021c00
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40022400 	.word	0x40022400
 8001b44:	40013c00 	.word	0x40013c00

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b64:	e003      	b.n	8001b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	041a      	lsls	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	619a      	str	r2, [r3, #24]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e29b      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b96      	ldr	r3, [pc, #600]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be0:	4b93      	ldr	r3, [pc, #588]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62>
 8001bec:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x130>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e275      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x7a>
 8001c1c:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a83      	ldr	r2, [pc, #524]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x9c>
 8001c32:	4b7f      	ldr	r3, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7e      	ldr	r2, [pc, #504]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7b      	ldr	r2, [pc, #492]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xc0>
 8001c56:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a72      	ldr	r2, [pc, #456]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd8>
 8001c70:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6e      	ldr	r2, [pc, #440]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6b      	ldr	r2, [pc, #428]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb5e 	bl	8001350 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fb5a 	bl	8001350 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e229      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe8>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fb4a 	bl	8001350 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fb46 	bl	8001350 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e215      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x110>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d069      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x190>
 8001d06:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x17a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1e9      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	493d      	ldr	r1, [pc, #244]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e040      	b.n	8001dc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d023      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a38      	ldr	r2, [pc, #224]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fafc 	bl	8001350 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff faf8 	bl	8001350 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1c7      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4929      	ldr	r1, [pc, #164]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
 8001d8e:	e018      	b.n	8001dc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fad8 	bl	8001350 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fad4 	bl	8001350 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1a3      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d038      	beq.n	8001e40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d019      	beq.n	8001e0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff fab5 	bl	8001350 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dea:	f7ff fab1 	bl	8001350 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e180      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x23a>
 8001e08:	e01a      	b.n	8001e40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <HAL_RCC_OscConfig+0x280>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fa9b 	bl	8001350 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fa97 	bl	8001350 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d903      	bls.n	8001e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e166      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
 8001e30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b92      	ldr	r3, [pc, #584]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1ee      	bne.n	8001e1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a4 	beq.w	8001f96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b8c      	ldr	r3, [pc, #560]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b89      	ldr	r3, [pc, #548]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a88      	ldr	r2, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b86      	ldr	r3, [pc, #536]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	4b83      	ldr	r3, [pc, #524]	; (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e82:	4b80      	ldr	r3, [pc, #512]	; (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7f      	ldr	r2, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fa5f 	bl	8001350 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff fa5b 	bl	8001350 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b64      	cmp	r3, #100	; 0x64
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e12a      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea8:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x31a>
 8001ebc:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a6f      	ldr	r2, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x33c>
 8001ed2:	4b6b      	ldr	r3, [pc, #428]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a6a      	ldr	r2, [pc, #424]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ede:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a67      	ldr	r2, [pc, #412]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eea:	e01c      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x35e>
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	4a61      	ldr	r2, [pc, #388]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6713      	str	r3, [r2, #112]	; 0x70
 8001f00:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	4a5e      	ldr	r2, [pc, #376]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a5b      	ldr	r2, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d015      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fa0f 	bl	8001350 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff fa0b 	bl	8001350 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0d8      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RCC_OscConfig+0x386>
 8001f58:	e014      	b.n	8001f84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f9f9 	bl	8001350 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff f9f5 	bl	8001350 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0c2      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80ae 	beq.w	80020fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa0:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d06d      	beq.n	8002088 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d14b      	bne.n	800204c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a31      	ldr	r2, [pc, #196]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f9c6 	bl	8001350 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f9c2 	bl	8001350 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e091      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	3b01      	subs	r3, #1
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	071b      	lsls	r3, r3, #28
 8002012:	491b      	ldr	r1, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f994 	bl	8001350 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7ff f990 	bl	8001350 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e05f      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x47c>
 800204a:	e057      	b.n	80020fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff f97a 	bl	8001350 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff f976 	bl	8001350 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e045      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_RCC_OscConfig+0x4d0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x4b0>
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x54c>
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_RCC_OscConfig+0x558>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d030      	beq.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d129      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d122      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d119      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	3b01      	subs	r3, #1
 80020d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d10f      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0d0      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d910      	bls.n	8002154 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 020f 	bic.w	r2, r3, #15
 800213a:	4965      	ldr	r1, [pc, #404]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b8      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a52      	ldr	r2, [pc, #328]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800218e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	494d      	ldr	r1, [pc, #308]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d040      	beq.n	8002230 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d115      	bne.n	80021ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e07f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e073      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3d      	ldr	r3, [pc, #244]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06b      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4936      	ldr	r1, [pc, #216]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002200:	f7ff f8a6 	bl	8001350 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7ff f8a2 	bl	8001350 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e053      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d210      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 020f 	bic.w	r2, r3, #15
 8002246:	4922      	ldr	r1, [pc, #136]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e032      	b.n	80022c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4916      	ldr	r1, [pc, #88]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229e:	f000 f821 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4602      	mov	r2, r0
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	490a      	ldr	r1, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	5ccb      	ldrb	r3, [r1, r3]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1d4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f802 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08004548 	.word	0x08004548
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b090      	sub	sp, #64	; 0x40
 80022ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
 80022f0:	2300      	movs	r3, #0
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCC_GetSysClockFreq+0x180>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d00d      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x40>
 8002308:	2b08      	cmp	r3, #8
 800230a:	f200 80a1 	bhi.w	8002450 <HAL_RCC_GetSysClockFreq+0x16c>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x34>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x3a>
 8002316:	e09b      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_GetSysClockFreq+0x184>)
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800231c:	e09b      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231e:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_GetSysClockFreq+0x188>)
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002322:	e098      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002324:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_RCC_GetSysClockFreq+0x180>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800232e:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <HAL_RCC_GetSysClockFreq+0x180>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d028      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <HAL_RCC_GetSysClockFreq+0x180>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	2200      	movs	r2, #0
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	627a      	str	r2, [r7, #36]	; 0x24
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800234c:	2100      	movs	r1, #0
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_GetSysClockFreq+0x188>)
 8002350:	fb03 f201 	mul.w	r2, r3, r1
 8002354:	2300      	movs	r3, #0
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	4413      	add	r3, r2
 800235c:	4a43      	ldr	r2, [pc, #268]	; (800246c <HAL_RCC_GetSysClockFreq+0x188>)
 800235e:	fba0 1202 	umull	r1, r2, r0, r2
 8002362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002364:	460a      	mov	r2, r1
 8002366:	62ba      	str	r2, [r7, #40]	; 0x28
 8002368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236a:	4413      	add	r3, r2
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800236e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002370:	2200      	movs	r2, #0
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	61fa      	str	r2, [r7, #28]
 8002376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800237a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800237e:	f7fd ff5b 	bl	8000238 <__aeabi_uldivmod>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4613      	mov	r3, r2
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800238a:	e053      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_RCC_GetSysClockFreq+0x180>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	2200      	movs	r2, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	617a      	str	r2, [r7, #20]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800239e:	f04f 0b00 	mov.w	fp, #0
 80023a2:	4652      	mov	r2, sl
 80023a4:	465b      	mov	r3, fp
 80023a6:	f04f 0000 	mov.w	r0, #0
 80023aa:	f04f 0100 	mov.w	r1, #0
 80023ae:	0159      	lsls	r1, r3, #5
 80023b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b4:	0150      	lsls	r0, r2, #5
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	ebb2 080a 	subs.w	r8, r2, sl
 80023be:	eb63 090b 	sbc.w	r9, r3, fp
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023d6:	ebb2 0408 	subs.w	r4, r2, r8
 80023da:	eb63 0509 	sbc.w	r5, r3, r9
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	00eb      	lsls	r3, r5, #3
 80023e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ec:	00e2      	lsls	r2, r4, #3
 80023ee:	4614      	mov	r4, r2
 80023f0:	461d      	mov	r5, r3
 80023f2:	eb14 030a 	adds.w	r3, r4, sl
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	eb45 030b 	adc.w	r3, r5, fp
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800240a:	4629      	mov	r1, r5
 800240c:	028b      	lsls	r3, r1, #10
 800240e:	4621      	mov	r1, r4
 8002410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002414:	4621      	mov	r1, r4
 8002416:	028a      	lsls	r2, r1, #10
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	2200      	movs	r2, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	60fa      	str	r2, [r7, #12]
 8002424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002428:	f7fd ff06 	bl	8000238 <__aeabi_uldivmod>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4613      	mov	r3, r2
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_GetSysClockFreq+0x180>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	3301      	adds	r3, #1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800244e:	e002      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_GetSysClockFreq+0x184>)
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002458:	4618      	mov	r0, r3
 800245a:	3740      	adds	r7, #64	; 0x40
 800245c:	46bd      	mov	sp, r7
 800245e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	00f42400 	.word	0x00f42400
 800246c:	017d7840 	.word	0x017d7840

08002470 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_GetHCLKFreq+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800248c:	f7ff fff0 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0a9b      	lsrs	r3, r3, #10
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4903      	ldr	r1, [pc, #12]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08004558 	.word	0x08004558

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024b4:	f7ff ffdc 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0b5b      	lsrs	r3, r3, #13
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4903      	ldr	r1, [pc, #12]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	08004558 	.word	0x08004558

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002500:	4b69      	ldr	r3, [pc, #420]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a68      	ldr	r2, [pc, #416]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002506:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800250a:	6093      	str	r3, [r2, #8]
 800250c:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	4964      	ldr	r1, [pc, #400]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d017      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002532:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	4959      	ldr	r1, [pc, #356]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002550:	d101      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d017      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800256e:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002574:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	494a      	ldr	r1, [pc, #296]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258c:	d101      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800259a:	2301      	movs	r3, #1
 800259c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 808b 	beq.w	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a39      	ldr	r2, [pc, #228]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
 80025c8:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a34      	ldr	r2, [pc, #208]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e0:	f7fe feb6 	bl	8001350 <HAL_GetTick>
 80025e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7fe feb2 	bl	8001350 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e38f      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025fa:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d035      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	429a      	cmp	r2, r3
 8002622:	d02e      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d114      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fe7a 	bl	8001350 <HAL_GetTick>
 800265c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265e:	e00a      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7fe fe76 	bl	8001350 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e351      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0ee      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800268e:	d111      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800269e:	400b      	ands	r3, r1
 80026a0:	4901      	ldr	r1, [pc, #4]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000
 80026b0:	0ffffcff 	.word	0x0ffffcff
 80026b4:	4bac      	ldr	r3, [pc, #688]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4aab      	ldr	r2, [pc, #684]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026be:	6093      	str	r3, [r2, #8]
 80026c0:	4ba9      	ldr	r3, [pc, #676]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	49a6      	ldr	r1, [pc, #664]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026de:	4ba2      	ldr	r3, [pc, #648]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e4:	4aa0      	ldr	r2, [pc, #640]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026ee:	4b9e      	ldr	r3, [pc, #632]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	499b      	ldr	r1, [pc, #620]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800270c:	4b96      	ldr	r3, [pc, #600]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271a:	4993      	ldr	r1, [pc, #588]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800272e:	4b8e      	ldr	r3, [pc, #568]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800273c:	498a      	ldr	r1, [pc, #552]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275e:	4982      	ldr	r1, [pc, #520]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002772:	4b7d      	ldr	r3, [pc, #500]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4979      	ldr	r1, [pc, #484]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002794:	4b74      	ldr	r3, [pc, #464]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4971      	ldr	r1, [pc, #452]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b6:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f023 020c 	bic.w	r2, r3, #12
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c4:	4968      	ldr	r1, [pc, #416]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027d8:	4b63      	ldr	r3, [pc, #396]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4960      	ldr	r1, [pc, #384]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	4957      	ldr	r1, [pc, #348]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800281c:	4b52      	ldr	r3, [pc, #328]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	494f      	ldr	r1, [pc, #316]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800283e:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	4946      	ldr	r1, [pc, #280]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002860:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	493e      	ldr	r1, [pc, #248]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002882:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002890:	4935      	ldr	r1, [pc, #212]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028a4:	4b30      	ldr	r3, [pc, #192]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b2:	492d      	ldr	r1, [pc, #180]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d011      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028c6:	4b28      	ldr	r3, [pc, #160]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d4:	4924      	ldr	r1, [pc, #144]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e4:	d101      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002914:	4914      	ldr	r1, [pc, #80]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002938:	490b      	ldr	r1, [pc, #44]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00f      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295c:	4902      	ldr	r1, [pc, #8]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002964:	e002      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002978:	4b8a      	ldr	r3, [pc, #552]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	4986      	ldr	r1, [pc, #536]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800299c:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ac:	497d      	ldr	r1, [pc, #500]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d006      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80d6 	beq.w	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029c8:	4b76      	ldr	r3, [pc, #472]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a75      	ldr	r2, [pc, #468]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fe fcbc 	bl	8001350 <HAL_GetTick>
 80029d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029dc:	f7fe fcb8 	bl	8001350 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e195      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ee:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d021      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11d      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4958      	ldr	r1, [pc, #352]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02e      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a74:	d129      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a76:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a84:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8a:	0f1b      	lsrs	r3, r3, #28
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	019a      	lsls	r2, r3, #6
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	071b      	lsls	r3, r3, #28
 8002aaa:	493e      	ldr	r1, [pc, #248]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab8:	f023 021f 	bic.w	r2, r3, #31
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	4938      	ldr	r1, [pc, #224]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01d      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ad6:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002adc:	0e1b      	lsrs	r3, r3, #24
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae4:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	0f1b      	lsrs	r3, r3, #28
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	019a      	lsls	r2, r3, #6
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	4926      	ldr	r1, [pc, #152]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d011      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	019a      	lsls	r2, r3, #6
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	071b      	lsls	r3, r3, #28
 8002b3a:	491a      	ldr	r1, [pc, #104]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4e:	f7fe fbff 	bl	8001350 <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b56:	f7fe fbfb 	bl	8001350 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0d8      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	f040 80ce 	bne.w	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b88:	f7fe fbe2 	bl	8001350 <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b90:	f7fe fbde 	bl	8001350 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d904      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0bb      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba8:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb4:	d0ec      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d02e      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d12a      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bde:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bec:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	0f1b      	lsrs	r3, r3, #28
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	019a      	lsls	r2, r3, #6
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	061b      	lsls	r3, r3, #24
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	4944      	ldr	r1, [pc, #272]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c1a:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	493d      	ldr	r1, [pc, #244]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d022      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c48:	d11d      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	0e1b      	lsrs	r3, r3, #24
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c58:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	0f1b      	lsrs	r3, r3, #28
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	019a      	lsls	r2, r3, #6
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	071b      	lsls	r3, r3, #28
 8002c7e:	4929      	ldr	r1, [pc, #164]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d028      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	0e1b      	lsrs	r3, r3, #24
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ca0:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	019a      	lsls	r2, r3, #6
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	4917      	ldr	r1, [pc, #92]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	4911      	ldr	r1, [pc, #68]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fb2e 	bl	8001350 <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cf8:	f7fe fb2a 	bl	8001350 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e007      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d16:	d1ef      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e040      	b.n	8002dbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe f9d8 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fb82 	bl	8003470 <UART_SetConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e022      	b.n	8002dbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fdda 	bl	8003938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fe61 	bl	8003a7c <UART_CheckIdleState>
 8002dba:	4603      	mov	r3, r0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d132      	bne.n	8002e42 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_UART_Receive_IT+0x24>
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e02b      	b.n	8002e44 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d018      	beq.n	8002e32 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	69f9      	ldr	r1, [r7, #28]
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e6      	bne.n	8002e00 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 ff33 	bl	8003ca4 <UART_Start_Receive_IT>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	e000      	b.n	8002e44 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b0ba      	sub	sp, #232	; 0xe8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e76:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d115      	bne.n	8002eb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00f      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 82ac 	beq.w	8003402 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
      }
      return;
 8002eb2:	e2a6      	b.n	8003402 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8117 	beq.w	80030ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ece:	4b85      	ldr	r3, [pc, #532]	; (80030e4 <HAL_UART_IRQHandler+0x298>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 810a 	beq.w	80030ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d011      	beq.n	8002f08 <HAL_UART_IRQHandler+0xbc>
 8002ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <HAL_UART_IRQHandler+0xec>
 8002f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2202      	movs	r2, #2
 8002f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2e:	f043 0204 	orr.w	r2, r3, #4
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d011      	beq.n	8002f68 <HAL_UART_IRQHandler+0x11c>
 8002f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2204      	movs	r2, #4
 8002f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5e:	f043 0202 	orr.w	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00b      	beq.n	8002fa4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9a:	f043 0208 	orr.w	r2, r3, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x18a>
 8002fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8212 	beq.w	8003406 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d005      	beq.n	800302e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800302a:	2b00      	cmp	r3, #0
 800302c:	d04f      	beq.n	80030ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fefe 	bl	8003e30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d141      	bne.n	80030c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3308      	adds	r3, #8
 8003048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800305c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3308      	adds	r3, #8
 800306a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800306e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800307a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1d9      	bne.n	8003042 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	2b00      	cmp	r3, #0
 8003094:	d013      	beq.n	80030be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <HAL_UART_IRQHandler+0x29c>)
 800309c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fb82 	bl	80017ac <HAL_DMA_Abort_IT>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d017      	beq.n	80030de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030b8:	4610      	mov	r0, r2
 80030ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	e00f      	b.n	80030de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f9b6 	bl	8003430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c4:	e00b      	b.n	80030de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f9b2 	bl	8003430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030cc:	e007      	b.n	80030de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f9ae 	bl	8003430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80030dc:	e193      	b.n	8003406 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030de:	bf00      	nop
    return;
 80030e0:	e191      	b.n	8003406 <HAL_UART_IRQHandler+0x5ba>
 80030e2:	bf00      	nop
 80030e4:	04000120 	.word	0x04000120
 80030e8:	08003ef9 	.word	0x08003ef9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	f040 814c 	bne.w	800338e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8145 	beq.w	800338e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 813e 	beq.w	800338e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2210      	movs	r2, #16
 8003118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	f040 80b6 	bne.w	8003296 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003136:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8165 	beq.w	800340a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800314a:	429a      	cmp	r2, r3
 800314c:	f080 815d 	bcs.w	800340a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003164:	f000 8086 	beq.w	8003274 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800317c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003196:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800319e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1da      	bne.n	8003168 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3308      	adds	r3, #8
 80031b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3308      	adds	r3, #8
 80031d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e1      	bne.n	80031b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3308      	adds	r3, #8
 80031f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e3      	bne.n	80031ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003244:	f023 0310 	bic.w	r3, r3, #16
 8003248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003256:	65bb      	str	r3, [r7, #88]	; 0x58
 8003258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800325c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e4      	bne.n	8003234 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fa2c 	bl	80016cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003286:	b29b      	uxth	r3, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	b29b      	uxth	r3, r3
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8d8 	bl	8003444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003294:	e0b9      	b.n	800340a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80ab 	beq.w	800340e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80032b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a6 	beq.w	800340e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032e4:	647b      	str	r3, [r7, #68]	; 0x44
 80032e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e4      	bne.n	80032c2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	623b      	str	r3, [r7, #32]
   return(result);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800331c:	633a      	str	r2, [r7, #48]	; 0x30
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e3      	bne.n	80032f8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	60fb      	str	r3, [r7, #12]
   return(result);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f023 0310 	bic.w	r3, r3, #16
 8003358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	69b9      	ldr	r1, [r7, #24]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	617b      	str	r3, [r7, #20]
   return(result);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e4      	bne.n	8003344 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f85c 	bl	8003444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800338c:	e03f      	b.n	800340e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00e      	beq.n	80033b8 <HAL_UART_IRQHandler+0x56c>
 800339a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f853 	bl	800345c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033b6:	e02d      	b.n	8003414 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01c      	beq.n	8003412 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
    }
    return;
 80033e0:	e017      	b.n	8003412 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <HAL_UART_IRQHandler+0x5c8>
 80033ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fd92 	bl	8003f24 <UART_EndTransmit_IT>
    return;
 8003400:	e008      	b.n	8003414 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003402:	bf00      	nop
 8003404:	e006      	b.n	8003414 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003406:	bf00      	nop
 8003408:	e004      	b.n	8003414 <HAL_UART_IRQHandler+0x5c8>
      return;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <HAL_UART_IRQHandler+0x5c8>
      return;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003412:	bf00      	nop
  }

}
 8003414:	37e8      	adds	r7, #232	; 0xe8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop

0800341c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4ba6      	ldr	r3, [pc, #664]	; (8003734 <UART_SetConfig+0x2c4>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a94      	ldr	r2, [pc, #592]	; (8003738 <UART_SetConfig+0x2c8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d120      	bne.n	800352e <UART_SetConfig+0xbe>
 80034ec:	4b93      	ldr	r3, [pc, #588]	; (800373c <UART_SetConfig+0x2cc>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d816      	bhi.n	8003528 <UART_SetConfig+0xb8>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0x90>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003511 	.word	0x08003511
 8003504:	0800351d 	.word	0x0800351d
 8003508:	08003517 	.word	0x08003517
 800350c:	08003523 	.word	0x08003523
 8003510:	2301      	movs	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e150      	b.n	80037b8 <UART_SetConfig+0x348>
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e14d      	b.n	80037b8 <UART_SetConfig+0x348>
 800351c:	2304      	movs	r3, #4
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e14a      	b.n	80037b8 <UART_SetConfig+0x348>
 8003522:	2308      	movs	r3, #8
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e147      	b.n	80037b8 <UART_SetConfig+0x348>
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e144      	b.n	80037b8 <UART_SetConfig+0x348>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a83      	ldr	r2, [pc, #524]	; (8003740 <UART_SetConfig+0x2d0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d132      	bne.n	800359e <UART_SetConfig+0x12e>
 8003538:	4b80      	ldr	r3, [pc, #512]	; (800373c <UART_SetConfig+0x2cc>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d828      	bhi.n	8003598 <UART_SetConfig+0x128>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <UART_SetConfig+0xdc>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003581 	.word	0x08003581
 8003550:	08003599 	.word	0x08003599
 8003554:	08003599 	.word	0x08003599
 8003558:	08003599 	.word	0x08003599
 800355c:	0800358d 	.word	0x0800358d
 8003560:	08003599 	.word	0x08003599
 8003564:	08003599 	.word	0x08003599
 8003568:	08003599 	.word	0x08003599
 800356c:	08003587 	.word	0x08003587
 8003570:	08003599 	.word	0x08003599
 8003574:	08003599 	.word	0x08003599
 8003578:	08003599 	.word	0x08003599
 800357c:	08003593 	.word	0x08003593
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e118      	b.n	80037b8 <UART_SetConfig+0x348>
 8003586:	2302      	movs	r3, #2
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e115      	b.n	80037b8 <UART_SetConfig+0x348>
 800358c:	2304      	movs	r3, #4
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e112      	b.n	80037b8 <UART_SetConfig+0x348>
 8003592:	2308      	movs	r3, #8
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e10f      	b.n	80037b8 <UART_SetConfig+0x348>
 8003598:	2310      	movs	r3, #16
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e10c      	b.n	80037b8 <UART_SetConfig+0x348>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a68      	ldr	r2, [pc, #416]	; (8003744 <UART_SetConfig+0x2d4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <UART_SetConfig+0x17a>
 80035a8:	4b64      	ldr	r3, [pc, #400]	; (800373c <UART_SetConfig+0x2cc>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035b2:	2b30      	cmp	r3, #48	; 0x30
 80035b4:	d013      	beq.n	80035de <UART_SetConfig+0x16e>
 80035b6:	2b30      	cmp	r3, #48	; 0x30
 80035b8:	d814      	bhi.n	80035e4 <UART_SetConfig+0x174>
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d009      	beq.n	80035d2 <UART_SetConfig+0x162>
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d810      	bhi.n	80035e4 <UART_SetConfig+0x174>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <UART_SetConfig+0x15c>
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d006      	beq.n	80035d8 <UART_SetConfig+0x168>
 80035ca:	e00b      	b.n	80035e4 <UART_SetConfig+0x174>
 80035cc:	2300      	movs	r3, #0
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e0f2      	b.n	80037b8 <UART_SetConfig+0x348>
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e0ef      	b.n	80037b8 <UART_SetConfig+0x348>
 80035d8:	2304      	movs	r3, #4
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e0ec      	b.n	80037b8 <UART_SetConfig+0x348>
 80035de:	2308      	movs	r3, #8
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e0e9      	b.n	80037b8 <UART_SetConfig+0x348>
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e0e6      	b.n	80037b8 <UART_SetConfig+0x348>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a56      	ldr	r2, [pc, #344]	; (8003748 <UART_SetConfig+0x2d8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d120      	bne.n	8003636 <UART_SetConfig+0x1c6>
 80035f4:	4b51      	ldr	r3, [pc, #324]	; (800373c <UART_SetConfig+0x2cc>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003600:	d013      	beq.n	800362a <UART_SetConfig+0x1ba>
 8003602:	2bc0      	cmp	r3, #192	; 0xc0
 8003604:	d814      	bhi.n	8003630 <UART_SetConfig+0x1c0>
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d009      	beq.n	800361e <UART_SetConfig+0x1ae>
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d810      	bhi.n	8003630 <UART_SetConfig+0x1c0>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <UART_SetConfig+0x1a8>
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d006      	beq.n	8003624 <UART_SetConfig+0x1b4>
 8003616:	e00b      	b.n	8003630 <UART_SetConfig+0x1c0>
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e0cc      	b.n	80037b8 <UART_SetConfig+0x348>
 800361e:	2302      	movs	r3, #2
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e0c9      	b.n	80037b8 <UART_SetConfig+0x348>
 8003624:	2304      	movs	r3, #4
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e0c6      	b.n	80037b8 <UART_SetConfig+0x348>
 800362a:	2308      	movs	r3, #8
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e0c3      	b.n	80037b8 <UART_SetConfig+0x348>
 8003630:	2310      	movs	r3, #16
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e0c0      	b.n	80037b8 <UART_SetConfig+0x348>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a44      	ldr	r2, [pc, #272]	; (800374c <UART_SetConfig+0x2dc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d125      	bne.n	800368c <UART_SetConfig+0x21c>
 8003640:	4b3e      	ldr	r3, [pc, #248]	; (800373c <UART_SetConfig+0x2cc>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364e:	d017      	beq.n	8003680 <UART_SetConfig+0x210>
 8003650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003654:	d817      	bhi.n	8003686 <UART_SetConfig+0x216>
 8003656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365a:	d00b      	beq.n	8003674 <UART_SetConfig+0x204>
 800365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003660:	d811      	bhi.n	8003686 <UART_SetConfig+0x216>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <UART_SetConfig+0x1fe>
 8003666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366a:	d006      	beq.n	800367a <UART_SetConfig+0x20a>
 800366c:	e00b      	b.n	8003686 <UART_SetConfig+0x216>
 800366e:	2300      	movs	r3, #0
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e0a1      	b.n	80037b8 <UART_SetConfig+0x348>
 8003674:	2302      	movs	r3, #2
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e09e      	b.n	80037b8 <UART_SetConfig+0x348>
 800367a:	2304      	movs	r3, #4
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e09b      	b.n	80037b8 <UART_SetConfig+0x348>
 8003680:	2308      	movs	r3, #8
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e098      	b.n	80037b8 <UART_SetConfig+0x348>
 8003686:	2310      	movs	r3, #16
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e095      	b.n	80037b8 <UART_SetConfig+0x348>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <UART_SetConfig+0x2e0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d125      	bne.n	80036e2 <UART_SetConfig+0x272>
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <UART_SetConfig+0x2cc>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a4:	d017      	beq.n	80036d6 <UART_SetConfig+0x266>
 80036a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036aa:	d817      	bhi.n	80036dc <UART_SetConfig+0x26c>
 80036ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b0:	d00b      	beq.n	80036ca <UART_SetConfig+0x25a>
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b6:	d811      	bhi.n	80036dc <UART_SetConfig+0x26c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <UART_SetConfig+0x254>
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d006      	beq.n	80036d0 <UART_SetConfig+0x260>
 80036c2:	e00b      	b.n	80036dc <UART_SetConfig+0x26c>
 80036c4:	2301      	movs	r3, #1
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e076      	b.n	80037b8 <UART_SetConfig+0x348>
 80036ca:	2302      	movs	r3, #2
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e073      	b.n	80037b8 <UART_SetConfig+0x348>
 80036d0:	2304      	movs	r3, #4
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e070      	b.n	80037b8 <UART_SetConfig+0x348>
 80036d6:	2308      	movs	r3, #8
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e06d      	b.n	80037b8 <UART_SetConfig+0x348>
 80036dc:	2310      	movs	r3, #16
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e06a      	b.n	80037b8 <UART_SetConfig+0x348>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <UART_SetConfig+0x2e4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d138      	bne.n	800375e <UART_SetConfig+0x2ee>
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <UART_SetConfig+0x2cc>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036fa:	d017      	beq.n	800372c <UART_SetConfig+0x2bc>
 80036fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003700:	d82a      	bhi.n	8003758 <UART_SetConfig+0x2e8>
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003706:	d00b      	beq.n	8003720 <UART_SetConfig+0x2b0>
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d824      	bhi.n	8003758 <UART_SetConfig+0x2e8>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <UART_SetConfig+0x2aa>
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003716:	d006      	beq.n	8003726 <UART_SetConfig+0x2b6>
 8003718:	e01e      	b.n	8003758 <UART_SetConfig+0x2e8>
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e04b      	b.n	80037b8 <UART_SetConfig+0x348>
 8003720:	2302      	movs	r3, #2
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e048      	b.n	80037b8 <UART_SetConfig+0x348>
 8003726:	2304      	movs	r3, #4
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e045      	b.n	80037b8 <UART_SetConfig+0x348>
 800372c:	2308      	movs	r3, #8
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e042      	b.n	80037b8 <UART_SetConfig+0x348>
 8003732:	bf00      	nop
 8003734:	efff69f3 	.word	0xefff69f3
 8003738:	40011000 	.word	0x40011000
 800373c:	40023800 	.word	0x40023800
 8003740:	40004400 	.word	0x40004400
 8003744:	40004800 	.word	0x40004800
 8003748:	40004c00 	.word	0x40004c00
 800374c:	40005000 	.word	0x40005000
 8003750:	40011400 	.word	0x40011400
 8003754:	40007800 	.word	0x40007800
 8003758:	2310      	movs	r3, #16
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e02c      	b.n	80037b8 <UART_SetConfig+0x348>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a72      	ldr	r2, [pc, #456]	; (800392c <UART_SetConfig+0x4bc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d125      	bne.n	80037b4 <UART_SetConfig+0x344>
 8003768:	4b71      	ldr	r3, [pc, #452]	; (8003930 <UART_SetConfig+0x4c0>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003772:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003776:	d017      	beq.n	80037a8 <UART_SetConfig+0x338>
 8003778:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800377c:	d817      	bhi.n	80037ae <UART_SetConfig+0x33e>
 800377e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003782:	d00b      	beq.n	800379c <UART_SetConfig+0x32c>
 8003784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003788:	d811      	bhi.n	80037ae <UART_SetConfig+0x33e>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <UART_SetConfig+0x326>
 800378e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003792:	d006      	beq.n	80037a2 <UART_SetConfig+0x332>
 8003794:	e00b      	b.n	80037ae <UART_SetConfig+0x33e>
 8003796:	2300      	movs	r3, #0
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e00d      	b.n	80037b8 <UART_SetConfig+0x348>
 800379c:	2302      	movs	r3, #2
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e00a      	b.n	80037b8 <UART_SetConfig+0x348>
 80037a2:	2304      	movs	r3, #4
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e007      	b.n	80037b8 <UART_SetConfig+0x348>
 80037a8:	2308      	movs	r3, #8
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e004      	b.n	80037b8 <UART_SetConfig+0x348>
 80037ae:	2310      	movs	r3, #16
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e001      	b.n	80037b8 <UART_SetConfig+0x348>
 80037b4:	2310      	movs	r3, #16
 80037b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c0:	d15b      	bne.n	800387a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d828      	bhi.n	800381a <UART_SetConfig+0x3aa>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <UART_SetConfig+0x360>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	08003805 	.word	0x08003805
 80037dc:	0800381b 	.word	0x0800381b
 80037e0:	0800380b 	.word	0x0800380b
 80037e4:	0800381b 	.word	0x0800381b
 80037e8:	0800381b 	.word	0x0800381b
 80037ec:	0800381b 	.word	0x0800381b
 80037f0:	08003813 	.word	0x08003813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f4:	f7fe fe48 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 80037f8:	61b8      	str	r0, [r7, #24]
        break;
 80037fa:	e013      	b.n	8003824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037fc:	f7fe fe58 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8003800:	61b8      	str	r0, [r7, #24]
        break;
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003804:	4b4b      	ldr	r3, [pc, #300]	; (8003934 <UART_SetConfig+0x4c4>)
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e00c      	b.n	8003824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380a:	f7fe fd6b 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800380e:	61b8      	str	r0, [r7, #24]
        break;
 8003810:	e008      	b.n	8003824 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003816:	61bb      	str	r3, [r7, #24]
        break;
 8003818:	e004      	b.n	8003824 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	77bb      	strb	r3, [r7, #30]
        break;
 8003822:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d074      	beq.n	8003914 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	005a      	lsls	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	441a      	add	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	d916      	bls.n	8003874 <UART_SetConfig+0x404>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384c:	d212      	bcs.n	8003874 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f023 030f 	bic.w	r3, r3, #15
 8003856:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	b29b      	uxth	r3, r3
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	b29a      	uxth	r2, r3
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	4313      	orrs	r3, r2
 8003868:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	89fa      	ldrh	r2, [r7, #14]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e04f      	b.n	8003914 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	77bb      	strb	r3, [r7, #30]
 8003878:	e04c      	b.n	8003914 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387a:	7ffb      	ldrb	r3, [r7, #31]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d828      	bhi.n	80038d2 <UART_SetConfig+0x462>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0x418>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	080038ad 	.word	0x080038ad
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038c3 	.word	0x080038c3
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038d3 	.word	0x080038d3
 80038a8:	080038cb 	.word	0x080038cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7fe fdec 	bl	8002488 <HAL_RCC_GetPCLK1Freq>
 80038b0:	61b8      	str	r0, [r7, #24]
        break;
 80038b2:	e013      	b.n	80038dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7fe fdfc 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 80038b8:	61b8      	str	r0, [r7, #24]
        break;
 80038ba:	e00f      	b.n	80038dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <UART_SetConfig+0x4c4>)
 80038be:	61bb      	str	r3, [r7, #24]
        break;
 80038c0:	e00c      	b.n	80038dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7fe fd0f 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80038c6:	61b8      	str	r0, [r7, #24]
        break;
 80038c8:	e008      	b.n	80038dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	61bb      	str	r3, [r7, #24]
        break;
 80038d0:	e004      	b.n	80038dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	77bb      	strb	r3, [r7, #30]
        break;
 80038da:	bf00      	nop
    }

    if (pclk != 0U)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	085a      	lsrs	r2, r3, #1
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d909      	bls.n	8003910 <UART_SetConfig+0x4a0>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d205      	bcs.n	8003910 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	e001      	b.n	8003914 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003920:	7fbb      	ldrb	r3, [r7, #30]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40007c00 	.word	0x40007c00
 8003930:	40023800 	.word	0x40023800
 8003934:	00f42400 	.word	0x00f42400

08003938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01a      	beq.n	8003a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a36:	d10a      	bne.n	8003a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a8c:	f7fd fc60 	bl	8001350 <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d10e      	bne.n	8003abe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f831 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e027      	b.n	8003b0e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d10e      	bne.n	8003aea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f81b 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e011      	b.n	8003b0e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b09c      	sub	sp, #112	; 0x70
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	4613      	mov	r3, r2
 8003b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	e0a7      	b.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	f000 80a3 	beq.w	8003c78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fd fc0d 	bl	8001350 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13f      	bne.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e6      	bne.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e068      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d050      	beq.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be4:	d148      	bne.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e6      	bne.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c42:	623a      	str	r2, [r7, #32]
 8003c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	69f9      	ldr	r1, [r7, #28]
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e010      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	f43f af48 	beq.w	8003b28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3770      	adds	r7, #112	; 0x70
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b097      	sub	sp, #92	; 0x5c
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd6:	d10e      	bne.n	8003cf6 <UART_Start_Receive_IT+0x52>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <UART_Start_Receive_IT+0x48>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ce6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cea:	e02d      	b.n	8003d48 <UART_Start_Receive_IT+0xa4>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	22ff      	movs	r2, #255	; 0xff
 8003cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf4:	e028      	b.n	8003d48 <UART_Start_Receive_IT+0xa4>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <UART_Start_Receive_IT+0x76>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <UART_Start_Receive_IT+0x6c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	22ff      	movs	r2, #255	; 0xff
 8003d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d0e:	e01b      	b.n	8003d48 <UART_Start_Receive_IT+0xa4>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	227f      	movs	r2, #127	; 0x7f
 8003d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d18:	e016      	b.n	8003d48 <UART_Start_Receive_IT+0xa4>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d22:	d10d      	bne.n	8003d40 <UART_Start_Receive_IT+0x9c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <UART_Start_Receive_IT+0x92>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	227f      	movs	r2, #127	; 0x7f
 8003d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d34:	e008      	b.n	8003d48 <UART_Start_Receive_IT+0xa4>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	223f      	movs	r2, #63	; 0x3f
 8003d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d3e:	e003      	b.n	8003d48 <UART_Start_Receive_IT+0xa4>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2222      	movs	r2, #34	; 0x22
 8003d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3308      	adds	r3, #8
 8003d76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d78:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d107      	bne.n	8003da6 <UART_Start_Receive_IT+0x102>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <UART_Start_Receive_IT+0x184>)
 8003da2:	669a      	str	r2, [r3, #104]	; 0x68
 8003da4:	e002      	b.n	8003dac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a20      	ldr	r2, [pc, #128]	; (8003e2c <UART_Start_Receive_IT+0x188>)
 8003daa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d019      	beq.n	8003de8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e6      	bne.n	8003db4 <UART_Start_Receive_IT+0x110>
 8003de6:	e018      	b.n	8003e1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	613b      	str	r3, [r7, #16]
   return(result);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f043 0320 	orr.w	r3, r3, #32
 8003dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	69f9      	ldr	r1, [r7, #28]
 8003e0c:	6a3a      	ldr	r2, [r7, #32]
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e6      	bne.n	8003de8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	375c      	adds	r7, #92	; 0x5c
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	080040df 	.word	0x080040df
 8003e2c:	08003f79 	.word	0x08003f79

08003e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b095      	sub	sp, #84	; 0x54
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40
 8003e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d118      	bne.n	8003ed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f023 0310 	bic.w	r3, r3, #16
 8003eba:	647b      	str	r3, [r7, #68]	; 0x44
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6979      	ldr	r1, [r7, #20]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e6      	bne.n	8003ea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003eec:	bf00      	nop
 8003eee:	3754      	adds	r7, #84	; 0x54
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fa8a 	bl	8003430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	613b      	str	r3, [r7, #16]
   return(result);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fa56 	bl	800341c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f70:	bf00      	nop
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b096      	sub	sp, #88	; 0x58
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f90:	2b22      	cmp	r3, #34	; 0x22
 8003f92:	f040 8098 	bne.w	80040c6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fa0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003fa4:	b2d9      	uxtb	r1, r3
 8003fa6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d17b      	bne.n	80040d6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ffe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e6      	bne.n	8003fde <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	623b      	str	r3, [r7, #32]
   return(result);
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3308      	adds	r3, #8
 800402e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004030:	633a      	str	r2, [r7, #48]	; 0x30
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	2b01      	cmp	r3, #1
 800405e:	d12e      	bne.n	80040be <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	60fb      	str	r3, [r7, #12]
   return(result);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0310 	bic.w	r3, r3, #16
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	617b      	str	r3, [r7, #20]
   return(result);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d103      	bne.n	80040ae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2210      	movs	r2, #16
 80040ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff f9c4 	bl	8003444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040bc:	e00b      	b.n	80040d6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc ff9c 	bl	8000ffc <HAL_UART_RxCpltCallback>
}
 80040c4:	e007      	b.n	80040d6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0208 	orr.w	r2, r2, #8
 80040d4:	619a      	str	r2, [r3, #24]
}
 80040d6:	bf00      	nop
 80040d8:	3758      	adds	r7, #88	; 0x58
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b096      	sub	sp, #88	; 0x58
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f6:	2b22      	cmp	r3, #34	; 0x22
 80040f8:	f040 8098 	bne.w	800422c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800410c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004110:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004114:	4013      	ands	r3, r2
 8004116:	b29a      	uxth	r2, r3
 8004118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d17b      	bne.n	800423c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
 8004164:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e6      	bne.n	8004144 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	61fb      	str	r3, [r7, #28]
   return(result);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800419c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e5      	bne.n	8004176 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d12e      	bne.n	8004224 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f023 0310 	bic.w	r3, r3, #16
 80041e0:	647b      	str	r3, [r7, #68]	; 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6979      	ldr	r1, [r7, #20]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	613b      	str	r3, [r7, #16]
   return(result);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e6      	bne.n	80041cc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b10      	cmp	r3, #16
 800420a:	d103      	bne.n	8004214 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2210      	movs	r2, #16
 8004212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff f911 	bl	8003444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004222:	e00b      	b.n	800423c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fc fee9 	bl	8000ffc <HAL_UART_RxCpltCallback>
}
 800422a:	e007      	b.n	800423c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0208 	orr.w	r2, r2, #8
 800423a:	619a      	str	r2, [r3, #24]
}
 800423c:	bf00      	nop
 800423e:	3758      	adds	r7, #88	; 0x58
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <atoi>:
 8004244:	220a      	movs	r2, #10
 8004246:	2100      	movs	r1, #0
 8004248:	f000 b8d6 	b.w	80043f8 <strtol>

0800424c <__errno>:
 800424c:	4b01      	ldr	r3, [pc, #4]	; (8004254 <__errno+0x8>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000000c 	.word	0x2000000c

08004258 <__libc_init_array>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4d0d      	ldr	r5, [pc, #52]	; (8004290 <__libc_init_array+0x38>)
 800425c:	4c0d      	ldr	r4, [pc, #52]	; (8004294 <__libc_init_array+0x3c>)
 800425e:	1b64      	subs	r4, r4, r5
 8004260:	10a4      	asrs	r4, r4, #2
 8004262:	2600      	movs	r6, #0
 8004264:	42a6      	cmp	r6, r4
 8004266:	d109      	bne.n	800427c <__libc_init_array+0x24>
 8004268:	4d0b      	ldr	r5, [pc, #44]	; (8004298 <__libc_init_array+0x40>)
 800426a:	4c0c      	ldr	r4, [pc, #48]	; (800429c <__libc_init_array+0x44>)
 800426c:	f000 f948 	bl	8004500 <_init>
 8004270:	1b64      	subs	r4, r4, r5
 8004272:	10a4      	asrs	r4, r4, #2
 8004274:	2600      	movs	r6, #0
 8004276:	42a6      	cmp	r6, r4
 8004278:	d105      	bne.n	8004286 <__libc_init_array+0x2e>
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004280:	4798      	blx	r3
 8004282:	3601      	adds	r6, #1
 8004284:	e7ee      	b.n	8004264 <__libc_init_array+0xc>
 8004286:	f855 3b04 	ldr.w	r3, [r5], #4
 800428a:	4798      	blx	r3
 800428c:	3601      	adds	r6, #1
 800428e:	e7f2      	b.n	8004276 <__libc_init_array+0x1e>
 8004290:	0800466c 	.word	0x0800466c
 8004294:	0800466c 	.word	0x0800466c
 8004298:	0800466c 	.word	0x0800466c
 800429c:	08004670 	.word	0x08004670

080042a0 <memset>:
 80042a0:	4402      	add	r2, r0
 80042a2:	4603      	mov	r3, r0
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d100      	bne.n	80042aa <memset+0xa>
 80042a8:	4770      	bx	lr
 80042aa:	f803 1b01 	strb.w	r1, [r3], #1
 80042ae:	e7f9      	b.n	80042a4 <memset+0x4>

080042b0 <strchr>:
 80042b0:	b2c9      	uxtb	r1, r1
 80042b2:	4603      	mov	r3, r0
 80042b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b8:	b11a      	cbz	r2, 80042c2 <strchr+0x12>
 80042ba:	428a      	cmp	r2, r1
 80042bc:	d1f9      	bne.n	80042b2 <strchr+0x2>
 80042be:	4618      	mov	r0, r3
 80042c0:	4770      	bx	lr
 80042c2:	2900      	cmp	r1, #0
 80042c4:	bf18      	it	ne
 80042c6:	2300      	movne	r3, #0
 80042c8:	e7f9      	b.n	80042be <strchr+0xe>

080042ca <strncmp>:
 80042ca:	b510      	push	{r4, lr}
 80042cc:	b17a      	cbz	r2, 80042ee <strncmp+0x24>
 80042ce:	4603      	mov	r3, r0
 80042d0:	3901      	subs	r1, #1
 80042d2:	1884      	adds	r4, r0, r2
 80042d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80042d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80042dc:	4290      	cmp	r0, r2
 80042de:	d101      	bne.n	80042e4 <strncmp+0x1a>
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	d101      	bne.n	80042e8 <strncmp+0x1e>
 80042e4:	1a80      	subs	r0, r0, r2
 80042e6:	bd10      	pop	{r4, pc}
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1f3      	bne.n	80042d4 <strncmp+0xa>
 80042ec:	e7fa      	b.n	80042e4 <strncmp+0x1a>
 80042ee:	4610      	mov	r0, r2
 80042f0:	e7f9      	b.n	80042e6 <strncmp+0x1c>
	...

080042f4 <_strtol_l.constprop.0>:
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fa:	d001      	beq.n	8004300 <_strtol_l.constprop.0+0xc>
 80042fc:	2b24      	cmp	r3, #36	; 0x24
 80042fe:	d906      	bls.n	800430e <_strtol_l.constprop.0+0x1a>
 8004300:	f7ff ffa4 	bl	800424c <__errno>
 8004304:	2316      	movs	r3, #22
 8004306:	6003      	str	r3, [r0, #0]
 8004308:	2000      	movs	r0, #0
 800430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80043f4 <_strtol_l.constprop.0+0x100>
 8004312:	460d      	mov	r5, r1
 8004314:	462e      	mov	r6, r5
 8004316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800431a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800431e:	f017 0708 	ands.w	r7, r7, #8
 8004322:	d1f7      	bne.n	8004314 <_strtol_l.constprop.0+0x20>
 8004324:	2c2d      	cmp	r4, #45	; 0x2d
 8004326:	d132      	bne.n	800438e <_strtol_l.constprop.0+0x9a>
 8004328:	782c      	ldrb	r4, [r5, #0]
 800432a:	2701      	movs	r7, #1
 800432c:	1cb5      	adds	r5, r6, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d05b      	beq.n	80043ea <_strtol_l.constprop.0+0xf6>
 8004332:	2b10      	cmp	r3, #16
 8004334:	d109      	bne.n	800434a <_strtol_l.constprop.0+0x56>
 8004336:	2c30      	cmp	r4, #48	; 0x30
 8004338:	d107      	bne.n	800434a <_strtol_l.constprop.0+0x56>
 800433a:	782c      	ldrb	r4, [r5, #0]
 800433c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004340:	2c58      	cmp	r4, #88	; 0x58
 8004342:	d14d      	bne.n	80043e0 <_strtol_l.constprop.0+0xec>
 8004344:	786c      	ldrb	r4, [r5, #1]
 8004346:	2310      	movs	r3, #16
 8004348:	3502      	adds	r5, #2
 800434a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800434e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004352:	f04f 0c00 	mov.w	ip, #0
 8004356:	fbb8 f9f3 	udiv	r9, r8, r3
 800435a:	4666      	mov	r6, ip
 800435c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004360:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004364:	f1be 0f09 	cmp.w	lr, #9
 8004368:	d816      	bhi.n	8004398 <_strtol_l.constprop.0+0xa4>
 800436a:	4674      	mov	r4, lr
 800436c:	42a3      	cmp	r3, r4
 800436e:	dd24      	ble.n	80043ba <_strtol_l.constprop.0+0xc6>
 8004370:	f1bc 0f00 	cmp.w	ip, #0
 8004374:	db1e      	blt.n	80043b4 <_strtol_l.constprop.0+0xc0>
 8004376:	45b1      	cmp	r9, r6
 8004378:	d31c      	bcc.n	80043b4 <_strtol_l.constprop.0+0xc0>
 800437a:	d101      	bne.n	8004380 <_strtol_l.constprop.0+0x8c>
 800437c:	45a2      	cmp	sl, r4
 800437e:	db19      	blt.n	80043b4 <_strtol_l.constprop.0+0xc0>
 8004380:	fb06 4603 	mla	r6, r6, r3, r4
 8004384:	f04f 0c01 	mov.w	ip, #1
 8004388:	f815 4b01 	ldrb.w	r4, [r5], #1
 800438c:	e7e8      	b.n	8004360 <_strtol_l.constprop.0+0x6c>
 800438e:	2c2b      	cmp	r4, #43	; 0x2b
 8004390:	bf04      	itt	eq
 8004392:	782c      	ldrbeq	r4, [r5, #0]
 8004394:	1cb5      	addeq	r5, r6, #2
 8004396:	e7ca      	b.n	800432e <_strtol_l.constprop.0+0x3a>
 8004398:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800439c:	f1be 0f19 	cmp.w	lr, #25
 80043a0:	d801      	bhi.n	80043a6 <_strtol_l.constprop.0+0xb2>
 80043a2:	3c37      	subs	r4, #55	; 0x37
 80043a4:	e7e2      	b.n	800436c <_strtol_l.constprop.0+0x78>
 80043a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80043aa:	f1be 0f19 	cmp.w	lr, #25
 80043ae:	d804      	bhi.n	80043ba <_strtol_l.constprop.0+0xc6>
 80043b0:	3c57      	subs	r4, #87	; 0x57
 80043b2:	e7db      	b.n	800436c <_strtol_l.constprop.0+0x78>
 80043b4:	f04f 3cff 	mov.w	ip, #4294967295
 80043b8:	e7e6      	b.n	8004388 <_strtol_l.constprop.0+0x94>
 80043ba:	f1bc 0f00 	cmp.w	ip, #0
 80043be:	da05      	bge.n	80043cc <_strtol_l.constprop.0+0xd8>
 80043c0:	2322      	movs	r3, #34	; 0x22
 80043c2:	6003      	str	r3, [r0, #0]
 80043c4:	4646      	mov	r6, r8
 80043c6:	b942      	cbnz	r2, 80043da <_strtol_l.constprop.0+0xe6>
 80043c8:	4630      	mov	r0, r6
 80043ca:	e79e      	b.n	800430a <_strtol_l.constprop.0+0x16>
 80043cc:	b107      	cbz	r7, 80043d0 <_strtol_l.constprop.0+0xdc>
 80043ce:	4276      	negs	r6, r6
 80043d0:	2a00      	cmp	r2, #0
 80043d2:	d0f9      	beq.n	80043c8 <_strtol_l.constprop.0+0xd4>
 80043d4:	f1bc 0f00 	cmp.w	ip, #0
 80043d8:	d000      	beq.n	80043dc <_strtol_l.constprop.0+0xe8>
 80043da:	1e69      	subs	r1, r5, #1
 80043dc:	6011      	str	r1, [r2, #0]
 80043de:	e7f3      	b.n	80043c8 <_strtol_l.constprop.0+0xd4>
 80043e0:	2430      	movs	r4, #48	; 0x30
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1b1      	bne.n	800434a <_strtol_l.constprop.0+0x56>
 80043e6:	2308      	movs	r3, #8
 80043e8:	e7af      	b.n	800434a <_strtol_l.constprop.0+0x56>
 80043ea:	2c30      	cmp	r4, #48	; 0x30
 80043ec:	d0a5      	beq.n	800433a <_strtol_l.constprop.0+0x46>
 80043ee:	230a      	movs	r3, #10
 80043f0:	e7ab      	b.n	800434a <_strtol_l.constprop.0+0x56>
 80043f2:	bf00      	nop
 80043f4:	08004561 	.word	0x08004561

080043f8 <strtol>:
 80043f8:	4613      	mov	r3, r2
 80043fa:	460a      	mov	r2, r1
 80043fc:	4601      	mov	r1, r0
 80043fe:	4802      	ldr	r0, [pc, #8]	; (8004408 <strtol+0x10>)
 8004400:	6800      	ldr	r0, [r0, #0]
 8004402:	f7ff bf77 	b.w	80042f4 <_strtol_l.constprop.0>
 8004406:	bf00      	nop
 8004408:	2000000c 	.word	0x2000000c
 800440c:	00000000 	.word	0x00000000

08004410 <ceil>:
 8004410:	ee10 1a90 	vmov	r1, s1
 8004414:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004418:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800441c:	2b13      	cmp	r3, #19
 800441e:	b530      	push	{r4, r5, lr}
 8004420:	ee10 0a10 	vmov	r0, s0
 8004424:	ee10 5a10 	vmov	r5, s0
 8004428:	dc2f      	bgt.n	800448a <ceil+0x7a>
 800442a:	2b00      	cmp	r3, #0
 800442c:	da13      	bge.n	8004456 <ceil+0x46>
 800442e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80044f0 <ceil+0xe0>
 8004432:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004436:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	dd05      	ble.n	800444c <ceil+0x3c>
 8004440:	2900      	cmp	r1, #0
 8004442:	db4c      	blt.n	80044de <ceil+0xce>
 8004444:	4301      	orrs	r1, r0
 8004446:	d04e      	beq.n	80044e6 <ceil+0xd6>
 8004448:	492b      	ldr	r1, [pc, #172]	; (80044f8 <ceil+0xe8>)
 800444a:	2000      	movs	r0, #0
 800444c:	460b      	mov	r3, r1
 800444e:	4602      	mov	r2, r0
 8004450:	ec43 2b10 	vmov	d0, r2, r3
 8004454:	e020      	b.n	8004498 <ceil+0x88>
 8004456:	4a29      	ldr	r2, [pc, #164]	; (80044fc <ceil+0xec>)
 8004458:	411a      	asrs	r2, r3
 800445a:	ea01 0402 	and.w	r4, r1, r2
 800445e:	4304      	orrs	r4, r0
 8004460:	d01a      	beq.n	8004498 <ceil+0x88>
 8004462:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80044f0 <ceil+0xe0>
 8004466:	ee30 0b07 	vadd.f64	d0, d0, d7
 800446a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004472:	ddeb      	ble.n	800444c <ceil+0x3c>
 8004474:	2900      	cmp	r1, #0
 8004476:	bfc2      	ittt	gt
 8004478:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800447c:	fa40 f303 	asrgt.w	r3, r0, r3
 8004480:	18c9      	addgt	r1, r1, r3
 8004482:	ea21 0102 	bic.w	r1, r1, r2
 8004486:	2000      	movs	r0, #0
 8004488:	e7e0      	b.n	800444c <ceil+0x3c>
 800448a:	2b33      	cmp	r3, #51	; 0x33
 800448c:	dd05      	ble.n	800449a <ceil+0x8a>
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d101      	bne.n	8004498 <ceil+0x88>
 8004494:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004498:	bd30      	pop	{r4, r5, pc}
 800449a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	40e2      	lsrs	r2, r4
 80044a4:	4202      	tst	r2, r0
 80044a6:	d0f7      	beq.n	8004498 <ceil+0x88>
 80044a8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80044f0 <ceil+0xe0>
 80044ac:	ee30 0b07 	vadd.f64	d0, d0, d7
 80044b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	ddc8      	ble.n	800444c <ceil+0x3c>
 80044ba:	2900      	cmp	r1, #0
 80044bc:	dd02      	ble.n	80044c4 <ceil+0xb4>
 80044be:	2b14      	cmp	r3, #20
 80044c0:	d103      	bne.n	80044ca <ceil+0xba>
 80044c2:	3101      	adds	r1, #1
 80044c4:	ea20 0002 	bic.w	r0, r0, r2
 80044c8:	e7c0      	b.n	800444c <ceil+0x3c>
 80044ca:	2401      	movs	r4, #1
 80044cc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80044d0:	fa04 f303 	lsl.w	r3, r4, r3
 80044d4:	4418      	add	r0, r3
 80044d6:	42a8      	cmp	r0, r5
 80044d8:	bf38      	it	cc
 80044da:	1909      	addcc	r1, r1, r4
 80044dc:	e7f2      	b.n	80044c4 <ceil+0xb4>
 80044de:	2000      	movs	r0, #0
 80044e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80044e4:	e7b2      	b.n	800444c <ceil+0x3c>
 80044e6:	4608      	mov	r0, r1
 80044e8:	e7b0      	b.n	800444c <ceil+0x3c>
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w
 80044f0:	8800759c 	.word	0x8800759c
 80044f4:	7e37e43c 	.word	0x7e37e43c
 80044f8:	3ff00000 	.word	0x3ff00000
 80044fc:	000fffff 	.word	0x000fffff

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
