
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006758  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b40  08006b40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b40  08006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b48  08006b48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000070  08006bc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08006bc0  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125cb  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002596  00000000  00000000  00032669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00034c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00035a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028829  00000000  00000000  000367b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001268c  00000000  00000000  0005efe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7fa  00000000  00000000  0007166d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016de67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  0016deb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006940 	.word	0x08006940

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006940 	.word	0x08006940

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_GPIO_Init+0xa4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a22      	ldr	r2, [pc, #136]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_GPIO_Init+0xa4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xa8>)
 8000670:	f001 feba 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xa8>)
 800068c:	f001 fd00 	bl	8002090 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020400 	.word	0x40020400

080006a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a4:	f3bf 8f4f 	dsb	sy
}
 80006a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006aa:	f3bf 8f6f 	isb	sy
}
 80006ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <SCB_EnableICache+0x48>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
}
 80006bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006be:	f3bf 8f6f 	isb	sy
}
 80006c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SCB_EnableICache+0x48>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SCB_EnableICache+0x48>)
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d0:	f3bf 8f4f 	dsb	sy
}
 80006d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d6:	f3bf 8f6f 	isb	sy
}
 80006da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SCB_EnableDCache+0x84>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <SCB_EnableDCache+0x84>)
 8000702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000706:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0b5b      	lsrs	r3, r3, #13
 800070c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000710:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800071a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	015a      	lsls	r2, r3, #5
 8000720:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000724:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072a:	4911      	ldr	r1, [pc, #68]	; (8000770 <SCB_EnableDCache+0x84>)
 800072c:	4313      	orrs	r3, r2
 800072e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	60ba      	str	r2, [r7, #8]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1ef      	bne.n	800071c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1e5      	bne.n	8000712 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000746:	f3bf 8f4f 	dsb	sy
}
 800074a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SCB_EnableDCache+0x84>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <SCB_EnableDCache+0x84>)
 8000752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000756:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800075e:	f3bf 8f6f 	isb	sy
}
 8000762:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <uart_print>:
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <uart_print+0x2c>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000784:	bf00      	nop
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <uart_print+0x2c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <uart_print+0x12>
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40004800 	.word	0x40004800

080007a4 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b0d      	cmp	r3, #13
 80007b2:	d002      	beq.n	80007ba <char_is_endmessage+0x16>
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d101      	bne.n	80007be <char_is_endmessage+0x1a>
	{
		return 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <char_is_endmessage+0x1c>
	}
	else return 0;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <rx_has_data>:

// Reception
uint8_t rx_has_data()
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <rx_has_data+0x24>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <rx_has_data+0x28>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	429a      	cmp	r2, r3
 80007de:	d101      	bne.n	80007e4 <rx_has_data+0x18>
	{
		return 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e000      	b.n	80007e6 <rx_has_data+0x1a>
	}
	else return 1;
 80007e4:	2301      	movs	r3, #1
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	200000c2 	.word	0x200000c2
 80007f4:	200000c3 	.word	0x200000c3

080007f8 <increase_rx_empty>:

void increase_rx_empty()
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	rx_empty++;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <increase_rx_empty+0x2c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	3301      	adds	r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <increase_rx_empty+0x2c>)
 8000808:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <increase_rx_empty+0x2c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b31      	cmp	r3, #49	; 0x31
 8000812:	d902      	bls.n	800081a <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <increase_rx_empty+0x2c>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
	}
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	200000c2 	.word	0x200000c2

08000828 <increase_rx_busy>:

void increase_rx_busy()
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	rx_busy++;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <increase_rx_busy+0x2c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <increase_rx_busy+0x2c>)
 8000838:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <increase_rx_busy+0x2c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b31      	cmp	r3, #49	; 0x31
 8000842:	d902      	bls.n	800084a <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <increase_rx_busy+0x2c>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	}
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	200000c3 	.word	0x200000c3

08000858 <tx_has_data>:

// Transmission
uint8_t tx_has_data()
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <tx_has_data+0x24>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <tx_has_data+0x28>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	429a      	cmp	r2, r3
 800086a:	d101      	bne.n	8000870 <tx_has_data+0x18>
	{
		return 0;
 800086c:	2300      	movs	r3, #0
 800086e:	e000      	b.n	8000872 <tx_has_data+0x1a>
	}
	else return 1;
 8000870:	2301      	movs	r3, #1
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	200000f6 	.word	0x200000f6
 8000880:	200000f7 	.word	0x200000f7

08000884 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	tx_busy++;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <increase_tx_busy+0x2c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <increase_tx_busy+0x2c>)
 8000894:	701a      	strb	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <increase_tx_busy+0x2c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b31      	cmp	r3, #49	; 0x31
 800089e:	d902      	bls.n	80008a6 <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <increase_tx_busy+0x2c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	}
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	200000f7 	.word	0x200000f7

080008b4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <get_char+0x24>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <get_char+0x28>)
 80008c4:	5c9b      	ldrb	r3, [r3, r2]
 80008c6:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 80008c8:	f7ff ffae 	bl	8000828 <increase_rx_busy>
	return tmp;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000c3 	.word	0x200000c3
 80008dc:	20000090 	.word	0x20000090

080008e0 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 80008ec:	e041      	b.n	8000972 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <get_message+0xa8>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	461c      	mov	r4, r3
 80008f4:	f7ff ffde 	bl	80008b4 <get_char>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <get_message+0xac>)
 80008fe:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <get_message+0xa8>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <get_message+0xac>)
 8000908:	5c9b      	ldrb	r3, [r3, r2]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff4a 	bl	80007a4 <char_is_endmessage>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d021      	beq.n	800095a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <get_message+0xa8>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <get_message+0xac>)
 800091e:	2100      	movs	r1, #0
 8000920:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e009      	b.n	800093c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	440b      	add	r3, r1
 8000930:	4916      	ldr	r1, [pc, #88]	; (800098c <get_message+0xac>)
 8000932:	5c8a      	ldrb	r2, [r1, r2]
 8000934:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	3301      	adds	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <get_message+0xa8>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d3ef      	bcc.n	8000928 <get_message+0x48>
			}

			message_length = idx;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <get_message+0xa8>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <get_message+0xa8>)
 8000950:	2200      	movs	r2, #0
 8000952:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000954:	89bb      	ldrh	r3, [r7, #12]
 8000956:	b29b      	uxth	r3, r3
 8000958:	e011      	b.n	800097e <get_message+0x9e>
		}
		else
		{
			idx++;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <get_message+0xa8>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <get_message+0xa8>)
 8000964:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <get_message+0xa8>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	2b32      	cmp	r3, #50	; 0x32
 800096c:	d901      	bls.n	8000972 <get_message+0x92>
 800096e:	2300      	movs	r3, #0
 8000970:	e005      	b.n	800097e <get_message+0x9e>
	while(rx_has_data() == 1)
 8000972:	f7ff ff2b 	bl	80007cc <rx_has_data>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d0b8      	beq.n	80008ee <get_message+0xe>
		}
	}
	return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	200001a6 	.word	0x200001a6
 800098c:	200001a8 	.word	0x200001a8

08000990 <send_response>:

// Send response from STM
void send_response(char *message, ...)
{
 8000990:	b40f      	push	{r0, r1, r2, r3}
 8000992:	b590      	push	{r4, r7, lr}
 8000994:	b091      	sub	sp, #68	; 0x44
 8000996:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 8000998:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800099c:	607b      	str	r3, [r7, #4]
	vsprintf(response, message, arglist);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 faf8 	bl	8005f9c <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <send_response+0xc4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80009b8:	e012      	b.n	80009e0 <send_response+0x50>
	{
		tx_buffer[idx] = response[i];
 80009ba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80009bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009be:	3240      	adds	r2, #64	; 0x40
 80009c0:	443a      	add	r2, r7
 80009c2:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 80009c6:	4a24      	ldr	r2, [pc, #144]	; (8000a58 <send_response+0xc8>)
 80009c8:	54d1      	strb	r1, [r2, r3]
		idx++;
 80009ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009cc:	3301      	adds	r3, #1
 80009ce:	87fb      	strh	r3, [r7, #62]	; 0x3e

		if (idx >= BUFFER_LENGTH)
 80009d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009d2:	2b31      	cmp	r3, #49	; 0x31
 80009d4:	d901      	bls.n	80009da <send_response+0x4a>
			idx = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	for (uint16_t i=0; i<strlen(response); i++)
 80009da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009dc:	3301      	adds	r3, #1
 80009de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80009e0:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc2a 	bl	8000240 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	429c      	cmp	r4, r3
 80009f0:	d3e3      	bcc.n	80009ba <send_response+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
}
 80009f4:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 80009f6:	f7ff ff2f 	bl	8000858 <tx_has_data>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d118      	bne.n	8000a32 <send_response+0xa2>
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <send_response+0xcc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	2b80      	cmp	r3, #128	; 0x80
 8000a0c:	d111      	bne.n	8000a32 <send_response+0xa2>
	{
		tx_empty = idx;
 8000a0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <send_response+0xc4>)
 8000a14:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <send_response+0xd0>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <send_response+0xc8>)
 8000a20:	4413      	add	r3, r2
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <send_response+0xcc>)
 8000a28:	f003 fe6e 	bl	8004708 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 8000a2c:	f7ff ff2a 	bl	8000884 <increase_tx_busy>
 8000a30:	e003      	b.n	8000a3a <send_response+0xaa>
	}
	else
		tx_empty = idx;
 8000a32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <send_response+0xc4>)
 8000a38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a3a:	b662      	cpsie	i
}
 8000a3c:	bf00      	nop

	__enable_irq();

	// Wait after re-enabling interrupts
	HAL_Delay(5);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f001 f8e2 	bl	8001c08 <HAL_Delay>
}
 8000a44:	bf00      	nop
 8000a46:	3744      	adds	r7, #68	; 0x44
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a4e:	b004      	add	sp, #16
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	200000f6 	.word	0x200000f6
 8000a58:	200000c4 	.word	0x200000c4
 8000a5c:	20000230 	.word	0x20000230
 8000a60:	200000f7 	.word	0x200000f7

08000a64 <turn_on_led>:

void turn_on_led()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <turn_on_led+0x14>)
 8000a6e:	f001 fcbb 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40020400 	.word	0x40020400

08000a7c <turn_off_led>:

void turn_off_led()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <turn_off_led+0x14>)
 8000a86:	f001 fcaf 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020400 	.word	0x40020400

08000a94 <timer_delay>:

void timer_delay(uint16_t ms)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
	// Reset timer counter
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <timer_delay+0x30>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for set period to pass
	while (__HAL_TIM_GET_COUNTER(&htim3) < ms);
 8000aa6:	bf00      	nop
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <timer_delay+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3f9      	bcc.n	8000aa8 <timer_delay+0x14>
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200001e4 	.word	0x200001e4

08000ac8 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1800.0;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <calculate_delay+0x90>)
 8000ad4:	60fb      	str	r3, [r7, #12]

	if (blink_hz == 1)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10b      	bne.n	8000af4 <calculate_delay+0x2c>
		delay_f = delay_f / blink_hz;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	ee07 3a90 	vmov	s15, r3
 8000ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ae6:	edd7 6a03 	vldr	s13, [r7, #12]
 8000aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aee:	edc7 7a03 	vstr	s15, [r7, #12]
 8000af2:	e012      	b.n	8000b1a <calculate_delay+0x52>
	else
		delay_f = delay_f / (blink_hz * 1.8);
 8000af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b06:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000b50 <calculate_delay+0x88>
 8000b0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b0e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b16:	edc7 7a03 	vstr	s15, [r7, #12]

	delay_f = ceil(delay_f);
 8000b1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b22:	eeb0 0b47 	vmov.f64	d0, d7
 8000b26:	f005 fe93 	bl	8006850 <ceil>
 8000b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b32:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b3e:	ee17 3a90 	vmov	r3, s15
 8000b42:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 8000b44:	897b      	ldrh	r3, [r7, #10]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	cccccccd 	.word	0xcccccccd
 8000b54:	3ffccccc 	.word	0x3ffccccc
 8000b58:	44e10000 	.word	0x44e10000

08000b5c <validate_command>:

uint8_t validate_command(char *single_command_message)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b092      	sub	sp, #72	; 0x48
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	uint8_t command_valid = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Command template arrays
	char led_on[] = "LED[ON]";
 8000b6a:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <validate_command+0x128>)
 8000b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b74:	e883 0003 	stmia.w	r3, {r0, r1}
	char led_off[] = "LED[OFF]";
 8000b78:	4a43      	ldr	r2, [pc, #268]	; (8000c88 <validate_command+0x12c>)
 8000b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b80:	c303      	stmia	r3!, {r0, r1}
 8000b82:	701a      	strb	r2, [r3, #0]
	char led_blink[] = "LED[BLINK,X]";
 8000b84:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <validate_command+0x130>)
 8000b86:	f107 0420 	add.w	r4, r7, #32
 8000b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b8e:	7023      	strb	r3, [r4, #0]
	char insert_delay[] = "INSERT[DELAY,XXXX]";
 8000b90:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <validate_command+0x134>)
 8000b92:	f107 040c 	add.w	r4, r7, #12
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	8022      	strh	r2, [r4, #0]
 8000ba2:	3402      	adds	r4, #2
 8000ba4:	0c1b      	lsrs	r3, r3, #16
 8000ba6:	7023      	strb	r3, [r4, #0]

	// Compare command with templates
	if (strncmp(single_command_message, led_on, sizeof(led_on)) == 0)
 8000ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bac:	2208      	movs	r2, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f005 f93c 	bl	8005e2e <strncmp>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <validate_command+0x68>
	{
		command_valid = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000bc2:	e059      	b.n	8000c78 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_off, sizeof(led_off)) == 0)
 8000bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc8:	2209      	movs	r2, #9
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f005 f92e 	bl	8005e2e <strncmp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d103      	bne.n	8000be0 <validate_command+0x84>
	{
		command_valid = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000bde:	e04b      	b.n	8000c78 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_blink, sizeof(led_blink)-3) == 0)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	220a      	movs	r2, #10
 8000be6:	4619      	mov	r1, r3
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f005 f920 	bl	8005e2e <strncmp>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d111      	bne.n	8000c18 <validate_command+0xbc>
	{
		if ((single_command_message[10] >= 0x30 && single_command_message[10] <= 0x39) && single_command[11] == ']')
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	330a      	adds	r3, #10
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8000bfc:	d93c      	bls.n	8000c78 <validate_command+0x11c>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	330a      	adds	r3, #10
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b39      	cmp	r3, #57	; 0x39
 8000c06:	d837      	bhi.n	8000c78 <validate_command+0x11c>
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <validate_command+0x138>)
 8000c0a:	7adb      	ldrb	r3, [r3, #11]
 8000c0c:	2b5d      	cmp	r3, #93	; 0x5d
 8000c0e:	d133      	bne.n	8000c78 <validate_command+0x11c>
			command_valid = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c16:	e02f      	b.n	8000c78 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, insert_delay, sizeof(insert_delay)-6) == 0)
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	220d      	movs	r2, #13
 8000c1e:	4619      	mov	r1, r3
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f005 f904 	bl	8005e2e <strncmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d125      	bne.n	8000c78 <validate_command+0x11c>
	{
		for (uint8_t y=0; y<4; y++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000c32:	e01d      	b.n	8000c70 <validate_command+0x114>
			if ((single_command_message[12+y] >= 0x30 && single_command_message[12+y] <= 0x39) && single_command[17] == ']')
 8000c34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c38:	330c      	adds	r3, #12
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b2f      	cmp	r3, #47	; 0x2f
 8000c44:	d90f      	bls.n	8000c66 <validate_command+0x10a>
 8000c46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c4a:	330c      	adds	r3, #12
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b39      	cmp	r3, #57	; 0x39
 8000c56:	d806      	bhi.n	8000c66 <validate_command+0x10a>
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <validate_command+0x138>)
 8000c5a:	7c5b      	ldrb	r3, [r3, #17]
 8000c5c:	2b5d      	cmp	r3, #93	; 0x5d
 8000c5e:	d102      	bne.n	8000c66 <validate_command+0x10a>
				command_valid = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for (uint8_t y=0; y<4; y++)
 8000c66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000c70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d9dd      	bls.n	8000c34 <validate_command+0xd8>
	}

	return command_valid;
 8000c78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3748      	adds	r7, #72	; 0x48
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bdb0      	pop	{r4, r5, r7, pc}
 8000c84:	08006958 	.word	0x08006958
 8000c88:	08006960 	.word	0x08006960
 8000c8c:	0800696c 	.word	0x0800696c
 8000c90:	0800697c 	.word	0x0800697c
 8000c94:	2000016c 	.word	0x2000016c

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b0b0      	sub	sp, #192	; 0xc0
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c9e:	f000 fd0f 	bl	80016c0 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000ca2:	f7ff fcfd 	bl	80006a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ca6:	f7ff fd21 	bl	80006ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f000 ff50 	bl	8001b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 fc3f 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb2:	f7ff fc9f 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cb6:	f000 fe89 	bl	80019cc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000cba:	f000 fdeb 	bl	8001894 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start(&htim3);
 8000cbe:	48b0      	ldr	r0, [pc, #704]	; (8000f80 <main+0x2e8>)
 8000cc0:	f002 fd2a 	bl	8003718 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	49af      	ldr	r1, [pc, #700]	; (8000f84 <main+0x2ec>)
 8000cc8:	48af      	ldr	r0, [pc, #700]	; (8000f88 <main+0x2f0>)
 8000cca:	f003 fd7b 	bl	80047c4 <HAL_UART_Receive_IT>
  __IO uint16_t param_length;
  static uint16_t command_length;

  // LED command parameters
  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000cce:	4aaf      	ldr	r2, [pc, #700]	; (8000f8c <main+0x2f4>)
 8000cd0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	8019      	strh	r1, [r3, #0]
 8000cda:	3302      	adds	r3, #2
 8000cdc:	0c12      	lsrs	r2, r2, #16
 8000cde:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 8000ce0:	4bab      	ldr	r3, [pc, #684]	; (8000f90 <main+0x2f8>)
 8000ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  char blink_cmd[] = "BLINK,";
 8000ce6:	4aab      	ldr	r2, [pc, #684]	; (8000f94 <main+0x2fc>)
 8000ce8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf0:	6018      	str	r0, [r3, #0]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	8019      	strh	r1, [r3, #0]
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	0c0a      	lsrs	r2, r1, #16
 8000cfa:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 8000cfc:	4aa6      	ldr	r2, [pc, #664]	; (8000f98 <main+0x300>)
 8000cfe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d06:	6018      	str	r0, [r3, #0]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	8019      	strh	r1, [r3, #0]
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	0c0a      	lsrs	r2, r1, #16
 8000d10:	701a      	strb	r2, [r3, #0]

  // Error messages
  char invalid_command[] = "Error: Command not found\r\n";
 8000d12:	4ba2      	ldr	r3, [pc, #648]	; (8000f9c <main+0x304>)
 8000d14:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000d18:	461d      	mov	r5, r3
 8000d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d22:	c403      	stmia	r4!, {r0, r1}
 8000d24:	8022      	strh	r2, [r4, #0]
 8000d26:	3402      	adds	r4, #2
 8000d28:	0c13      	lsrs	r3, r2, #16
 8000d2a:	7023      	strb	r3, [r4, #0]
  char missing_separator[] = "Error: No command separator found\r\n";
 8000d2c:	4b9c      	ldr	r3, [pc, #624]	; (8000fa0 <main+0x308>)
 8000d2e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000d32:	461d      	mov	r5, r3
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3c:	682b      	ldr	r3, [r5, #0]
 8000d3e:	6023      	str	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000d40:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <main+0x2ec>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b0a      	cmp	r3, #10
 8000d46:	d003      	beq.n	8000d50 <main+0xb8>
 8000d48:	4b8e      	ldr	r3, [pc, #568]	; (8000f84 <main+0x2ec>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b0d      	cmp	r3, #13
 8000d4e:	d106      	bne.n	8000d5e <main+0xc6>
	{
		message_length = get_message(message);
 8000d50:	4894      	ldr	r0, [pc, #592]	; (8000fa4 <main+0x30c>)
 8000d52:	f7ff fdc5 	bl	80008e0 <get_message>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b93      	ldr	r3, [pc, #588]	; (8000fa8 <main+0x310>)
 8000d5c:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000d5e:	4b92      	ldr	r3, [pc, #584]	; (8000fa8 <main+0x310>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 839c 	beq.w	80014a2 <main+0x80a>
	{
		for (uint8_t i=0; i<message_length; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8000d70:	e38f      	b.n	8001492 <main+0x7fa>
		{
			// Check for command separator character
			command_separator = strchr(message, ';');
 8000d72:	213b      	movs	r1, #59	; 0x3b
 8000d74:	488b      	ldr	r0, [pc, #556]	; (8000fa4 <main+0x30c>)
 8000d76:	f005 f84d 	bl	8005e14 <strchr>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a8b      	ldr	r2, [pc, #556]	; (8000fac <main+0x314>)
 8000d7e:	6013      	str	r3, [r2, #0]

			// If separator char was not found
			if (command_separator == NULL)
 8000d80:	4b8a      	ldr	r3, [pc, #552]	; (8000fac <main+0x314>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d111      	bne.n	8000dac <main+0x114>
			{
				while (i < message_length)
 8000d88:	e004      	b.n	8000d94 <main+0xfc>
					i++;
 8000d8a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (i < message_length)
 8000d94:	4b84      	ldr	r3, [pc, #528]	; (8000fa8 <main+0x310>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3f3      	bcc.n	8000d8a <main+0xf2>
				send_response(missing_separator);
 8000da2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fdf2 	bl	8000990 <send_response>
			}

			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000dac:	4b80      	ldr	r3, [pc, #512]	; (8000fb0 <main+0x318>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <main+0x12a>
 8000db6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dba:	4a7a      	ldr	r2, [pc, #488]	; (8000fa4 <main+0x30c>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	2b4c      	cmp	r3, #76	; 0x4c
 8000dc0:	d00a      	beq.n	8000dd8 <main+0x140>
 8000dc2:	4b7b      	ldr	r3, [pc, #492]	; (8000fb0 <main+0x318>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <main+0x148>
 8000dcc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dd0:	4a74      	ldr	r2, [pc, #464]	; (8000fa4 <main+0x30c>)
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	2b49      	cmp	r3, #73	; 0x49
 8000dd6:	d103      	bne.n	8000de0 <main+0x148>
				sw_state = 1;
 8000dd8:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <main+0x318>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e019      	b.n	8000e14 <main+0x17c>
			else if (sw_state == 0 && (message[i] != ';' && message[i] != '#' && message[i] != ','))
 8000de0:	4b73      	ldr	r3, [pc, #460]	; (8000fb0 <main+0x318>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d114      	bne.n	8000e14 <main+0x17c>
 8000dea:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dee:	4a6d      	ldr	r2, [pc, #436]	; (8000fa4 <main+0x30c>)
 8000df0:	5cd3      	ldrb	r3, [r2, r3]
 8000df2:	2b3b      	cmp	r3, #59	; 0x3b
 8000df4:	d00e      	beq.n	8000e14 <main+0x17c>
 8000df6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dfa:	4a6a      	ldr	r2, [pc, #424]	; (8000fa4 <main+0x30c>)
 8000dfc:	5cd3      	ldrb	r3, [r2, r3]
 8000dfe:	2b23      	cmp	r3, #35	; 0x23
 8000e00:	d008      	beq.n	8000e14 <main+0x17c>
 8000e02:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e06:	4a67      	ldr	r2, [pc, #412]	; (8000fa4 <main+0x30c>)
 8000e08:	5cd3      	ldrb	r3, [r2, r3]
 8000e0a:	2b2c      	cmp	r3, #44	; 0x2c
 8000e0c:	d002      	beq.n	8000e14 <main+0x17c>
				error_found = 1;
 8000e0e:	4b69      	ldr	r3, [pc, #420]	; (8000fb4 <main+0x31c>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000e14:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <main+0x318>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	f200 82cf 	bhi.w	80013c0 <main+0x728>
 8000e22:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <main+0x190>)
 8000e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e28:	08000e3d 	.word	0x08000e3d
 8000e2c:	08000ed3 	.word	0x08000ed3
 8000e30:	08000f13 	.word	0x08000f13
 8000e34:	08000f53 	.word	0x08000f53
 8000e38:	0800102d 	.word	0x0800102d
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000e3c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <main+0x30c>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	2b45      	cmp	r3, #69	; 0x45
 8000e48:	d10f      	bne.n	8000e6a <main+0x1d2>
 8000e4a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e4e:	3302      	adds	r3, #2
 8000e50:	4a54      	ldr	r2, [pc, #336]	; (8000fa4 <main+0x30c>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	2b44      	cmp	r3, #68	; 0x44
 8000e56:	d108      	bne.n	8000e6a <main+0x1d2>
				{
					i = i+2;
 8000e58:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000e62:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <main+0x318>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e032      	b.n	8000ed0 <main+0x238>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 8000e6a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e6e:	3301      	adds	r3, #1
 8000e70:	4a4c      	ldr	r2, [pc, #304]	; (8000fa4 <main+0x30c>)
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	2b4e      	cmp	r3, #78	; 0x4e
 8000e76:	d124      	bne.n	8000ec2 <main+0x22a>
 8000e78:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	4a49      	ldr	r2, [pc, #292]	; (8000fa4 <main+0x30c>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	2b53      	cmp	r3, #83	; 0x53
 8000e84:	d11d      	bne.n	8000ec2 <main+0x22a>
 8000e86:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e8a:	3303      	adds	r3, #3
 8000e8c:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <main+0x30c>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	2b45      	cmp	r3, #69	; 0x45
 8000e92:	d116      	bne.n	8000ec2 <main+0x22a>
 8000e94:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e98:	3304      	adds	r3, #4
 8000e9a:	4a42      	ldr	r2, [pc, #264]	; (8000fa4 <main+0x30c>)
 8000e9c:	5cd3      	ldrb	r3, [r2, r3]
 8000e9e:	2b52      	cmp	r3, #82	; 0x52
 8000ea0:	d10f      	bne.n	8000ec2 <main+0x22a>
 8000ea2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ea6:	3305      	adds	r3, #5
 8000ea8:	4a3e      	ldr	r2, [pc, #248]	; (8000fa4 <main+0x30c>)
 8000eaa:	5cd3      	ldrb	r3, [r2, r3]
 8000eac:	2b54      	cmp	r3, #84	; 0x54
 8000eae:	d108      	bne.n	8000ec2 <main+0x22a>
				{
					i = i+5;
 8000eb0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000eb4:	3305      	adds	r3, #5
 8000eb6:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <main+0x318>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e006      	b.n	8000ed0 <main+0x238>
				}
				else
				{
					error_found = 1;
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <main+0x31c>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <main+0x318>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000ece:	e277      	b.n	80013c0 <main+0x728>
 8000ed0:	e276      	b.n	80013c0 <main+0x728>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000ed2:	215b      	movs	r1, #91	; 0x5b
 8000ed4:	4833      	ldr	r0, [pc, #204]	; (8000fa4 <main+0x30c>)
 8000ed6:	f004 ff9d 	bl	8005e14 <strchr>
 8000eda:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10b      	bne.n	8000efe <main+0x266>
				{
					i = i+1;
 8000ee6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000eea:	3301      	adds	r3, #1
 8000eec:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <main+0x31c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <main+0x318>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000efc:	e260      	b.n	80013c0 <main+0x728>
					open_idx = (uint16_t)(open_bracket - message);
 8000efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <main+0x30c>)
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
					sw_state = 3;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <main+0x318>)
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	701a      	strb	r2, [r3, #0]
				break;
 8000f10:	e256      	b.n	80013c0 <main+0x728>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000f12:	215d      	movs	r1, #93	; 0x5d
 8000f14:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <main+0x30c>)
 8000f16:	f004 ff7d 	bl	8005e14 <strchr>
 8000f1a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10b      	bne.n	8000f3e <main+0x2a6>
				{
					i = i+1;
 8000f26:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <main+0x31c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <main+0x318>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000f3c:	e240      	b.n	80013c0 <main+0x728>
					close_idx = (uint16_t)(close_bracket - message);
 8000f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <main+0x30c>)
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
					sw_state = 4;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <main+0x318>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	701a      	strb	r2, [r3, #0]
				break;
 8000f50:	e236      	b.n	80013c0 <main+0x728>

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000f52:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8000f56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <main+0x320>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000f72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000f76:	3301      	adds	r3, #1
 8000f78:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000f7c:	e041      	b.n	8001002 <main+0x36a>
 8000f7e:	bf00      	nop
 8000f80:	200001e4 	.word	0x200001e4
 8000f84:	2000008c 	.word	0x2000008c
 8000f88:	20000230 	.word	0x20000230
 8000f8c:	08006990 	.word	0x08006990
 8000f90:	0046464f 	.word	0x0046464f
 8000f94:	08006994 	.word	0x08006994
 8000f98:	0800699c 	.word	0x0800699c
 8000f9c:	080069a4 	.word	0x080069a4
 8000fa0:	080069c0 	.word	0x080069c0
 8000fa4:	200000f8 	.word	0x200000f8
 8000fa8:	2000012a 	.word	0x2000012a
 8000fac:	200001a0 	.word	0x200001a0
 8000fb0:	2000012b 	.word	0x2000012b
 8000fb4:	200001a4 	.word	0x200001a4
 8000fb8:	200001da 	.word	0x200001da
				{
					command[j] = message[y];
 8000fbc:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8000fc0:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000fc4:	49af      	ldr	r1, [pc, #700]	; (8001284 <main+0x5ec>)
 8000fc6:	5c8a      	ldrb	r2, [r1, r2]
 8000fc8:	33c0      	adds	r3, #192	; 0xc0
 8000fca:	443b      	add	r3, r7
 8000fcc:	f803 2cbc 	strb.w	r2, [r3, #-188]
					temp_command[j] = command[j];
 8000fd0:	f897 20ba 	ldrb.w	r2, [r7, #186]	; 0xba
 8000fd4:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000fd8:	32c0      	adds	r2, #192	; 0xc0
 8000fda:	443a      	add	r2, r7
 8000fdc:	f812 1cbc 	ldrb.w	r1, [r2, #-188]
 8000fe0:	4aa9      	ldr	r2, [pc, #676]	; (8001288 <main+0x5f0>)
 8000fe2:	54d1      	strb	r1, [r2, r3]
					j++;
 8000fe4:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
					command_length = j;
 8000fee:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4ba5      	ldr	r3, [pc, #660]	; (800128c <main+0x5f4>)
 8000ff6:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000ff8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8001002:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8001006:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800100a:	429a      	cmp	r2, r3
 800100c:	d3d6      	bcc.n	8000fbc <main+0x324>
				}

				if (command_length == param_length)
 800100e:	4b9f      	ldr	r3, [pc, #636]	; (800128c <main+0x5f4>)
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001016:	b29b      	uxth	r3, r3
 8001018:	429a      	cmp	r2, r3
 800101a:	d103      	bne.n	8001024 <main+0x38c>
					sw_state = 5;
 800101c:	4b9c      	ldr	r3, [pc, #624]	; (8001290 <main+0x5f8>)
 800101e:	2205      	movs	r2, #5
 8001020:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 8001022:	e1cd      	b.n	80013c0 <main+0x728>
					sw_state = 0;
 8001024:	4b9a      	ldr	r3, [pc, #616]	; (8001290 <main+0x5f8>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
				break;
 800102a:	e1c9      	b.n	80013c0 <main+0x728>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 800102c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001030:	3301      	adds	r3, #1
 8001032:	4a94      	ldr	r2, [pc, #592]	; (8001284 <main+0x5ec>)
 8001034:	5cd3      	ldrb	r3, [r2, r3]
 8001036:	2b3b      	cmp	r3, #59	; 0x3b
 8001038:	d008      	beq.n	800104c <main+0x3b4>
				{
					send_response(missing_separator);
 800103a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fca6 	bl	8000990 <send_response>
					sw_state = 0;
 8001044:	4b92      	ldr	r3, [pc, #584]	; (8001290 <main+0x5f8>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
					break;
 800104a:	e1b9      	b.n	80013c0 <main+0x728>
				}

				// Print executed command
				char CMD[] = "COMMAND: ";
 800104c:	4a91      	ldr	r2, [pc, #580]	; (8001294 <main+0x5fc>)
 800104e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001052:	ca07      	ldmia	r2, {r0, r1, r2}
 8001054:	c303      	stmia	r3!, {r0, r1}
 8001056:	801a      	strh	r2, [r3, #0]
				char NEWLINE[] = "\r\n";
 8001058:	4a8f      	ldr	r2, [pc, #572]	; (8001298 <main+0x600>)
 800105a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	4611      	mov	r1, r2
 8001062:	8019      	strh	r1, [r3, #0]
 8001064:	3302      	adds	r3, #2
 8001066:	0c12      	lsrs	r2, r2, #16
 8001068:	701a      	strb	r2, [r3, #0]

				send_response(CMD);
 800106a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fc8e 	bl	8000990 <send_response>
				send_response(temp_command);
 8001074:	4884      	ldr	r0, [pc, #528]	; (8001288 <main+0x5f0>)
 8001076:	f7ff fc8b 	bl	8000990 <send_response>
				send_response(NEWLINE);
 800107a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fc86 	bl	8000990 <send_response>

				// Clear temp array
				for (uint8_t y=0; y<command_length; y++)
 8001084:	2300      	movs	r3, #0
 8001086:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800108a:	e009      	b.n	80010a0 <main+0x408>
					temp_command[y] = '\0';
 800108c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001090:	4a7d      	ldr	r2, [pc, #500]	; (8001288 <main+0x5f0>)
 8001092:	2100      	movs	r1, #0
 8001094:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<command_length; y++)
 8001096:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800109a:	3301      	adds	r3, #1
 800109c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80010a0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b79      	ldr	r3, [pc, #484]	; (800128c <main+0x5f4>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3ee      	bcc.n	800108c <main+0x3f4>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 80010ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 feb5 	bl	8005e2e <strncmp>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d13b      	bne.n	8001142 <main+0x4aa>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<7; y++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80010d0:	e010      	b.n	80010f4 <main+0x45c>
						single_command[y] = message[close_idx-6+y];
 80010d2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80010d6:	1f9a      	subs	r2, r3, #6
 80010d8:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010dc:	441a      	add	r2, r3
 80010de:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010e2:	4968      	ldr	r1, [pc, #416]	; (8001284 <main+0x5ec>)
 80010e4:	5c89      	ldrb	r1, [r1, r2]
 80010e6:	4a6d      	ldr	r2, [pc, #436]	; (800129c <main+0x604>)
 80010e8:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<7; y++)
 80010ea:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010ee:	3301      	adds	r3, #1
 80010f0:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80010f4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010f8:	2b06      	cmp	r3, #6
 80010fa:	d9ea      	bls.n	80010d2 <main+0x43a>

					// Validate last command
					temp_check = validate_command(single_command);
 80010fc:	4867      	ldr	r0, [pc, #412]	; (800129c <main+0x604>)
 80010fe:	f7ff fd2d 	bl	8000b5c <validate_command>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <main+0x608>)
 8001108:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 800110a:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <main+0x608>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d10f      	bne.n	8001134 <main+0x49c>
					{
						i = i+param_length;
 8001114:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2da      	uxtb	r2, r3
 800111c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001120:	4413      	add	r3, r2
 8001122:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <main+0x60c>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]

						// Turn on LED
						led_action = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001132:	e120      	b.n	8001376 <main+0x6de>
					}
					else
					{
						error_found = 1;
 8001134:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <main+0x60c>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 800113a:	4b55      	ldr	r3, [pc, #340]	; (8001290 <main+0x5f8>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e119      	b.n	8001376 <main+0x6de>
					}
				}
				else if (strncmp(command, off_cmd, len) == 0)
 8001142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001144:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fe6f 	bl	8005e2e <strncmp>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d13b      	bne.n	80011ce <main+0x536>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<8; y++)
 8001156:	2300      	movs	r3, #0
 8001158:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800115c:	e010      	b.n	8001180 <main+0x4e8>
						single_command[y] = message[close_idx-7+y];
 800115e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001162:	1fda      	subs	r2, r3, #7
 8001164:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001168:	441a      	add	r2, r3
 800116a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800116e:	4945      	ldr	r1, [pc, #276]	; (8001284 <main+0x5ec>)
 8001170:	5c89      	ldrb	r1, [r1, r2]
 8001172:	4a4a      	ldr	r2, [pc, #296]	; (800129c <main+0x604>)
 8001174:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<8; y++)
 8001176:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800117a:	3301      	adds	r3, #1
 800117c:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8001180:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001184:	2b07      	cmp	r3, #7
 8001186:	d9ea      	bls.n	800115e <main+0x4c6>

					// Validate last command
					temp_check = validate_command(single_command);
 8001188:	4844      	ldr	r0, [pc, #272]	; (800129c <main+0x604>)
 800118a:	f7ff fce7 	bl	8000b5c <validate_command>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <main+0x608>)
 8001194:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <main+0x608>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10f      	bne.n	80011c0 <main+0x528>
					{
						i = i+param_length;
 80011a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80011ac:	4413      	add	r3, r2
 80011ae:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <main+0x60c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]

						// Turn off LED
						led_action = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80011be:	e0da      	b.n	8001376 <main+0x6de>
					}
					else
					{
						error_found = 1;
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <main+0x60c>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <main+0x5f8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e0d3      	b.n	8001376 <main+0x6de>
					}
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 80011ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 fe28 	bl	8005e2e <strncmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d13f      	bne.n	8001264 <main+0x5cc>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<12; y++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80011ea:	e011      	b.n	8001210 <main+0x578>
						single_command[y] = message[close_idx-11+y];
 80011ec:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80011f0:	f1a3 020b 	sub.w	r2, r3, #11
 80011f4:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80011f8:	441a      	add	r2, r3
 80011fa:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80011fe:	4921      	ldr	r1, [pc, #132]	; (8001284 <main+0x5ec>)
 8001200:	5c89      	ldrb	r1, [r1, r2]
 8001202:	4a26      	ldr	r2, [pc, #152]	; (800129c <main+0x604>)
 8001204:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<12; y++)
 8001206:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800120a:	3301      	adds	r3, #1
 800120c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8001210:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001214:	2b0b      	cmp	r3, #11
 8001216:	d9e9      	bls.n	80011ec <main+0x554>

					// Validate last command
					temp_check = validate_command(single_command);
 8001218:	4820      	ldr	r0, [pc, #128]	; (800129c <main+0x604>)
 800121a:	f7ff fc9f 	bl	8000b5c <validate_command>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <main+0x608>)
 8001224:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <main+0x608>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b01      	cmp	r3, #1
 800122e:	d112      	bne.n	8001256 <main+0x5be>
					{
						i = i+param_length;
 8001230:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001234:	b29b      	uxth	r3, r3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800123c:	4413      	add	r3, r2
 800123e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <main+0x60c>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

						// Enable LED blink
						blink_setup = 1;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <main+0x610>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001254:	e08f      	b.n	8001376 <main+0x6de>
					}
					else
					{
						error_found = 1;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <main+0x60c>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <main+0x5f8>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	e088      	b.n	8001376 <main+0x6de>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 8001264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001266:	1f1a      	subs	r2, r3, #4
 8001268:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fddd 	bl	8005e2e <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d17d      	bne.n	8001376 <main+0x6de>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 800127a:	2300      	movs	r3, #0
 800127c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001280:	e039      	b.n	80012f6 <main+0x65e>
 8001282:	bf00      	nop
 8001284:	200000f8 	.word	0x200000f8
 8001288:	20000138 	.word	0x20000138
 800128c:	200001da 	.word	0x200001da
 8001290:	2000012b 	.word	0x2000012b
 8001294:	080069e4 	.word	0x080069e4
 8001298:	080069f0 	.word	0x080069f0
 800129c:	2000016c 	.word	0x2000016c
 80012a0:	200001a5 	.word	0x200001a5
 80012a4:	200001a4 	.word	0x200001a4
 80012a8:	2000012c 	.word	0x2000012c
						if (message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39)
 80012ac:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80012b0:	1f1a      	subs	r2, r3, #4
 80012b2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012b6:	4413      	add	r3, r2
 80012b8:	4a91      	ldr	r2, [pc, #580]	; (8001500 <main+0x868>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	2b2f      	cmp	r3, #47	; 0x2f
 80012be:	d91e      	bls.n	80012fe <main+0x666>
 80012c0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80012c4:	1f1a      	subs	r2, r3, #4
 80012c6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012ca:	4413      	add	r3, r2
 80012cc:	4a8c      	ldr	r2, [pc, #560]	; (8001500 <main+0x868>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	2b39      	cmp	r3, #57	; 0x39
 80012d2:	d814      	bhi.n	80012fe <main+0x666>
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 80012d4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80012d8:	1f1a      	subs	r2, r3, #4
 80012da:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012de:	441a      	add	r2, r3
 80012e0:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012e4:	4986      	ldr	r1, [pc, #536]	; (8001500 <main+0x868>)
 80012e6:	5c89      	ldrb	r1, [r1, r2]
 80012e8:	4a86      	ldr	r2, [pc, #536]	; (8001504 <main+0x86c>)
 80012ea:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<4; y++)
 80012ec:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012f0:	3301      	adds	r3, #1
 80012f2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80012f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d9d6      	bls.n	80012ac <main+0x614>
						else
							break;

					// Store last command in a separate array
					for (uint8_t y=0; y<18; y++)
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8001304:	e011      	b.n	800132a <main+0x692>
						single_command[y] = message[close_idx-17+y];
 8001306:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800130a:	f1a3 0211 	sub.w	r2, r3, #17
 800130e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001312:	441a      	add	r2, r3
 8001314:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001318:	4979      	ldr	r1, [pc, #484]	; (8001500 <main+0x868>)
 800131a:	5c89      	ldrb	r1, [r1, r2]
 800131c:	4a7a      	ldr	r2, [pc, #488]	; (8001508 <main+0x870>)
 800131e:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<18; y++)
 8001320:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001324:	3301      	adds	r3, #1
 8001326:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 800132a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800132e:	2b11      	cmp	r3, #17
 8001330:	d9e9      	bls.n	8001306 <main+0x66e>

					// Validate last command
					temp_check = validate_command(single_command);
 8001332:	4875      	ldr	r0, [pc, #468]	; (8001508 <main+0x870>)
 8001334:	f7ff fc12 	bl	8000b5c <validate_command>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b73      	ldr	r3, [pc, #460]	; (800150c <main+0x874>)
 800133e:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001340:	4b72      	ldr	r3, [pc, #456]	; (800150c <main+0x874>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10f      	bne.n	800136a <main+0x6d2>
					{
						i = i+param_length;
 800134a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800134e:	b29b      	uxth	r3, r3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001356:	4413      	add	r3, r2
 8001358:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 800135c:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <main+0x878>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]

						// Enable the delay
						led_action = 3;
 8001362:	2303      	movs	r3, #3
 8001364:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001368:	e005      	b.n	8001376 <main+0x6de>
					}
					else
					{
						error_found = 1;
 800136a:	4b69      	ldr	r3, [pc, #420]	; (8001510 <main+0x878>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001370:	4b68      	ldr	r3, [pc, #416]	; (8001514 <main+0x87c>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
					}
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 8001376:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800137a:	4a61      	ldr	r2, [pc, #388]	; (8001500 <main+0x868>)
 800137c:	2123      	movs	r1, #35	; 0x23
 800137e:	54d1      	strb	r1, [r2, r3]
				message[close_idx] = '#';
 8001380:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001384:	4a5e      	ldr	r2, [pc, #376]	; (8001500 <main+0x868>)
 8001386:	2123      	movs	r1, #35	; 0x23
 8001388:	54d1      	strb	r1, [r2, r3]

				// Clear the single_command array
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 800138a:	2300      	movs	r3, #0
 800138c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8001390:	e009      	b.n	80013a6 <main+0x70e>
					single_command[y] = '\0';
 8001392:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001396:	4a5c      	ldr	r2, [pc, #368]	; (8001508 <main+0x870>)
 8001398:	2100      	movs	r1, #0
 800139a:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 800139c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80013a0:	3301      	adds	r3, #1
 80013a2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 80013a6:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80013aa:	2b31      	cmp	r3, #49	; 0x31
 80013ac:	d9f1      	bls.n	8001392 <main+0x6fa>

				// Reset sw_state
				i = i-1;
 80013ae:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				sw_state = 0;
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <main+0x87c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
				break;
 80013be:	bf00      	nop
			} /* sw_state switch end */

			// Display error alert
			if (error_found == 1)
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <main+0x878>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d119      	bne.n	80013fe <main+0x766>
			{
				while (message[i] != ';')
 80013ca:	e004      	b.n	80013d6 <main+0x73e>
					i++;
 80013cc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013d0:	3301      	adds	r3, #1
 80013d2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (message[i] != ';')
 80013d6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013da:	4a49      	ldr	r2, [pc, #292]	; (8001500 <main+0x868>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	2b3b      	cmp	r3, #59	; 0x3b
 80013e0:	d1f4      	bne.n	80013cc <main+0x734>
				if (message[i] == ';')
 80013e2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013e6:	4a46      	ldr	r2, [pc, #280]	; (8001500 <main+0x868>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	2b3b      	cmp	r3, #59	; 0x3b
 80013ec:	d104      	bne.n	80013f8 <main+0x760>
					send_response(invalid_command);
 80013ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff facc 	bl	8000990 <send_response>
				error_found = 0;
 80013f8:	4b45      	ldr	r3, [pc, #276]	; (8001510 <main+0x878>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
			}

			// Diode control switch
			switch (led_action)
 80013fe:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d83f      	bhi.n	8001488 <main+0x7f0>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <main+0x778>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	08001421 	.word	0x08001421
 8001414:	08001427 	.word	0x08001427
 8001418:	0800142d 	.word	0x0800142d
 800141c:	08001477 	.word	0x08001477
			{
			case 0:
				// Turn off LED
				turn_off_led();
 8001420:	f7ff fb2c 	bl	8000a7c <turn_off_led>
				break;
 8001424:	e030      	b.n	8001488 <main+0x7f0>

			case 1:
				// Turn on LED
				turn_on_led();
 8001426:	f7ff fb1d 	bl	8000a64 <turn_on_led>
				break;
 800142a:	e02d      	b.n	8001488 <main+0x7f0>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <main+0x880>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d127      	bne.n	8001486 <main+0x7ee>
				{
					delay = message[close_idx-1] - '0';
 8001436:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800143a:	3b01      	subs	r3, #1
 800143c:	4a30      	ldr	r2, [pc, #192]	; (8001500 <main+0x868>)
 800143e:	5cd3      	ldrb	r3, [r2, r3]
 8001440:	3b30      	subs	r3, #48	; 0x30
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <main+0x884>)
 8001446:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <main+0x884>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <main+0x7c2>
						blink_ms = 0;
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <main+0x888>)
 8001454:	2200      	movs	r2, #0
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	e009      	b.n	800146e <main+0x7d6>
					else
						 blink_ms = calculate_delay(delay);
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <main+0x884>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fb31 	bl	8000ac8 <calculate_delay>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <main+0x888>)
 800146c:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <main+0x880>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001474:	e007      	b.n	8001486 <main+0x7ee>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <main+0x86c>)
 8001478:	f004 fc95 	bl	8005da6 <atoi>
 800147c:	4603      	mov	r3, r0
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <main+0x88c>)
 8001482:	801a      	strh	r2, [r3, #0]
				break;
 8001484:	e000      	b.n	8001488 <main+0x7f0>
				break;
 8001486:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8001488:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800148c:	3301      	adds	r3, #1
 800148e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <main+0x890>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 800149c:	429a      	cmp	r2, r3
 800149e:	f4ff ac68 	bcc.w	8000d72 <main+0xda>
	} /* if statement end */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Command: LED[BLINK,x]
	if (blink_ms != 0 && (led_action == 2 || led_action == 3))
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <main+0x888>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d014      	beq.n	80014d6 <main+0x83e>
 80014ac:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d004      	beq.n	80014c0 <main+0x828>
 80014b6:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d10a      	bne.n	80014d6 <main+0x83e>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	481a      	ldr	r0, [pc, #104]	; (800152c <main+0x894>)
 80014c4:	f000 ffa9 	bl	800241a <HAL_GPIO_TogglePin>
		timer_delay(blink_ms);
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <main+0x888>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fae0 	bl	8000a94 <timer_delay>
 80014d4:	e00c      	b.n	80014f0 <main+0x858>
	}
	// Command: LED[ON] / LED[OFF]
	else if (led_action != 2 || led_action != 3)
 80014d6:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d104      	bne.n	80014ea <main+0x852>
 80014e0:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d002      	beq.n	80014f0 <main+0x858>
		// Disable LED blink with other commands
		blink_ms = 0;
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <main+0x888>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	801a      	strh	r2, [r3, #0]

	// Set the delay
	timer_delay(loop_delay);
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <main+0x88c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff facc 	bl	8000a94 <timer_delay>
	if (character == '\n' || character == '\r')
 80014fc:	e420      	b.n	8000d40 <main+0xa8>
 80014fe:	bf00      	nop
 8001500:	200000f8 	.word	0x200000f8
 8001504:	20000134 	.word	0x20000134
 8001508:	2000016c 	.word	0x2000016c
 800150c:	200001a5 	.word	0x200001a5
 8001510:	200001a4 	.word	0x200001a4
 8001514:	2000012b 	.word	0x2000012b
 8001518:	2000012c 	.word	0x2000012c
 800151c:	2000012d 	.word	0x2000012d
 8001520:	2000012e 	.word	0x2000012e
 8001524:	20000130 	.word	0x20000130
 8001528:	2000012a 	.word	0x2000012a
 800152c:	40020400 	.word	0x40020400

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2234      	movs	r2, #52	; 0x34
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fc60 	bl	8005e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <SystemClock_Config+0xdc>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a2c      	ldr	r2, [pc, #176]	; (800160c <SystemClock_Config+0xdc>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <SystemClock_Config+0xdc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <SystemClock_Config+0xe0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001574:	4a26      	ldr	r2, [pc, #152]	; (8001610 <SystemClock_Config+0xe0>)
 8001576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <SystemClock_Config+0xe0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001588:	2303      	movs	r3, #3
 800158a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001590:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001596:	2310      	movs	r3, #16
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015a4:	2319      	movs	r3, #25
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015a8:	23d8      	movs	r3, #216	; 0xd8
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 ff97 	bl	80024f0 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015c8:	f000 f8a6 	bl	8001718 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015cc:	f000 ff40 	bl	8002450 <HAL_PWREx_EnableOverDrive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015d6:	f000 f89f 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fa29 	bl	8002a4c <HAL_RCC_ClockConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001600:	f000 f88a 	bl	8001718 <Error_Handler>
  }
}
 8001604:	bf00      	nop
 8001606:	3750      	adds	r7, #80	; 0x50
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000

08001614 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Reception callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_UART_RxCpltCallback+0x44>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f8a7 	bl	8000774 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_UART_RxCpltCallback+0x48>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10e      	bne.n	800164e <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_UART_RxCpltCallback+0x4c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_UART_RxCpltCallback+0x44>)
 800163a:	7819      	ldrb	r1, [r3, #0]
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_UART_RxCpltCallback+0x50>)
 800163e:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8001640:	f7ff f8da 	bl	80007f8 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	4904      	ldr	r1, [pc, #16]	; (8001658 <HAL_UART_RxCpltCallback+0x44>)
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <HAL_UART_RxCpltCallback+0x54>)
 800164a:	f003 f8bb 	bl	80047c4 <HAL_UART_Receive_IT>
	}
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000008c 	.word	0x2000008c
 800165c:	40004800 	.word	0x40004800
 8001660:	200000c2 	.word	0x200000c2
 8001664:	20000090 	.word	0x20000090
 8001668:	20000230 	.word	0x20000230

0800166c <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_UART_TxCpltCallback+0x44>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d113      	bne.n	80016a6 <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 800167e:	f7ff f8eb 	bl	8000858 <tx_has_data>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10e      	bne.n	80016a6 <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_UART_TxCpltCallback+0x48>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_UART_TxCpltCallback+0x4c>)
 8001692:	5c9a      	ldrb	r2, [r3, r2]
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_UART_TxCpltCallback+0x50>)
 8001696:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 8001698:	f7ff f8f4 	bl	8000884 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 800169c:	2201      	movs	r2, #1
 800169e:	4907      	ldr	r1, [pc, #28]	; (80016bc <HAL_UART_TxCpltCallback+0x50>)
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f003 f831 	bl	8004708 <HAL_UART_Transmit_IT>
		}
	}
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40004800 	.word	0x40004800
 80016b4:	200000f7 	.word	0x200000f7
 80016b8:	200000c4 	.word	0x200000c4
 80016bc:	200001dc 	.word	0x200001dc

080016c0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016d2:	f000 fbcf 	bl	8001e74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016da:	2300      	movs	r3, #0
 80016dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016e2:	231f      	movs	r3, #31
 80016e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016e6:	2387      	movs	r3, #135	; 0x87
 80016e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016ee:	2300      	movs	r3, #0
 80016f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016f6:	2301      	movs	r3, #1
 80016f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001702:	463b      	mov	r3, r7
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fbed 	bl	8001ee4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800170a:	2004      	movs	r0, #4
 800170c:	f000 fbca 	bl	8001ea4 <HAL_MPU_Enable>

}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_MspInit+0x50>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_MspInit+0x50>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x50>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x50>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_MspInit+0x50>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x50>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2005      	movs	r0, #5
 8001760:	f000 fb51 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001764:	2005      	movs	r0, #5
 8001766:	f000 fb6a 	bl	8001e3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler+0x4>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler+0x4>

08001796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 fa00 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM3_IRQHandler+0x10>)
 80017e2:	f002 f86a 	bl	80038ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
  /* USER CODE END TIM3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001e4 	.word	0x200001e4

080017f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <USART3_IRQHandler+0x10>)
 80017f6:	f003 f829 	bl	800484c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000230 	.word	0x20000230

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f004 fabc 	bl	8005db0 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20080000 	.word	0x20080000
 8001864:	00000400 	.word	0x00000400
 8001868:	200001e0 	.word	0x200001e0
 800186c:	200002d0 	.word	0x200002d0

08001870 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <SystemInit+0x20>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <SystemInit+0x20>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <MX_TIM3_Init+0xe4>)
 80018c8:	4a2c      	ldr	r2, [pc, #176]	; (800197c <MX_TIM3_Init+0xe8>)
 80018ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <MX_TIM3_Init+0xe4>)
 80018ce:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80018d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b28      	ldr	r3, [pc, #160]	; (8001978 <MX_TIM3_Init+0xe4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <MX_TIM3_Init+0xe4>)
 80018dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80018e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <MX_TIM3_Init+0xe4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <MX_TIM3_Init+0xe4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ee:	4822      	ldr	r0, [pc, #136]	; (8001978 <MX_TIM3_Init+0xe4>)
 80018f0:	f001 feba 	bl	8003668 <HAL_TIM_Base_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80018fa:	f7ff ff0d 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001908:	4619      	mov	r1, r3
 800190a:	481b      	ldr	r0, [pc, #108]	; (8001978 <MX_TIM3_Init+0xe4>)
 800190c:	f002 f96e 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001916:	f7ff feff 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800191a:	4817      	ldr	r0, [pc, #92]	; (8001978 <MX_TIM3_Init+0xe4>)
 800191c:	f001 ff6c 	bl	80037f8 <HAL_TIM_OC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001926:	f7ff fef7 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <MX_TIM3_Init+0xe4>)
 800193a:	f002 fdeb 	bl	8004514 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001944:	f7ff fee8 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001948:	2300      	movs	r3, #0
 800194a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <MX_TIM3_Init+0xe4>)
 8001960:	f002 f8ca 	bl	8003af8 <HAL_TIM_OC_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800196a:	f7ff fed5 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	3738      	adds	r7, #56	; 0x38
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200001e4 	.word	0x200001e4
 800197c:	40000400 	.word	0x40000400

08001980 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_TIM_Base_MspInit+0x44>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d113      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_TIM_Base_MspInit+0x48>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HAL_TIM_Base_MspInit+0x48>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_TIM_Base_MspInit+0x48>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	201d      	movs	r0, #29
 80019b0:	f000 fa29 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019b4:	201d      	movs	r0, #29
 80019b6:	f000 fa42 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40023800 	.word	0x40023800

080019cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <MX_USART3_UART_Init+0x5c>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART3_UART_Init+0x58>)
 8001a10:	f002 fe2c 	bl	800466c <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a1a:	f7ff fe7d 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000230 	.word	0x20000230
 8001a28:	40004800 	.word	0x40004800

08001a2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0ae      	sub	sp, #184	; 0xb8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2290      	movs	r2, #144	; 0x90
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f004 f9d9 	bl	8005e04 <memset>
  if(uartHandle->Instance==USART3)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_UART_MspInit+0xc4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d144      	bne.n	8001ae6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8001a62:	2320      	movs	r3, #32
 8001a64:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 f9d4 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a76:	f7ff fe4f 	bl	8001718 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0xc8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <HAL_UART_MspInit+0xcc>)
 8001ad2:	f000 fadd 	bl	8002090 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2027      	movs	r0, #39	; 0x27
 8001adc:	f000 f993 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ae0:	2027      	movs	r0, #39	; 0x27
 8001ae2:	f000 f9ac 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	37b8      	adds	r7, #184	; 0xb8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40004800 	.word	0x40004800
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020c00 	.word	0x40020c00

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b02:	490e      	ldr	r1, [pc, #56]	; (8001b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b18:	4c0b      	ldr	r4, [pc, #44]	; (8001b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b26:	f7ff fea3 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f004 f947 	bl	8005dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff f8b3 	bl	8000c98 <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b40:	08006b50 	.word	0x08006b50
  ldr r2, =_sbss
 8001b44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b48:	200002cc 	.word	0x200002cc

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>

08001b4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b52:	2003      	movs	r0, #3
 8001b54:	f000 f94c 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b58:	200f      	movs	r0, #15
 8001b5a:	f000 f805 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5e:	f7ff fde1 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x54>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x58>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f967 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00e      	b.n	8001bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	d80a      	bhi.n	8001bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f000 f92f 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba8:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <HAL_InitTick+0x5c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008
 8001bec:	200002b8 	.word	0x200002b8

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200002b8 	.word	0x200002b8

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffde 	bl	8001bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008

08001c50 <__NVIC_SetPriorityGrouping>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x40>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	05fa0000 	.word	0x05fa0000

08001c98 <__NVIC_GetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e78:	f3bf 8f5f 	dmb	sy
}
 8001e7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_MPU_Disable+0x28>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <HAL_MPU_Disable+0x28>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_MPU_Disable+0x2c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	e000ed90 	.word	0xe000ed90

08001ea4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <HAL_MPU_Enable+0x38>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_MPU_Enable+0x3c>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_MPU_Enable+0x3c>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec2:	f3bf 8f4f 	dsb	sy
}
 8001ec6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec8:	f3bf 8f6f 	isb	sy
}
 8001ecc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed90 	.word	0xe000ed90
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	785a      	ldrb	r2, [r3, #1]
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_MPU_ConfigRegion+0x84>)
 8001ef2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d029      	beq.n	8001f50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <HAL_MPU_ConfigRegion+0x84>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7b1b      	ldrb	r3, [r3, #12]
 8001f08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7adb      	ldrb	r3, [r3, #11]
 8001f0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7a9b      	ldrb	r3, [r3, #10]
 8001f16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7b5b      	ldrb	r3, [r3, #13]
 8001f1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7b9b      	ldrb	r3, [r3, #14]
 8001f26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7bdb      	ldrb	r3, [r3, #15]
 8001f2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7a5b      	ldrb	r3, [r3, #9]
 8001f36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7a1b      	ldrb	r3, [r3, #8]
 8001f3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001f4e:	e005      	b.n	8001f5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_MPU_ConfigRegion+0x84>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_MPU_ConfigRegion+0x84>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed90 	.word	0xe000ed90

08001f6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f7a:	f7ff fe39 	bl	8001bf0 <HAL_GetTick>
 8001f7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d008      	beq.n	8001f9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e052      	b.n	8002044 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0216 	bic.w	r2, r2, #22
 8001fac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_DMA_Abort+0x62>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0208 	bic.w	r2, r2, #8
 8001fdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fee:	e013      	b.n	8002018 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff0:	f7ff fdfe 	bl	8001bf0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	d90c      	bls.n	8002018 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2220      	movs	r2, #32
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2203      	movs	r2, #3
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e015      	b.n	8002044 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e4      	bne.n	8001ff0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	223f      	movs	r2, #63	; 0x3f
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d004      	beq.n	800206a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00c      	b.n	8002084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2205      	movs	r2, #5
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e175      	b.n	800239c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8164 	bne.w	8002396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d005      	beq.n	80020e6 <HAL_GPIO_Init+0x56>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b03      	cmp	r3, #3
 8002152:	d017      	beq.n	8002184 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d123      	bne.n	80021d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3208      	adds	r2, #8
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80be 	beq.w	8002396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_GPIO_Init+0x324>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a65      	ldr	r2, [pc, #404]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002232:	4a61      	ldr	r2, [pc, #388]	; (80023b8 <HAL_GPIO_Init+0x328>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_GPIO_Init+0x32c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d037      	beq.n	80022ce <HAL_GPIO_Init+0x23e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_GPIO_Init+0x23a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a56      	ldr	r2, [pc, #344]	; (80023c4 <HAL_GPIO_Init+0x334>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x236>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <HAL_GPIO_Init+0x338>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x232>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_GPIO_Init+0x33c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x22e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a53      	ldr	r2, [pc, #332]	; (80023d0 <HAL_GPIO_Init+0x340>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x22a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_GPIO_Init+0x344>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a51      	ldr	r2, [pc, #324]	; (80023d8 <HAL_GPIO_Init+0x348>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_GPIO_Init+0x34c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_GPIO_Init+0x350>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x21a>
 80022a6:	2309      	movs	r3, #9
 80022a8:	e012      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022aa:	230a      	movs	r3, #10
 80022ac:	e010      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ae:	2308      	movs	r3, #8
 80022b0:	e00e      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e00c      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00a      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022be:	2304      	movs	r3, #4
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	; (80023b8 <HAL_GPIO_Init+0x328>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_GPIO_Init+0x354>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002312:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002366:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f ae86 	bls.w	80020b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40021c00 	.word	0x40021c00
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40022400 	.word	0x40022400
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	041a      	lsls	r2, r3, #16
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43d9      	mvns	r1, r3
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	400b      	ands	r3, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247e:	f7ff fbb7 	bl	8001bf0 <HAL_GetTick>
 8002482:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002484:	e009      	b.n	800249a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002486:	f7ff fbb3 	bl	8001bf0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002494:	d901      	bls.n	800249a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e022      	b.n	80024e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a6:	d1ee      	bne.n	8002486 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b4:	f7ff fb9c 	bl	8001bf0 <HAL_GetTick>
 80024b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ba:	e009      	b.n	80024d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024bc:	f7ff fb98 	bl	8001bf0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ca:	d901      	bls.n	80024d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e007      	b.n	80024e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024dc:	d1ee      	bne.n	80024bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e29b      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002514:	4b96      	ldr	r3, [pc, #600]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b04      	cmp	r3, #4
 800251e:	d00c      	beq.n	800253a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002520:	4b93      	ldr	r3, [pc, #588]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d112      	bne.n	8002552 <HAL_RCC_OscConfig+0x62>
 800252c:	4b90      	ldr	r3, [pc, #576]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d10b      	bne.n	8002552 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	4b8d      	ldr	r3, [pc, #564]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d06c      	beq.n	8002620 <HAL_RCC_OscConfig+0x130>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d168      	bne.n	8002620 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e275      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x7a>
 800255c:	4b84      	ldr	r3, [pc, #528]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a83      	ldr	r2, [pc, #524]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e02e      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x9c>
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7e      	ldr	r2, [pc, #504]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b7c      	ldr	r3, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7b      	ldr	r2, [pc, #492]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0xc0>
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b73      	ldr	r3, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a72      	ldr	r2, [pc, #456]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xd8>
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6b      	ldr	r2, [pc, #428]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7ff fb0e 	bl	8001bf0 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fb0a 	bl	8001bf0 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e229      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xe8>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fafa 	bl	8001bf0 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff faf6 	bl	8001bf0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e215      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	4b57      	ldr	r3, [pc, #348]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x110>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d069      	beq.n	8002702 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262e:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x190>
 8002646:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x17a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1e9      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	493d      	ldr	r1, [pc, #244]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	e040      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d023      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a38      	ldr	r2, [pc, #224]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7ff faac 	bl	8001bf0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7ff faa8 	bl	8001bf0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4929      	ldr	r1, [pc, #164]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
 80026ce:	e018      	b.n	8002702 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff fa88 	bl	8001bf0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7ff fa84 	bl	8001bf0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1a3      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d038      	beq.n	8002780 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7ff fa65 	bl	8001bf0 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7ff fa61 	bl	8001bf0 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e180      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x23a>
 8002748:	e01a      	b.n	8002780 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_RCC_OscConfig+0x280>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7ff fa4b 	bl	8001bf0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275e:	f7ff fa47 	bl	8001bf0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d903      	bls.n	8002774 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e166      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
 8002770:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	4b92      	ldr	r3, [pc, #584]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ee      	bne.n	800275e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a4 	beq.w	80028d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b8c      	ldr	r3, [pc, #560]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b89      	ldr	r3, [pc, #548]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a88      	ldr	r2, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b86      	ldr	r3, [pc, #536]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027c2:	4b80      	ldr	r3, [pc, #512]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7f      	ldr	r2, [pc, #508]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7ff fa0f 	bl	8001bf0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7ff fa0b 	bl	8001bf0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e12a      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e8:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_RCC_OscConfig+0x4d4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x31a>
 80027fc:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a6f      	ldr	r2, [pc, #444]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	e02d      	b.n	8002866 <HAL_RCC_OscConfig+0x376>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x33c>
 8002812:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a6a      	ldr	r2, [pc, #424]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a67      	ldr	r2, [pc, #412]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	e01c      	b.n	8002866 <HAL_RCC_OscConfig+0x376>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d10c      	bne.n	800284e <HAL_RCC_OscConfig+0x35e>
 8002834:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a61      	ldr	r2, [pc, #388]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
 8002840:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	e00b      	b.n	8002866 <HAL_RCC_OscConfig+0x376>
 800284e:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	4a5b      	ldr	r2, [pc, #364]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	6713      	str	r3, [r2, #112]	; 0x70
 800285a:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d015      	beq.n	800289a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f9bf 	bl	8001bf0 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7ff f9bb 	bl	8001bf0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0d8      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <HAL_RCC_OscConfig+0x386>
 8002898:	e014      	b.n	80028c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7ff f9a9 	bl	8001bf0 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7ff f9a5 	bl	8001bf0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0c2      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b8:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ee      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80ae 	beq.w	8002a3c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d06d      	beq.n	80029c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d14b      	bne.n	800298c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80028fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff f976 	bl	8001bf0 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff f972 	bl	8001bf0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e091      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	3b01      	subs	r3, #1
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	071b      	lsls	r3, r3, #28
 8002952:	491b      	ldr	r1, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7ff f944 	bl	8001bf0 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7ff f940 	bl	8001bf0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e05f      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x47c>
 800298a:	e057      	b.n	8002a3c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 8002992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff f92a 	bl	8001bf0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7ff f926 	bl	8001bf0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e045      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4b0>
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x54c>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCC_OscConfig+0x558>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d030      	beq.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d129      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d122      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d119      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10f      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d0      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 020f 	bic.w	r2, r3, #15
 8002a7a:	4965      	ldr	r1, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d040      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e073      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4936      	ldr	r1, [pc, #216]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b40:	f7ff f856 	bl	8001bf0 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff f852 	bl	8001bf0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e053      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d210      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 020f 	bic.w	r2, r3, #15
 8002b86:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1d0>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1d4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe ffb2 	bl	8001b68 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	080069f4 	.word	0x080069f4
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b090      	sub	sp, #64	; 0x40
 8002c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c30:	2300      	movs	r3, #0
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c34:	2300      	movs	r3, #0
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x40>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	f200 80a1 	bhi.w	8002d90 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x34>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c56:	e09b      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c5c:	e09b      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5e:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_RCC_GetSysClockFreq+0x188>)
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c62:	e098      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c6e:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d028      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	627a      	str	r2, [r7, #36]	; 0x24
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_GetSysClockFreq+0x188>)
 8002c90:	fb03 f201 	mul.w	r2, r3, r1
 8002c94:	2300      	movs	r3, #0
 8002c96:	fb00 f303 	mul.w	r3, r0, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a43      	ldr	r2, [pc, #268]	; (8002dac <HAL_RCC_GetSysClockFreq+0x188>)
 8002c9e:	fba0 1202 	umull	r1, r2, r0, r2
 8002ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002caa:	4413      	add	r3, r2
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	61fa      	str	r2, [r7, #28]
 8002cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cbe:	f7fd fb17 	bl	80002f0 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cca:	e053      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	617a      	str	r2, [r7, #20]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cde:	f04f 0b00 	mov.w	fp, #0
 8002ce2:	4652      	mov	r2, sl
 8002ce4:	465b      	mov	r3, fp
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	0159      	lsls	r1, r3, #5
 8002cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf4:	0150      	lsls	r0, r2, #5
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	ebb2 080a 	subs.w	r8, r2, sl
 8002cfe:	eb63 090b 	sbc.w	r9, r3, fp
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d16:	ebb2 0408 	subs.w	r4, r2, r8
 8002d1a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	00eb      	lsls	r3, r5, #3
 8002d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2c:	00e2      	lsls	r2, r4, #3
 8002d2e:	4614      	mov	r4, r2
 8002d30:	461d      	mov	r5, r3
 8002d32:	eb14 030a 	adds.w	r3, r4, sl
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	eb45 030b 	adc.w	r3, r5, fp
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	028b      	lsls	r3, r1, #10
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d54:	4621      	mov	r1, r4
 8002d56:	028a      	lsls	r2, r1, #10
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	60fa      	str	r2, [r7, #12]
 8002d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d68:	f7fd fac2 	bl	80002f0 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3740      	adds	r7, #64	; 0x40
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	017d7840 	.word	0x017d7840

08002db0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000000 	.word	0x20000000

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0a9b      	lsrs	r3, r3, #10
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	08006a04 	.word	0x08006a04

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df4:	f7ff ffdc 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0b5b      	lsrs	r3, r3, #13
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4903      	ldr	r1, [pc, #12]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	08006a04 	.word	0x08006a04

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e40:	4b69      	ldr	r3, [pc, #420]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a68      	ldr	r2, [pc, #416]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e4a:	6093      	str	r3, [r2, #8]
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	4964      	ldr	r1, [pc, #400]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d017      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	4959      	ldr	r1, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d101      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d017      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eae:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	494a      	ldr	r1, [pc, #296]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 808b 	beq.w	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4a39      	ldr	r2, [pc, #228]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6413      	str	r3, [r2, #64]	; 0x40
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f14:	4b35      	ldr	r3, [pc, #212]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fe fe66 	bl	8001bf0 <HAL_GetTick>
 8002f24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe fe62 	bl	8001bf0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e38f      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d035      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d02e      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d114      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fe2a 	bl	8001bf0 <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fe26 	bl	8001bf0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e351      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ee      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fce:	d111      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fde:	400b      	ands	r3, r1
 8002fe0:	4901      	ldr	r1, [pc, #4]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	0ffffcff 	.word	0x0ffffcff
 8002ff4:	4bac      	ldr	r3, [pc, #688]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4aab      	ldr	r2, [pc, #684]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	4ba9      	ldr	r3, [pc, #676]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	49a6      	ldr	r1, [pc, #664]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300e:	4313      	orrs	r3, r2
 8003010:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301e:	4ba2      	ldr	r3, [pc, #648]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003024:	4aa0      	ldr	r2, [pc, #640]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800302e:	4b9e      	ldr	r3, [pc, #632]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003030:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	499b      	ldr	r1, [pc, #620]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304c:	4b96      	ldr	r3, [pc, #600]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305a:	4993      	ldr	r1, [pc, #588]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306e:	4b8e      	ldr	r3, [pc, #568]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307c:	498a      	ldr	r1, [pc, #552]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003090:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	4982      	ldr	r1, [pc, #520]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b2:	4b7d      	ldr	r3, [pc, #500]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4979      	ldr	r1, [pc, #484]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d4:	4b74      	ldr	r3, [pc, #464]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4971      	ldr	r1, [pc, #452]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f6:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f023 020c 	bic.w	r2, r3, #12
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	4968      	ldr	r1, [pc, #416]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003118:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	4960      	ldr	r1, [pc, #384]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800313a:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	4957      	ldr	r1, [pc, #348]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315c:	4b52      	ldr	r3, [pc, #328]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	494f      	ldr	r1, [pc, #316]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	4946      	ldr	r1, [pc, #280]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	493e      	ldr	r1, [pc, #248]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	4935      	ldr	r1, [pc, #212]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	492d      	ldr	r1, [pc, #180]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d011      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003214:	4924      	ldr	r1, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003254:	4914      	ldr	r1, [pc, #80]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003278:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329c:	4902      	ldr	r1, [pc, #8]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032a4:	e002      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032b8:	4b8a      	ldr	r3, [pc, #552]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	4986      	ldr	r1, [pc, #536]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032dc:	4b81      	ldr	r3, [pc, #516]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ec:	497d      	ldr	r1, [pc, #500]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d006      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80d6 	beq.w	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003308:	4b76      	ldr	r3, [pc, #472]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a75      	ldr	r2, [pc, #468]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fe fc6c 	bl	8001bf0 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800331c:	f7fe fc68 	bl	8001bf0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e195      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800332e:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d021      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11d      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800335c:	4b61      	ldr	r3, [pc, #388]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003362:	0e1b      	lsrs	r3, r3, #24
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	019a      	lsls	r2, r3, #6
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	071b      	lsls	r3, r3, #28
 8003382:	4958      	ldr	r1, [pc, #352]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02e      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b4:	d129      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033b6:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033c4:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	0f1b      	lsrs	r3, r3, #28
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	019a      	lsls	r2, r3, #6
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	071b      	lsls	r3, r3, #28
 80033ea:	493e      	ldr	r1, [pc, #248]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033f2:	4b3c      	ldr	r3, [pc, #240]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f8:	f023 021f 	bic.w	r2, r3, #31
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	3b01      	subs	r3, #1
 8003402:	4938      	ldr	r1, [pc, #224]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01d      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	0e1b      	lsrs	r3, r3, #24
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003424:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	0f1b      	lsrs	r3, r3, #28
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	019a      	lsls	r2, r3, #6
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	061b      	lsls	r3, r3, #24
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	4926      	ldr	r1, [pc, #152]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	019a      	lsls	r2, r3, #6
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	071b      	lsls	r3, r3, #28
 800347a:	491a      	ldr	r1, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800348c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348e:	f7fe fbaf 	bl	8001bf0 <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003496:	f7fe fbab 	bl	8001bf0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0d8      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	f040 80ce 	bne.w	8003658 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c8:	f7fe fb92 	bl	8001bf0 <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ce:	e00b      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034d0:	f7fe fb8e 	bl	8001bf0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d904      	bls.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0bb      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034e8:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f4:	d0ec      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02e      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d12a      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800351e:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	0f1b      	lsrs	r3, r3, #28
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	019a      	lsls	r2, r3, #6
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	071b      	lsls	r3, r3, #28
 8003552:	4944      	ldr	r1, [pc, #272]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800355a:	4b42      	ldr	r3, [pc, #264]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800355c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003560:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	493d      	ldr	r1, [pc, #244]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d022      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003588:	d11d      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	0e1b      	lsrs	r3, r3, #24
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003598:	4b32      	ldr	r3, [pc, #200]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	0f1b      	lsrs	r3, r3, #28
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	019a      	lsls	r2, r3, #6
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	431a      	orrs	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	071b      	lsls	r3, r3, #28
 80035be:	4929      	ldr	r1, [pc, #164]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d028      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	0e1b      	lsrs	r3, r3, #24
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	019a      	lsls	r2, r3, #6
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	4917      	ldr	r1, [pc, #92]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4911      	ldr	r1, [pc, #68]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe fade 	bl	8001bf0 <HAL_GetTick>
 8003634:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003638:	f7fe fada 	bl	8001bf0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e007      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003656:	d1ef      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e049      	b.n	800370e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fe f976 	bl	8001980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fb9c 	bl	8003de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e04c      	b.n	80037ca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <HAL_TIM_Base_Start+0xc0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_TIM_Base_Start+0x70>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d01d      	beq.n	8003788 <HAL_TIM_Base_Start+0x70>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a22      	ldr	r2, [pc, #136]	; (80037dc <HAL_TIM_Base_Start+0xc4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_TIM_Base_Start+0x70>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_TIM_Base_Start+0xc8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_TIM_Base_Start+0x70>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <HAL_TIM_Base_Start+0xcc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_TIM_Base_Start+0x70>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <HAL_TIM_Base_Start+0xd0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_TIM_Base_Start+0x70>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <HAL_TIM_Base_Start+0xd4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_TIM_Base_Start+0x70>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <HAL_TIM_Base_Start+0xd8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d115      	bne.n	80037b4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_TIM_Base_Start+0xdc>)
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b06      	cmp	r3, #6
 8003798:	d015      	beq.n	80037c6 <HAL_TIM_Base_Start+0xae>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d011      	beq.n	80037c6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e008      	b.n	80037c6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e000      	b.n	80037c8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800
 80037e4:	40000c00 	.word	0x40000c00
 80037e8:	40010400 	.word	0x40010400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40001800 	.word	0x40001800
 80037f4:	00010007 	.word	0x00010007

080037f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e049      	b.n	800389e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f841 	bl	80038a6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f000 fad4 	bl	8003de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d122      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d11b      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0202 	mvn.w	r2, #2
 80038e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fa53 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003902:	e005      	b.n	8003910 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa45 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa56 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d122      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d11b      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0204 	mvn.w	r2, #4
 800393a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fa29 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 8003956:	e005      	b.n	8003964 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fa1b 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa2c 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d122      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11b      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0208 	mvn.w	r2, #8
 800398e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f9ff 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 80039aa:	e005      	b.n	80039b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f9f1 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa02 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d122      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d11b      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f06f 0210 	mvn.w	r2, #16
 80039e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2208      	movs	r2, #8
 80039e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f9d5 	bl	8003da8 <HAL_TIM_IC_CaptureCallback>
 80039fe:	e005      	b.n	8003a0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f9c7 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f9d8 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10e      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0201 	mvn.w	r2, #1
 8003a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f9a1 	bl	8003d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d10e      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fded 	bl	8004644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b80      	cmp	r3, #128	; 0x80
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fde0 	bl	8004658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f986 	bl	8003dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d10e      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0220 	mvn.w	r2, #32
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fda0 	bl	8004630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e066      	b.n	8003be4 <HAL_TIM_OC_ConfigChannel+0xec>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b14      	cmp	r3, #20
 8003b22:	d857      	bhi.n	8003bd4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b81 	.word	0x08003b81
 8003b30:	08003bd5 	.word	0x08003bd5
 8003b34:	08003bd5 	.word	0x08003bd5
 8003b38:	08003bd5 	.word	0x08003bd5
 8003b3c:	08003b8f 	.word	0x08003b8f
 8003b40:	08003bd5 	.word	0x08003bd5
 8003b44:	08003bd5 	.word	0x08003bd5
 8003b48:	08003bd5 	.word	0x08003bd5
 8003b4c:	08003b9d 	.word	0x08003b9d
 8003b50:	08003bd5 	.word	0x08003bd5
 8003b54:	08003bd5 	.word	0x08003bd5
 8003b58:	08003bd5 	.word	0x08003bd5
 8003b5c:	08003bab 	.word	0x08003bab
 8003b60:	08003bd5 	.word	0x08003bd5
 8003b64:	08003bd5 	.word	0x08003bd5
 8003b68:	08003bd5 	.word	0x08003bd5
 8003b6c:	08003bb9 	.word	0x08003bb9
 8003b70:	08003bd5 	.word	0x08003bd5
 8003b74:	08003bd5 	.word	0x08003bd5
 8003b78:	08003bd5 	.word	0x08003bd5
 8003b7c:	08003bc7 	.word	0x08003bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9cc 	bl	8003f24 <TIM_OC1_SetConfig>
      break;
 8003b8c:	e025      	b.n	8003bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fa37 	bl	8004008 <TIM_OC2_SetConfig>
      break;
 8003b9a:	e01e      	b.n	8003bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 faa8 	bl	80040f8 <TIM_OC3_SetConfig>
      break;
 8003ba8:	e017      	b.n	8003bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fb17 	bl	80041e4 <TIM_OC4_SetConfig>
      break;
 8003bb6:	e010      	b.n	8003bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fb68 	bl	8004294 <TIM_OC5_SetConfig>
      break;
 8003bc4:	e009      	b.n	8003bda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fbb3 	bl	8004338 <TIM_OC6_SetConfig>
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_ConfigClockSource+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0b4      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x186>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <HAL_TIM_ConfigClockSource+0x190>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c40:	d03e      	beq.n	8003cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	f200 8087 	bhi.w	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	f000 8086 	beq.w	8003d5e <HAL_TIM_ConfigClockSource+0x172>
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d87f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b70      	cmp	r3, #112	; 0x70
 8003c5a:	d01a      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0xa6>
 8003c5c:	2b70      	cmp	r3, #112	; 0x70
 8003c5e:	d87b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d050      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x11a>
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d877      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b50      	cmp	r3, #80	; 0x50
 8003c6a:	d03c      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c6c:	2b50      	cmp	r3, #80	; 0x50
 8003c6e:	d873      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d058      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x13a>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d86f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b30      	cmp	r3, #48	; 0x30
 8003c7a:	d064      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d86b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d060      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d867      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d05c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d05a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	e062      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6899      	ldr	r1, [r3, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f000 fc17 	bl	80044d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	609a      	str	r2, [r3, #8]
      break;
 8003cbe:	e04f      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f000 fc00 	bl	80044d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce2:	609a      	str	r2, [r3, #8]
      break;
 8003ce4:	e03c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f000 fb74 	bl	80043e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2150      	movs	r1, #80	; 0x50
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fbcd 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003d04:	e02c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 fb93 	bl	800443e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2160      	movs	r1, #96	; 0x60
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fbbd 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003d24:	e01c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 fb54 	bl	80043e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fbad 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003d44:	e00c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f000 fba4 	bl	800449e <TIM_ITRx_SetConfig>
      break;
 8003d56:	e003      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	e000      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	fffeff88 	.word	0xfffeff88

08003d80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a40      	ldr	r2, [pc, #256]	; (8003ef8 <TIM_Base_SetConfig+0x114>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e02:	d00f      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3d      	ldr	r2, [pc, #244]	; (8003efc <TIM_Base_SetConfig+0x118>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3c      	ldr	r2, [pc, #240]	; (8003f00 <TIM_Base_SetConfig+0x11c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3b      	ldr	r2, [pc, #236]	; (8003f04 <TIM_Base_SetConfig+0x120>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3a      	ldr	r2, [pc, #232]	; (8003f08 <TIM_Base_SetConfig+0x124>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <TIM_Base_SetConfig+0x114>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02b      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e44:	d027      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2c      	ldr	r2, [pc, #176]	; (8003efc <TIM_Base_SetConfig+0x118>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d023      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2b      	ldr	r2, [pc, #172]	; (8003f00 <TIM_Base_SetConfig+0x11c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01f      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <TIM_Base_SetConfig+0x120>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01b      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <TIM_Base_SetConfig+0x124>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d017      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <TIM_Base_SetConfig+0x128>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a27      	ldr	r2, [pc, #156]	; (8003f10 <TIM_Base_SetConfig+0x12c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00f      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a26      	ldr	r2, [pc, #152]	; (8003f14 <TIM_Base_SetConfig+0x130>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <TIM_Base_SetConfig+0x134>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <TIM_Base_SetConfig+0x138>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <TIM_Base_SetConfig+0x13c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <TIM_Base_SetConfig+0x114>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_Base_SetConfig+0xf8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	; (8003f08 <TIM_Base_SetConfig+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d103      	bne.n	8003ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40000c00 	.word	0x40000c00
 8003f08:	40010400 	.word	0x40010400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800
 8003f18:	40001800 	.word	0x40001800
 8003f1c:	40001c00 	.word	0x40001c00
 8003f20:	40002000 	.word	0x40002000

08003f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <TIM_OC1_SetConfig+0xd8>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f023 0302 	bic.w	r3, r3, #2
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a21      	ldr	r2, [pc, #132]	; (8004000 <TIM_OC1_SetConfig+0xdc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_OC1_SetConfig+0x64>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a20      	ldr	r2, [pc, #128]	; (8004004 <TIM_OC1_SetConfig+0xe0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10c      	bne.n	8003fa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0308 	bic.w	r3, r3, #8
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <TIM_OC1_SetConfig+0xdc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_OC1_SetConfig+0x8e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a15      	ldr	r2, [pc, #84]	; (8004004 <TIM_OC1_SetConfig+0xe0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d111      	bne.n	8003fd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	fffeff8f 	.word	0xfffeff8f
 8004000:	40010000 	.word	0x40010000
 8004004:	40010400 	.word	0x40010400

08004008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0210 	bic.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <TIM_OC2_SetConfig+0xe4>)
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0320 	bic.w	r3, r3, #32
 8004052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <TIM_OC2_SetConfig+0xe8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <TIM_OC2_SetConfig+0x68>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <TIM_OC2_SetConfig+0xec>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10d      	bne.n	800408c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <TIM_OC2_SetConfig+0xe8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_OC2_SetConfig+0x94>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <TIM_OC2_SetConfig+0xec>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d113      	bne.n	80040c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	feff8fff 	.word	0xfeff8fff
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400

080040f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <TIM_OC3_SetConfig+0xe0>)
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a22      	ldr	r2, [pc, #136]	; (80041dc <TIM_OC3_SetConfig+0xe4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC3_SetConfig+0x66>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <TIM_OC3_SetConfig+0xe8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10d      	bne.n	800417a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a17      	ldr	r2, [pc, #92]	; (80041dc <TIM_OC3_SetConfig+0xe4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_OC3_SetConfig+0x92>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <TIM_OC3_SetConfig+0xe8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d113      	bne.n	80041b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	fffeff8f 	.word	0xfffeff8f
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40010400 	.word	0x40010400

080041e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <TIM_OC4_SetConfig+0xa4>)
 8004210:	4013      	ands	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800422e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	031b      	lsls	r3, r3, #12
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a13      	ldr	r2, [pc, #76]	; (800428c <TIM_OC4_SetConfig+0xa8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC4_SetConfig+0x68>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <TIM_OC4_SetConfig+0xac>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d109      	bne.n	8004260 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	019b      	lsls	r3, r3, #6
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	feff8fff 	.word	0xfeff8fff
 800428c:	40010000 	.word	0x40010000
 8004290:	40010400 	.word	0x40010400

08004294 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4b1b      	ldr	r3, [pc, #108]	; (800432c <TIM_OC5_SetConfig+0x98>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a12      	ldr	r2, [pc, #72]	; (8004330 <TIM_OC5_SetConfig+0x9c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_OC5_SetConfig+0x5e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a11      	ldr	r2, [pc, #68]	; (8004334 <TIM_OC5_SetConfig+0xa0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d109      	bne.n	8004306 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	fffeff8f 	.word	0xfffeff8f
 8004330:	40010000 	.word	0x40010000
 8004334:	40010400 	.word	0x40010400

08004338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <TIM_OC6_SetConfig+0x9c>)
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800437a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	051b      	lsls	r3, r3, #20
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <TIM_OC6_SetConfig+0xa0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_OC6_SetConfig+0x60>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <TIM_OC6_SetConfig+0xa4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d109      	bne.n	80043ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	029b      	lsls	r3, r3, #10
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	feff8fff 	.word	0xfeff8fff
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40010400 	.word	0x40010400

080043e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f023 0201 	bic.w	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 030a 	bic.w	r3, r3, #10
 800441c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443e:	b480      	push	{r7}
 8004440:	b087      	sub	sp, #28
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0210 	bic.w	r2, r3, #16
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	031b      	lsls	r3, r3, #12
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800447a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f043 0307 	orr.w	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	021a      	lsls	r2, r3, #8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004528:	2302      	movs	r3, #2
 800452a:	e06d      	b.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a30      	ldr	r2, [pc, #192]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a2f      	ldr	r2, [pc, #188]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d108      	bne.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004566:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004578:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a20      	ldr	r2, [pc, #128]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d022      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459e:	d01d      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a15      	ldr	r2, [pc, #84]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d10c      	bne.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40014000 	.word	0x40014000
 800462c:	40001800 	.word	0x40001800

08004630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e040      	b.n	8004700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd f9cc 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2224      	movs	r2, #36	; 0x24
 8004698:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fbd6 	bl	8004e5c <UART_SetConfig>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e022      	b.n	8004700 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fe2e 	bl	8005324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 feb5 	bl	8005468 <UART_CheckIdleState>
 80046fe:	4603      	mov	r3, r0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004708:	b480      	push	{r7}
 800470a:	b08b      	sub	sp, #44	; 0x2c
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800471a:	2b20      	cmp	r3, #32
 800471c:	d147      	bne.n	80047ae <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_UART_Transmit_IT+0x22>
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e040      	b.n	80047b0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d107      	bne.n	8004772 <HAL_UART_Transmit_IT+0x6a>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a13      	ldr	r2, [pc, #76]	; (80047bc <HAL_UART_Transmit_IT+0xb4>)
 800476e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004770:	e002      	b.n	8004778 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <HAL_UART_Transmit_IT+0xb8>)
 8004776:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	613b      	str	r3, [r7, #16]
   return(result);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	69f9      	ldr	r1, [r7, #28]
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e6      	bne.n	8004778 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	372c      	adds	r7, #44	; 0x2c
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	080059c7 	.word	0x080059c7
 80047c0:	08005911 	.word	0x08005911

080047c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d132      	bne.n	8004842 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_UART_Receive_IT+0x24>
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e02b      	b.n	8004844 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d018      	beq.n	8004832 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	613b      	str	r3, [r7, #16]
   return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	69f9      	ldr	r1, [r7, #28]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	61bb      	str	r3, [r7, #24]
   return(result);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e6      	bne.n	8004800 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	461a      	mov	r2, r3
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 ff29 	bl	8005690 <UART_Start_Receive_IT>
 800483e:	4603      	mov	r3, r0
 8004840:	e000      	b.n	8004844 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3728      	adds	r7, #40	; 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b0ba      	sub	sp, #232	; 0xe8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004872:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004876:	f640 030f 	movw	r3, #2063	; 0x80f
 800487a:	4013      	ands	r3, r2
 800487c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00f      	beq.n	80048b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 82ac 	beq.w	8004e02 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
      }
      return;
 80048b2:	e2a6      	b.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8117 	beq.w	8004aec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048ce:	4b85      	ldr	r3, [pc, #532]	; (8004ae4 <HAL_UART_IRQHandler+0x298>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 810a 	beq.w	8004aec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_UART_IRQHandler+0xbc>
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d011      	beq.n	8004938 <HAL_UART_IRQHandler+0xec>
 8004914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2202      	movs	r2, #2
 8004926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d011      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
 8004944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2204      	movs	r2, #4
 8004956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d017      	beq.n	80049a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004984:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2208      	movs	r2, #8
 8004992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	f043 0208 	orr.w	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <HAL_UART_IRQHandler+0x18a>
 80049b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00c      	beq.n	80049d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8212 	beq.w	8004e06 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04f      	beq.n	8004ace <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fef4 	bl	800581c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d141      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1d9      	bne.n	8004a42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d013      	beq.n	8004abe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_UART_IRQHandler+0x29c>)
 8004a9c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd fad2 	bl	800204c <HAL_DMA_Abort_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d017      	beq.n	8004ade <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	e00f      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9ac 	bl	8004e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	e00b      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9a8 	bl	8004e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e007      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9a4 	bl	8004e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004adc:	e193      	b.n	8004e06 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ade:	bf00      	nop
    return;
 8004ae0:	e191      	b.n	8004e06 <HAL_UART_IRQHandler+0x5ba>
 8004ae2:	bf00      	nop
 8004ae4:	04000120 	.word	0x04000120
 8004ae8:	080058e5 	.word	0x080058e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 814c 	bne.w	8004d8e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8145 	beq.w	8004d8e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 813e 	beq.w	8004d8e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2210      	movs	r2, #16
 8004b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	f040 80b6 	bne.w	8004c96 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8165 	beq.w	8004e0a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	f080 815d 	bcs.w	8004e0a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b64:	f000 8086 	beq.w	8004c74 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1da      	bne.n	8004b68 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e1      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e3      	bne.n	8004bee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	f023 0310 	bic.w	r3, r3, #16
 8004c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e4      	bne.n	8004c34 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fd f97c 	bl	8001f6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8ce 	bl	8004e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c94:	e0b9      	b.n	8004e0a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80ab 	beq.w	8004e0e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a6 	beq.w	8004e0e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e4      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	623b      	str	r3, [r7, #32]
   return(result);
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d1c:	633a      	str	r2, [r7, #48]	; 0x30
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e3      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	617b      	str	r3, [r7, #20]
   return(result);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e4      	bne.n	8004d44 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f852 	bl	8004e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d8c:	e03f      	b.n	8004e0e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <HAL_UART_IRQHandler+0x56c>
 8004d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f849 	bl	8004e48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004db6:	e02d      	b.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00e      	beq.n	8004de2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01c      	beq.n	8004e12 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
    }
    return;
 8004de0:	e017      	b.n	8004e12 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d012      	beq.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fe43 	bl	8005a86 <UART_EndTransmit_IT>
    return;
 8004e00:	e008      	b.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e02:	bf00      	nop
 8004e04:	e006      	b.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004e12:	bf00      	nop
  }

}
 8004e14:	37e8      	adds	r7, #232	; 0xe8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4ba6      	ldr	r3, [pc, #664]	; (8005120 <UART_SetConfig+0x2c4>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	6979      	ldr	r1, [r7, #20]
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a94      	ldr	r2, [pc, #592]	; (8005124 <UART_SetConfig+0x2c8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d120      	bne.n	8004f1a <UART_SetConfig+0xbe>
 8004ed8:	4b93      	ldr	r3, [pc, #588]	; (8005128 <UART_SetConfig+0x2cc>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d816      	bhi.n	8004f14 <UART_SetConfig+0xb8>
 8004ee6:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0x90>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	08004f09 	.word	0x08004f09
 8004ef4:	08004f03 	.word	0x08004f03
 8004ef8:	08004f0f 	.word	0x08004f0f
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e150      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f02:	2302      	movs	r3, #2
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e14d      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e14a      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f0e:	2308      	movs	r3, #8
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e147      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f14:	2310      	movs	r3, #16
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e144      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a83      	ldr	r2, [pc, #524]	; (800512c <UART_SetConfig+0x2d0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d132      	bne.n	8004f8a <UART_SetConfig+0x12e>
 8004f24:	4b80      	ldr	r3, [pc, #512]	; (8005128 <UART_SetConfig+0x2cc>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d828      	bhi.n	8004f84 <UART_SetConfig+0x128>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0xdc>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f6d 	.word	0x08004f6d
 8004f3c:	08004f85 	.word	0x08004f85
 8004f40:	08004f85 	.word	0x08004f85
 8004f44:	08004f85 	.word	0x08004f85
 8004f48:	08004f79 	.word	0x08004f79
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f85 	.word	0x08004f85
 8004f58:	08004f73 	.word	0x08004f73
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f85 	.word	0x08004f85
 8004f68:	08004f7f 	.word	0x08004f7f
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e118      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f72:	2302      	movs	r3, #2
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e115      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e112      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f7e:	2308      	movs	r3, #8
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e10f      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f84:	2310      	movs	r3, #16
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e10c      	b.n	80051a4 <UART_SetConfig+0x348>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a68      	ldr	r2, [pc, #416]	; (8005130 <UART_SetConfig+0x2d4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d120      	bne.n	8004fd6 <UART_SetConfig+0x17a>
 8004f94:	4b64      	ldr	r3, [pc, #400]	; (8005128 <UART_SetConfig+0x2cc>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f9e:	2b30      	cmp	r3, #48	; 0x30
 8004fa0:	d013      	beq.n	8004fca <UART_SetConfig+0x16e>
 8004fa2:	2b30      	cmp	r3, #48	; 0x30
 8004fa4:	d814      	bhi.n	8004fd0 <UART_SetConfig+0x174>
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d009      	beq.n	8004fbe <UART_SetConfig+0x162>
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d810      	bhi.n	8004fd0 <UART_SetConfig+0x174>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <UART_SetConfig+0x15c>
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d006      	beq.n	8004fc4 <UART_SetConfig+0x168>
 8004fb6:	e00b      	b.n	8004fd0 <UART_SetConfig+0x174>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e0f2      	b.n	80051a4 <UART_SetConfig+0x348>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e0ef      	b.n	80051a4 <UART_SetConfig+0x348>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e0ec      	b.n	80051a4 <UART_SetConfig+0x348>
 8004fca:	2308      	movs	r3, #8
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e0e9      	b.n	80051a4 <UART_SetConfig+0x348>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e0e6      	b.n	80051a4 <UART_SetConfig+0x348>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a56      	ldr	r2, [pc, #344]	; (8005134 <UART_SetConfig+0x2d8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d120      	bne.n	8005022 <UART_SetConfig+0x1c6>
 8004fe0:	4b51      	ldr	r3, [pc, #324]	; (8005128 <UART_SetConfig+0x2cc>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fea:	2bc0      	cmp	r3, #192	; 0xc0
 8004fec:	d013      	beq.n	8005016 <UART_SetConfig+0x1ba>
 8004fee:	2bc0      	cmp	r3, #192	; 0xc0
 8004ff0:	d814      	bhi.n	800501c <UART_SetConfig+0x1c0>
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d009      	beq.n	800500a <UART_SetConfig+0x1ae>
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d810      	bhi.n	800501c <UART_SetConfig+0x1c0>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <UART_SetConfig+0x1a8>
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d006      	beq.n	8005010 <UART_SetConfig+0x1b4>
 8005002:	e00b      	b.n	800501c <UART_SetConfig+0x1c0>
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e0cc      	b.n	80051a4 <UART_SetConfig+0x348>
 800500a:	2302      	movs	r3, #2
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e0c9      	b.n	80051a4 <UART_SetConfig+0x348>
 8005010:	2304      	movs	r3, #4
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e0c6      	b.n	80051a4 <UART_SetConfig+0x348>
 8005016:	2308      	movs	r3, #8
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e0c3      	b.n	80051a4 <UART_SetConfig+0x348>
 800501c:	2310      	movs	r3, #16
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e0c0      	b.n	80051a4 <UART_SetConfig+0x348>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a44      	ldr	r2, [pc, #272]	; (8005138 <UART_SetConfig+0x2dc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d125      	bne.n	8005078 <UART_SetConfig+0x21c>
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <UART_SetConfig+0x2cc>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503a:	d017      	beq.n	800506c <UART_SetConfig+0x210>
 800503c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005040:	d817      	bhi.n	8005072 <UART_SetConfig+0x216>
 8005042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005046:	d00b      	beq.n	8005060 <UART_SetConfig+0x204>
 8005048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504c:	d811      	bhi.n	8005072 <UART_SetConfig+0x216>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <UART_SetConfig+0x1fe>
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	d006      	beq.n	8005066 <UART_SetConfig+0x20a>
 8005058:	e00b      	b.n	8005072 <UART_SetConfig+0x216>
 800505a:	2300      	movs	r3, #0
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e0a1      	b.n	80051a4 <UART_SetConfig+0x348>
 8005060:	2302      	movs	r3, #2
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e09e      	b.n	80051a4 <UART_SetConfig+0x348>
 8005066:	2304      	movs	r3, #4
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e09b      	b.n	80051a4 <UART_SetConfig+0x348>
 800506c:	2308      	movs	r3, #8
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e098      	b.n	80051a4 <UART_SetConfig+0x348>
 8005072:	2310      	movs	r3, #16
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e095      	b.n	80051a4 <UART_SetConfig+0x348>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2f      	ldr	r2, [pc, #188]	; (800513c <UART_SetConfig+0x2e0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d125      	bne.n	80050ce <UART_SetConfig+0x272>
 8005082:	4b29      	ldr	r3, [pc, #164]	; (8005128 <UART_SetConfig+0x2cc>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800508c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005090:	d017      	beq.n	80050c2 <UART_SetConfig+0x266>
 8005092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005096:	d817      	bhi.n	80050c8 <UART_SetConfig+0x26c>
 8005098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509c:	d00b      	beq.n	80050b6 <UART_SetConfig+0x25a>
 800509e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a2:	d811      	bhi.n	80050c8 <UART_SetConfig+0x26c>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <UART_SetConfig+0x254>
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d006      	beq.n	80050bc <UART_SetConfig+0x260>
 80050ae:	e00b      	b.n	80050c8 <UART_SetConfig+0x26c>
 80050b0:	2301      	movs	r3, #1
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e076      	b.n	80051a4 <UART_SetConfig+0x348>
 80050b6:	2302      	movs	r3, #2
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e073      	b.n	80051a4 <UART_SetConfig+0x348>
 80050bc:	2304      	movs	r3, #4
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e070      	b.n	80051a4 <UART_SetConfig+0x348>
 80050c2:	2308      	movs	r3, #8
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e06d      	b.n	80051a4 <UART_SetConfig+0x348>
 80050c8:	2310      	movs	r3, #16
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e06a      	b.n	80051a4 <UART_SetConfig+0x348>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <UART_SetConfig+0x2e4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d138      	bne.n	800514a <UART_SetConfig+0x2ee>
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <UART_SetConfig+0x2cc>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050e6:	d017      	beq.n	8005118 <UART_SetConfig+0x2bc>
 80050e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050ec:	d82a      	bhi.n	8005144 <UART_SetConfig+0x2e8>
 80050ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f2:	d00b      	beq.n	800510c <UART_SetConfig+0x2b0>
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f8:	d824      	bhi.n	8005144 <UART_SetConfig+0x2e8>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <UART_SetConfig+0x2aa>
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005102:	d006      	beq.n	8005112 <UART_SetConfig+0x2b6>
 8005104:	e01e      	b.n	8005144 <UART_SetConfig+0x2e8>
 8005106:	2300      	movs	r3, #0
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e04b      	b.n	80051a4 <UART_SetConfig+0x348>
 800510c:	2302      	movs	r3, #2
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e048      	b.n	80051a4 <UART_SetConfig+0x348>
 8005112:	2304      	movs	r3, #4
 8005114:	77fb      	strb	r3, [r7, #31]
 8005116:	e045      	b.n	80051a4 <UART_SetConfig+0x348>
 8005118:	2308      	movs	r3, #8
 800511a:	77fb      	strb	r3, [r7, #31]
 800511c:	e042      	b.n	80051a4 <UART_SetConfig+0x348>
 800511e:	bf00      	nop
 8005120:	efff69f3 	.word	0xefff69f3
 8005124:	40011000 	.word	0x40011000
 8005128:	40023800 	.word	0x40023800
 800512c:	40004400 	.word	0x40004400
 8005130:	40004800 	.word	0x40004800
 8005134:	40004c00 	.word	0x40004c00
 8005138:	40005000 	.word	0x40005000
 800513c:	40011400 	.word	0x40011400
 8005140:	40007800 	.word	0x40007800
 8005144:	2310      	movs	r3, #16
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e02c      	b.n	80051a4 <UART_SetConfig+0x348>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a72      	ldr	r2, [pc, #456]	; (8005318 <UART_SetConfig+0x4bc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d125      	bne.n	80051a0 <UART_SetConfig+0x344>
 8005154:	4b71      	ldr	r3, [pc, #452]	; (800531c <UART_SetConfig+0x4c0>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800515e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005162:	d017      	beq.n	8005194 <UART_SetConfig+0x338>
 8005164:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005168:	d817      	bhi.n	800519a <UART_SetConfig+0x33e>
 800516a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516e:	d00b      	beq.n	8005188 <UART_SetConfig+0x32c>
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d811      	bhi.n	800519a <UART_SetConfig+0x33e>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <UART_SetConfig+0x326>
 800517a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800517e:	d006      	beq.n	800518e <UART_SetConfig+0x332>
 8005180:	e00b      	b.n	800519a <UART_SetConfig+0x33e>
 8005182:	2300      	movs	r3, #0
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e00d      	b.n	80051a4 <UART_SetConfig+0x348>
 8005188:	2302      	movs	r3, #2
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e00a      	b.n	80051a4 <UART_SetConfig+0x348>
 800518e:	2304      	movs	r3, #4
 8005190:	77fb      	strb	r3, [r7, #31]
 8005192:	e007      	b.n	80051a4 <UART_SetConfig+0x348>
 8005194:	2308      	movs	r3, #8
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e004      	b.n	80051a4 <UART_SetConfig+0x348>
 800519a:	2310      	movs	r3, #16
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e001      	b.n	80051a4 <UART_SetConfig+0x348>
 80051a0:	2310      	movs	r3, #16
 80051a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ac:	d15b      	bne.n	8005266 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051ae:	7ffb      	ldrb	r3, [r7, #31]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d828      	bhi.n	8005206 <UART_SetConfig+0x3aa>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x360>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051f1 	.word	0x080051f1
 80051c8:	08005207 	.word	0x08005207
 80051cc:	080051f7 	.word	0x080051f7
 80051d0:	08005207 	.word	0x08005207
 80051d4:	08005207 	.word	0x08005207
 80051d8:	08005207 	.word	0x08005207
 80051dc:	080051ff 	.word	0x080051ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fd fdf2 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 80051e4:	61b8      	str	r0, [r7, #24]
        break;
 80051e6:	e013      	b.n	8005210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e8:	f7fd fe02 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 80051ec:	61b8      	str	r0, [r7, #24]
        break;
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f0:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <UART_SetConfig+0x4c4>)
 80051f2:	61bb      	str	r3, [r7, #24]
        break;
 80051f4:	e00c      	b.n	8005210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fd fd15 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 80051fa:	61b8      	str	r0, [r7, #24]
        break;
 80051fc:	e008      	b.n	8005210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	61bb      	str	r3, [r7, #24]
        break;
 8005204:	e004      	b.n	8005210 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	77bb      	strb	r3, [r7, #30]
        break;
 800520e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d074      	beq.n	8005300 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	005a      	lsls	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	441a      	add	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d916      	bls.n	8005260 <UART_SetConfig+0x404>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d212      	bcs.n	8005260 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f023 030f 	bic.w	r3, r3, #15
 8005242:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	b29a      	uxth	r2, r3
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	4313      	orrs	r3, r2
 8005254:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	89fa      	ldrh	r2, [r7, #14]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e04f      	b.n	8005300 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77bb      	strb	r3, [r7, #30]
 8005264:	e04c      	b.n	8005300 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005266:	7ffb      	ldrb	r3, [r7, #31]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d828      	bhi.n	80052be <UART_SetConfig+0x462>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x418>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005299 	.word	0x08005299
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	080052bf 	.word	0x080052bf
 8005284:	080052af 	.word	0x080052af
 8005288:	080052bf 	.word	0x080052bf
 800528c:	080052bf 	.word	0x080052bf
 8005290:	080052bf 	.word	0x080052bf
 8005294:	080052b7 	.word	0x080052b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fd fd96 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 800529c:	61b8      	str	r0, [r7, #24]
        break;
 800529e:	e013      	b.n	80052c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7fd fda6 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 80052a4:	61b8      	str	r0, [r7, #24]
        break;
 80052a6:	e00f      	b.n	80052c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a8:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <UART_SetConfig+0x4c4>)
 80052aa:	61bb      	str	r3, [r7, #24]
        break;
 80052ac:	e00c      	b.n	80052c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ae:	f7fd fcb9 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 80052b2:	61b8      	str	r0, [r7, #24]
        break;
 80052b4:	e008      	b.n	80052c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	61bb      	str	r3, [r7, #24]
        break;
 80052bc:	e004      	b.n	80052c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	77bb      	strb	r3, [r7, #30]
        break;
 80052c6:	bf00      	nop
    }

    if (pclk != 0U)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d018      	beq.n	8005300 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	085a      	lsrs	r2, r3, #1
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	441a      	add	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d909      	bls.n	80052fc <UART_SetConfig+0x4a0>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ee:	d205      	bcs.n	80052fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	e001      	b.n	8005300 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800530c:	7fbb      	ldrb	r3, [r7, #30]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40007c00 	.word	0x40007c00
 800531c:	40023800 	.word	0x40023800
 8005320:	00f42400 	.word	0x00f42400

08005324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01a      	beq.n	800543a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005422:	d10a      	bne.n	800543a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af02      	add	r7, sp, #8
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005478:	f7fc fbba 	bl	8001bf0 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b08      	cmp	r3, #8
 800548a:	d10e      	bne.n	80054aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f831 	bl	8005502 <UART_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e027      	b.n	80054fa <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d10e      	bne.n	80054d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f81b 	bl	8005502 <UART_WaitOnFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e011      	b.n	80054fa <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b09c      	sub	sp, #112	; 0x70
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	e0a7      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	f000 80a3 	beq.w	8005664 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551e:	f7fc fb67 	bl	8001bf0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <UART_WaitOnFlagUntilTimeout+0x32>
 800552e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005530:	2b00      	cmp	r3, #0
 8005532:	d13f      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005548:	667b      	str	r3, [r7, #100]	; 0x64
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005554:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e6      	bne.n	8005534 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	663b      	str	r3, [r7, #96]	; 0x60
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005586:	64ba      	str	r2, [r7, #72]	; 0x48
 8005588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800558c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e5      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e068      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d050      	beq.n	8005664 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d148      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
 80055fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e6      	bne.n	80055dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	613b      	str	r3, [r7, #16]
   return(result);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	66bb      	str	r3, [r7, #104]	; 0x68
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800562e:	623a      	str	r2, [r7, #32]
 8005630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	69f9      	ldr	r1, [r7, #28]
 8005634:	6a3a      	ldr	r2, [r7, #32]
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	61bb      	str	r3, [r7, #24]
   return(result);
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e010      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4013      	ands	r3, r2
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	bf0c      	ite	eq
 8005674:	2301      	moveq	r3, #1
 8005676:	2300      	movne	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	429a      	cmp	r2, r3
 8005680:	f43f af48 	beq.w	8005514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3770      	adds	r7, #112	; 0x70
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005690:	b480      	push	{r7}
 8005692:	b097      	sub	sp, #92	; 0x5c
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	d10e      	bne.n	80056e2 <UART_Start_Receive_IT+0x52>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d105      	bne.n	80056d8 <UART_Start_Receive_IT+0x48>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056d6:	e02d      	b.n	8005734 <UART_Start_Receive_IT+0xa4>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	22ff      	movs	r2, #255	; 0xff
 80056dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056e0:	e028      	b.n	8005734 <UART_Start_Receive_IT+0xa4>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <UART_Start_Receive_IT+0x76>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <UART_Start_Receive_IT+0x6c>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	22ff      	movs	r2, #255	; 0xff
 80056f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056fa:	e01b      	b.n	8005734 <UART_Start_Receive_IT+0xa4>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	227f      	movs	r2, #127	; 0x7f
 8005700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005704:	e016      	b.n	8005734 <UART_Start_Receive_IT+0xa4>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800570e:	d10d      	bne.n	800572c <UART_Start_Receive_IT+0x9c>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <UART_Start_Receive_IT+0x92>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	227f      	movs	r2, #127	; 0x7f
 800571c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005720:	e008      	b.n	8005734 <UART_Start_Receive_IT+0xa4>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	223f      	movs	r2, #63	; 0x3f
 8005726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800572a:	e003      	b.n	8005734 <UART_Start_Receive_IT+0xa4>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2222      	movs	r2, #34	; 0x22
 8005740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3308      	adds	r3, #8
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	657b      	str	r3, [r7, #84]	; 0x54
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005764:	64ba      	str	r2, [r7, #72]	; 0x48
 8005766:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800576a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e5      	bne.n	8005744 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d107      	bne.n	8005792 <UART_Start_Receive_IT+0x102>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a21      	ldr	r2, [pc, #132]	; (8005814 <UART_Start_Receive_IT+0x184>)
 800578e:	669a      	str	r2, [r3, #104]	; 0x68
 8005790:	e002      	b.n	8005798 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a20      	ldr	r2, [pc, #128]	; (8005818 <UART_Start_Receive_IT+0x188>)
 8005796:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d019      	beq.n	80057d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	637b      	str	r3, [r7, #52]	; 0x34
 80057c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_Start_Receive_IT+0x110>
 80057d2:	e018      	b.n	8005806 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	613b      	str	r3, [r7, #16]
   return(result);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	653b      	str	r3, [r7, #80]	; 0x50
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f2:	623b      	str	r3, [r7, #32]
 80057f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	69f9      	ldr	r1, [r7, #28]
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e6      	bne.n	80057d4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	375c      	adds	r7, #92	; 0x5c
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	08005c41 	.word	0x08005c41
 8005818:	08005adb 	.word	0x08005adb

0800581c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800581c:	b480      	push	{r7}
 800581e:	b095      	sub	sp, #84	; 0x54
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	643b      	str	r3, [r7, #64]	; 0x40
 8005844:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e6      	bne.n	8005824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3308      	adds	r3, #8
 800585c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	61fb      	str	r3, [r7, #28]
   return(result);
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	64bb      	str	r3, [r7, #72]	; 0x48
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800587c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e5      	bne.n	8005856 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588e:	2b01      	cmp	r3, #1
 8005890:	d118      	bne.n	80058c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0310 	bic.w	r3, r3, #16
 80058a6:	647b      	str	r3, [r7, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	613b      	str	r3, [r7, #16]
   return(result);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058d8:	bf00      	nop
 80058da:	3754      	adds	r7, #84	; 0x54
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fa8a 	bl	8004e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005908:	bf00      	nop
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b08f      	sub	sp, #60	; 0x3c
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591c:	2b21      	cmp	r3, #33	; 0x21
 800591e:	d14c      	bne.n	80059ba <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d132      	bne.n	8005992 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	61fb      	str	r3, [r7, #28]
   return(result);
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e6      	bne.n	800592c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	60bb      	str	r3, [r7, #8]
   return(result);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005972:	633b      	str	r3, [r7, #48]	; 0x30
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6979      	ldr	r1, [r7, #20]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	613b      	str	r3, [r7, #16]
   return(result);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e6      	bne.n	800595e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005990:	e013      	b.n	80059ba <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	781a      	ldrb	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80059ba:	bf00      	nop
 80059bc:	373c      	adds	r7, #60	; 0x3c
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b091      	sub	sp, #68	; 0x44
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d2:	2b21      	cmp	r3, #33	; 0x21
 80059d4:	d151      	bne.n	8005a7a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d132      	bne.n	8005a48 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	623b      	str	r3, [r7, #32]
   return(result);
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30
 8005a02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e6      	bne.n	80059e2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	69b9      	ldr	r1, [r7, #24]
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e6      	bne.n	8005a14 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a46:	e018      	b.n	8005a7a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a62:	1c9a      	adds	r2, r3, #2
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a7a:	bf00      	nop
 8005a7c:	3744      	adds	r7, #68	; 0x44
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b088      	sub	sp, #32
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6979      	ldr	r1, [r7, #20]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fb fdcd 	bl	800166c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad2:	bf00      	nop
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b096      	sub	sp, #88	; 0x58
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ae8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af2:	2b22      	cmp	r3, #34	; 0x22
 8005af4:	f040 8098 	bne.w	8005c28 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b02:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005b06:	b2d9      	uxtb	r1, r3
 8005b08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	400a      	ands	r2, r1
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d17b      	bne.n	8005c38 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b54:	653b      	str	r3, [r7, #80]	; 0x50
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e6      	bne.n	8005b40 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	623b      	str	r3, [r7, #32]
   return(result);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b92:	633a      	str	r2, [r7, #48]	; 0x30
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d12e      	bne.n	8005c20 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f023 0310 	bic.w	r3, r3, #16
 8005bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e6      	bne.n	8005bc8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d103      	bne.n	8005c10 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff f909 	bl	8004e30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c1e:	e00b      	b.n	8005c38 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fb fcf7 	bl	8001614 <HAL_UART_RxCpltCallback>
}
 8005c26:	e007      	b.n	8005c38 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0208 	orr.w	r2, r2, #8
 8005c36:	619a      	str	r2, [r3, #24]
}
 8005c38:	bf00      	nop
 8005c3a:	3758      	adds	r7, #88	; 0x58
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b096      	sub	sp, #88	; 0x58
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c4e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c58:	2b22      	cmp	r3, #34	; 0x22
 8005c5a:	f040 8098 	bne.w	8005d8e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c6e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005c72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c76:	4013      	ands	r3, r2
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	1c9a      	adds	r2, r3, #2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d17b      	bne.n	8005d9e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e6      	bne.n	8005ca6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e5      	bne.n	8005cd8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d12e      	bne.n	8005d86 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	647b      	str	r3, [r7, #68]	; 0x44
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e6      	bne.n	8005d2e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d103      	bne.n	8005d76 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2210      	movs	r2, #16
 8005d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff f856 	bl	8004e30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d84:	e00b      	b.n	8005d9e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fb fc44 	bl	8001614 <HAL_UART_RxCpltCallback>
}
 8005d8c:	e007      	b.n	8005d9e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0208 	orr.w	r2, r2, #8
 8005d9c:	619a      	str	r2, [r3, #24]
}
 8005d9e:	bf00      	nop
 8005da0:	3758      	adds	r7, #88	; 0x58
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <atoi>:
 8005da6:	220a      	movs	r2, #10
 8005da8:	2100      	movs	r1, #0
 8005daa:	f000 b8d7 	b.w	8005f5c <strtol>
	...

08005db0 <__errno>:
 8005db0:	4b01      	ldr	r3, [pc, #4]	; (8005db8 <__errno+0x8>)
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	2000000c 	.word	0x2000000c

08005dbc <__libc_init_array>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	4d0d      	ldr	r5, [pc, #52]	; (8005df4 <__libc_init_array+0x38>)
 8005dc0:	4c0d      	ldr	r4, [pc, #52]	; (8005df8 <__libc_init_array+0x3c>)
 8005dc2:	1b64      	subs	r4, r4, r5
 8005dc4:	10a4      	asrs	r4, r4, #2
 8005dc6:	2600      	movs	r6, #0
 8005dc8:	42a6      	cmp	r6, r4
 8005dca:	d109      	bne.n	8005de0 <__libc_init_array+0x24>
 8005dcc:	4d0b      	ldr	r5, [pc, #44]	; (8005dfc <__libc_init_array+0x40>)
 8005dce:	4c0c      	ldr	r4, [pc, #48]	; (8005e00 <__libc_init_array+0x44>)
 8005dd0:	f000 fdb6 	bl	8006940 <_init>
 8005dd4:	1b64      	subs	r4, r4, r5
 8005dd6:	10a4      	asrs	r4, r4, #2
 8005dd8:	2600      	movs	r6, #0
 8005dda:	42a6      	cmp	r6, r4
 8005ddc:	d105      	bne.n	8005dea <__libc_init_array+0x2e>
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de4:	4798      	blx	r3
 8005de6:	3601      	adds	r6, #1
 8005de8:	e7ee      	b.n	8005dc8 <__libc_init_array+0xc>
 8005dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dee:	4798      	blx	r3
 8005df0:	3601      	adds	r6, #1
 8005df2:	e7f2      	b.n	8005dda <__libc_init_array+0x1e>
 8005df4:	08006b48 	.word	0x08006b48
 8005df8:	08006b48 	.word	0x08006b48
 8005dfc:	08006b48 	.word	0x08006b48
 8005e00:	08006b4c 	.word	0x08006b4c

08005e04 <memset>:
 8005e04:	4402      	add	r2, r0
 8005e06:	4603      	mov	r3, r0
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d100      	bne.n	8005e0e <memset+0xa>
 8005e0c:	4770      	bx	lr
 8005e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e12:	e7f9      	b.n	8005e08 <memset+0x4>

08005e14 <strchr>:
 8005e14:	b2c9      	uxtb	r1, r1
 8005e16:	4603      	mov	r3, r0
 8005e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e1c:	b11a      	cbz	r2, 8005e26 <strchr+0x12>
 8005e1e:	428a      	cmp	r2, r1
 8005e20:	d1f9      	bne.n	8005e16 <strchr+0x2>
 8005e22:	4618      	mov	r0, r3
 8005e24:	4770      	bx	lr
 8005e26:	2900      	cmp	r1, #0
 8005e28:	bf18      	it	ne
 8005e2a:	2300      	movne	r3, #0
 8005e2c:	e7f9      	b.n	8005e22 <strchr+0xe>

08005e2e <strncmp>:
 8005e2e:	b510      	push	{r4, lr}
 8005e30:	b17a      	cbz	r2, 8005e52 <strncmp+0x24>
 8005e32:	4603      	mov	r3, r0
 8005e34:	3901      	subs	r1, #1
 8005e36:	1884      	adds	r4, r0, r2
 8005e38:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e40:	4290      	cmp	r0, r2
 8005e42:	d101      	bne.n	8005e48 <strncmp+0x1a>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d101      	bne.n	8005e4c <strncmp+0x1e>
 8005e48:	1a80      	subs	r0, r0, r2
 8005e4a:	bd10      	pop	{r4, pc}
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d1f3      	bne.n	8005e38 <strncmp+0xa>
 8005e50:	e7fa      	b.n	8005e48 <strncmp+0x1a>
 8005e52:	4610      	mov	r0, r2
 8005e54:	e7f9      	b.n	8005e4a <strncmp+0x1c>
	...

08005e58 <_strtol_l.constprop.0>:
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5e:	d001      	beq.n	8005e64 <_strtol_l.constprop.0+0xc>
 8005e60:	2b24      	cmp	r3, #36	; 0x24
 8005e62:	d906      	bls.n	8005e72 <_strtol_l.constprop.0+0x1a>
 8005e64:	f7ff ffa4 	bl	8005db0 <__errno>
 8005e68:	2316      	movs	r3, #22
 8005e6a:	6003      	str	r3, [r0, #0]
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005f58 <_strtol_l.constprop.0+0x100>
 8005e76:	460d      	mov	r5, r1
 8005e78:	462e      	mov	r6, r5
 8005e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005e82:	f017 0708 	ands.w	r7, r7, #8
 8005e86:	d1f7      	bne.n	8005e78 <_strtol_l.constprop.0+0x20>
 8005e88:	2c2d      	cmp	r4, #45	; 0x2d
 8005e8a:	d132      	bne.n	8005ef2 <_strtol_l.constprop.0+0x9a>
 8005e8c:	782c      	ldrb	r4, [r5, #0]
 8005e8e:	2701      	movs	r7, #1
 8005e90:	1cb5      	adds	r5, r6, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d05b      	beq.n	8005f4e <_strtol_l.constprop.0+0xf6>
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d109      	bne.n	8005eae <_strtol_l.constprop.0+0x56>
 8005e9a:	2c30      	cmp	r4, #48	; 0x30
 8005e9c:	d107      	bne.n	8005eae <_strtol_l.constprop.0+0x56>
 8005e9e:	782c      	ldrb	r4, [r5, #0]
 8005ea0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005ea4:	2c58      	cmp	r4, #88	; 0x58
 8005ea6:	d14d      	bne.n	8005f44 <_strtol_l.constprop.0+0xec>
 8005ea8:	786c      	ldrb	r4, [r5, #1]
 8005eaa:	2310      	movs	r3, #16
 8005eac:	3502      	adds	r5, #2
 8005eae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005eb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eb6:	f04f 0c00 	mov.w	ip, #0
 8005eba:	fbb8 f9f3 	udiv	r9, r8, r3
 8005ebe:	4666      	mov	r6, ip
 8005ec0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ec4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005ec8:	f1be 0f09 	cmp.w	lr, #9
 8005ecc:	d816      	bhi.n	8005efc <_strtol_l.constprop.0+0xa4>
 8005ece:	4674      	mov	r4, lr
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	dd24      	ble.n	8005f1e <_strtol_l.constprop.0+0xc6>
 8005ed4:	f1bc 0f00 	cmp.w	ip, #0
 8005ed8:	db1e      	blt.n	8005f18 <_strtol_l.constprop.0+0xc0>
 8005eda:	45b1      	cmp	r9, r6
 8005edc:	d31c      	bcc.n	8005f18 <_strtol_l.constprop.0+0xc0>
 8005ede:	d101      	bne.n	8005ee4 <_strtol_l.constprop.0+0x8c>
 8005ee0:	45a2      	cmp	sl, r4
 8005ee2:	db19      	blt.n	8005f18 <_strtol_l.constprop.0+0xc0>
 8005ee4:	fb06 4603 	mla	r6, r6, r3, r4
 8005ee8:	f04f 0c01 	mov.w	ip, #1
 8005eec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ef0:	e7e8      	b.n	8005ec4 <_strtol_l.constprop.0+0x6c>
 8005ef2:	2c2b      	cmp	r4, #43	; 0x2b
 8005ef4:	bf04      	itt	eq
 8005ef6:	782c      	ldrbeq	r4, [r5, #0]
 8005ef8:	1cb5      	addeq	r5, r6, #2
 8005efa:	e7ca      	b.n	8005e92 <_strtol_l.constprop.0+0x3a>
 8005efc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f00:	f1be 0f19 	cmp.w	lr, #25
 8005f04:	d801      	bhi.n	8005f0a <_strtol_l.constprop.0+0xb2>
 8005f06:	3c37      	subs	r4, #55	; 0x37
 8005f08:	e7e2      	b.n	8005ed0 <_strtol_l.constprop.0+0x78>
 8005f0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005f0e:	f1be 0f19 	cmp.w	lr, #25
 8005f12:	d804      	bhi.n	8005f1e <_strtol_l.constprop.0+0xc6>
 8005f14:	3c57      	subs	r4, #87	; 0x57
 8005f16:	e7db      	b.n	8005ed0 <_strtol_l.constprop.0+0x78>
 8005f18:	f04f 3cff 	mov.w	ip, #4294967295
 8005f1c:	e7e6      	b.n	8005eec <_strtol_l.constprop.0+0x94>
 8005f1e:	f1bc 0f00 	cmp.w	ip, #0
 8005f22:	da05      	bge.n	8005f30 <_strtol_l.constprop.0+0xd8>
 8005f24:	2322      	movs	r3, #34	; 0x22
 8005f26:	6003      	str	r3, [r0, #0]
 8005f28:	4646      	mov	r6, r8
 8005f2a:	b942      	cbnz	r2, 8005f3e <_strtol_l.constprop.0+0xe6>
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	e79e      	b.n	8005e6e <_strtol_l.constprop.0+0x16>
 8005f30:	b107      	cbz	r7, 8005f34 <_strtol_l.constprop.0+0xdc>
 8005f32:	4276      	negs	r6, r6
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	d0f9      	beq.n	8005f2c <_strtol_l.constprop.0+0xd4>
 8005f38:	f1bc 0f00 	cmp.w	ip, #0
 8005f3c:	d000      	beq.n	8005f40 <_strtol_l.constprop.0+0xe8>
 8005f3e:	1e69      	subs	r1, r5, #1
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	e7f3      	b.n	8005f2c <_strtol_l.constprop.0+0xd4>
 8005f44:	2430      	movs	r4, #48	; 0x30
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1b1      	bne.n	8005eae <_strtol_l.constprop.0+0x56>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	e7af      	b.n	8005eae <_strtol_l.constprop.0+0x56>
 8005f4e:	2c30      	cmp	r4, #48	; 0x30
 8005f50:	d0a5      	beq.n	8005e9e <_strtol_l.constprop.0+0x46>
 8005f52:	230a      	movs	r3, #10
 8005f54:	e7ab      	b.n	8005eae <_strtol_l.constprop.0+0x56>
 8005f56:	bf00      	nop
 8005f58:	08006a0d 	.word	0x08006a0d

08005f5c <strtol>:
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	460a      	mov	r2, r1
 8005f60:	4601      	mov	r1, r0
 8005f62:	4802      	ldr	r0, [pc, #8]	; (8005f6c <strtol+0x10>)
 8005f64:	6800      	ldr	r0, [r0, #0]
 8005f66:	f7ff bf77 	b.w	8005e58 <_strtol_l.constprop.0>
 8005f6a:	bf00      	nop
 8005f6c:	2000000c 	.word	0x2000000c

08005f70 <_vsiprintf_r>:
 8005f70:	b500      	push	{lr}
 8005f72:	b09b      	sub	sp, #108	; 0x6c
 8005f74:	9100      	str	r1, [sp, #0]
 8005f76:	9104      	str	r1, [sp, #16]
 8005f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f7c:	9105      	str	r1, [sp, #20]
 8005f7e:	9102      	str	r1, [sp, #8]
 8005f80:	4905      	ldr	r1, [pc, #20]	; (8005f98 <_vsiprintf_r+0x28>)
 8005f82:	9103      	str	r1, [sp, #12]
 8005f84:	4669      	mov	r1, sp
 8005f86:	f000 f86f 	bl	8006068 <_svfiprintf_r>
 8005f8a:	9b00      	ldr	r3, [sp, #0]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	b01b      	add	sp, #108	; 0x6c
 8005f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f96:	bf00      	nop
 8005f98:	ffff0208 	.word	0xffff0208

08005f9c <vsiprintf>:
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4802      	ldr	r0, [pc, #8]	; (8005fac <vsiprintf+0x10>)
 8005fa4:	6800      	ldr	r0, [r0, #0]
 8005fa6:	f7ff bfe3 	b.w	8005f70 <_vsiprintf_r>
 8005faa:	bf00      	nop
 8005fac:	2000000c 	.word	0x2000000c

08005fb0 <__ssputs_r>:
 8005fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	688e      	ldr	r6, [r1, #8]
 8005fb6:	429e      	cmp	r6, r3
 8005fb8:	4682      	mov	sl, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	4690      	mov	r8, r2
 8005fbe:	461f      	mov	r7, r3
 8005fc0:	d838      	bhi.n	8006034 <__ssputs_r+0x84>
 8005fc2:	898a      	ldrh	r2, [r1, #12]
 8005fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fc8:	d032      	beq.n	8006030 <__ssputs_r+0x80>
 8005fca:	6825      	ldr	r5, [r4, #0]
 8005fcc:	6909      	ldr	r1, [r1, #16]
 8005fce:	eba5 0901 	sub.w	r9, r5, r1
 8005fd2:	6965      	ldr	r5, [r4, #20]
 8005fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fdc:	3301      	adds	r3, #1
 8005fde:	444b      	add	r3, r9
 8005fe0:	106d      	asrs	r5, r5, #1
 8005fe2:	429d      	cmp	r5, r3
 8005fe4:	bf38      	it	cc
 8005fe6:	461d      	movcc	r5, r3
 8005fe8:	0553      	lsls	r3, r2, #21
 8005fea:	d531      	bpl.n	8006050 <__ssputs_r+0xa0>
 8005fec:	4629      	mov	r1, r5
 8005fee:	f000 fb63 	bl	80066b8 <_malloc_r>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	b950      	cbnz	r0, 800600c <__ssputs_r+0x5c>
 8005ff6:	230c      	movs	r3, #12
 8005ff8:	f8ca 3000 	str.w	r3, [sl]
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600c:	6921      	ldr	r1, [r4, #16]
 800600e:	464a      	mov	r2, r9
 8006010:	f000 fabe 	bl	8006590 <memcpy>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	81a3      	strh	r3, [r4, #12]
 8006020:	6126      	str	r6, [r4, #16]
 8006022:	6165      	str	r5, [r4, #20]
 8006024:	444e      	add	r6, r9
 8006026:	eba5 0509 	sub.w	r5, r5, r9
 800602a:	6026      	str	r6, [r4, #0]
 800602c:	60a5      	str	r5, [r4, #8]
 800602e:	463e      	mov	r6, r7
 8006030:	42be      	cmp	r6, r7
 8006032:	d900      	bls.n	8006036 <__ssputs_r+0x86>
 8006034:	463e      	mov	r6, r7
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	4632      	mov	r2, r6
 800603a:	4641      	mov	r1, r8
 800603c:	f000 fab6 	bl	80065ac <memmove>
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	1b9b      	subs	r3, r3, r6
 8006044:	60a3      	str	r3, [r4, #8]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	4433      	add	r3, r6
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	2000      	movs	r0, #0
 800604e:	e7db      	b.n	8006008 <__ssputs_r+0x58>
 8006050:	462a      	mov	r2, r5
 8006052:	f000 fba5 	bl	80067a0 <_realloc_r>
 8006056:	4606      	mov	r6, r0
 8006058:	2800      	cmp	r0, #0
 800605a:	d1e1      	bne.n	8006020 <__ssputs_r+0x70>
 800605c:	6921      	ldr	r1, [r4, #16]
 800605e:	4650      	mov	r0, sl
 8006060:	f000 fabe 	bl	80065e0 <_free_r>
 8006064:	e7c7      	b.n	8005ff6 <__ssputs_r+0x46>
	...

08006068 <_svfiprintf_r>:
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	4698      	mov	r8, r3
 800606e:	898b      	ldrh	r3, [r1, #12]
 8006070:	061b      	lsls	r3, r3, #24
 8006072:	b09d      	sub	sp, #116	; 0x74
 8006074:	4607      	mov	r7, r0
 8006076:	460d      	mov	r5, r1
 8006078:	4614      	mov	r4, r2
 800607a:	d50e      	bpl.n	800609a <_svfiprintf_r+0x32>
 800607c:	690b      	ldr	r3, [r1, #16]
 800607e:	b963      	cbnz	r3, 800609a <_svfiprintf_r+0x32>
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	f000 fb19 	bl	80066b8 <_malloc_r>
 8006086:	6028      	str	r0, [r5, #0]
 8006088:	6128      	str	r0, [r5, #16]
 800608a:	b920      	cbnz	r0, 8006096 <_svfiprintf_r+0x2e>
 800608c:	230c      	movs	r3, #12
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e0d1      	b.n	800623a <_svfiprintf_r+0x1d2>
 8006096:	2340      	movs	r3, #64	; 0x40
 8006098:	616b      	str	r3, [r5, #20]
 800609a:	2300      	movs	r3, #0
 800609c:	9309      	str	r3, [sp, #36]	; 0x24
 800609e:	2320      	movs	r3, #32
 80060a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060a8:	2330      	movs	r3, #48	; 0x30
 80060aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006254 <_svfiprintf_r+0x1ec>
 80060ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060b2:	f04f 0901 	mov.w	r9, #1
 80060b6:	4623      	mov	r3, r4
 80060b8:	469a      	mov	sl, r3
 80060ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060be:	b10a      	cbz	r2, 80060c4 <_svfiprintf_r+0x5c>
 80060c0:	2a25      	cmp	r2, #37	; 0x25
 80060c2:	d1f9      	bne.n	80060b8 <_svfiprintf_r+0x50>
 80060c4:	ebba 0b04 	subs.w	fp, sl, r4
 80060c8:	d00b      	beq.n	80060e2 <_svfiprintf_r+0x7a>
 80060ca:	465b      	mov	r3, fp
 80060cc:	4622      	mov	r2, r4
 80060ce:	4629      	mov	r1, r5
 80060d0:	4638      	mov	r0, r7
 80060d2:	f7ff ff6d 	bl	8005fb0 <__ssputs_r>
 80060d6:	3001      	adds	r0, #1
 80060d8:	f000 80aa 	beq.w	8006230 <_svfiprintf_r+0x1c8>
 80060dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060de:	445a      	add	r2, fp
 80060e0:	9209      	str	r2, [sp, #36]	; 0x24
 80060e2:	f89a 3000 	ldrb.w	r3, [sl]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80a2 	beq.w	8006230 <_svfiprintf_r+0x1c8>
 80060ec:	2300      	movs	r3, #0
 80060ee:	f04f 32ff 	mov.w	r2, #4294967295
 80060f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060f6:	f10a 0a01 	add.w	sl, sl, #1
 80060fa:	9304      	str	r3, [sp, #16]
 80060fc:	9307      	str	r3, [sp, #28]
 80060fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006102:	931a      	str	r3, [sp, #104]	; 0x68
 8006104:	4654      	mov	r4, sl
 8006106:	2205      	movs	r2, #5
 8006108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610c:	4851      	ldr	r0, [pc, #324]	; (8006254 <_svfiprintf_r+0x1ec>)
 800610e:	f7fa f89f 	bl	8000250 <memchr>
 8006112:	9a04      	ldr	r2, [sp, #16]
 8006114:	b9d8      	cbnz	r0, 800614e <_svfiprintf_r+0xe6>
 8006116:	06d0      	lsls	r0, r2, #27
 8006118:	bf44      	itt	mi
 800611a:	2320      	movmi	r3, #32
 800611c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006120:	0711      	lsls	r1, r2, #28
 8006122:	bf44      	itt	mi
 8006124:	232b      	movmi	r3, #43	; 0x2b
 8006126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800612a:	f89a 3000 	ldrb.w	r3, [sl]
 800612e:	2b2a      	cmp	r3, #42	; 0x2a
 8006130:	d015      	beq.n	800615e <_svfiprintf_r+0xf6>
 8006132:	9a07      	ldr	r2, [sp, #28]
 8006134:	4654      	mov	r4, sl
 8006136:	2000      	movs	r0, #0
 8006138:	f04f 0c0a 	mov.w	ip, #10
 800613c:	4621      	mov	r1, r4
 800613e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006142:	3b30      	subs	r3, #48	; 0x30
 8006144:	2b09      	cmp	r3, #9
 8006146:	d94e      	bls.n	80061e6 <_svfiprintf_r+0x17e>
 8006148:	b1b0      	cbz	r0, 8006178 <_svfiprintf_r+0x110>
 800614a:	9207      	str	r2, [sp, #28]
 800614c:	e014      	b.n	8006178 <_svfiprintf_r+0x110>
 800614e:	eba0 0308 	sub.w	r3, r0, r8
 8006152:	fa09 f303 	lsl.w	r3, r9, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	46a2      	mov	sl, r4
 800615c:	e7d2      	b.n	8006104 <_svfiprintf_r+0x9c>
 800615e:	9b03      	ldr	r3, [sp, #12]
 8006160:	1d19      	adds	r1, r3, #4
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	9103      	str	r1, [sp, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	bfbb      	ittet	lt
 800616a:	425b      	neglt	r3, r3
 800616c:	f042 0202 	orrlt.w	r2, r2, #2
 8006170:	9307      	strge	r3, [sp, #28]
 8006172:	9307      	strlt	r3, [sp, #28]
 8006174:	bfb8      	it	lt
 8006176:	9204      	strlt	r2, [sp, #16]
 8006178:	7823      	ldrb	r3, [r4, #0]
 800617a:	2b2e      	cmp	r3, #46	; 0x2e
 800617c:	d10c      	bne.n	8006198 <_svfiprintf_r+0x130>
 800617e:	7863      	ldrb	r3, [r4, #1]
 8006180:	2b2a      	cmp	r3, #42	; 0x2a
 8006182:	d135      	bne.n	80061f0 <_svfiprintf_r+0x188>
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	1d1a      	adds	r2, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	9203      	str	r2, [sp, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfb8      	it	lt
 8006190:	f04f 33ff 	movlt.w	r3, #4294967295
 8006194:	3402      	adds	r4, #2
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006264 <_svfiprintf_r+0x1fc>
 800619c:	7821      	ldrb	r1, [r4, #0]
 800619e:	2203      	movs	r2, #3
 80061a0:	4650      	mov	r0, sl
 80061a2:	f7fa f855 	bl	8000250 <memchr>
 80061a6:	b140      	cbz	r0, 80061ba <_svfiprintf_r+0x152>
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	eba0 000a 	sub.w	r0, r0, sl
 80061ae:	fa03 f000 	lsl.w	r0, r3, r0
 80061b2:	9b04      	ldr	r3, [sp, #16]
 80061b4:	4303      	orrs	r3, r0
 80061b6:	3401      	adds	r4, #1
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061be:	4826      	ldr	r0, [pc, #152]	; (8006258 <_svfiprintf_r+0x1f0>)
 80061c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061c4:	2206      	movs	r2, #6
 80061c6:	f7fa f843 	bl	8000250 <memchr>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d038      	beq.n	8006240 <_svfiprintf_r+0x1d8>
 80061ce:	4b23      	ldr	r3, [pc, #140]	; (800625c <_svfiprintf_r+0x1f4>)
 80061d0:	bb1b      	cbnz	r3, 800621a <_svfiprintf_r+0x1b2>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	3307      	adds	r3, #7
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	3308      	adds	r3, #8
 80061dc:	9303      	str	r3, [sp, #12]
 80061de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e0:	4433      	add	r3, r6
 80061e2:	9309      	str	r3, [sp, #36]	; 0x24
 80061e4:	e767      	b.n	80060b6 <_svfiprintf_r+0x4e>
 80061e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80061ea:	460c      	mov	r4, r1
 80061ec:	2001      	movs	r0, #1
 80061ee:	e7a5      	b.n	800613c <_svfiprintf_r+0xd4>
 80061f0:	2300      	movs	r3, #0
 80061f2:	3401      	adds	r4, #1
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	4619      	mov	r1, r3
 80061f8:	f04f 0c0a 	mov.w	ip, #10
 80061fc:	4620      	mov	r0, r4
 80061fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006202:	3a30      	subs	r2, #48	; 0x30
 8006204:	2a09      	cmp	r2, #9
 8006206:	d903      	bls.n	8006210 <_svfiprintf_r+0x1a8>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0c5      	beq.n	8006198 <_svfiprintf_r+0x130>
 800620c:	9105      	str	r1, [sp, #20]
 800620e:	e7c3      	b.n	8006198 <_svfiprintf_r+0x130>
 8006210:	fb0c 2101 	mla	r1, ip, r1, r2
 8006214:	4604      	mov	r4, r0
 8006216:	2301      	movs	r3, #1
 8006218:	e7f0      	b.n	80061fc <_svfiprintf_r+0x194>
 800621a:	ab03      	add	r3, sp, #12
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	462a      	mov	r2, r5
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <_svfiprintf_r+0x1f8>)
 8006222:	a904      	add	r1, sp, #16
 8006224:	4638      	mov	r0, r7
 8006226:	f3af 8000 	nop.w
 800622a:	1c42      	adds	r2, r0, #1
 800622c:	4606      	mov	r6, r0
 800622e:	d1d6      	bne.n	80061de <_svfiprintf_r+0x176>
 8006230:	89ab      	ldrh	r3, [r5, #12]
 8006232:	065b      	lsls	r3, r3, #25
 8006234:	f53f af2c 	bmi.w	8006090 <_svfiprintf_r+0x28>
 8006238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800623a:	b01d      	add	sp, #116	; 0x74
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	ab03      	add	r3, sp, #12
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	462a      	mov	r2, r5
 8006246:	4b06      	ldr	r3, [pc, #24]	; (8006260 <_svfiprintf_r+0x1f8>)
 8006248:	a904      	add	r1, sp, #16
 800624a:	4638      	mov	r0, r7
 800624c:	f000 f87a 	bl	8006344 <_printf_i>
 8006250:	e7eb      	b.n	800622a <_svfiprintf_r+0x1c2>
 8006252:	bf00      	nop
 8006254:	08006b0d 	.word	0x08006b0d
 8006258:	08006b17 	.word	0x08006b17
 800625c:	00000000 	.word	0x00000000
 8006260:	08005fb1 	.word	0x08005fb1
 8006264:	08006b13 	.word	0x08006b13

08006268 <_printf_common>:
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	4616      	mov	r6, r2
 800626e:	4699      	mov	r9, r3
 8006270:	688a      	ldr	r2, [r1, #8]
 8006272:	690b      	ldr	r3, [r1, #16]
 8006274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006278:	4293      	cmp	r3, r2
 800627a:	bfb8      	it	lt
 800627c:	4613      	movlt	r3, r2
 800627e:	6033      	str	r3, [r6, #0]
 8006280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006284:	4607      	mov	r7, r0
 8006286:	460c      	mov	r4, r1
 8006288:	b10a      	cbz	r2, 800628e <_printf_common+0x26>
 800628a:	3301      	adds	r3, #1
 800628c:	6033      	str	r3, [r6, #0]
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	0699      	lsls	r1, r3, #26
 8006292:	bf42      	ittt	mi
 8006294:	6833      	ldrmi	r3, [r6, #0]
 8006296:	3302      	addmi	r3, #2
 8006298:	6033      	strmi	r3, [r6, #0]
 800629a:	6825      	ldr	r5, [r4, #0]
 800629c:	f015 0506 	ands.w	r5, r5, #6
 80062a0:	d106      	bne.n	80062b0 <_printf_common+0x48>
 80062a2:	f104 0a19 	add.w	sl, r4, #25
 80062a6:	68e3      	ldr	r3, [r4, #12]
 80062a8:	6832      	ldr	r2, [r6, #0]
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	42ab      	cmp	r3, r5
 80062ae:	dc26      	bgt.n	80062fe <_printf_common+0x96>
 80062b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062b4:	1e13      	subs	r3, r2, #0
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	bf18      	it	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	0692      	lsls	r2, r2, #26
 80062be:	d42b      	bmi.n	8006318 <_printf_common+0xb0>
 80062c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c4:	4649      	mov	r1, r9
 80062c6:	4638      	mov	r0, r7
 80062c8:	47c0      	blx	r8
 80062ca:	3001      	adds	r0, #1
 80062cc:	d01e      	beq.n	800630c <_printf_common+0xa4>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	68e5      	ldr	r5, [r4, #12]
 80062d2:	6832      	ldr	r2, [r6, #0]
 80062d4:	f003 0306 	and.w	r3, r3, #6
 80062d8:	2b04      	cmp	r3, #4
 80062da:	bf08      	it	eq
 80062dc:	1aad      	subeq	r5, r5, r2
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	bf0c      	ite	eq
 80062e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e8:	2500      	movne	r5, #0
 80062ea:	4293      	cmp	r3, r2
 80062ec:	bfc4      	itt	gt
 80062ee:	1a9b      	subgt	r3, r3, r2
 80062f0:	18ed      	addgt	r5, r5, r3
 80062f2:	2600      	movs	r6, #0
 80062f4:	341a      	adds	r4, #26
 80062f6:	42b5      	cmp	r5, r6
 80062f8:	d11a      	bne.n	8006330 <_printf_common+0xc8>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e008      	b.n	8006310 <_printf_common+0xa8>
 80062fe:	2301      	movs	r3, #1
 8006300:	4652      	mov	r2, sl
 8006302:	4649      	mov	r1, r9
 8006304:	4638      	mov	r0, r7
 8006306:	47c0      	blx	r8
 8006308:	3001      	adds	r0, #1
 800630a:	d103      	bne.n	8006314 <_printf_common+0xac>
 800630c:	f04f 30ff 	mov.w	r0, #4294967295
 8006310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006314:	3501      	adds	r5, #1
 8006316:	e7c6      	b.n	80062a6 <_printf_common+0x3e>
 8006318:	18e1      	adds	r1, r4, r3
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	2030      	movs	r0, #48	; 0x30
 800631e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006322:	4422      	add	r2, r4
 8006324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800632c:	3302      	adds	r3, #2
 800632e:	e7c7      	b.n	80062c0 <_printf_common+0x58>
 8006330:	2301      	movs	r3, #1
 8006332:	4622      	mov	r2, r4
 8006334:	4649      	mov	r1, r9
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	3001      	adds	r0, #1
 800633c:	d0e6      	beq.n	800630c <_printf_common+0xa4>
 800633e:	3601      	adds	r6, #1
 8006340:	e7d9      	b.n	80062f6 <_printf_common+0x8e>
	...

08006344 <_printf_i>:
 8006344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	7e0f      	ldrb	r7, [r1, #24]
 800634a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800634c:	2f78      	cmp	r7, #120	; 0x78
 800634e:	4691      	mov	r9, r2
 8006350:	4680      	mov	r8, r0
 8006352:	460c      	mov	r4, r1
 8006354:	469a      	mov	sl, r3
 8006356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800635a:	d807      	bhi.n	800636c <_printf_i+0x28>
 800635c:	2f62      	cmp	r7, #98	; 0x62
 800635e:	d80a      	bhi.n	8006376 <_printf_i+0x32>
 8006360:	2f00      	cmp	r7, #0
 8006362:	f000 80d8 	beq.w	8006516 <_printf_i+0x1d2>
 8006366:	2f58      	cmp	r7, #88	; 0x58
 8006368:	f000 80a3 	beq.w	80064b2 <_printf_i+0x16e>
 800636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006374:	e03a      	b.n	80063ec <_printf_i+0xa8>
 8006376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800637a:	2b15      	cmp	r3, #21
 800637c:	d8f6      	bhi.n	800636c <_printf_i+0x28>
 800637e:	a101      	add	r1, pc, #4	; (adr r1, 8006384 <_printf_i+0x40>)
 8006380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006384:	080063dd 	.word	0x080063dd
 8006388:	080063f1 	.word	0x080063f1
 800638c:	0800636d 	.word	0x0800636d
 8006390:	0800636d 	.word	0x0800636d
 8006394:	0800636d 	.word	0x0800636d
 8006398:	0800636d 	.word	0x0800636d
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	0800636d 	.word	0x0800636d
 80063a4:	0800636d 	.word	0x0800636d
 80063a8:	0800636d 	.word	0x0800636d
 80063ac:	0800636d 	.word	0x0800636d
 80063b0:	080064fd 	.word	0x080064fd
 80063b4:	08006421 	.word	0x08006421
 80063b8:	080064df 	.word	0x080064df
 80063bc:	0800636d 	.word	0x0800636d
 80063c0:	0800636d 	.word	0x0800636d
 80063c4:	0800651f 	.word	0x0800651f
 80063c8:	0800636d 	.word	0x0800636d
 80063cc:	08006421 	.word	0x08006421
 80063d0:	0800636d 	.word	0x0800636d
 80063d4:	0800636d 	.word	0x0800636d
 80063d8:	080064e7 	.word	0x080064e7
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	602a      	str	r2, [r5, #0]
 80063e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0a3      	b.n	8006538 <_printf_i+0x1f4>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	6829      	ldr	r1, [r5, #0]
 80063f4:	0606      	lsls	r6, r0, #24
 80063f6:	f101 0304 	add.w	r3, r1, #4
 80063fa:	d50a      	bpl.n	8006412 <_printf_i+0xce>
 80063fc:	680e      	ldr	r6, [r1, #0]
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	2e00      	cmp	r6, #0
 8006402:	da03      	bge.n	800640c <_printf_i+0xc8>
 8006404:	232d      	movs	r3, #45	; 0x2d
 8006406:	4276      	negs	r6, r6
 8006408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640c:	485e      	ldr	r0, [pc, #376]	; (8006588 <_printf_i+0x244>)
 800640e:	230a      	movs	r3, #10
 8006410:	e019      	b.n	8006446 <_printf_i+0x102>
 8006412:	680e      	ldr	r6, [r1, #0]
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800641a:	bf18      	it	ne
 800641c:	b236      	sxthne	r6, r6
 800641e:	e7ef      	b.n	8006400 <_printf_i+0xbc>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	6029      	str	r1, [r5, #0]
 8006428:	0601      	lsls	r1, r0, #24
 800642a:	d501      	bpl.n	8006430 <_printf_i+0xec>
 800642c:	681e      	ldr	r6, [r3, #0]
 800642e:	e002      	b.n	8006436 <_printf_i+0xf2>
 8006430:	0646      	lsls	r6, r0, #25
 8006432:	d5fb      	bpl.n	800642c <_printf_i+0xe8>
 8006434:	881e      	ldrh	r6, [r3, #0]
 8006436:	4854      	ldr	r0, [pc, #336]	; (8006588 <_printf_i+0x244>)
 8006438:	2f6f      	cmp	r7, #111	; 0x6f
 800643a:	bf0c      	ite	eq
 800643c:	2308      	moveq	r3, #8
 800643e:	230a      	movne	r3, #10
 8006440:	2100      	movs	r1, #0
 8006442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006446:	6865      	ldr	r5, [r4, #4]
 8006448:	60a5      	str	r5, [r4, #8]
 800644a:	2d00      	cmp	r5, #0
 800644c:	bfa2      	ittt	ge
 800644e:	6821      	ldrge	r1, [r4, #0]
 8006450:	f021 0104 	bicge.w	r1, r1, #4
 8006454:	6021      	strge	r1, [r4, #0]
 8006456:	b90e      	cbnz	r6, 800645c <_printf_i+0x118>
 8006458:	2d00      	cmp	r5, #0
 800645a:	d04d      	beq.n	80064f8 <_printf_i+0x1b4>
 800645c:	4615      	mov	r5, r2
 800645e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006462:	fb03 6711 	mls	r7, r3, r1, r6
 8006466:	5dc7      	ldrb	r7, [r0, r7]
 8006468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800646c:	4637      	mov	r7, r6
 800646e:	42bb      	cmp	r3, r7
 8006470:	460e      	mov	r6, r1
 8006472:	d9f4      	bls.n	800645e <_printf_i+0x11a>
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10b      	bne.n	8006490 <_printf_i+0x14c>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07de      	lsls	r6, r3, #31
 800647c:	d508      	bpl.n	8006490 <_printf_i+0x14c>
 800647e:	6923      	ldr	r3, [r4, #16]
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	4299      	cmp	r1, r3
 8006484:	bfde      	ittt	le
 8006486:	2330      	movle	r3, #48	; 0x30
 8006488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800648c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006490:	1b52      	subs	r2, r2, r5
 8006492:	6122      	str	r2, [r4, #16]
 8006494:	f8cd a000 	str.w	sl, [sp]
 8006498:	464b      	mov	r3, r9
 800649a:	aa03      	add	r2, sp, #12
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff fee2 	bl	8006268 <_printf_common>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d14c      	bne.n	8006542 <_printf_i+0x1fe>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	b004      	add	sp, #16
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	4835      	ldr	r0, [pc, #212]	; (8006588 <_printf_i+0x244>)
 80064b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064b8:	6829      	ldr	r1, [r5, #0]
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80064c0:	6029      	str	r1, [r5, #0]
 80064c2:	061d      	lsls	r5, r3, #24
 80064c4:	d514      	bpl.n	80064f0 <_printf_i+0x1ac>
 80064c6:	07df      	lsls	r7, r3, #31
 80064c8:	bf44      	itt	mi
 80064ca:	f043 0320 	orrmi.w	r3, r3, #32
 80064ce:	6023      	strmi	r3, [r4, #0]
 80064d0:	b91e      	cbnz	r6, 80064da <_printf_i+0x196>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	f023 0320 	bic.w	r3, r3, #32
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	2310      	movs	r3, #16
 80064dc:	e7b0      	b.n	8006440 <_printf_i+0xfc>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f043 0320 	orr.w	r3, r3, #32
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	2378      	movs	r3, #120	; 0x78
 80064e8:	4828      	ldr	r0, [pc, #160]	; (800658c <_printf_i+0x248>)
 80064ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064ee:	e7e3      	b.n	80064b8 <_printf_i+0x174>
 80064f0:	0659      	lsls	r1, r3, #25
 80064f2:	bf48      	it	mi
 80064f4:	b2b6      	uxthmi	r6, r6
 80064f6:	e7e6      	b.n	80064c6 <_printf_i+0x182>
 80064f8:	4615      	mov	r5, r2
 80064fa:	e7bb      	b.n	8006474 <_printf_i+0x130>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	6826      	ldr	r6, [r4, #0]
 8006500:	6961      	ldr	r1, [r4, #20]
 8006502:	1d18      	adds	r0, r3, #4
 8006504:	6028      	str	r0, [r5, #0]
 8006506:	0635      	lsls	r5, r6, #24
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	d501      	bpl.n	8006510 <_printf_i+0x1cc>
 800650c:	6019      	str	r1, [r3, #0]
 800650e:	e002      	b.n	8006516 <_printf_i+0x1d2>
 8006510:	0670      	lsls	r0, r6, #25
 8006512:	d5fb      	bpl.n	800650c <_printf_i+0x1c8>
 8006514:	8019      	strh	r1, [r3, #0]
 8006516:	2300      	movs	r3, #0
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	4615      	mov	r5, r2
 800651c:	e7ba      	b.n	8006494 <_printf_i+0x150>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	1d1a      	adds	r2, r3, #4
 8006522:	602a      	str	r2, [r5, #0]
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	6862      	ldr	r2, [r4, #4]
 8006528:	2100      	movs	r1, #0
 800652a:	4628      	mov	r0, r5
 800652c:	f7f9 fe90 	bl	8000250 <memchr>
 8006530:	b108      	cbz	r0, 8006536 <_printf_i+0x1f2>
 8006532:	1b40      	subs	r0, r0, r5
 8006534:	6060      	str	r0, [r4, #4]
 8006536:	6863      	ldr	r3, [r4, #4]
 8006538:	6123      	str	r3, [r4, #16]
 800653a:	2300      	movs	r3, #0
 800653c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006540:	e7a8      	b.n	8006494 <_printf_i+0x150>
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	462a      	mov	r2, r5
 8006546:	4649      	mov	r1, r9
 8006548:	4640      	mov	r0, r8
 800654a:	47d0      	blx	sl
 800654c:	3001      	adds	r0, #1
 800654e:	d0ab      	beq.n	80064a8 <_printf_i+0x164>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	d413      	bmi.n	800657e <_printf_i+0x23a>
 8006556:	68e0      	ldr	r0, [r4, #12]
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	4298      	cmp	r0, r3
 800655c:	bfb8      	it	lt
 800655e:	4618      	movlt	r0, r3
 8006560:	e7a4      	b.n	80064ac <_printf_i+0x168>
 8006562:	2301      	movs	r3, #1
 8006564:	4632      	mov	r2, r6
 8006566:	4649      	mov	r1, r9
 8006568:	4640      	mov	r0, r8
 800656a:	47d0      	blx	sl
 800656c:	3001      	adds	r0, #1
 800656e:	d09b      	beq.n	80064a8 <_printf_i+0x164>
 8006570:	3501      	adds	r5, #1
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	9903      	ldr	r1, [sp, #12]
 8006576:	1a5b      	subs	r3, r3, r1
 8006578:	42ab      	cmp	r3, r5
 800657a:	dcf2      	bgt.n	8006562 <_printf_i+0x21e>
 800657c:	e7eb      	b.n	8006556 <_printf_i+0x212>
 800657e:	2500      	movs	r5, #0
 8006580:	f104 0619 	add.w	r6, r4, #25
 8006584:	e7f5      	b.n	8006572 <_printf_i+0x22e>
 8006586:	bf00      	nop
 8006588:	08006b1e 	.word	0x08006b1e
 800658c:	08006b2f 	.word	0x08006b2f

08006590 <memcpy>:
 8006590:	440a      	add	r2, r1
 8006592:	4291      	cmp	r1, r2
 8006594:	f100 33ff 	add.w	r3, r0, #4294967295
 8006598:	d100      	bne.n	800659c <memcpy+0xc>
 800659a:	4770      	bx	lr
 800659c:	b510      	push	{r4, lr}
 800659e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a6:	4291      	cmp	r1, r2
 80065a8:	d1f9      	bne.n	800659e <memcpy+0xe>
 80065aa:	bd10      	pop	{r4, pc}

080065ac <memmove>:
 80065ac:	4288      	cmp	r0, r1
 80065ae:	b510      	push	{r4, lr}
 80065b0:	eb01 0402 	add.w	r4, r1, r2
 80065b4:	d902      	bls.n	80065bc <memmove+0x10>
 80065b6:	4284      	cmp	r4, r0
 80065b8:	4623      	mov	r3, r4
 80065ba:	d807      	bhi.n	80065cc <memmove+0x20>
 80065bc:	1e43      	subs	r3, r0, #1
 80065be:	42a1      	cmp	r1, r4
 80065c0:	d008      	beq.n	80065d4 <memmove+0x28>
 80065c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ca:	e7f8      	b.n	80065be <memmove+0x12>
 80065cc:	4402      	add	r2, r0
 80065ce:	4601      	mov	r1, r0
 80065d0:	428a      	cmp	r2, r1
 80065d2:	d100      	bne.n	80065d6 <memmove+0x2a>
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065de:	e7f7      	b.n	80065d0 <memmove+0x24>

080065e0 <_free_r>:
 80065e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065e2:	2900      	cmp	r1, #0
 80065e4:	d044      	beq.n	8006670 <_free_r+0x90>
 80065e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ea:	9001      	str	r0, [sp, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f1a1 0404 	sub.w	r4, r1, #4
 80065f2:	bfb8      	it	lt
 80065f4:	18e4      	addlt	r4, r4, r3
 80065f6:	f000 f913 	bl	8006820 <__malloc_lock>
 80065fa:	4a1e      	ldr	r2, [pc, #120]	; (8006674 <_free_r+0x94>)
 80065fc:	9801      	ldr	r0, [sp, #4]
 80065fe:	6813      	ldr	r3, [r2, #0]
 8006600:	b933      	cbnz	r3, 8006610 <_free_r+0x30>
 8006602:	6063      	str	r3, [r4, #4]
 8006604:	6014      	str	r4, [r2, #0]
 8006606:	b003      	add	sp, #12
 8006608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800660c:	f000 b90e 	b.w	800682c <__malloc_unlock>
 8006610:	42a3      	cmp	r3, r4
 8006612:	d908      	bls.n	8006626 <_free_r+0x46>
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	1961      	adds	r1, r4, r5
 8006618:	428b      	cmp	r3, r1
 800661a:	bf01      	itttt	eq
 800661c:	6819      	ldreq	r1, [r3, #0]
 800661e:	685b      	ldreq	r3, [r3, #4]
 8006620:	1949      	addeq	r1, r1, r5
 8006622:	6021      	streq	r1, [r4, #0]
 8006624:	e7ed      	b.n	8006602 <_free_r+0x22>
 8006626:	461a      	mov	r2, r3
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	b10b      	cbz	r3, 8006630 <_free_r+0x50>
 800662c:	42a3      	cmp	r3, r4
 800662e:	d9fa      	bls.n	8006626 <_free_r+0x46>
 8006630:	6811      	ldr	r1, [r2, #0]
 8006632:	1855      	adds	r5, r2, r1
 8006634:	42a5      	cmp	r5, r4
 8006636:	d10b      	bne.n	8006650 <_free_r+0x70>
 8006638:	6824      	ldr	r4, [r4, #0]
 800663a:	4421      	add	r1, r4
 800663c:	1854      	adds	r4, r2, r1
 800663e:	42a3      	cmp	r3, r4
 8006640:	6011      	str	r1, [r2, #0]
 8006642:	d1e0      	bne.n	8006606 <_free_r+0x26>
 8006644:	681c      	ldr	r4, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	6053      	str	r3, [r2, #4]
 800664a:	4421      	add	r1, r4
 800664c:	6011      	str	r1, [r2, #0]
 800664e:	e7da      	b.n	8006606 <_free_r+0x26>
 8006650:	d902      	bls.n	8006658 <_free_r+0x78>
 8006652:	230c      	movs	r3, #12
 8006654:	6003      	str	r3, [r0, #0]
 8006656:	e7d6      	b.n	8006606 <_free_r+0x26>
 8006658:	6825      	ldr	r5, [r4, #0]
 800665a:	1961      	adds	r1, r4, r5
 800665c:	428b      	cmp	r3, r1
 800665e:	bf04      	itt	eq
 8006660:	6819      	ldreq	r1, [r3, #0]
 8006662:	685b      	ldreq	r3, [r3, #4]
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	bf04      	itt	eq
 8006668:	1949      	addeq	r1, r1, r5
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	6054      	str	r4, [r2, #4]
 800666e:	e7ca      	b.n	8006606 <_free_r+0x26>
 8006670:	b003      	add	sp, #12
 8006672:	bd30      	pop	{r4, r5, pc}
 8006674:	200002bc 	.word	0x200002bc

08006678 <sbrk_aligned>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	4e0e      	ldr	r6, [pc, #56]	; (80066b4 <sbrk_aligned+0x3c>)
 800667c:	460c      	mov	r4, r1
 800667e:	6831      	ldr	r1, [r6, #0]
 8006680:	4605      	mov	r5, r0
 8006682:	b911      	cbnz	r1, 800668a <sbrk_aligned+0x12>
 8006684:	f000 f8bc 	bl	8006800 <_sbrk_r>
 8006688:	6030      	str	r0, [r6, #0]
 800668a:	4621      	mov	r1, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f000 f8b7 	bl	8006800 <_sbrk_r>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d00a      	beq.n	80066ac <sbrk_aligned+0x34>
 8006696:	1cc4      	adds	r4, r0, #3
 8006698:	f024 0403 	bic.w	r4, r4, #3
 800669c:	42a0      	cmp	r0, r4
 800669e:	d007      	beq.n	80066b0 <sbrk_aligned+0x38>
 80066a0:	1a21      	subs	r1, r4, r0
 80066a2:	4628      	mov	r0, r5
 80066a4:	f000 f8ac 	bl	8006800 <_sbrk_r>
 80066a8:	3001      	adds	r0, #1
 80066aa:	d101      	bne.n	80066b0 <sbrk_aligned+0x38>
 80066ac:	f04f 34ff 	mov.w	r4, #4294967295
 80066b0:	4620      	mov	r0, r4
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	200002c0 	.word	0x200002c0

080066b8 <_malloc_r>:
 80066b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066bc:	1ccd      	adds	r5, r1, #3
 80066be:	f025 0503 	bic.w	r5, r5, #3
 80066c2:	3508      	adds	r5, #8
 80066c4:	2d0c      	cmp	r5, #12
 80066c6:	bf38      	it	cc
 80066c8:	250c      	movcc	r5, #12
 80066ca:	2d00      	cmp	r5, #0
 80066cc:	4607      	mov	r7, r0
 80066ce:	db01      	blt.n	80066d4 <_malloc_r+0x1c>
 80066d0:	42a9      	cmp	r1, r5
 80066d2:	d905      	bls.n	80066e0 <_malloc_r+0x28>
 80066d4:	230c      	movs	r3, #12
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	2600      	movs	r6, #0
 80066da:	4630      	mov	r0, r6
 80066dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e0:	4e2e      	ldr	r6, [pc, #184]	; (800679c <_malloc_r+0xe4>)
 80066e2:	f000 f89d 	bl	8006820 <__malloc_lock>
 80066e6:	6833      	ldr	r3, [r6, #0]
 80066e8:	461c      	mov	r4, r3
 80066ea:	bb34      	cbnz	r4, 800673a <_malloc_r+0x82>
 80066ec:	4629      	mov	r1, r5
 80066ee:	4638      	mov	r0, r7
 80066f0:	f7ff ffc2 	bl	8006678 <sbrk_aligned>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	4604      	mov	r4, r0
 80066f8:	d14d      	bne.n	8006796 <_malloc_r+0xde>
 80066fa:	6834      	ldr	r4, [r6, #0]
 80066fc:	4626      	mov	r6, r4
 80066fe:	2e00      	cmp	r6, #0
 8006700:	d140      	bne.n	8006784 <_malloc_r+0xcc>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	4631      	mov	r1, r6
 8006706:	4638      	mov	r0, r7
 8006708:	eb04 0803 	add.w	r8, r4, r3
 800670c:	f000 f878 	bl	8006800 <_sbrk_r>
 8006710:	4580      	cmp	r8, r0
 8006712:	d13a      	bne.n	800678a <_malloc_r+0xd2>
 8006714:	6821      	ldr	r1, [r4, #0]
 8006716:	3503      	adds	r5, #3
 8006718:	1a6d      	subs	r5, r5, r1
 800671a:	f025 0503 	bic.w	r5, r5, #3
 800671e:	3508      	adds	r5, #8
 8006720:	2d0c      	cmp	r5, #12
 8006722:	bf38      	it	cc
 8006724:	250c      	movcc	r5, #12
 8006726:	4629      	mov	r1, r5
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ffa5 	bl	8006678 <sbrk_aligned>
 800672e:	3001      	adds	r0, #1
 8006730:	d02b      	beq.n	800678a <_malloc_r+0xd2>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	442b      	add	r3, r5
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	e00e      	b.n	8006758 <_malloc_r+0xa0>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	1b52      	subs	r2, r2, r5
 800673e:	d41e      	bmi.n	800677e <_malloc_r+0xc6>
 8006740:	2a0b      	cmp	r2, #11
 8006742:	d916      	bls.n	8006772 <_malloc_r+0xba>
 8006744:	1961      	adds	r1, r4, r5
 8006746:	42a3      	cmp	r3, r4
 8006748:	6025      	str	r5, [r4, #0]
 800674a:	bf18      	it	ne
 800674c:	6059      	strne	r1, [r3, #4]
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	bf08      	it	eq
 8006752:	6031      	streq	r1, [r6, #0]
 8006754:	5162      	str	r2, [r4, r5]
 8006756:	604b      	str	r3, [r1, #4]
 8006758:	4638      	mov	r0, r7
 800675a:	f104 060b 	add.w	r6, r4, #11
 800675e:	f000 f865 	bl	800682c <__malloc_unlock>
 8006762:	f026 0607 	bic.w	r6, r6, #7
 8006766:	1d23      	adds	r3, r4, #4
 8006768:	1af2      	subs	r2, r6, r3
 800676a:	d0b6      	beq.n	80066da <_malloc_r+0x22>
 800676c:	1b9b      	subs	r3, r3, r6
 800676e:	50a3      	str	r3, [r4, r2]
 8006770:	e7b3      	b.n	80066da <_malloc_r+0x22>
 8006772:	6862      	ldr	r2, [r4, #4]
 8006774:	42a3      	cmp	r3, r4
 8006776:	bf0c      	ite	eq
 8006778:	6032      	streq	r2, [r6, #0]
 800677a:	605a      	strne	r2, [r3, #4]
 800677c:	e7ec      	b.n	8006758 <_malloc_r+0xa0>
 800677e:	4623      	mov	r3, r4
 8006780:	6864      	ldr	r4, [r4, #4]
 8006782:	e7b2      	b.n	80066ea <_malloc_r+0x32>
 8006784:	4634      	mov	r4, r6
 8006786:	6876      	ldr	r6, [r6, #4]
 8006788:	e7b9      	b.n	80066fe <_malloc_r+0x46>
 800678a:	230c      	movs	r3, #12
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4638      	mov	r0, r7
 8006790:	f000 f84c 	bl	800682c <__malloc_unlock>
 8006794:	e7a1      	b.n	80066da <_malloc_r+0x22>
 8006796:	6025      	str	r5, [r4, #0]
 8006798:	e7de      	b.n	8006758 <_malloc_r+0xa0>
 800679a:	bf00      	nop
 800679c:	200002bc 	.word	0x200002bc

080067a0 <_realloc_r>:
 80067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a4:	4680      	mov	r8, r0
 80067a6:	4614      	mov	r4, r2
 80067a8:	460e      	mov	r6, r1
 80067aa:	b921      	cbnz	r1, 80067b6 <_realloc_r+0x16>
 80067ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	4611      	mov	r1, r2
 80067b2:	f7ff bf81 	b.w	80066b8 <_malloc_r>
 80067b6:	b92a      	cbnz	r2, 80067c4 <_realloc_r+0x24>
 80067b8:	f7ff ff12 	bl	80065e0 <_free_r>
 80067bc:	4625      	mov	r5, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	f000 f838 	bl	8006838 <_malloc_usable_size_r>
 80067c8:	4284      	cmp	r4, r0
 80067ca:	4607      	mov	r7, r0
 80067cc:	d802      	bhi.n	80067d4 <_realloc_r+0x34>
 80067ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067d2:	d812      	bhi.n	80067fa <_realloc_r+0x5a>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4640      	mov	r0, r8
 80067d8:	f7ff ff6e 	bl	80066b8 <_malloc_r>
 80067dc:	4605      	mov	r5, r0
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0ed      	beq.n	80067be <_realloc_r+0x1e>
 80067e2:	42bc      	cmp	r4, r7
 80067e4:	4622      	mov	r2, r4
 80067e6:	4631      	mov	r1, r6
 80067e8:	bf28      	it	cs
 80067ea:	463a      	movcs	r2, r7
 80067ec:	f7ff fed0 	bl	8006590 <memcpy>
 80067f0:	4631      	mov	r1, r6
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7ff fef4 	bl	80065e0 <_free_r>
 80067f8:	e7e1      	b.n	80067be <_realloc_r+0x1e>
 80067fa:	4635      	mov	r5, r6
 80067fc:	e7df      	b.n	80067be <_realloc_r+0x1e>
	...

08006800 <_sbrk_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d06      	ldr	r5, [pc, #24]	; (800681c <_sbrk_r+0x1c>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fa fffa 	bl	8001804 <_sbrk>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_sbrk_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_sbrk_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	200002c4 	.word	0x200002c4

08006820 <__malloc_lock>:
 8006820:	4801      	ldr	r0, [pc, #4]	; (8006828 <__malloc_lock+0x8>)
 8006822:	f000 b811 	b.w	8006848 <__retarget_lock_acquire_recursive>
 8006826:	bf00      	nop
 8006828:	200002c8 	.word	0x200002c8

0800682c <__malloc_unlock>:
 800682c:	4801      	ldr	r0, [pc, #4]	; (8006834 <__malloc_unlock+0x8>)
 800682e:	f000 b80c 	b.w	800684a <__retarget_lock_release_recursive>
 8006832:	bf00      	nop
 8006834:	200002c8 	.word	0x200002c8

08006838 <_malloc_usable_size_r>:
 8006838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800683c:	1f18      	subs	r0, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfbc      	itt	lt
 8006842:	580b      	ldrlt	r3, [r1, r0]
 8006844:	18c0      	addlt	r0, r0, r3
 8006846:	4770      	bx	lr

08006848 <__retarget_lock_acquire_recursive>:
 8006848:	4770      	bx	lr

0800684a <__retarget_lock_release_recursive>:
 800684a:	4770      	bx	lr
 800684c:	0000      	movs	r0, r0
	...

08006850 <ceil>:
 8006850:	ee10 1a90 	vmov	r1, s1
 8006854:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006858:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800685c:	2b13      	cmp	r3, #19
 800685e:	b530      	push	{r4, r5, lr}
 8006860:	ee10 0a10 	vmov	r0, s0
 8006864:	ee10 5a10 	vmov	r5, s0
 8006868:	dc2f      	bgt.n	80068ca <ceil+0x7a>
 800686a:	2b00      	cmp	r3, #0
 800686c:	da13      	bge.n	8006896 <ceil+0x46>
 800686e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006930 <ceil+0xe0>
 8006872:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006876:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687e:	dd05      	ble.n	800688c <ceil+0x3c>
 8006880:	2900      	cmp	r1, #0
 8006882:	db4c      	blt.n	800691e <ceil+0xce>
 8006884:	4301      	orrs	r1, r0
 8006886:	d04e      	beq.n	8006926 <ceil+0xd6>
 8006888:	492b      	ldr	r1, [pc, #172]	; (8006938 <ceil+0xe8>)
 800688a:	2000      	movs	r0, #0
 800688c:	460b      	mov	r3, r1
 800688e:	4602      	mov	r2, r0
 8006890:	ec43 2b10 	vmov	d0, r2, r3
 8006894:	e020      	b.n	80068d8 <ceil+0x88>
 8006896:	4a29      	ldr	r2, [pc, #164]	; (800693c <ceil+0xec>)
 8006898:	411a      	asrs	r2, r3
 800689a:	ea01 0402 	and.w	r4, r1, r2
 800689e:	4304      	orrs	r4, r0
 80068a0:	d01a      	beq.n	80068d8 <ceil+0x88>
 80068a2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8006930 <ceil+0xe0>
 80068a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80068aa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b2:	ddeb      	ble.n	800688c <ceil+0x3c>
 80068b4:	2900      	cmp	r1, #0
 80068b6:	bfc2      	ittt	gt
 80068b8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 80068bc:	fa40 f303 	asrgt.w	r3, r0, r3
 80068c0:	18c9      	addgt	r1, r1, r3
 80068c2:	ea21 0102 	bic.w	r1, r1, r2
 80068c6:	2000      	movs	r0, #0
 80068c8:	e7e0      	b.n	800688c <ceil+0x3c>
 80068ca:	2b33      	cmp	r3, #51	; 0x33
 80068cc:	dd05      	ble.n	80068da <ceil+0x8a>
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d101      	bne.n	80068d8 <ceil+0x88>
 80068d4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80068d8:	bd30      	pop	{r4, r5, pc}
 80068da:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	40e2      	lsrs	r2, r4
 80068e4:	4202      	tst	r2, r0
 80068e6:	d0f7      	beq.n	80068d8 <ceil+0x88>
 80068e8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8006930 <ceil+0xe0>
 80068ec:	ee30 0b07 	vadd.f64	d0, d0, d7
 80068f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f8:	ddc8      	ble.n	800688c <ceil+0x3c>
 80068fa:	2900      	cmp	r1, #0
 80068fc:	dd02      	ble.n	8006904 <ceil+0xb4>
 80068fe:	2b14      	cmp	r3, #20
 8006900:	d103      	bne.n	800690a <ceil+0xba>
 8006902:	3101      	adds	r1, #1
 8006904:	ea20 0002 	bic.w	r0, r0, r2
 8006908:	e7c0      	b.n	800688c <ceil+0x3c>
 800690a:	2401      	movs	r4, #1
 800690c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006910:	fa04 f303 	lsl.w	r3, r4, r3
 8006914:	4418      	add	r0, r3
 8006916:	42a8      	cmp	r0, r5
 8006918:	bf38      	it	cc
 800691a:	1909      	addcc	r1, r1, r4
 800691c:	e7f2      	b.n	8006904 <ceil+0xb4>
 800691e:	2000      	movs	r0, #0
 8006920:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006924:	e7b2      	b.n	800688c <ceil+0x3c>
 8006926:	4608      	mov	r0, r1
 8006928:	e7b0      	b.n	800688c <ceil+0x3c>
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w
 8006930:	8800759c 	.word	0x8800759c
 8006934:	7e37e43c 	.word	0x7e37e43c
 8006938:	3ff00000 	.word	0x3ff00000
 800693c:	000fffff 	.word	0x000fffff

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
