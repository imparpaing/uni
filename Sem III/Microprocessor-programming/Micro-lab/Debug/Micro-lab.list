
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004528  08004528  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004530  08004530  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  080045a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080045a8  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b11f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f8  00000000  00000000  0002b1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c47  00000000  00000000  0002d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a480  00000000  00000000  000545d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a00  00000000  00000000  0005ea57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150457  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  001504a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	080043c8 	.word	0x080043c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	080043c8 	.word	0x080043c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <char_is_endmessage+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d101      	bne.n	800065a <char_is_endmessage+0x1a>
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <char_is_endmessage+0x1c>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <rx_has_data>:

uint8_t rx_has_data()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <rx_has_data+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <rx_has_data+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	d101      	bne.n	8000680 <rx_has_data+0x18>
	{
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <rx_has_data+0x1a>
	}
	else return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	20000136 	.word	0x20000136
 8000690:	20000137 	.word	0x20000137

08000694 <increase_rx_empty>:

void increase_rx_empty()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	rx_empty++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <increase_rx_empty+0x2c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b1e      	cmp	r3, #30
 80006ae:	d902      	bls.n	80006b6 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <increase_rx_empty+0x2c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	20000136 	.word	0x20000136

080006c4 <increase_rx_busy>:

void increase_rx_busy()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	rx_busy++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <increase_rx_busy+0x2c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(rx_busy>BUFFER_LENGTH)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b1e      	cmp	r3, #30
 80006de:	d902      	bls.n	80006e6 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <increase_rx_busy+0x2c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	20000137 	.word	0x20000137

080006f4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <get_char+0x24>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <get_char+0x28>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000708:	f7ff ffdc 	bl	80006c4 <increase_rx_busy>
	return tmp;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000137 	.word	0x20000137
 800071c:	20000118 	.word	0x20000118

08000720 <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800072c:	e041      	b.n	80007b2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <get_message+0xa8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461c      	mov	r4, r3
 8000734:	f7ff ffde 	bl	80006f4 <get_char>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <get_message+0xac>)
 800073e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <get_message+0xa8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <get_message+0xac>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <char_is_endmessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d021      	beq.n	800079a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <get_message+0xa8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <get_message+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <get_message+0xac>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <get_message+0xa8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <get_message+0x48>
			}

			message_length = idx;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <get_message+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <get_message+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	e011      	b.n	80007be <get_message+0x9e>
		}
		else
		{
			idx++;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <get_message+0xa8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <get_message+0xa8>)
 80007a4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <get_message+0xa8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	d901      	bls.n	80007b2 <get_message+0x92>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e005      	b.n	80007be <get_message+0x9e>
	while(rx_has_data() == 1)
 80007b2:	f7ff ff59 	bl	8000668 <rx_has_data>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0b8      	beq.n	800072e <get_message+0xe>
		}
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000164 	.word	0x20000164
 80007cc:	20000168 	.word	0x20000168

080007d0 <turn_on_led>:

void turn_on_led()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <turn_on_led+0x14>)
 80007da:	f001 f93d 	bl	8001a58 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400

080007e8 <turn_off_led>:

void turn_off_led()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <turn_off_led+0x14>)
 80007f2:	f001 f931 	bl	8001a58 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <led_delay>:

uint16_t led_delay(uint8_t blink_hz)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <led_delay+0x58>)
 800080c:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000818:	edd7 6a03 	vldr	s13, [r7, #12]
 800081c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000820:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000824:	edd7 7a03 	vldr	s15, [r7, #12]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f003 fd52 	bl	80042d8 <ceil>
 8000834:	eeb0 7b40 	vmov.f64	d7, d0
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay = (uint16_t)delay_f;
 8000840:	edd7 7a03 	vldr	s15, [r7, #12]
 8000844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	817b      	strh	r3, [r7, #10]
	return delay;
 800084e:	897b      	ldrh	r3, [r7, #10]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	447a0000 	.word	0x447a0000

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000862:	f000 fb7f 	bl	8000f64 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000866:	f7ff fe69 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800086a:	f7ff fe8d 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fca6 	bl	80011be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 fa75 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 faff 	bl	8000e78 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800087a:	f000 facd 	bl	8000e18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	49a1      	ldr	r1, [pc, #644]	; (8000b08 <main+0x2ac>)
 8000882:	48a2      	ldr	r0, [pc, #648]	; (8000b0c <main+0x2b0>)
 8000884:	f002 fa26 	bl	8002cd4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Command templates */
  uint8_t blink_cmd[6] = "BLINK,";
 8000888:	4aa1      	ldr	r2, [pc, #644]	; (8000b10 <main+0x2b4>)
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000892:	6018      	str	r0, [r3, #0]
 8000894:	3304      	adds	r3, #4
 8000896:	8019      	strh	r1, [r3, #0]
  uint8_t delay_cmd[6] = "DELAY,";
 8000898:	4a9e      	ldr	r2, [pc, #632]	; (8000b14 <main+0x2b8>)
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a2:	6018      	str	r0, [r3, #0]
 80008a4:	3304      	adds	r3, #4
 80008a6:	8019      	strh	r1, [r3, #0]

  uint8_t error_message[] = "Error: Command not found\r\n";
 80008a8:	4b9b      	ldr	r3, [pc, #620]	; (8000b18 <main+0x2bc>)
 80008aa:	1d3c      	adds	r4, r7, #4
 80008ac:	461d      	mov	r5, r3
 80008ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b6:	c403      	stmia	r4!, {r0, r1}
 80008b8:	8022      	strh	r2, [r4, #0]
 80008ba:	3402      	adds	r4, #2
 80008bc:	0c13      	lsrs	r3, r2, #16
 80008be:	7023      	strb	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 80008c0:	4b91      	ldr	r3, [pc, #580]	; (8000b08 <main+0x2ac>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	d003      	beq.n	80008d0 <main+0x74>
 80008c8:	4b8f      	ldr	r3, [pc, #572]	; (8000b08 <main+0x2ac>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b0d      	cmp	r3, #13
 80008ce:	d106      	bne.n	80008de <main+0x82>
	{
		message_length = get_message(message);
 80008d0:	4892      	ldr	r0, [pc, #584]	; (8000b1c <main+0x2c0>)
 80008d2:	f7ff ff25 	bl	8000720 <get_message>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b91      	ldr	r3, [pc, #580]	; (8000b20 <main+0x2c4>)
 80008dc:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 80008de:	4b90      	ldr	r3, [pc, #576]	; (8000b20 <main+0x2c4>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f000 820f 	beq.w	8000d08 <main+0x4ac>
	{
		for (uint8_t i=0; i<message_length; i++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80008f0:	e202      	b.n	8000cf8 <main+0x49c>
		{
			/* Find command start */
			if (message[i] == 'L')
 80008f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008f6:	4a89      	ldr	r2, [pc, #548]	; (8000b1c <main+0x2c0>)
 80008f8:	5cd3      	ldrb	r3, [r2, r3]
 80008fa:	2b4c      	cmp	r3, #76	; 0x4c
 80008fc:	d108      	bne.n	8000910 <main+0xb4>
			{
				i++;
 80008fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000902:	3301      	adds	r3, #1
 8000904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				frame_state = 1;
 8000908:	4b86      	ldr	r3, [pc, #536]	; (8000b24 <main+0x2c8>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e033      	b.n	8000978 <main+0x11c>
			} /* if character is 'L' */
			else if (message[i] == 'I')
 8000910:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000914:	4a81      	ldr	r2, [pc, #516]	; (8000b1c <main+0x2c0>)
 8000916:	5cd3      	ldrb	r3, [r2, r3]
 8000918:	2b49      	cmp	r3, #73	; 0x49
 800091a:	d108      	bne.n	800092e <main+0xd2>
			{
				i++;
 800091c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000920:	3301      	adds	r3, #1
 8000922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				frame_state = 1;
 8000926:	4b7f      	ldr	r3, [pc, #508]	; (8000b24 <main+0x2c8>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e024      	b.n	8000978 <main+0x11c>
			} /* if character is 'I' */
			else if (message[i] == ';')
 800092e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000932:	4a7a      	ldr	r2, [pc, #488]	; (8000b1c <main+0x2c0>)
 8000934:	5cd3      	ldrb	r3, [r2, r3]
 8000936:	2b3b      	cmp	r3, #59	; 0x3b
 8000938:	d108      	bne.n	800094c <main+0xf0>
			{
				i++;
 800093a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800093e:	3301      	adds	r3, #1
 8000940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				frame_state = 1;
 8000944:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <main+0x2c8>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e015      	b.n	8000978 <main+0x11c>
			} /* if character is ';' */
			else
			{
				for (uint8_t i=0; i<(sizeof(error_message)-2); i++)
 800094c:	2300      	movs	r3, #0
 800094e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000952:	e00d      	b.n	8000970 <main+0x114>
				{
					uart_print(error_message[i]);
 8000954:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000958:	3338      	adds	r3, #56	; 0x38
 800095a:	443b      	add	r3, r7
 800095c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe55 	bl	8000610 <uart_print>
				for (uint8_t i=0; i<(sizeof(error_message)-2); i++)
 8000966:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800096a:	3301      	adds	r3, #1
 800096c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000970:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000974:	2b18      	cmp	r3, #24
 8000976:	d9ed      	bls.n	8000954 <main+0xf8>
				}
			} /* send error message to terminal */

			switch (frame_state)
 8000978:	4b6a      	ldr	r3, [pc, #424]	; (8000b24 <main+0x2c8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b03      	cmp	r3, #3
 8000980:	f000 8169 	beq.w	8000c56 <main+0x3fa>
 8000984:	2b03      	cmp	r3, #3
 8000986:	f300 81b2 	bgt.w	8000cee <main+0x492>
 800098a:	2b01      	cmp	r3, #1
 800098c:	d002      	beq.n	8000994 <main+0x138>
 800098e:	2b02      	cmp	r3, #2
 8000990:	d046      	beq.n	8000a20 <main+0x1c4>
 8000992:	e1ac      	b.n	8000cee <main+0x492>
			{
				case 1:
					if (message[i] == 'E' && message[i+1] == 'D')
 8000994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000998:	4a60      	ldr	r2, [pc, #384]	; (8000b1c <main+0x2c0>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	2b45      	cmp	r3, #69	; 0x45
 800099e:	d10f      	bne.n	80009c0 <main+0x164>
 80009a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a5d      	ldr	r2, [pc, #372]	; (8000b1c <main+0x2c0>)
 80009a8:	5cd3      	ldrb	r3, [r2, r3]
 80009aa:	2b44      	cmp	r3, #68	; 0x44
 80009ac:	d108      	bne.n	80009c0 <main+0x164>
					{
						i = i+1;
 80009ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009b2:	3301      	adds	r3, #1
 80009b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						frame_state = 2;
 80009b8:	4b5a      	ldr	r3, [pc, #360]	; (8000b24 <main+0x2c8>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	701a      	strb	r2, [r3, #0]
					{
						i = i+4;
						frame_state = 2;
					} /* if 'INSERT' sequence found */
//					else frame_state = 0;
					break;
 80009be:	e191      	b.n	8000ce4 <main+0x488>
					else if (message[i] == 'N' && message[i+1] == 'S' && message[i+2] == 'E' && message[i+3] == 'R' && message[i+4] == 'T')
 80009c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009c4:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <main+0x2c0>)
 80009c6:	5cd3      	ldrb	r3, [r2, r3]
 80009c8:	2b4e      	cmp	r3, #78	; 0x4e
 80009ca:	f040 818b 	bne.w	8000ce4 <main+0x488>
 80009ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a51      	ldr	r2, [pc, #324]	; (8000b1c <main+0x2c0>)
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	2b53      	cmp	r3, #83	; 0x53
 80009da:	f040 8183 	bne.w	8000ce4 <main+0x488>
 80009de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009e2:	3302      	adds	r3, #2
 80009e4:	4a4d      	ldr	r2, [pc, #308]	; (8000b1c <main+0x2c0>)
 80009e6:	5cd3      	ldrb	r3, [r2, r3]
 80009e8:	2b45      	cmp	r3, #69	; 0x45
 80009ea:	f040 817b 	bne.w	8000ce4 <main+0x488>
 80009ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009f2:	3303      	adds	r3, #3
 80009f4:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <main+0x2c0>)
 80009f6:	5cd3      	ldrb	r3, [r2, r3]
 80009f8:	2b52      	cmp	r3, #82	; 0x52
 80009fa:	f040 8173 	bne.w	8000ce4 <main+0x488>
 80009fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a02:	3304      	adds	r3, #4
 8000a04:	4a45      	ldr	r2, [pc, #276]	; (8000b1c <main+0x2c0>)
 8000a06:	5cd3      	ldrb	r3, [r2, r3]
 8000a08:	2b54      	cmp	r3, #84	; 0x54
 8000a0a:	f040 816b 	bne.w	8000ce4 <main+0x488>
						i = i+4;
 8000a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a12:	3304      	adds	r3, #4
 8000a14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						frame_state = 2;
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <main+0x2c8>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	701a      	strb	r2, [r3, #0]
					break;
 8000a1e:	e161      	b.n	8000ce4 <main+0x488>

				case 2:
					if (message[i] == '[' && message[i+1] == 'O' && message[i+2] == 'N')
 8000a20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a24:	4a3d      	ldr	r2, [pc, #244]	; (8000b1c <main+0x2c0>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	2b5b      	cmp	r3, #91	; 0x5b
 8000a2a:	d119      	bne.n	8000a60 <main+0x204>
 8000a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a3a      	ldr	r2, [pc, #232]	; (8000b1c <main+0x2c0>)
 8000a34:	5cd3      	ldrb	r3, [r2, r3]
 8000a36:	2b4f      	cmp	r3, #79	; 0x4f
 8000a38:	d112      	bne.n	8000a60 <main+0x204>
 8000a3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a3e:	3302      	adds	r3, #2
 8000a40:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <main+0x2c0>)
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	2b4e      	cmp	r3, #78	; 0x4e
 8000a46:	d10b      	bne.n	8000a60 <main+0x204>
					{
						i = i+2;
 8000a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						led_action = 1;
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <main+0x2cc>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
						frame_state = 3;
 8000a58:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <main+0x2c8>)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	e0f9      	b.n	8000c54 <main+0x3f8>
					} /* if 'ON' sequence found */
					else if (message[i] == '[' && message[i+1] == 'O' && message[i+2] == 'F' && message[i+3] == 'F')
 8000a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a64:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <main+0x2c0>)
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	2b5b      	cmp	r3, #91	; 0x5b
 8000a6a:	d120      	bne.n	8000aae <main+0x252>
 8000a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <main+0x2c0>)
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	2b4f      	cmp	r3, #79	; 0x4f
 8000a78:	d119      	bne.n	8000aae <main+0x252>
 8000a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a7e:	3302      	adds	r3, #2
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <main+0x2c0>)
 8000a82:	5cd3      	ldrb	r3, [r2, r3]
 8000a84:	2b46      	cmp	r3, #70	; 0x46
 8000a86:	d112      	bne.n	8000aae <main+0x252>
 8000a88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a8c:	3303      	adds	r3, #3
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <main+0x2c0>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	2b46      	cmp	r3, #70	; 0x46
 8000a94:	d10b      	bne.n	8000aae <main+0x252>
					{
						i = i+3;
 8000a96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a9a:	3303      	adds	r3, #3
 8000a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						led_action = 0;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <main+0x2cc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
						frame_state = 3;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <main+0x2c8>)
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e0d2      	b.n	8000c54 <main+0x3f8>
					} /* if command 'OFF' found */
					else if (message[i] == '[' && message[i+1] == 'B')
 8000aae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <main+0x2c0>)
 8000ab4:	5cd3      	ldrb	r3, [r2, r3]
 8000ab6:	2b5b      	cmp	r3, #91	; 0x5b
 8000ab8:	d169      	bne.n	8000b8e <main+0x332>
 8000aba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <main+0x2c0>)
 8000ac2:	5cd3      	ldrb	r3, [r2, r3]
 8000ac4:	2b42      	cmp	r3, #66	; 0x42
 8000ac6:	d162      	bne.n	8000b8e <main+0x332>
					{
						i++;
 8000ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000acc:	3301      	adds	r3, #1
 8000ace:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						for (uint8_t i=0; i<6; i++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000ad8:	e010      	b.n	8000afc <main+0x2a0>
						{
							if (message[i] != blink_cmd[i])
 8000ada:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <main+0x2c0>)
 8000ae0:	5cd2      	ldrb	r2, [r2, r3]
 8000ae2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ae6:	3338      	adds	r3, #56	; 0x38
 8000ae8:	443b      	add	r3, r7
 8000aea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d11c      	bne.n	8000b2c <main+0x2d0>
						for (uint8_t i=0; i<6; i++)
 8000af2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000afc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b00:	2b05      	cmp	r3, #5
 8000b02:	d9ea      	bls.n	8000ada <main+0x27e>
 8000b04:	e013      	b.n	8000b2e <main+0x2d2>
 8000b06:	bf00      	nop
 8000b08:	20000114 	.word	0x20000114
 8000b0c:	2000008c 	.word	0x2000008c
 8000b10:	080043e0 	.word	0x080043e0
 8000b14:	080043e8 	.word	0x080043e8
 8000b18:	080043f0 	.word	0x080043f0
 8000b1c:	20000138 	.word	0x20000138
 8000b20:	20000156 	.word	0x20000156
 8000b24:	20000157 	.word	0x20000157
 8000b28:	20000158 	.word	0x20000158
							{
//								frame_state = 0;
								break;
 8000b2c:	bf00      	nop
							} /* check for 'BLINK' sequence */
						}

						i = i+6;
 8000b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b32:	3306      	adds	r3, #6
 8000b34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (message[i] >= 0x30 && message[i] <= 0x39)
 8000b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b3c:	4a7d      	ldr	r2, [pc, #500]	; (8000d34 <main+0x4d8>)
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
 8000b40:	2b2f      	cmp	r3, #47	; 0x2f
 8000b42:	f240 8086 	bls.w	8000c52 <main+0x3f6>
 8000b46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b4a:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <main+0x4d8>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	2b39      	cmp	r3, #57	; 0x39
 8000b50:	d87f      	bhi.n	8000c52 <main+0x3f6>
						{
							/* Get blink delay */
							blink_delay = message[i];
 8000b52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b56:	4a77      	ldr	r2, [pc, #476]	; (8000d34 <main+0x4d8>)
 8000b58:	5cd2      	ldrb	r2, [r2, r3]
 8000b5a:	4b77      	ldr	r3, [pc, #476]	; (8000d38 <main+0x4dc>)
 8000b5c:	701a      	strb	r2, [r3, #0]
							delay = blink_delay - '0';
 8000b5e:	4b76      	ldr	r3, [pc, #472]	; (8000d38 <main+0x4dc>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	3b30      	subs	r3, #48	; 0x30
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b74      	ldr	r3, [pc, #464]	; (8000d3c <main+0x4e0>)
 8000b6a:	701a      	strb	r2, [r3, #0]
							blink_ms = led_delay(delay);
 8000b6c:	4b73      	ldr	r3, [pc, #460]	; (8000d3c <main+0x4e0>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fe44 	bl	8000800 <led_delay>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b70      	ldr	r3, [pc, #448]	; (8000d40 <main+0x4e4>)
 8000b7e:	801a      	strh	r2, [r3, #0]
							/* convert char to int */
							led_action = 2;
 8000b80:	4b70      	ldr	r3, [pc, #448]	; (8000d44 <main+0x4e8>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	701a      	strb	r2, [r3, #0]
							frame_state = 3;
 8000b86:	4b70      	ldr	r3, [pc, #448]	; (8000d48 <main+0x4ec>)
 8000b88:	2203      	movs	r2, #3
 8000b8a:	701a      	strb	r2, [r3, #0]
						if (message[i] >= 0x30 && message[i] <= 0x39)
 8000b8c:	e061      	b.n	8000c52 <main+0x3f6>
						} /* if char is between '0' and '9' */
					} /* if command 'BLINK' found */
					else if (message[i] == '[' && message[i+1] == 'D')
 8000b8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b92:	4a68      	ldr	r2, [pc, #416]	; (8000d34 <main+0x4d8>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	2b5b      	cmp	r3, #91	; 0x5b
 8000b98:	f040 80a6 	bne.w	8000ce8 <main+0x48c>
 8000b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a64      	ldr	r2, [pc, #400]	; (8000d34 <main+0x4d8>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	2b44      	cmp	r3, #68	; 0x44
 8000ba8:	f040 809e 	bne.w	8000ce8 <main+0x48c>
					{
						i++;
 8000bac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						for (uint8_t i=0; i<6; i++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000bbc:	e014      	b.n	8000be8 <main+0x38c>
						{
							if (message[i] != delay_cmd[i])
 8000bbe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bc2:	4a5c      	ldr	r2, [pc, #368]	; (8000d34 <main+0x4d8>)
 8000bc4:	5cd2      	ldrb	r2, [r2, r3]
 8000bc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bca:	3338      	adds	r3, #56	; 0x38
 8000bcc:	443b      	add	r3, r7
 8000bce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d003      	beq.n	8000bde <main+0x382>
							{
								frame_state = 0;
 8000bd6:	4b5c      	ldr	r3, [pc, #368]	; (8000d48 <main+0x4ec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
								break;
 8000bdc:	e008      	b.n	8000bf0 <main+0x394>
						for (uint8_t i=0; i<6; i++)
 8000bde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000be2:	3301      	adds	r3, #1
 8000be4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000be8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d9e6      	bls.n	8000bbe <main+0x362>
							} /* check for 'DELAY,' sequence */
						}

						i = i+6;
 8000bf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bf4:	3306      	adds	r3, #6
 8000bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						for (int y=0; y<4; y++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8000bfe:	e01d      	b.n	8000c3c <main+0x3e0>
						{
							if (message[i+y] >= 0x30 && message[i+y] <= 0x39)
 8000c00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	4413      	add	r3, r2
 8000c08:	4a4a      	ldr	r2, [pc, #296]	; (8000d34 <main+0x4d8>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8000c0e:	d912      	bls.n	8000c36 <main+0x3da>
 8000c10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c16:	4413      	add	r3, r2
 8000c18:	4a46      	ldr	r2, [pc, #280]	; (8000d34 <main+0x4d8>)
 8000c1a:	5cd3      	ldrb	r3, [r2, r3]
 8000c1c:	2b39      	cmp	r3, #57	; 0x39
 8000c1e:	d80a      	bhi.n	8000c36 <main+0x3da>
							{
								temp[y] = message[i+y];
 8000c20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c26:	4413      	add	r3, r2
 8000c28:	4a42      	ldr	r2, [pc, #264]	; (8000d34 <main+0x4d8>)
 8000c2a:	5cd1      	ldrb	r1, [r2, r3]
 8000c2c:	4a47      	ldr	r2, [pc, #284]	; (8000d4c <main+0x4f0>)
 8000c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c30:	4413      	add	r3, r2
 8000c32:	460a      	mov	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
						for (int y=0; y<4; y++)
 8000c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c38:	3301      	adds	r3, #1
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	ddde      	ble.n	8000c00 <main+0x3a4>
							}
						} /* store 4 chars as delay value */

						loop_delay = atoi(temp);
 8000c42:	4842      	ldr	r0, [pc, #264]	; (8000d4c <main+0x4f0>)
 8000c44:	f003 fa86 	bl	8004154 <atoi>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <main+0x4f4>)
 8000c4e:	801a      	strh	r2, [r3, #0]
					} /* if command 'DELAY' found */
//					else frame_state = 0;
					break;
 8000c50:	e04a      	b.n	8000ce8 <main+0x48c>
						if (message[i] >= 0x30 && message[i] <= 0x39)
 8000c52:	bf00      	nop
					break;
 8000c54:	e048      	b.n	8000ce8 <main+0x48c>

				case 3:
					if ((message[i] == ']' && message[i+1] == ';') && led_action == 0)
 8000c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c5a:	4a36      	ldr	r2, [pc, #216]	; (8000d34 <main+0x4d8>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	2b5d      	cmp	r3, #93	; 0x5d
 8000c60:	d111      	bne.n	8000c86 <main+0x42a>
 8000c62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <main+0x4d8>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	2b3b      	cmp	r3, #59	; 0x3b
 8000c6e:	d10a      	bne.n	8000c86 <main+0x42a>
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <main+0x4e8>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d105      	bne.n	8000c86 <main+0x42a>
					{
						blink_active = 0;
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <main+0x4f8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
//						frame_state = 0;
						turn_off_led();
 8000c80:	f7ff fdb2 	bl	80007e8 <turn_off_led>
 8000c84:	e02d      	b.n	8000ce2 <main+0x486>
					} /* toggle LED ON */
					else if ((message[i] == ']' && message[i+1] == ';') && led_action == 1)
 8000c86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c8a:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <main+0x4d8>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	2b5d      	cmp	r3, #93	; 0x5d
 8000c90:	d111      	bne.n	8000cb6 <main+0x45a>
 8000c92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <main+0x4d8>)
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	2b3b      	cmp	r3, #59	; 0x3b
 8000c9e:	d10a      	bne.n	8000cb6 <main+0x45a>
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <main+0x4e8>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d105      	bne.n	8000cb6 <main+0x45a>
					{
						blink_active = 0;
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <main+0x4f8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
//						frame_state = 0;
						turn_on_led();
 8000cb0:	f7ff fd8e 	bl	80007d0 <turn_on_led>
 8000cb4:	e015      	b.n	8000ce2 <main+0x486>
					} /* toggle LED OFF */
					else if ((message[i] == ']' && message[i+1] == ';') && led_action == 2)
 8000cb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <main+0x4d8>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	2b5d      	cmp	r3, #93	; 0x5d
 8000cc0:	d114      	bne.n	8000cec <main+0x490>
 8000cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <main+0x4d8>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	2b3b      	cmp	r3, #59	; 0x3b
 8000cce:	d10d      	bne.n	8000cec <main+0x490>
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <main+0x4e8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d108      	bne.n	8000cec <main+0x490>
					{
						blink_active = 1;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <main+0x4f8>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
//						frame_state = 0;
					} /* blink LED */
//					else frame_state = 0;
					break;
 8000ce0:	e004      	b.n	8000cec <main+0x490>
 8000ce2:	e003      	b.n	8000cec <main+0x490>
					break;
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <main+0x492>
					break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <main+0x492>
					break;
 8000cec:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8000cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <main+0x4fc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f4ff adf5 	bcc.w	80008f2 <main+0x96>
		}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (blink_active == 1)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <main+0x4f8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d109      	bne.n	8000d26 <main+0x4ca>
	{
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <main+0x500>)
 8000d16:	f000 feb8 	bl	8001a8a <HAL_GPIO_TogglePin>
		HAL_Delay(blink_ms);
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <main+0x4e4>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 faa9 	bl	8001278 <HAL_Delay>
	} /* Blink LED */

	HAL_Delay(loop_delay);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <main+0x4f4>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 faa4 	bl	8001278 <HAL_Delay>
	if (character == '\n' || character == '\r')
 8000d30:	e5c6      	b.n	80008c0 <main+0x64>
 8000d32:	bf00      	nop
 8000d34:	20000138 	.word	0x20000138
 8000d38:	2000015a 	.word	0x2000015a
 8000d3c:	2000015b 	.word	0x2000015b
 8000d40:	2000015c 	.word	0x2000015c
 8000d44:	20000158 	.word	0x20000158
 8000d48:	20000157 	.word	0x20000157
 8000d4c:	20000160 	.word	0x20000160
 8000d50:	2000015e 	.word	0x2000015e
 8000d54:	20000159 	.word	0x20000159
 8000d58:	20000156 	.word	0x20000156
 8000d5c:	40020400 	.word	0x40020400

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2234      	movs	r2, #52	; 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fa1e 	bl	80041b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <SystemClock_Config+0xb0>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <SystemClock_Config+0xb0>)
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <SystemClock_Config+0xb0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <SystemClock_Config+0xb4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <SystemClock_Config+0xb4>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <SystemClock_Config+0xb4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fe77 	bl	8001ac0 <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000dd8:	f000 f8f0 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ddc:	230f      	movs	r3, #15
 8000dde:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 f910 	bl	800201c <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e02:	f000 f8db 	bl	8000fbc <Error_Handler>
  }
}
 8000e06:	bf00      	nop
 8000e08:	3750      	adds	r7, #80	; 0x50
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40007000 	.word	0x40007000

08000e18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_USART3_UART_Init+0x5c>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART3_UART_Init+0x58>)
 8000e5c:	f001 feec 	bl	8002c38 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e66:	f000 f8a9 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000008c 	.word	0x2000008c
 8000e74:	40004800 	.word	0x40004800

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_GPIO_Init+0x8c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_GPIO_Init+0x90>)
 8000edc:	f000 fdbc 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_GPIO_Init+0x90>)
 8000ef8:	f000 fc02 	bl	8001700 <HAL_GPIO_Init>

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400

08000f0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_UART_RxCpltCallback+0x44>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb79 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_UART_RxCpltCallback+0x48>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d10e      	bne.n	8000f46 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_UART_RxCpltCallback+0x4c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_UART_RxCpltCallback+0x44>)
 8000f32:	7819      	ldrb	r1, [r3, #0]
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_UART_RxCpltCallback+0x50>)
 8000f36:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8000f38:	f7ff fbac 	bl	8000694 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4904      	ldr	r1, [pc, #16]	; (8000f50 <HAL_UART_RxCpltCallback+0x44>)
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <HAL_UART_RxCpltCallback+0x54>)
 8000f42:	f001 fec7 	bl	8002cd4 <HAL_UART_Receive_IT>
	}
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000114 	.word	0x20000114
 8000f54:	40004800 	.word	0x40004800
 8000f58:	20000136 	.word	0x20000136
 8000f5c:	20000118 	.word	0x20000118
 8000f60:	2000008c 	.word	0x2000008c

08000f64 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f76:	f000 fab5 	bl	80014e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f86:	231f      	movs	r3, #31
 8000f88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f8a:	2387      	movs	r3, #135	; 0x87
 8000f8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f92:	2300      	movs	r3, #0
 8000f94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fad3 	bl	8001554 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fae:	2004      	movs	r0, #4
 8000fb0:	f000 fab0 	bl	8001514 <HAL_MPU_Enable>

}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_MspInit+0x44>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_MspInit+0x44>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_MspInit+0x44>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x44>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x44>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x44>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0ae      	sub	sp, #184	; 0xb8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2290      	movs	r2, #144	; 0x90
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f8bd 	bl	80041b0 <memset>
  if(huart->Instance==USART3)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_UART_MspInit+0xc4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d144      	bne.n	80010ca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001044:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001046:	2300      	movs	r3, #0
 8001048:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4618      	mov	r0, r3
 8001050:	f001 f9ca 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800105a:	f7ff ffaf 	bl	8000fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_UART_MspInit+0xc8>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_UART_MspInit+0xc8>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_UART_MspInit+0xc8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0xc8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0xc8>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0xc8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800108e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a8:	2307      	movs	r3, #7
 80010aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <HAL_UART_MspInit+0xcc>)
 80010b6:	f000 fb23 	bl	8001700 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2027      	movs	r0, #39	; 0x27
 80010c0:	f000 f9d9 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010c4:	2027      	movs	r0, #39	; 0x27
 80010c6:	f000 f9f2 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	37b8      	adds	r7, #184	; 0xb8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40004800 	.word	0x40004800
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020c00 	.word	0x40020c00

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f884 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <USART3_IRQHandler+0x10>)
 800113a:	f001 fe0f 	bl	8002d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000008c 	.word	0x2000008c

08001148 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001196:	f7ff ffd7 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f002 ffe5 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fb5d 	bl	800085c <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b0:	08004538 	.word	0x08004538
  ldr r2, =_sbss
 80011b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b8:	2000018c 	.word	0x2000018c

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>

080011be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f94c 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c8:	200f      	movs	r0, #15
 80011ca:	f000 f805 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ce:	f7ff fefb 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f967 	bl	80014ca <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f92f 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000000 	.word	0x20000000
 8001230:	20000008 	.word	0x20000008
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008
 800125c:	20000188 	.word	0x20000188

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000188 	.word	0x20000188

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008

080012c0 <__NVIC_SetPriorityGrouping>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <__NVIC_SetPriorityGrouping+0x40>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x40>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00
 8001304:	05fa0000 	.word	0x05fa0000

08001308 <__NVIC_GetPriorityGrouping>:
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff3e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff31 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014e8:	f3bf 8f5f 	dmb	sy
}
 80014ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_MPU_Disable+0x28>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_MPU_Disable+0x28>)
 80014f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_MPU_Disable+0x2c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	e000ed90 	.word	0xe000ed90

08001514 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_MPU_Enable+0x38>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_MPU_Enable+0x3c>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_MPU_Enable+0x3c>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001532:	f3bf 8f4f 	dsb	sy
}
 8001536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001538:	f3bf 8f6f 	isb	sy
}
 800153c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed90 	.word	0xe000ed90
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	785a      	ldrb	r2, [r3, #1]
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_MPU_ConfigRegion+0x84>)
 8001562:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d029      	beq.n	80015c0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_MPU_ConfigRegion+0x84>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7adb      	ldrb	r3, [r3, #11]
 800157e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001580:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7a9b      	ldrb	r3, [r3, #10]
 8001586:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001588:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7b5b      	ldrb	r3, [r3, #13]
 800158e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001590:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7b9b      	ldrb	r3, [r3, #14]
 8001596:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001598:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7bdb      	ldrb	r3, [r3, #15]
 800159e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7a5b      	ldrb	r3, [r3, #9]
 80015a6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7a1b      	ldrb	r3, [r3, #8]
 80015ae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015b0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015ba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015bc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80015be:	e005      	b.n	80015cc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_MPU_ConfigRegion+0x84>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_MPU_ConfigRegion+0x84>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed90 	.word	0xe000ed90

080015dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015ea:	f7ff fe39 	bl	8001260 <HAL_GetTick>
 80015ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e052      	b.n	80016b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0216 	bic.w	r2, r2, #22
 800161c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800162c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <HAL_DMA_Abort+0x62>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0208 	bic.w	r2, r2, #8
 800164c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165e:	e013      	b.n	8001688 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001660:	f7ff fdfe 	bl	8001260 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b05      	cmp	r3, #5
 800166c:	d90c      	bls.n	8001688 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e015      	b.n	80016b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1e4      	bne.n	8001660 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	223f      	movs	r2, #63	; 0x3f
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d004      	beq.n	80016da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00c      	b.n	80016f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e175      	b.n	8001a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8164 	bne.w	8001a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d005      	beq.n	8001756 <HAL_GPIO_Init+0x56>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d130      	bne.n	80017b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 0201 	and.w	r2, r3, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d017      	beq.n	80017f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d123      	bne.n	8001848 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80be 	beq.w	8001a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_GPIO_Init+0x324>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a65      	ldr	r2, [pc, #404]	; (8001a24 <HAL_GPIO_Init+0x324>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_GPIO_Init+0x324>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018a2:	4a61      	ldr	r2, [pc, #388]	; (8001a28 <HAL_GPIO_Init+0x328>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_GPIO_Init+0x32c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d037      	beq.n	800193e <HAL_GPIO_Init+0x23e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d031      	beq.n	800193a <HAL_GPIO_Init+0x23a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a56      	ldr	r2, [pc, #344]	; (8001a34 <HAL_GPIO_Init+0x334>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <HAL_GPIO_Init+0x236>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a55      	ldr	r2, [pc, #340]	; (8001a38 <HAL_GPIO_Init+0x338>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x232>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_GPIO_Init+0x33c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x22e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <HAL_GPIO_Init+0x340>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x22a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_GPIO_Init+0x344>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x226>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <HAL_GPIO_Init+0x348>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x222>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <HAL_GPIO_Init+0x34c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x21e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <HAL_GPIO_Init+0x350>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x21a>
 8001916:	2309      	movs	r3, #9
 8001918:	e012      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800191a:	230a      	movs	r3, #10
 800191c:	e010      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800191e:	2308      	movs	r3, #8
 8001920:	e00e      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001922:	2307      	movs	r3, #7
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001926:	2306      	movs	r3, #6
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	; (8001a28 <HAL_GPIO_Init+0x328>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_GPIO_Init+0x354>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <HAL_GPIO_Init+0x354>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_GPIO_Init+0x354>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <HAL_GPIO_Init+0x354>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae86 	bls.w	8001720 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021c00 	.word	0x40021c00
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40022400 	.word	0x40022400
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	400b      	ands	r3, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e29b      	b.n	800200e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae4:	4b96      	ldr	r3, [pc, #600]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d00c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af0:	4b93      	ldr	r3, [pc, #588]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d112      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62>
 8001afc:	4b90      	ldr	r3, [pc, #576]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b08:	d10b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4b8d      	ldr	r3, [pc, #564]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d06c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x130>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d168      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e275      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x7a>
 8001b2c:	4b84      	ldr	r3, [pc, #528]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a83      	ldr	r2, [pc, #524]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e02e      	b.n	8001b98 <HAL_RCC_OscConfig+0xd8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x9c>
 8001b42:	4b7f      	ldr	r3, [pc, #508]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b7c      	ldr	r3, [pc, #496]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7b      	ldr	r2, [pc, #492]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0xd8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a72      	ldr	r2, [pc, #456]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0xd8>
 8001b80:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6b      	ldr	r2, [pc, #428]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fb5e 	bl	8001260 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fb5a 	bl	8001260 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e229      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb4a 	bl	8001260 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fb46 	bl	8001260 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e215      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	4b57      	ldr	r3, [pc, #348]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x110>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d069      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	4b50      	ldr	r3, [pc, #320]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x190>
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x17a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1e9      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	493d      	ldr	r1, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e040      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff fafc 	bl	8001260 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff faf8 	bl	8001260 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1c7      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4929      	ldr	r1, [pc, #164]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff fad8 	bl	8001260 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fad4 	bl	8001260 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1a3      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d038      	beq.n	8001d50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d019      	beq.n	8001d1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cea:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fab5 	bl	8001260 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fab1 	bl	8001260 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e180      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x23a>
 8001d18:	e01a      	b.n	8001d50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_RCC_OscConfig+0x280>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff fa9b 	bl	8001260 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fa97 	bl	8001260 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d903      	bls.n	8001d44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e166      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
 8001d40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a4 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b8c      	ldr	r3, [pc, #560]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a88      	ldr	r2, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d86:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <HAL_RCC_OscConfig+0x4d4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d92:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <HAL_RCC_OscConfig+0x4d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7f      	ldr	r2, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x4d4>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fa5f 	bl	8001260 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff fa5b 	bl	8001260 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e12a      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db8:	4b76      	ldr	r3, [pc, #472]	; (8001f94 <HAL_RCC_OscConfig+0x4d4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x31a>
 8001dcc:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a6f      	ldr	r2, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x33c>
 8001de2:	4b6b      	ldr	r3, [pc, #428]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a6a      	ldr	r2, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	4b68      	ldr	r3, [pc, #416]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a67      	ldr	r2, [pc, #412]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x35e>
 8001e04:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a61      	ldr	r2, [pc, #388]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a5e      	ldr	r2, [pc, #376]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a5b      	ldr	r2, [pc, #364]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2a:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fa0f 	bl	8001260 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff fa0b 	bl	8001260 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0d8      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x386>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6a:	f7ff f9f9 	bl	8001260 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff f9f5 	bl	8001260 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0c2      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80ae 	beq.w	800200c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d06d      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d14b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff f9c6 	bl	8001260 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7ff f9c2 	bl	8001260 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e091      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	041b      	lsls	r3, r3, #16
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	071b      	lsls	r3, r3, #28
 8001f22:	491b      	ldr	r1, [pc, #108]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff f994 	bl	8001260 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f990 	bl	8001260 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e05f      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x47c>
 8001f5a:	e057      	b.n	800200c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f97a 	bl	8001260 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff f976 	bl	8001260 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e045      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_RCC_OscConfig+0x4d0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x4b0>
 8001f8e:	e03d      	b.n	800200c <HAL_RCC_OscConfig+0x54c>
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f98:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_RCC_OscConfig+0x558>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d030      	beq.n	8002008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d129      	bne.n	8002008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d122      	bne.n	8002008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d119      	bne.n	8002008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d10f      	bne.n	8002008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0d0      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 020f 	bic.w	r2, r3, #15
 800204a:	4965      	ldr	r1, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800209e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d040      	beq.n	8002140 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e073      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4936      	ldr	r1, [pc, #216]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002110:	f7ff f8a6 	bl	8001260 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff f8a2 	bl	8001260 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e053      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d210      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 020f 	bic.w	r2, r3, #15
 8002156:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f821 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1cc>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1d0>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1d4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f802 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	0800440c 	.word	0x0800440c
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f8:	b090      	sub	sp, #64	; 0x40
 80021fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002200:	2300      	movs	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCC_GetSysClockFreq+0x180>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d00d      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x40>
 8002218:	2b08      	cmp	r3, #8
 800221a:	f200 80a1 	bhi.w	8002360 <HAL_RCC_GetSysClockFreq+0x16c>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x34>
 8002222:	2b04      	cmp	r3, #4
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x3a>
 8002226:	e09b      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_GetSysClockFreq+0x184>)
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800222c:	e09b      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800222e:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_GetSysClockFreq+0x188>)
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002232:	e098      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002234:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_RCC_GetSysClockFreq+0x180>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800223e:	4b4d      	ldr	r3, [pc, #308]	; (8002374 <HAL_RCC_GetSysClockFreq+0x180>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d028      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_RCC_GetSysClockFreq+0x180>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	2200      	movs	r2, #0
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	627a      	str	r2, [r7, #36]	; 0x24
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800225c:	2100      	movs	r1, #0
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_GetSysClockFreq+0x188>)
 8002260:	fb03 f201 	mul.w	r2, r3, r1
 8002264:	2300      	movs	r3, #0
 8002266:	fb00 f303 	mul.w	r3, r0, r3
 800226a:	4413      	add	r3, r2
 800226c:	4a43      	ldr	r2, [pc, #268]	; (800237c <HAL_RCC_GetSysClockFreq+0x188>)
 800226e:	fba0 1202 	umull	r1, r2, r0, r2
 8002272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002274:	460a      	mov	r2, r1
 8002276:	62ba      	str	r2, [r7, #40]	; 0x28
 8002278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227a:	4413      	add	r3, r2
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	2200      	movs	r2, #0
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	61fa      	str	r2, [r7, #28]
 8002286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800228a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800228e:	f7fd ffd3 	bl	8000238 <__aeabi_uldivmod>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4613      	mov	r3, r2
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	e053      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_RCC_GetSysClockFreq+0x180>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	2200      	movs	r2, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	617a      	str	r2, [r7, #20]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022ae:	f04f 0b00 	mov.w	fp, #0
 80022b2:	4652      	mov	r2, sl
 80022b4:	465b      	mov	r3, fp
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	0159      	lsls	r1, r3, #5
 80022c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c4:	0150      	lsls	r0, r2, #5
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	ebb2 080a 	subs.w	r8, r2, sl
 80022ce:	eb63 090b 	sbc.w	r9, r3, fp
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022e6:	ebb2 0408 	subs.w	r4, r2, r8
 80022ea:	eb63 0509 	sbc.w	r5, r3, r9
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	00eb      	lsls	r3, r5, #3
 80022f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fc:	00e2      	lsls	r2, r4, #3
 80022fe:	4614      	mov	r4, r2
 8002300:	461d      	mov	r5, r3
 8002302:	eb14 030a 	adds.w	r3, r4, sl
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	eb45 030b 	adc.w	r3, r5, fp
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231a:	4629      	mov	r1, r5
 800231c:	028b      	lsls	r3, r1, #10
 800231e:	4621      	mov	r1, r4
 8002320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002324:	4621      	mov	r1, r4
 8002326:	028a      	lsls	r2, r1, #10
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232e:	2200      	movs	r2, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	60fa      	str	r2, [r7, #12]
 8002334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002338:	f7fd ff7e 	bl	8000238 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4613      	mov	r3, r2
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_GetSysClockFreq+0x180>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetSysClockFreq+0x184>)
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002368:	4618      	mov	r0, r3
 800236a:	3740      	adds	r7, #64	; 0x40
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	00f42400 	.word	0x00f42400
 800237c:	017d7840 	.word	0x017d7840

08002380 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800239c:	f7ff fff0 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	0800441c 	.word	0x0800441c

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c4:	f7ff ffdc 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0b5b      	lsrs	r3, r3, #13
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4903      	ldr	r1, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	0800441c 	.word	0x0800441c

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a68      	ldr	r2, [pc, #416]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800241a:	6093      	str	r3, [r2, #8]
 800241c:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	4964      	ldr	r1, [pc, #400]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d017      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002442:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	4959      	ldr	r1, [pc, #356]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002460:	d101      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002462:	2301      	movs	r3, #1
 8002464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d017      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800247e:	4b4e      	ldr	r3, [pc, #312]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002484:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	494a      	ldr	r1, [pc, #296]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 808b 	beq.w	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	4a39      	ldr	r2, [pc, #228]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	6413      	str	r3, [r2, #64]	; 0x40
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a34      	ldr	r2, [pc, #208]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f0:	f7fe feb6 	bl	8001260 <HAL_GetTick>
 80024f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f8:	f7fe feb2 	bl	8001260 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e38f      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d035      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d02e      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002554:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002556:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d114      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fe7a 	bl	8001260 <HAL_GetTick>
 800256c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	e00a      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe fe76 	bl	8001260 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e351      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0ee      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800259e:	d111      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ae:	400b      	ands	r3, r1
 80025b0:	4901      	ldr	r1, [pc, #4]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40007000 	.word	0x40007000
 80025c0:	0ffffcff 	.word	0x0ffffcff
 80025c4:	4bac      	ldr	r3, [pc, #688]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4aab      	ldr	r2, [pc, #684]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025ce:	6093      	str	r3, [r2, #8]
 80025d0:	4ba9      	ldr	r3, [pc, #676]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	49a6      	ldr	r1, [pc, #664]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d010      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025ee:	4ba2      	ldr	r3, [pc, #648]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f4:	4aa0      	ldr	r2, [pc, #640]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025fe:	4b9e      	ldr	r3, [pc, #632]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002600:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	499b      	ldr	r1, [pc, #620]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261c:	4b96      	ldr	r3, [pc, #600]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800262a:	4993      	ldr	r1, [pc, #588]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800263e:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800264c:	498a      	ldr	r1, [pc, #552]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002660:	4b85      	ldr	r3, [pc, #532]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266e:	4982      	ldr	r1, [pc, #520]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002682:	4b7d      	ldr	r3, [pc, #500]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4979      	ldr	r1, [pc, #484]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a4:	4b74      	ldr	r3, [pc, #464]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4971      	ldr	r1, [pc, #452]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	f023 020c 	bic.w	r2, r3, #12
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	4968      	ldr	r1, [pc, #416]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026e8:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4960      	ldr	r1, [pc, #384]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800270a:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	4957      	ldr	r1, [pc, #348]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800272c:	4b52      	ldr	r3, [pc, #328]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	494f      	ldr	r1, [pc, #316]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800274e:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	4946      	ldr	r1, [pc, #280]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	493e      	ldr	r1, [pc, #248]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	4935      	ldr	r1, [pc, #212]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c2:	492d      	ldr	r1, [pc, #180]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d011      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027d6:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e4:	4924      	ldr	r1, [pc, #144]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f4:	d101      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002824:	4914      	ldr	r1, [pc, #80]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002848:	490b      	ldr	r1, [pc, #44]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00f      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800286c:	4902      	ldr	r1, [pc, #8]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002874:	e002      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002888:	4b8a      	ldr	r3, [pc, #552]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800288a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	4986      	ldr	r1, [pc, #536]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028bc:	497d      	ldr	r1, [pc, #500]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d006      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80d6 	beq.w	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028d8:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e4:	f7fe fcbc 	bl	8001260 <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028ec:	f7fe fcb8 	bl	8001260 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e195      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028fe:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d021      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11d      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800292c:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002932:	0e1b      	lsrs	r3, r3, #24
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	019a      	lsls	r2, r3, #6
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	071b      	lsls	r3, r3, #28
 8002952:	4958      	ldr	r1, [pc, #352]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002978:	2b00      	cmp	r3, #0
 800297a:	d02e      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002984:	d129      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002986:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002994:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800299a:	0f1b      	lsrs	r3, r3, #28
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	019a      	lsls	r2, r3, #6
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	071b      	lsls	r3, r3, #28
 80029ba:	493e      	ldr	r1, [pc, #248]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029c2:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	f023 021f 	bic.w	r2, r3, #31
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	3b01      	subs	r3, #1
 80029d2:	4938      	ldr	r1, [pc, #224]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01d      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ec:	0e1b      	lsrs	r3, r3, #24
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	0f1b      	lsrs	r3, r3, #28
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	019a      	lsls	r2, r3, #6
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	061b      	lsls	r3, r3, #24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	071b      	lsls	r3, r3, #28
 8002a1a:	4926      	ldr	r1, [pc, #152]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d011      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	019a      	lsls	r2, r3, #6
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	071b      	lsls	r3, r3, #28
 8002a4a:	491a      	ldr	r1, [pc, #104]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fbff 	bl	8001260 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a66:	f7fe fbfb 	bl	8001260 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	; 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e0d8      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 80ce 	bne.w	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe fbe2 	bl	8001260 <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aa0:	f7fe fbde 	bl	8001260 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d904      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0bb      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ab8:	4b5e      	ldr	r3, [pc, #376]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac4:	d0ec      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02e      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d12a      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aee:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002afc:	4b4d      	ldr	r3, [pc, #308]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	0f1b      	lsrs	r3, r3, #28
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	019a      	lsls	r2, r3, #6
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	071b      	lsls	r3, r3, #28
 8002b22:	4944      	ldr	r1, [pc, #272]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b2a:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	493d      	ldr	r1, [pc, #244]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d022      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b58:	d11d      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	0e1b      	lsrs	r3, r3, #24
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	0f1b      	lsrs	r3, r3, #28
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	019a      	lsls	r2, r3, #6
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	061b      	lsls	r3, r3, #24
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	071b      	lsls	r3, r3, #28
 8002b8e:	4929      	ldr	r1, [pc, #164]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d028      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ba2:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	0e1b      	lsrs	r3, r3, #24
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	0c1b      	lsrs	r3, r3, #16
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	019a      	lsls	r2, r3, #6
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	071b      	lsls	r3, r3, #28
 8002bd6:	4917      	ldr	r1, [pc, #92]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	4911      	ldr	r1, [pc, #68]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe fb2e 	bl	8001260 <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c08:	f7fe fb2a 	bl	8001260 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e007      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c26:	d1ef      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800

08002c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e040      	b.n	8002ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe f9d8 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	; 0x24
 8002c64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fb82 	bl	8003380 <UART_SetConfig>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e022      	b.n	8002ccc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fdda 	bl	8003848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fe61 	bl	800398c <UART_CheckIdleState>
 8002cca:	4603      	mov	r3, r0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d132      	bne.n	8002d52 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Receive_IT+0x24>
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e02b      	b.n	8002d54 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d018      	beq.n	8002d42 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	e853 3f00 	ldrex	r3, [r3]
 8002d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	69f9      	ldr	r1, [r7, #28]
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e6      	bne.n	8002d10 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	461a      	mov	r2, r3
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 ff33 	bl	8003bb4 <UART_Start_Receive_IT>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	e000      	b.n	8002d54 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3728      	adds	r7, #40	; 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b0ba      	sub	sp, #232	; 0xe8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d86:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d115      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00f      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 82ac 	beq.w	8003312 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
      }
      return;
 8002dc2:	e2a6      	b.n	8003312 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8117 	beq.w	8002ffc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dde:	4b85      	ldr	r3, [pc, #532]	; (8002ff4 <HAL_UART_IRQHandler+0x298>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 810a 	beq.w	8002ffc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d011      	beq.n	8002e18 <HAL_UART_IRQHandler+0xbc>
 8002df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d011      	beq.n	8002e48 <HAL_UART_IRQHandler+0xec>
 8002e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2202      	movs	r2, #2
 8002e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d011      	beq.n	8002e78 <HAL_UART_IRQHandler+0x11c>
 8002e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2204      	movs	r2, #4
 8002e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d017      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eaa:	f043 0208 	orr.w	r2, r3, #8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x18a>
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8212 	beq.w	8003316 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d005      	beq.n	8002f3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04f      	beq.n	8002fde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fefe 	bl	8003d40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d141      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3308      	adds	r3, #8
 8002f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1d9      	bne.n	8002f52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d013      	beq.n	8002fce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <HAL_UART_IRQHandler+0x29c>)
 8002fac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fb82 	bl	80016bc <HAL_DMA_Abort_IT>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d017      	beq.n	8002fee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	e00f      	b.n	8002fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9b6 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd4:	e00b      	b.n	8002fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9b2 	bl	8003340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e007      	b.n	8002fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9ae 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002fec:	e193      	b.n	8003316 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fee:	bf00      	nop
    return;
 8002ff0:	e191      	b.n	8003316 <HAL_UART_IRQHandler+0x5ba>
 8002ff2:	bf00      	nop
 8002ff4:	04000120 	.word	0x04000120
 8002ff8:	08003e09 	.word	0x08003e09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	2b01      	cmp	r3, #1
 8003002:	f040 814c 	bne.w	800329e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8145 	beq.w	800329e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 813e 	beq.w	800329e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2210      	movs	r2, #16
 8003028:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	f040 80b6 	bne.w	80031a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003046:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8165 	beq.w	800331a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800305a:	429a      	cmp	r2, r3
 800305c:	f080 815d 	bcs.w	800331a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003074:	f000 8086 	beq.w	8003184 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1da      	bne.n	8003078 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e1      	bne.n	80030c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003124:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003128:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e3      	bne.n	80030fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003154:	f023 0310 	bic.w	r3, r3, #16
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003166:	65bb      	str	r3, [r7, #88]	; 0x58
 8003168:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800316c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e4      	bne.n	8003144 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fa2c 	bl	80015dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003196:	b29b      	uxth	r3, r3
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	b29b      	uxth	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8d8 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031a4:	e0b9      	b.n	800331a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80ab 	beq.w	800331e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80031c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a6 	beq.w	800331e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031f4:	647b      	str	r3, [r7, #68]	; 0x44
 80031f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e4      	bne.n	80031d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	623b      	str	r3, [r7, #32]
   return(result);
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800322c:	633a      	str	r2, [r7, #48]	; 0x30
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e3      	bne.n	8003208 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	60fb      	str	r3, [r7, #12]
   return(result);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 0310 	bic.w	r3, r3, #16
 8003268:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	617b      	str	r3, [r7, #20]
   return(result);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e4      	bne.n	8003254 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f85c 	bl	8003354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800329c:	e03f      	b.n	800331e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <HAL_UART_IRQHandler+0x56c>
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f853 	bl	800336c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032c6:	e02d      	b.n	8003324 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01c      	beq.n	8003322 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    }
    return;
 80032f0:	e017      	b.n	8003322 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_UART_IRQHandler+0x5c8>
 80032fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fd92 	bl	8003e34 <UART_EndTransmit_IT>
    return;
 8003310:	e008      	b.n	8003324 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003312:	bf00      	nop
 8003314:	e006      	b.n	8003324 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003316:	bf00      	nop
 8003318:	e004      	b.n	8003324 <HAL_UART_IRQHandler+0x5c8>
      return;
 800331a:	bf00      	nop
 800331c:	e002      	b.n	8003324 <HAL_UART_IRQHandler+0x5c8>
      return;
 800331e:	bf00      	nop
 8003320:	e000      	b.n	8003324 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003322:	bf00      	nop
  }

}
 8003324:	37e8      	adds	r7, #232	; 0xe8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop

0800332c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4ba6      	ldr	r3, [pc, #664]	; (8003644 <UART_SetConfig+0x2c4>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a94      	ldr	r2, [pc, #592]	; (8003648 <UART_SetConfig+0x2c8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d120      	bne.n	800343e <UART_SetConfig+0xbe>
 80033fc:	4b93      	ldr	r3, [pc, #588]	; (800364c <UART_SetConfig+0x2cc>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b03      	cmp	r3, #3
 8003408:	d816      	bhi.n	8003438 <UART_SetConfig+0xb8>
 800340a:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0x90>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003421 	.word	0x08003421
 8003414:	0800342d 	.word	0x0800342d
 8003418:	08003427 	.word	0x08003427
 800341c:	08003433 	.word	0x08003433
 8003420:	2301      	movs	r3, #1
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e150      	b.n	80036c8 <UART_SetConfig+0x348>
 8003426:	2302      	movs	r3, #2
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e14d      	b.n	80036c8 <UART_SetConfig+0x348>
 800342c:	2304      	movs	r3, #4
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e14a      	b.n	80036c8 <UART_SetConfig+0x348>
 8003432:	2308      	movs	r3, #8
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e147      	b.n	80036c8 <UART_SetConfig+0x348>
 8003438:	2310      	movs	r3, #16
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e144      	b.n	80036c8 <UART_SetConfig+0x348>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a83      	ldr	r2, [pc, #524]	; (8003650 <UART_SetConfig+0x2d0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d132      	bne.n	80034ae <UART_SetConfig+0x12e>
 8003448:	4b80      	ldr	r3, [pc, #512]	; (800364c <UART_SetConfig+0x2cc>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d828      	bhi.n	80034a8 <UART_SetConfig+0x128>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <UART_SetConfig+0xdc>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	08003491 	.word	0x08003491
 8003460:	080034a9 	.word	0x080034a9
 8003464:	080034a9 	.word	0x080034a9
 8003468:	080034a9 	.word	0x080034a9
 800346c:	0800349d 	.word	0x0800349d
 8003470:	080034a9 	.word	0x080034a9
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080034a9 	.word	0x080034a9
 800347c:	08003497 	.word	0x08003497
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034a9 	.word	0x080034a9
 800348c:	080034a3 	.word	0x080034a3
 8003490:	2300      	movs	r3, #0
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e118      	b.n	80036c8 <UART_SetConfig+0x348>
 8003496:	2302      	movs	r3, #2
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e115      	b.n	80036c8 <UART_SetConfig+0x348>
 800349c:	2304      	movs	r3, #4
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e112      	b.n	80036c8 <UART_SetConfig+0x348>
 80034a2:	2308      	movs	r3, #8
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e10f      	b.n	80036c8 <UART_SetConfig+0x348>
 80034a8:	2310      	movs	r3, #16
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e10c      	b.n	80036c8 <UART_SetConfig+0x348>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a68      	ldr	r2, [pc, #416]	; (8003654 <UART_SetConfig+0x2d4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d120      	bne.n	80034fa <UART_SetConfig+0x17a>
 80034b8:	4b64      	ldr	r3, [pc, #400]	; (800364c <UART_SetConfig+0x2cc>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034c2:	2b30      	cmp	r3, #48	; 0x30
 80034c4:	d013      	beq.n	80034ee <UART_SetConfig+0x16e>
 80034c6:	2b30      	cmp	r3, #48	; 0x30
 80034c8:	d814      	bhi.n	80034f4 <UART_SetConfig+0x174>
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d009      	beq.n	80034e2 <UART_SetConfig+0x162>
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d810      	bhi.n	80034f4 <UART_SetConfig+0x174>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <UART_SetConfig+0x15c>
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d006      	beq.n	80034e8 <UART_SetConfig+0x168>
 80034da:	e00b      	b.n	80034f4 <UART_SetConfig+0x174>
 80034dc:	2300      	movs	r3, #0
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e0f2      	b.n	80036c8 <UART_SetConfig+0x348>
 80034e2:	2302      	movs	r3, #2
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e0ef      	b.n	80036c8 <UART_SetConfig+0x348>
 80034e8:	2304      	movs	r3, #4
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e0ec      	b.n	80036c8 <UART_SetConfig+0x348>
 80034ee:	2308      	movs	r3, #8
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e0e9      	b.n	80036c8 <UART_SetConfig+0x348>
 80034f4:	2310      	movs	r3, #16
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e0e6      	b.n	80036c8 <UART_SetConfig+0x348>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a56      	ldr	r2, [pc, #344]	; (8003658 <UART_SetConfig+0x2d8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d120      	bne.n	8003546 <UART_SetConfig+0x1c6>
 8003504:	4b51      	ldr	r3, [pc, #324]	; (800364c <UART_SetConfig+0x2cc>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800350e:	2bc0      	cmp	r3, #192	; 0xc0
 8003510:	d013      	beq.n	800353a <UART_SetConfig+0x1ba>
 8003512:	2bc0      	cmp	r3, #192	; 0xc0
 8003514:	d814      	bhi.n	8003540 <UART_SetConfig+0x1c0>
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	d009      	beq.n	800352e <UART_SetConfig+0x1ae>
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d810      	bhi.n	8003540 <UART_SetConfig+0x1c0>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0x1a8>
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d006      	beq.n	8003534 <UART_SetConfig+0x1b4>
 8003526:	e00b      	b.n	8003540 <UART_SetConfig+0x1c0>
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e0cc      	b.n	80036c8 <UART_SetConfig+0x348>
 800352e:	2302      	movs	r3, #2
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e0c9      	b.n	80036c8 <UART_SetConfig+0x348>
 8003534:	2304      	movs	r3, #4
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e0c6      	b.n	80036c8 <UART_SetConfig+0x348>
 800353a:	2308      	movs	r3, #8
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e0c3      	b.n	80036c8 <UART_SetConfig+0x348>
 8003540:	2310      	movs	r3, #16
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e0c0      	b.n	80036c8 <UART_SetConfig+0x348>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a44      	ldr	r2, [pc, #272]	; (800365c <UART_SetConfig+0x2dc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d125      	bne.n	800359c <UART_SetConfig+0x21c>
 8003550:	4b3e      	ldr	r3, [pc, #248]	; (800364c <UART_SetConfig+0x2cc>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800355e:	d017      	beq.n	8003590 <UART_SetConfig+0x210>
 8003560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003564:	d817      	bhi.n	8003596 <UART_SetConfig+0x216>
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d00b      	beq.n	8003584 <UART_SetConfig+0x204>
 800356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003570:	d811      	bhi.n	8003596 <UART_SetConfig+0x216>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <UART_SetConfig+0x1fe>
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d006      	beq.n	800358a <UART_SetConfig+0x20a>
 800357c:	e00b      	b.n	8003596 <UART_SetConfig+0x216>
 800357e:	2300      	movs	r3, #0
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e0a1      	b.n	80036c8 <UART_SetConfig+0x348>
 8003584:	2302      	movs	r3, #2
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e09e      	b.n	80036c8 <UART_SetConfig+0x348>
 800358a:	2304      	movs	r3, #4
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e09b      	b.n	80036c8 <UART_SetConfig+0x348>
 8003590:	2308      	movs	r3, #8
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e098      	b.n	80036c8 <UART_SetConfig+0x348>
 8003596:	2310      	movs	r3, #16
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e095      	b.n	80036c8 <UART_SetConfig+0x348>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <UART_SetConfig+0x2e0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d125      	bne.n	80035f2 <UART_SetConfig+0x272>
 80035a6:	4b29      	ldr	r3, [pc, #164]	; (800364c <UART_SetConfig+0x2cc>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035b4:	d017      	beq.n	80035e6 <UART_SetConfig+0x266>
 80035b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ba:	d817      	bhi.n	80035ec <UART_SetConfig+0x26c>
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c0:	d00b      	beq.n	80035da <UART_SetConfig+0x25a>
 80035c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c6:	d811      	bhi.n	80035ec <UART_SetConfig+0x26c>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <UART_SetConfig+0x254>
 80035cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d0:	d006      	beq.n	80035e0 <UART_SetConfig+0x260>
 80035d2:	e00b      	b.n	80035ec <UART_SetConfig+0x26c>
 80035d4:	2301      	movs	r3, #1
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e076      	b.n	80036c8 <UART_SetConfig+0x348>
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e073      	b.n	80036c8 <UART_SetConfig+0x348>
 80035e0:	2304      	movs	r3, #4
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e070      	b.n	80036c8 <UART_SetConfig+0x348>
 80035e6:	2308      	movs	r3, #8
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e06d      	b.n	80036c8 <UART_SetConfig+0x348>
 80035ec:	2310      	movs	r3, #16
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e06a      	b.n	80036c8 <UART_SetConfig+0x348>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <UART_SetConfig+0x2e4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d138      	bne.n	800366e <UART_SetConfig+0x2ee>
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <UART_SetConfig+0x2cc>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800360a:	d017      	beq.n	800363c <UART_SetConfig+0x2bc>
 800360c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003610:	d82a      	bhi.n	8003668 <UART_SetConfig+0x2e8>
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003616:	d00b      	beq.n	8003630 <UART_SetConfig+0x2b0>
 8003618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361c:	d824      	bhi.n	8003668 <UART_SetConfig+0x2e8>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <UART_SetConfig+0x2aa>
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	d006      	beq.n	8003636 <UART_SetConfig+0x2b6>
 8003628:	e01e      	b.n	8003668 <UART_SetConfig+0x2e8>
 800362a:	2300      	movs	r3, #0
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e04b      	b.n	80036c8 <UART_SetConfig+0x348>
 8003630:	2302      	movs	r3, #2
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e048      	b.n	80036c8 <UART_SetConfig+0x348>
 8003636:	2304      	movs	r3, #4
 8003638:	77fb      	strb	r3, [r7, #31]
 800363a:	e045      	b.n	80036c8 <UART_SetConfig+0x348>
 800363c:	2308      	movs	r3, #8
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e042      	b.n	80036c8 <UART_SetConfig+0x348>
 8003642:	bf00      	nop
 8003644:	efff69f3 	.word	0xefff69f3
 8003648:	40011000 	.word	0x40011000
 800364c:	40023800 	.word	0x40023800
 8003650:	40004400 	.word	0x40004400
 8003654:	40004800 	.word	0x40004800
 8003658:	40004c00 	.word	0x40004c00
 800365c:	40005000 	.word	0x40005000
 8003660:	40011400 	.word	0x40011400
 8003664:	40007800 	.word	0x40007800
 8003668:	2310      	movs	r3, #16
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e02c      	b.n	80036c8 <UART_SetConfig+0x348>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a72      	ldr	r2, [pc, #456]	; (800383c <UART_SetConfig+0x4bc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d125      	bne.n	80036c4 <UART_SetConfig+0x344>
 8003678:	4b71      	ldr	r3, [pc, #452]	; (8003840 <UART_SetConfig+0x4c0>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003682:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003686:	d017      	beq.n	80036b8 <UART_SetConfig+0x338>
 8003688:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800368c:	d817      	bhi.n	80036be <UART_SetConfig+0x33e>
 800368e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003692:	d00b      	beq.n	80036ac <UART_SetConfig+0x32c>
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003698:	d811      	bhi.n	80036be <UART_SetConfig+0x33e>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <UART_SetConfig+0x326>
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a2:	d006      	beq.n	80036b2 <UART_SetConfig+0x332>
 80036a4:	e00b      	b.n	80036be <UART_SetConfig+0x33e>
 80036a6:	2300      	movs	r3, #0
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e00d      	b.n	80036c8 <UART_SetConfig+0x348>
 80036ac:	2302      	movs	r3, #2
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e00a      	b.n	80036c8 <UART_SetConfig+0x348>
 80036b2:	2304      	movs	r3, #4
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e007      	b.n	80036c8 <UART_SetConfig+0x348>
 80036b8:	2308      	movs	r3, #8
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e004      	b.n	80036c8 <UART_SetConfig+0x348>
 80036be:	2310      	movs	r3, #16
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e001      	b.n	80036c8 <UART_SetConfig+0x348>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d0:	d15b      	bne.n	800378a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036d2:	7ffb      	ldrb	r3, [r7, #31]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d828      	bhi.n	800372a <UART_SetConfig+0x3aa>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0x360>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	08003705 	.word	0x08003705
 80036e4:	0800370d 	.word	0x0800370d
 80036e8:	08003715 	.word	0x08003715
 80036ec:	0800372b 	.word	0x0800372b
 80036f0:	0800371b 	.word	0x0800371b
 80036f4:	0800372b 	.word	0x0800372b
 80036f8:	0800372b 	.word	0x0800372b
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	08003723 	.word	0x08003723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003704:	f7fe fe48 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8003708:	61b8      	str	r0, [r7, #24]
        break;
 800370a:	e013      	b.n	8003734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800370c:	f7fe fe58 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8003710:	61b8      	str	r0, [r7, #24]
        break;
 8003712:	e00f      	b.n	8003734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003714:	4b4b      	ldr	r3, [pc, #300]	; (8003844 <UART_SetConfig+0x4c4>)
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e00c      	b.n	8003734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe fd6b 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800371e:	61b8      	str	r0, [r7, #24]
        break;
 8003720:	e008      	b.n	8003734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003726:	61bb      	str	r3, [r7, #24]
        break;
 8003728:	e004      	b.n	8003734 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	77bb      	strb	r3, [r7, #30]
        break;
 8003732:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d074      	beq.n	8003824 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	005a      	lsls	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d916      	bls.n	8003784 <UART_SetConfig+0x404>
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d212      	bcs.n	8003784 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f023 030f 	bic.w	r3, r3, #15
 8003766:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	b29b      	uxth	r3, r3
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	b29a      	uxth	r2, r3
 8003774:	89fb      	ldrh	r3, [r7, #14]
 8003776:	4313      	orrs	r3, r2
 8003778:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	89fa      	ldrh	r2, [r7, #14]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	e04f      	b.n	8003824 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	77bb      	strb	r3, [r7, #30]
 8003788:	e04c      	b.n	8003824 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d828      	bhi.n	80037e2 <UART_SetConfig+0x462>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0x418>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037c5 	.word	0x080037c5
 80037a0:	080037cd 	.word	0x080037cd
 80037a4:	080037e3 	.word	0x080037e3
 80037a8:	080037d3 	.word	0x080037d3
 80037ac:	080037e3 	.word	0x080037e3
 80037b0:	080037e3 	.word	0x080037e3
 80037b4:	080037e3 	.word	0x080037e3
 80037b8:	080037db 	.word	0x080037db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7fe fdec 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 80037c0:	61b8      	str	r0, [r7, #24]
        break;
 80037c2:	e013      	b.n	80037ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c4:	f7fe fdfc 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 80037c8:	61b8      	str	r0, [r7, #24]
        break;
 80037ca:	e00f      	b.n	80037ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <UART_SetConfig+0x4c4>)
 80037ce:	61bb      	str	r3, [r7, #24]
        break;
 80037d0:	e00c      	b.n	80037ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037d2:	f7fe fd0f 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80037d6:	61b8      	str	r0, [r7, #24]
        break;
 80037d8:	e008      	b.n	80037ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037de:	61bb      	str	r3, [r7, #24]
        break;
 80037e0:	e004      	b.n	80037ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	77bb      	strb	r3, [r7, #30]
        break;
 80037ea:	bf00      	nop
    }

    if (pclk != 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d018      	beq.n	8003824 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085a      	lsrs	r2, r3, #1
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d909      	bls.n	8003820 <UART_SetConfig+0x4a0>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003812:	d205      	bcs.n	8003820 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e001      	b.n	8003824 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003830:	7fbb      	ldrb	r3, [r7, #30]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40007c00 	.word	0x40007c00
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400

08003848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01a      	beq.n	800395e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003946:	d10a      	bne.n	800395e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  }
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800399c:	f7fd fc60 	bl	8001260 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d10e      	bne.n	80039ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f831 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e027      	b.n	8003a1e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d10e      	bne.n	80039fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f81b 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e011      	b.n	8003a1e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b09c      	sub	sp, #112	; 0x70
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a36:	e0a7      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	f000 80a3 	beq.w	8003b88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fd fc0d 	bl	8001260 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d13f      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aaa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e068      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d050      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af4:	d148      	bne.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003afe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b20:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e6      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3308      	adds	r3, #8
 8003b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b52:	623a      	str	r2, [r7, #32]
 8003b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	69f9      	ldr	r1, [r7, #28]
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e010      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	f43f af48 	beq.w	8003a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3770      	adds	r7, #112	; 0x70
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b097      	sub	sp, #92	; 0x5c
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d10e      	bne.n	8003c06 <UART_Start_Receive_IT+0x52>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <UART_Start_Receive_IT+0x48>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bfa:	e02d      	b.n	8003c58 <UART_Start_Receive_IT+0xa4>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	22ff      	movs	r2, #255	; 0xff
 8003c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c04:	e028      	b.n	8003c58 <UART_Start_Receive_IT+0xa4>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10d      	bne.n	8003c2a <UART_Start_Receive_IT+0x76>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <UART_Start_Receive_IT+0x6c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	22ff      	movs	r2, #255	; 0xff
 8003c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c1e:	e01b      	b.n	8003c58 <UART_Start_Receive_IT+0xa4>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	227f      	movs	r2, #127	; 0x7f
 8003c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c28:	e016      	b.n	8003c58 <UART_Start_Receive_IT+0xa4>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c32:	d10d      	bne.n	8003c50 <UART_Start_Receive_IT+0x9c>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <UART_Start_Receive_IT+0x92>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	227f      	movs	r2, #127	; 0x7f
 8003c40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c44:	e008      	b.n	8003c58 <UART_Start_Receive_IT+0xa4>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	223f      	movs	r2, #63	; 0x3f
 8003c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c4e:	e003      	b.n	8003c58 <UART_Start_Receive_IT+0xa4>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2222      	movs	r2, #34	; 0x22
 8003c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c88:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca4:	d107      	bne.n	8003cb6 <UART_Start_Receive_IT+0x102>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <UART_Start_Receive_IT+0x184>)
 8003cb2:	669a      	str	r2, [r3, #104]	; 0x68
 8003cb4:	e002      	b.n	8003cbc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <UART_Start_Receive_IT+0x188>)
 8003cba:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d019      	beq.n	8003cf8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e6      	bne.n	8003cc4 <UART_Start_Receive_IT+0x110>
 8003cf6:	e018      	b.n	8003d2a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	613b      	str	r3, [r7, #16]
   return(result);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f043 0320 	orr.w	r3, r3, #32
 8003d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	69f9      	ldr	r1, [r7, #28]
 8003d1c:	6a3a      	ldr	r2, [r7, #32]
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e6      	bne.n	8003cf8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	375c      	adds	r7, #92	; 0x5c
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	08003fef 	.word	0x08003fef
 8003d3c:	08003e89 	.word	0x08003e89

08003d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b095      	sub	sp, #84	; 0x54
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d66:	643b      	str	r3, [r7, #64]	; 0x40
 8003d68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e6      	bne.n	8003d48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d118      	bne.n	8003de8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f023 0310 	bic.w	r3, r3, #16
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6979      	ldr	r1, [r7, #20]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	613b      	str	r3, [r7, #16]
   return(result);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dfc:	bf00      	nop
 8003dfe:	3754      	adds	r7, #84	; 0x54
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff fa8a 	bl	8003340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6979      	ldr	r1, [r7, #20]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	613b      	str	r3, [r7, #16]
   return(result);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e6      	bne.n	8003e3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fa56 	bl	800332c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e80:	bf00      	nop
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b096      	sub	sp, #88	; 0x58
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea0:	2b22      	cmp	r3, #34	; 0x22
 8003ea2:	f040 8098 	bne.w	8003fd6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003eb0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003eb4:	b2d9      	uxtb	r1, r3
 8003eb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d17b      	bne.n	8003fe6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f02:	653b      	str	r3, [r7, #80]	; 0x50
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e6      	bne.n	8003eee <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f40:	633a      	str	r2, [r7, #48]	; 0x30
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d12e      	bne.n	8003fce <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69b9      	ldr	r1, [r7, #24]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d103      	bne.n	8003fbe <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff f9c4 	bl	8003354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fcc:	e00b      	b.n	8003fe6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc ff9c 	bl	8000f0c <HAL_UART_RxCpltCallback>
}
 8003fd4:	e007      	b.n	8003fe6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0208 	orr.w	r2, r2, #8
 8003fe4:	619a      	str	r2, [r3, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	3758      	adds	r7, #88	; 0x58
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b096      	sub	sp, #88	; 0x58
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ffc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004006:	2b22      	cmp	r3, #34	; 0x22
 8004008:	f040 8098 	bne.w	800413c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800401c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004020:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004024:	4013      	ands	r3, r2
 8004026:	b29a      	uxth	r2, r3
 8004028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	1c9a      	adds	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d17b      	bne.n	800414c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004072:	643b      	str	r3, [r7, #64]	; 0x40
 8004074:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e6      	bne.n	8004054 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	61fb      	str	r3, [r7, #28]
   return(result);
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	64bb      	str	r3, [r7, #72]	; 0x48
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d12e      	bne.n	8004134 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	647b      	str	r3, [r7, #68]	; 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b10      	cmp	r3, #16
 800411a:	d103      	bne.n	8004124 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2210      	movs	r2, #16
 8004122:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff f911 	bl	8003354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004132:	e00b      	b.n	800414c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7fc fee9 	bl	8000f0c <HAL_UART_RxCpltCallback>
}
 800413a:	e007      	b.n	800414c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	619a      	str	r2, [r3, #24]
}
 800414c:	bf00      	nop
 800414e:	3758      	adds	r7, #88	; 0x58
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <atoi>:
 8004154:	220a      	movs	r2, #10
 8004156:	2100      	movs	r1, #0
 8004158:	f000 b8b4 	b.w	80042c4 <strtol>

0800415c <__errno>:
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <__errno+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	2000000c 	.word	0x2000000c

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4d0d      	ldr	r5, [pc, #52]	; (80041a0 <__libc_init_array+0x38>)
 800416c:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	2600      	movs	r6, #0
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	4d0b      	ldr	r5, [pc, #44]	; (80041a8 <__libc_init_array+0x40>)
 800417a:	4c0c      	ldr	r4, [pc, #48]	; (80041ac <__libc_init_array+0x44>)
 800417c:	f000 f924 	bl	80043c8 <_init>
 8004180:	1b64      	subs	r4, r4, r5
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	2600      	movs	r6, #0
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f855 3b04 	ldr.w	r3, [r5], #4
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004530 	.word	0x08004530
 80041a4:	08004530 	.word	0x08004530
 80041a8:	08004530 	.word	0x08004530
 80041ac:	08004534 	.word	0x08004534

080041b0 <memset>:
 80041b0:	4402      	add	r2, r0
 80041b2:	4603      	mov	r3, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d100      	bne.n	80041ba <memset+0xa>
 80041b8:	4770      	bx	lr
 80041ba:	f803 1b01 	strb.w	r1, [r3], #1
 80041be:	e7f9      	b.n	80041b4 <memset+0x4>

080041c0 <_strtol_l.constprop.0>:
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c6:	d001      	beq.n	80041cc <_strtol_l.constprop.0+0xc>
 80041c8:	2b24      	cmp	r3, #36	; 0x24
 80041ca:	d906      	bls.n	80041da <_strtol_l.constprop.0+0x1a>
 80041cc:	f7ff ffc6 	bl	800415c <__errno>
 80041d0:	2316      	movs	r3, #22
 80041d2:	6003      	str	r3, [r0, #0]
 80041d4:	2000      	movs	r0, #0
 80041d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80042c0 <_strtol_l.constprop.0+0x100>
 80041de:	460d      	mov	r5, r1
 80041e0:	462e      	mov	r6, r5
 80041e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80041ea:	f017 0708 	ands.w	r7, r7, #8
 80041ee:	d1f7      	bne.n	80041e0 <_strtol_l.constprop.0+0x20>
 80041f0:	2c2d      	cmp	r4, #45	; 0x2d
 80041f2:	d132      	bne.n	800425a <_strtol_l.constprop.0+0x9a>
 80041f4:	782c      	ldrb	r4, [r5, #0]
 80041f6:	2701      	movs	r7, #1
 80041f8:	1cb5      	adds	r5, r6, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d05b      	beq.n	80042b6 <_strtol_l.constprop.0+0xf6>
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d109      	bne.n	8004216 <_strtol_l.constprop.0+0x56>
 8004202:	2c30      	cmp	r4, #48	; 0x30
 8004204:	d107      	bne.n	8004216 <_strtol_l.constprop.0+0x56>
 8004206:	782c      	ldrb	r4, [r5, #0]
 8004208:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800420c:	2c58      	cmp	r4, #88	; 0x58
 800420e:	d14d      	bne.n	80042ac <_strtol_l.constprop.0+0xec>
 8004210:	786c      	ldrb	r4, [r5, #1]
 8004212:	2310      	movs	r3, #16
 8004214:	3502      	adds	r5, #2
 8004216:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800421a:	f108 38ff 	add.w	r8, r8, #4294967295
 800421e:	f04f 0c00 	mov.w	ip, #0
 8004222:	fbb8 f9f3 	udiv	r9, r8, r3
 8004226:	4666      	mov	r6, ip
 8004228:	fb03 8a19 	mls	sl, r3, r9, r8
 800422c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004230:	f1be 0f09 	cmp.w	lr, #9
 8004234:	d816      	bhi.n	8004264 <_strtol_l.constprop.0+0xa4>
 8004236:	4674      	mov	r4, lr
 8004238:	42a3      	cmp	r3, r4
 800423a:	dd24      	ble.n	8004286 <_strtol_l.constprop.0+0xc6>
 800423c:	f1bc 0f00 	cmp.w	ip, #0
 8004240:	db1e      	blt.n	8004280 <_strtol_l.constprop.0+0xc0>
 8004242:	45b1      	cmp	r9, r6
 8004244:	d31c      	bcc.n	8004280 <_strtol_l.constprop.0+0xc0>
 8004246:	d101      	bne.n	800424c <_strtol_l.constprop.0+0x8c>
 8004248:	45a2      	cmp	sl, r4
 800424a:	db19      	blt.n	8004280 <_strtol_l.constprop.0+0xc0>
 800424c:	fb06 4603 	mla	r6, r6, r3, r4
 8004250:	f04f 0c01 	mov.w	ip, #1
 8004254:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004258:	e7e8      	b.n	800422c <_strtol_l.constprop.0+0x6c>
 800425a:	2c2b      	cmp	r4, #43	; 0x2b
 800425c:	bf04      	itt	eq
 800425e:	782c      	ldrbeq	r4, [r5, #0]
 8004260:	1cb5      	addeq	r5, r6, #2
 8004262:	e7ca      	b.n	80041fa <_strtol_l.constprop.0+0x3a>
 8004264:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004268:	f1be 0f19 	cmp.w	lr, #25
 800426c:	d801      	bhi.n	8004272 <_strtol_l.constprop.0+0xb2>
 800426e:	3c37      	subs	r4, #55	; 0x37
 8004270:	e7e2      	b.n	8004238 <_strtol_l.constprop.0+0x78>
 8004272:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004276:	f1be 0f19 	cmp.w	lr, #25
 800427a:	d804      	bhi.n	8004286 <_strtol_l.constprop.0+0xc6>
 800427c:	3c57      	subs	r4, #87	; 0x57
 800427e:	e7db      	b.n	8004238 <_strtol_l.constprop.0+0x78>
 8004280:	f04f 3cff 	mov.w	ip, #4294967295
 8004284:	e7e6      	b.n	8004254 <_strtol_l.constprop.0+0x94>
 8004286:	f1bc 0f00 	cmp.w	ip, #0
 800428a:	da05      	bge.n	8004298 <_strtol_l.constprop.0+0xd8>
 800428c:	2322      	movs	r3, #34	; 0x22
 800428e:	6003      	str	r3, [r0, #0]
 8004290:	4646      	mov	r6, r8
 8004292:	b942      	cbnz	r2, 80042a6 <_strtol_l.constprop.0+0xe6>
 8004294:	4630      	mov	r0, r6
 8004296:	e79e      	b.n	80041d6 <_strtol_l.constprop.0+0x16>
 8004298:	b107      	cbz	r7, 800429c <_strtol_l.constprop.0+0xdc>
 800429a:	4276      	negs	r6, r6
 800429c:	2a00      	cmp	r2, #0
 800429e:	d0f9      	beq.n	8004294 <_strtol_l.constprop.0+0xd4>
 80042a0:	f1bc 0f00 	cmp.w	ip, #0
 80042a4:	d000      	beq.n	80042a8 <_strtol_l.constprop.0+0xe8>
 80042a6:	1e69      	subs	r1, r5, #1
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	e7f3      	b.n	8004294 <_strtol_l.constprop.0+0xd4>
 80042ac:	2430      	movs	r4, #48	; 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1b1      	bne.n	8004216 <_strtol_l.constprop.0+0x56>
 80042b2:	2308      	movs	r3, #8
 80042b4:	e7af      	b.n	8004216 <_strtol_l.constprop.0+0x56>
 80042b6:	2c30      	cmp	r4, #48	; 0x30
 80042b8:	d0a5      	beq.n	8004206 <_strtol_l.constprop.0+0x46>
 80042ba:	230a      	movs	r3, #10
 80042bc:	e7ab      	b.n	8004216 <_strtol_l.constprop.0+0x56>
 80042be:	bf00      	nop
 80042c0:	08004425 	.word	0x08004425

080042c4 <strtol>:
 80042c4:	4613      	mov	r3, r2
 80042c6:	460a      	mov	r2, r1
 80042c8:	4601      	mov	r1, r0
 80042ca:	4802      	ldr	r0, [pc, #8]	; (80042d4 <strtol+0x10>)
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	f7ff bf77 	b.w	80041c0 <_strtol_l.constprop.0>
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c

080042d8 <ceil>:
 80042d8:	ee10 1a90 	vmov	r1, s1
 80042dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80042e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80042e4:	2b13      	cmp	r3, #19
 80042e6:	b530      	push	{r4, r5, lr}
 80042e8:	ee10 0a10 	vmov	r0, s0
 80042ec:	ee10 5a10 	vmov	r5, s0
 80042f0:	dc2f      	bgt.n	8004352 <ceil+0x7a>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da13      	bge.n	800431e <ceil+0x46>
 80042f6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80043b8 <ceil+0xe0>
 80042fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80042fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004306:	dd05      	ble.n	8004314 <ceil+0x3c>
 8004308:	2900      	cmp	r1, #0
 800430a:	db4c      	blt.n	80043a6 <ceil+0xce>
 800430c:	4301      	orrs	r1, r0
 800430e:	d04e      	beq.n	80043ae <ceil+0xd6>
 8004310:	492b      	ldr	r1, [pc, #172]	; (80043c0 <ceil+0xe8>)
 8004312:	2000      	movs	r0, #0
 8004314:	460b      	mov	r3, r1
 8004316:	4602      	mov	r2, r0
 8004318:	ec43 2b10 	vmov	d0, r2, r3
 800431c:	e020      	b.n	8004360 <ceil+0x88>
 800431e:	4a29      	ldr	r2, [pc, #164]	; (80043c4 <ceil+0xec>)
 8004320:	411a      	asrs	r2, r3
 8004322:	ea01 0402 	and.w	r4, r1, r2
 8004326:	4304      	orrs	r4, r0
 8004328:	d01a      	beq.n	8004360 <ceil+0x88>
 800432a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80043b8 <ceil+0xe0>
 800432e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004332:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	ddeb      	ble.n	8004314 <ceil+0x3c>
 800433c:	2900      	cmp	r1, #0
 800433e:	bfc2      	ittt	gt
 8004340:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8004344:	fa40 f303 	asrgt.w	r3, r0, r3
 8004348:	18c9      	addgt	r1, r1, r3
 800434a:	ea21 0102 	bic.w	r1, r1, r2
 800434e:	2000      	movs	r0, #0
 8004350:	e7e0      	b.n	8004314 <ceil+0x3c>
 8004352:	2b33      	cmp	r3, #51	; 0x33
 8004354:	dd05      	ble.n	8004362 <ceil+0x8a>
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435a:	d101      	bne.n	8004360 <ceil+0x88>
 800435c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004360:	bd30      	pop	{r4, r5, pc}
 8004362:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8004366:	f04f 32ff 	mov.w	r2, #4294967295
 800436a:	40e2      	lsrs	r2, r4
 800436c:	4202      	tst	r2, r0
 800436e:	d0f7      	beq.n	8004360 <ceil+0x88>
 8004370:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80043b8 <ceil+0xe0>
 8004374:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004378:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004380:	ddc8      	ble.n	8004314 <ceil+0x3c>
 8004382:	2900      	cmp	r1, #0
 8004384:	dd02      	ble.n	800438c <ceil+0xb4>
 8004386:	2b14      	cmp	r3, #20
 8004388:	d103      	bne.n	8004392 <ceil+0xba>
 800438a:	3101      	adds	r1, #1
 800438c:	ea20 0002 	bic.w	r0, r0, r2
 8004390:	e7c0      	b.n	8004314 <ceil+0x3c>
 8004392:	2401      	movs	r4, #1
 8004394:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004398:	fa04 f303 	lsl.w	r3, r4, r3
 800439c:	4418      	add	r0, r3
 800439e:	42a8      	cmp	r0, r5
 80043a0:	bf38      	it	cc
 80043a2:	1909      	addcc	r1, r1, r4
 80043a4:	e7f2      	b.n	800438c <ceil+0xb4>
 80043a6:	2000      	movs	r0, #0
 80043a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80043ac:	e7b2      	b.n	8004314 <ceil+0x3c>
 80043ae:	4608      	mov	r0, r1
 80043b0:	e7b0      	b.n	8004314 <ceil+0x3c>
 80043b2:	bf00      	nop
 80043b4:	f3af 8000 	nop.w
 80043b8:	8800759c 	.word	0x8800759c
 80043bc:	7e37e43c 	.word	0x7e37e43c
 80043c0:	3ff00000 	.word	0x3ff00000
 80043c4:	000fffff 	.word	0x000fffff

080043c8 <_init>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr

080043d4 <_fini>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr
