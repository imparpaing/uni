
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a94  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000074  08004dec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004dec  00020134  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba3  00000000  00000000  0002b944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002779d  00000000  00000000  0002e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad26  00000000  00000000  00055c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f27fe  00000000  00000000  00060983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002858  00000000  00000000  001531d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08004c7c 	.word	0x08004c7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08004c7c 	.word	0x08004c7c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d013      	beq.n	80006f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00b      	beq.n	80006f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e0:	e000      	b.n	80006e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f9      	beq.n	80006e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <_write>:
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
	int i=0;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	da08      	bge.n	8000734 <_write+0x2e>
	{
		ITM_SendChar((*ptr++));
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	60ba      	str	r2, [r7, #8]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffc4 	bl	80006b8 <ITM_SendChar>
		return len;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	e7ff      	b.n	8000734 <_write+0x2e>
	}
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <uart2_write>:

void uart2_write(unsigned char x)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]

USART3->TDR =(x);
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <uart2_write+0x2c>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	6293      	str	r3, [r2, #40]	; 0x28
while(!((USART3->ISR)&USART_ISR_TC)){;}
 800074c:	bf00      	nop
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <uart2_write+0x2c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0f9      	beq.n	800074e <uart2_write+0x12>
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40004800 	.word	0x40004800

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Configure GPIOD PD8 as TX pin
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIODEN;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <main+0x8c>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <main+0x8c>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER|=GPIO_MODER_MODER8_1;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <main+0x90>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <main+0x90>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	6013      	str	r3, [r2, #0]
	#define AF07 0x07
	GPIOD->AFR[1]|=(AF07<<0);
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <main+0x90>)
 800078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <main+0x90>)
 800078e:	f043 0307 	orr.w	r3, r3, #7
 8000792:	6253      	str	r3, [r2, #36]	; 0x24

	//Configure the UART

	RCC->APB1ENR|=RCC_APB1ENR_USART3EN;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <main+0x8c>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <main+0x8c>)
 800079a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
	USART3->BRR    = 0x008B; // baud rate 115200 @16MHz
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <main+0x94>)
 80007a2:	228b      	movs	r2, #139	; 0x8b
 80007a4:	60da      	str	r2, [r3, #12]
	USART3->CR1    = 0; // Enable Tx and Rx and Enable USART2
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <main+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
	USART3->CR1|=USART_CR1_TE; //enbale TX
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <main+0x94>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a13      	ldr	r2, [pc, #76]	; (8000800 <main+0x94>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6013      	str	r3, [r2, #0]
	USART3->CR1|=USART_CR1_UE;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <main+0x94>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <main+0x94>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007c4:	f000 f958 	bl	8000a78 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80007c8:	f7ff ff0c 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80007cc:	f7ff ff30 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 fb07 	bl	8000de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f81a 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f000 f8a4 	bl	8000924 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007dc:	f000 f872 	bl	80008c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  character = 'e';
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <main+0x98>)
 80007e2:	2265      	movs	r2, #101	; 0x65
 80007e4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, character, 1);
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <main+0x98>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <main+0x9c>)
 80007f0:	f002 f844 	bl	800287c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <main+0x88>
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	40004800 	.word	0x40004800
 8000804:	20000000 	.word	0x20000000
 8000808:	20000090 	.word	0x20000090

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2234      	movs	r2, #52	; 0x34
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fa98 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <SystemClock_Config+0xb0>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <SystemClock_Config+0xb0>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <SystemClock_Config+0xb0>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <SystemClock_Config+0xb4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <SystemClock_Config+0xb4>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <SystemClock_Config+0xb4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	2310      	movs	r3, #16
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fef5 	bl	8001668 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000884:	f000 f924 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f98e 	bl	8001bc4 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ae:	f000 f90f 	bl	8000ad0 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_USART3_UART_Init+0x5c>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART3_UART_Init+0x58>)
 8000908:	f001 ff6a 	bl	80027e0 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f8dd 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000090 	.word	0x20000090
 8000920:	40004800 	.word	0x40004800

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_GPIO_Init+0x8c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x8c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_GPIO_Init+0x8c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_GPIO_Init+0x8c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_GPIO_Init+0x8c>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x8c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x8c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <MX_GPIO_Init+0x8c>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_GPIO_Init+0x8c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0x90>)
 8000988:	f000 fe54 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0x90>)
 80009a4:	f000 fc9a 	bl	80012dc <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400

080009b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <HAL_UART_RxCpltCallback+0x9c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d13f      	bne.n	8000a4a <HAL_UART_RxCpltCallback+0x92>
	{
		if(character == 'e')
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <HAL_UART_RxCpltCallback+0xa0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b65      	cmp	r3, #101	; 0x65
 80009d0:	d10c      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x34>
		{
			// Enable pin on 'e' as input
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4821      	ldr	r0, [pc, #132]	; (8000a5c <HAL_UART_RxCpltCallback+0xa4>)
 80009d8:	f000 fe2c 	bl	8001634 <HAL_GPIO_WritePin>
//			printf(char_tab, "DIODE ON");
			char_tab[20] = "DIODE ON\r\n";
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_UART_RxCpltCallback+0xa8>)
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <HAL_UART_RxCpltCallback+0xac>)
 80009e2:	751a      	strb	r2, [r3, #20]
			char_tab_len = 12;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_UART_RxCpltCallback+0xb0>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	801a      	strh	r2, [r3, #0]
 80009ea:	e017      	b.n	8000a1c <HAL_UART_RxCpltCallback+0x64>
		}
		else if(character == 'd')
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <HAL_UART_RxCpltCallback+0xa0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b64      	cmp	r3, #100	; 0x64
 80009f2:	d10c      	bne.n	8000a0e <HAL_UART_RxCpltCallback+0x56>
		{
			// Disable pin on 'd' as input
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	4818      	ldr	r0, [pc, #96]	; (8000a5c <HAL_UART_RxCpltCallback+0xa4>)
 80009fa:	f000 fe1b 	bl	8001634 <HAL_GPIO_WritePin>
			printf(char_tab, "DIODE OFF");
 80009fe:	491b      	ldr	r1, [pc, #108]	; (8000a6c <HAL_UART_RxCpltCallback+0xb4>)
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <HAL_UART_RxCpltCallback+0xac>)
 8000a02:	f003 f9ad 	bl	8003d60 <iprintf>
			char_tab_len = 9;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_RxCpltCallback+0xb0>)
 8000a08:	2209      	movs	r2, #9
 8000a0a:	801a      	strh	r2, [r3, #0]
 8000a0c:	e006      	b.n	8000a1c <HAL_UART_RxCpltCallback+0x64>
		}
		else
		{
			printf(char_tab, "WRNG INPUT");
 8000a0e:	4918      	ldr	r1, [pc, #96]	; (8000a70 <HAL_UART_RxCpltCallback+0xb8>)
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <HAL_UART_RxCpltCallback+0xac>)
 8000a12:	f003 f9a5 	bl	8003d60 <iprintf>
			char_tab_len = 10;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_UART_RxCpltCallback+0xb0>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	801a      	strh	r2, [r3, #0]
		}

		for(volatile int i=0; i<=char_tab_len; i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e008      	b.n	8000a34 <HAL_UART_RxCpltCallback+0x7c>
		{
			uart2_write(char_tab[i]);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_UART_RxCpltCallback+0xac>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fe87 	bl	800073c <uart2_write>
		for(volatile int i=0; i<=char_tab_len; i++)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_UART_RxCpltCallback+0xb0>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	daf0      	bge.n	8000a22 <HAL_UART_RxCpltCallback+0x6a>
		}
//		HAL_UART_Transmit_IT(&huart3, char_tab, char_tab_len);
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4905      	ldr	r1, [pc, #20]	; (8000a58 <HAL_UART_RxCpltCallback+0xa0>)
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <HAL_UART_RxCpltCallback+0xbc>)
 8000a46:	f001 ff19 	bl	800287c <HAL_UART_Receive_IT>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40004800 	.word	0x40004800
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	08004c94 	.word	0x08004c94
 8000a64:	20000118 	.word	0x20000118
 8000a68:	2000011a 	.word	0x2000011a
 8000a6c:	08004ca0 	.word	0x08004ca0
 8000a70:	08004cac 	.word	0x08004cac
 8000a74:	20000090 	.word	0x20000090

08000a78 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a8a:	f000 fb19 	bl	80010c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a9a:	231f      	movs	r3, #31
 8000a9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a9e:	2387      	movs	r3, #135	; 0x87
 8000aa0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fb37 	bl	8001130 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f000 fb14 	bl	80010f0 <HAL_MPU_Enable>

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0ae      	sub	sp, #184	; 0xb8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2290      	movs	r2, #144	; 0x90
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 f903 	bl	8003d50 <memset>
  if(huart->Instance==USART3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <HAL_UART_MspInit+0xc4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d144      	bne.n	8000bde <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fa14 	bl	8001f90 <HAL_RCCEx_PeriphCLKConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b6e:	f7ff ffaf 	bl	8000ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_UART_MspInit+0xc8>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_UART_MspInit+0xc8>)
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_UART_MspInit+0xc8>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0xc8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_UART_MspInit+0xc8>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0xc8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_UART_MspInit+0xcc>)
 8000bca:	f000 fb87 	bl	80012dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2027      	movs	r0, #39	; 0x27
 8000bd4:	f000 fa3d 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bd8:	2027      	movs	r0, #39	; 0x27
 8000bda:	f000 fa56 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	37b8      	adds	r7, #184	; 0xb8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004800 	.word	0x40004800
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f90c 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USART3_IRQHandler+0x10>)
 8000c4e:	f001 fe59 	bl	8002904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000090 	.word	0x20000090

08000c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6e:	f3af 8000 	nop.w
 8000c72:	4601      	mov	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
  }

  return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_isatty>:

int _isatty(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f002 ffe4 	bl	8003cfc <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20080000 	.word	0x20080000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	2000011c 	.word	0x2000011c
 8000d68:	20000138 	.word	0x20000138

08000d6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d96:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dac:	4c0b      	ldr	r4, [pc, #44]	; (8000ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dba:	f7ff ffd7 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f002 ffa3 	bl	8003d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fcd3 	bl	800076c <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dd4:	08004d78 	.word	0x08004d78
  ldr r2, =_sbss
 8000dd8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ddc:	20000134 	.word	0x20000134

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>

08000de2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f000 f928 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dec:	200f      	movs	r0, #15
 8000dee:	f000 f805 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df2:	f7ff fe73 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f943 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f90b 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000004 	.word	0x20000004
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000008 	.word	0x20000008

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000120 	.word	0x20000120

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000120 	.word	0x20000120

08000e9c <__NVIC_SetPriorityGrouping>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <__NVIC_SetPriorityGrouping+0x40>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x40>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00
 8000ee0:	05fa0000 	.word	0x05fa0000

08000ee4 <__NVIC_GetPriorityGrouping>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010c4:	f3bf 8f5f 	dmb	sy
}
 80010c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_MPU_Disable+0x28>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_MPU_Disable+0x28>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_MPU_Disable+0x2c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	e000ed90 	.word	0xe000ed90

080010f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_MPU_Enable+0x38>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_MPU_Enable+0x3c>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_MPU_Enable+0x3c>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800110e:	f3bf 8f4f 	dsb	sy
}
 8001112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001114:	f3bf 8f6f 	isb	sy
}
 8001118:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed90 	.word	0xe000ed90
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	785a      	ldrb	r2, [r3, #1]
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800113e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d029      	beq.n	800119c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
 8001154:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7adb      	ldrb	r3, [r3, #11]
 800115a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800115c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7a9b      	ldrb	r3, [r3, #10]
 8001162:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001164:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7b5b      	ldrb	r3, [r3, #13]
 800116a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800116c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
 8001172:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001174:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7bdb      	ldrb	r3, [r3, #15]
 800117a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800117c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7a5b      	ldrb	r3, [r3, #9]
 8001182:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001184:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800118c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001196:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001198:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800119a:	e005      	b.n	80011a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed90 	.word	0xe000ed90

080011b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011c6:	f7ff fe5d 	bl	8000e84 <HAL_GetTick>
 80011ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d008      	beq.n	80011ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e052      	b.n	8001290 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0216 	bic.w	r2, r2, #22
 80011f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001208:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <HAL_DMA_Abort+0x62>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0208 	bic.w	r2, r2, #8
 8001228:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123a:	e013      	b.n	8001264 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800123c:	f7ff fe22 	bl	8000e84 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b05      	cmp	r3, #5
 8001248:	d90c      	bls.n	8001264 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2220      	movs	r2, #32
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2203      	movs	r2, #3
 8001254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e015      	b.n	8001290 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e4      	bne.n	800123c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001276:	223f      	movs	r2, #63	; 0x3f
 8001278:	409a      	lsls	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d004      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00c      	b.n	80012d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2205      	movs	r2, #5
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e175      	b.n	80015e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	f040 8164 	bne.w	80015e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <HAL_GPIO_Init+0x56>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d130      	bne.n	8001394 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b03      	cmp	r3, #3
 800139e:	d017      	beq.n	80013d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d123      	bne.n	8001424 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3208      	adds	r2, #8
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80be 	beq.w	80015e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <HAL_GPIO_Init+0x324>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a65      	ldr	r2, [pc, #404]	; (8001600 <HAL_GPIO_Init+0x324>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b63      	ldr	r3, [pc, #396]	; (8001600 <HAL_GPIO_Init+0x324>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800147e:	4a61      	ldr	r2, [pc, #388]	; (8001604 <HAL_GPIO_Init+0x328>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a58      	ldr	r2, [pc, #352]	; (8001608 <HAL_GPIO_Init+0x32c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d037      	beq.n	800151a <HAL_GPIO_Init+0x23e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a57      	ldr	r2, [pc, #348]	; (800160c <HAL_GPIO_Init+0x330>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d031      	beq.n	8001516 <HAL_GPIO_Init+0x23a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a56      	ldr	r2, [pc, #344]	; (8001610 <HAL_GPIO_Init+0x334>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d02b      	beq.n	8001512 <HAL_GPIO_Init+0x236>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a55      	ldr	r2, [pc, #340]	; (8001614 <HAL_GPIO_Init+0x338>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d025      	beq.n	800150e <HAL_GPIO_Init+0x232>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a54      	ldr	r2, [pc, #336]	; (8001618 <HAL_GPIO_Init+0x33c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01f      	beq.n	800150a <HAL_GPIO_Init+0x22e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a53      	ldr	r2, [pc, #332]	; (800161c <HAL_GPIO_Init+0x340>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x22a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_GPIO_Init+0x344>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x226>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a51      	ldr	r2, [pc, #324]	; (8001624 <HAL_GPIO_Init+0x348>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x222>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a50      	ldr	r2, [pc, #320]	; (8001628 <HAL_GPIO_Init+0x34c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x21e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4f      	ldr	r2, [pc, #316]	; (800162c <HAL_GPIO_Init+0x350>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x21a>
 80014f2:	2309      	movs	r3, #9
 80014f4:	e012      	b.n	800151c <HAL_GPIO_Init+0x240>
 80014f6:	230a      	movs	r3, #10
 80014f8:	e010      	b.n	800151c <HAL_GPIO_Init+0x240>
 80014fa:	2308      	movs	r3, #8
 80014fc:	e00e      	b.n	800151c <HAL_GPIO_Init+0x240>
 80014fe:	2307      	movs	r3, #7
 8001500:	e00c      	b.n	800151c <HAL_GPIO_Init+0x240>
 8001502:	2306      	movs	r3, #6
 8001504:	e00a      	b.n	800151c <HAL_GPIO_Init+0x240>
 8001506:	2305      	movs	r3, #5
 8001508:	e008      	b.n	800151c <HAL_GPIO_Init+0x240>
 800150a:	2304      	movs	r3, #4
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x240>
 800150e:	2303      	movs	r3, #3
 8001510:	e004      	b.n	800151c <HAL_GPIO_Init+0x240>
 8001512:	2302      	movs	r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x240>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x240>
 800151a:	2300      	movs	r3, #0
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f002 0203 	and.w	r2, r2, #3
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	4093      	lsls	r3, r2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800152c:	4935      	ldr	r1, [pc, #212]	; (8001604 <HAL_GPIO_Init+0x328>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_GPIO_Init+0x354>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155e:	4a34      	ldr	r2, [pc, #208]	; (8001630 <HAL_GPIO_Init+0x354>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_GPIO_Init+0x354>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001588:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_GPIO_Init+0x354>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x354>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_GPIO_Init+0x354>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_GPIO_Init+0x354>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_GPIO_Init+0x354>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	f67f ae86 	bls.w	80012fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40021c00 	.word	0x40021c00
 8001628:	40022000 	.word	0x40022000
 800162c:	40022400 	.word	0x40022400
 8001630:	40013c00 	.word	0x40013c00

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e29b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8087 	beq.w	800179a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800168c:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b04      	cmp	r3, #4
 8001696:	d00c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001698:	4b93      	ldr	r3, [pc, #588]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d112      	bne.n	80016ca <HAL_RCC_OscConfig+0x62>
 80016a4:	4b90      	ldr	r3, [pc, #576]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b0:	d10b      	bne.n	80016ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d06c      	beq.n	8001798 <HAL_RCC_OscConfig+0x130>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d168      	bne.n	8001798 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e275      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x7a>
 80016d4:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a83      	ldr	r2, [pc, #524]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e02e      	b.n	8001740 <HAL_RCC_OscConfig+0xd8>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x9c>
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a7e      	ldr	r2, [pc, #504]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b7c      	ldr	r3, [pc, #496]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7b      	ldr	r2, [pc, #492]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e01d      	b.n	8001740 <HAL_RCC_OscConfig+0xd8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0xc0>
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a75      	ldr	r2, [pc, #468]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a72      	ldr	r2, [pc, #456]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0xd8>
 8001728:	4b6f      	ldr	r3, [pc, #444]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a6e      	ldr	r2, [pc, #440]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6b      	ldr	r2, [pc, #428]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fb9c 	bl	8000e84 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fb98 	bl	8000e84 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e229      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0xe8>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fb88 	bl	8000e84 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fb84 	bl	8000e84 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e215      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x110>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d069      	beq.n	800187a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a6:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d11c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x190>
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x17a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1e9      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	493d      	ldr	r1, [pc, #244]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	e040      	b.n	800187a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d023      	beq.n	8001848 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fb3a 	bl	8000e84 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fb36 	bl	8000e84 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1c7      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4929      	ldr	r1, [pc, #164]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
 8001846:	e018      	b.n	800187a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fb16 	bl	8000e84 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185c:	f7ff fb12 	bl	8000e84 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e1a3      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d038      	beq.n	80018f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d019      	beq.n	80018c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff faf3 	bl	8000e84 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff faef 	bl	8000e84 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e180      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x23a>
 80018c0:	e01a      	b.n	80018f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80018c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_RCC_OscConfig+0x280>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff fad9 	bl	8000e84 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff fad5 	bl	8000e84 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d903      	bls.n	80018ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e166      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
 80018e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ee      	bne.n	80018d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a4 	beq.w	8001a4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001906:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10d      	bne.n	800192e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a88      	ldr	r2, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b86      	ldr	r3, [pc, #536]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192e:	4b83      	ldr	r3, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x4d4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800193a:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x4d4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7f      	ldr	r2, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x4d4>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff fa9d 	bl	8000e84 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff fa99 	bl	8000e84 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e12a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001960:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x4d4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x31a>
 8001974:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a6f      	ldr	r2, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	e02d      	b.n	80019de <HAL_RCC_OscConfig+0x376>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x33c>
 800198a:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a6a      	ldr	r2, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	e01c      	b.n	80019de <HAL_RCC_OscConfig+0x376>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x35e>
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a61      	ldr	r2, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a5e      	ldr	r2, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0x376>
 80019c6:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4a5b      	ldr	r2, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70
 80019d2:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d015      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa4d 	bl	8000e84 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fa49 	bl	8000e84 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0d8      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ee      	beq.n	80019ee <HAL_RCC_OscConfig+0x386>
 8001a10:	e014      	b.n	8001a3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff fa37 	bl	8000e84 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff fa33 	bl	8000e84 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0c2      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ee      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d105      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80ae 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a58:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d06d      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d14b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fa04 	bl	8000e84 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff fa00 	bl	8000e84 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e091      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	019b      	lsls	r3, r3, #6
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	071b      	lsls	r3, r3, #28
 8001aca:	491b      	ldr	r1, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f9d2 	bl	8000e84 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f9ce 	bl	8000e84 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e05f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x47c>
 8001b02:	e057      	b.n	8001bb4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff f9b8 	bl	8000e84 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f9b4 	bl	8000e84 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e045      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4b0>
 8001b36:	e03d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x54c>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_RCC_OscConfig+0x558>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d030      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d129      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d122      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d119      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0d0      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d910      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 020f 	bic.w	r2, r3, #15
 8001bf2:	4965      	ldr	r1, [pc, #404]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b8      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	494d      	ldr	r1, [pc, #308]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d040      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e07f      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e073      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e06b      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4936      	ldr	r1, [pc, #216]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f8e4 	bl	8000e84 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f8e0 	bl	8000e84 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e053      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d210      	bcs.n	8001d18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 020f 	bic.w	r2, r3, #15
 8001cfe:	4922      	ldr	r1, [pc, #136]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e032      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4916      	ldr	r1, [pc, #88]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d56:	f000 f821 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	490a      	ldr	r1, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x1cc>)
 8001d68:	5ccb      	ldrb	r3, [r1, r3]
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1d0>)
 8001d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1d4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f840 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	08004cb8 	.word	0x08004cb8
 8001d94:	20000004 	.word	0x20000004
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da0:	b090      	sub	sp, #64	; 0x40
 8001da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
 8001da8:	2300      	movs	r3, #0
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d00d      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x40>
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	f200 80a1 	bhi.w	8001f08 <HAL_RCC_GetSysClockFreq+0x16c>
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dce:	e09b      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd4:	e09b      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dd6:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dda:	e098      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ddc:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001de6:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d028      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df2:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	099b      	lsrs	r3, r3, #6
 8001df8:	2200      	movs	r2, #0
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e04:	2100      	movs	r1, #0
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e08:	fb03 f201 	mul.w	r2, r3, r1
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	fb00 f303 	mul.w	r3, r0, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	4a43      	ldr	r2, [pc, #268]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e16:	fba0 1202 	umull	r1, r2, r0, r2
 8001e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e22:	4413      	add	r3, r2
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e28:	2200      	movs	r2, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	61fa      	str	r2, [r7, #28]
 8001e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e36:	f7fe fa53 	bl	80002e0 <__aeabi_uldivmod>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4613      	mov	r3, r2
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e42:	e053      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	617a      	str	r2, [r7, #20]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e56:	f04f 0b00 	mov.w	fp, #0
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	465b      	mov	r3, fp
 8001e5e:	f04f 0000 	mov.w	r0, #0
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	0159      	lsls	r1, r3, #5
 8001e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6c:	0150      	lsls	r0, r2, #5
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	ebb2 080a 	subs.w	r8, r2, sl
 8001e76:	eb63 090b 	sbc.w	r9, r3, fp
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e8e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e92:	eb63 0509 	sbc.w	r5, r3, r9
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	00eb      	lsls	r3, r5, #3
 8001ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ea4:	00e2      	lsls	r2, r4, #3
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	eb14 030a 	adds.w	r3, r4, sl
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	eb45 030b 	adc.w	r3, r5, fp
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	028b      	lsls	r3, r1, #10
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ecc:	4621      	mov	r1, r4
 8001ece:	028a      	lsls	r2, r1, #10
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	60fa      	str	r2, [r7, #12]
 8001edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee0:	f7fe f9fe 	bl	80002e0 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0c1b      	lsrs	r3, r3, #16
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f06:	e002      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3740      	adds	r7, #64	; 0x40
 8001f14:	46bd      	mov	sp, r7
 8001f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	017d7840 	.word	0x017d7840

08001f28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08004cc8 	.word	0x08004cc8

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f6c:	f7ff ffdc 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0b5b      	lsrs	r3, r3, #13
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08004cc8 	.word	0x08004cc8

08001f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fb8:	4b69      	ldr	r3, [pc, #420]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a68      	ldr	r2, [pc, #416]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fc2:	6093      	str	r3, [r2, #8]
 8001fc4:	4b66      	ldr	r3, [pc, #408]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fcc:	4964      	ldr	r1, [pc, #400]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d017      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	4959      	ldr	r1, [pc, #356]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002008:	d101      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d017      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	494a      	ldr	r1, [pc, #296]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002044:	d101      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002046:	2301      	movs	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 808b 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	4a39      	ldr	r2, [pc, #228]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207e:	6413      	str	r3, [r2, #64]	; 0x40
 8002080:	4b37      	ldr	r3, [pc, #220]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800208c:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a34      	ldr	r2, [pc, #208]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7fe fef4 	bl	8000e84 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7fe fef0 	bl	8000e84 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e38f      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d035      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d02e      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d114      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe feb8 	bl	8000e84 <HAL_GetTick>
 8002114:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe feb4 	bl	8000e84 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e351      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0ee      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002146:	d111      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002156:	400b      	ands	r3, r1
 8002158:	4901      	ldr	r1, [pc, #4]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
 800215e:	e00b      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000
 8002168:	0ffffcff 	.word	0x0ffffcff
 800216c:	4bac      	ldr	r3, [pc, #688]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4aab      	ldr	r2, [pc, #684]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002172:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002176:	6093      	str	r3, [r2, #8]
 8002178:	4ba9      	ldr	r3, [pc, #676]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	49a6      	ldr	r1, [pc, #664]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	4313      	orrs	r3, r2
 8002188:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002196:	4ba2      	ldr	r3, [pc, #648]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219c:	4aa0      	ldr	r2, [pc, #640]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021a6:	4b9e      	ldr	r3, [pc, #632]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	499b      	ldr	r1, [pc, #620]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c4:	4b96      	ldr	r3, [pc, #600]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d2:	4993      	ldr	r1, [pc, #588]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e6:	4b8e      	ldr	r3, [pc, #568]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f4:	498a      	ldr	r1, [pc, #552]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002208:	4b85      	ldr	r3, [pc, #532]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002216:	4982      	ldr	r1, [pc, #520]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800222a:	4b7d      	ldr	r3, [pc, #500]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	4979      	ldr	r1, [pc, #484]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224c:	4b74      	ldr	r3, [pc, #464]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4971      	ldr	r1, [pc, #452]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800226e:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f023 020c 	bic.w	r2, r3, #12
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227c:	4968      	ldr	r1, [pc, #416]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	4960      	ldr	r1, [pc, #384]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c0:	4957      	ldr	r1, [pc, #348]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d4:	4b52      	ldr	r3, [pc, #328]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	494f      	ldr	r1, [pc, #316]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	4946      	ldr	r1, [pc, #280]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	493e      	ldr	r1, [pc, #248]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002348:	4935      	ldr	r1, [pc, #212]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236a:	492d      	ldr	r1, [pc, #180]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d011      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800238c:	4924      	ldr	r1, [pc, #144]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800239c:	d101      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	4914      	ldr	r1, [pc, #80]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f0:	490b      	ldr	r1, [pc, #44]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00f      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002414:	4902      	ldr	r1, [pc, #8]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800241c:	e002      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002430:	4b8a      	ldr	r3, [pc, #552]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002436:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	4986      	ldr	r1, [pc, #536]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800245a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002464:	497d      	ldr	r1, [pc, #500]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d006      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80d6 	beq.w	800262c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002480:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800248a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe fcfa 	bl	8000e84 <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002494:	f7fe fcf6 	bl	8000e84 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e195      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d021      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11d      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024c6:	4b65      	ldr	r3, [pc, #404]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024da:	0e1b      	lsrs	r3, r3, #24
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	019a      	lsls	r2, r3, #6
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	061b      	lsls	r3, r3, #24
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	071b      	lsls	r3, r3, #28
 80024fa:	4958      	ldr	r1, [pc, #352]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002520:	2b00      	cmp	r3, #0
 8002522:	d02e      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252c:	d129      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002542:	0f1b      	lsrs	r3, r3, #28
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	019a      	lsls	r2, r3, #6
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	071b      	lsls	r3, r3, #28
 8002562:	493e      	ldr	r1, [pc, #248]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002570:	f023 021f 	bic.w	r2, r3, #31
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	3b01      	subs	r3, #1
 800257a:	4938      	ldr	r1, [pc, #224]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01d      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800258e:	4b33      	ldr	r3, [pc, #204]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002594:	0e1b      	lsrs	r3, r3, #24
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a2:	0f1b      	lsrs	r3, r3, #28
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	019a      	lsls	r2, r3, #6
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	431a      	orrs	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	4926      	ldr	r1, [pc, #152]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d011      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	019a      	lsls	r2, r3, #6
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	071b      	lsls	r3, r3, #28
 80025f2:	491a      	ldr	r1, [pc, #104]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002606:	f7fe fc3d 	bl	8000e84 <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800260e:	f7fe fc39 	bl	8000e84 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0d8      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b01      	cmp	r3, #1
 8002630:	f040 80ce 	bne.w	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002640:	f7fe fc20 	bl	8000e84 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002646:	e00b      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002648:	f7fe fc1c 	bl	8000e84 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d904      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0bb      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002660:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800266c:	d0ec      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800268a:	2b00      	cmp	r3, #0
 800268c:	d02e      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d12a      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026a4:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	0f1b      	lsrs	r3, r3, #28
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	019a      	lsls	r2, r3, #6
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	071b      	lsls	r3, r3, #28
 80026ca:	4944      	ldr	r1, [pc, #272]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026d2:	4b42      	ldr	r3, [pc, #264]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	493d      	ldr	r1, [pc, #244]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d022      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002700:	d11d      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	0e1b      	lsrs	r3, r3, #24
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	0f1b      	lsrs	r3, r3, #28
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	019a      	lsls	r2, r3, #6
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	061b      	lsls	r3, r3, #24
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	071b      	lsls	r3, r3, #28
 8002736:	4929      	ldr	r1, [pc, #164]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d028      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	0e1b      	lsrs	r3, r3, #24
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	0c1b      	lsrs	r3, r3, #16
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	019a      	lsls	r2, r3, #6
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	071b      	lsls	r3, r3, #28
 800277e:	4917      	ldr	r1, [pc, #92]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800278c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	4911      	ldr	r1, [pc, #68]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a8:	f7fe fb6c 	bl	8000e84 <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027b0:	f7fe fb68 	bl	8000e84 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e007      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ce:	d1ef      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e040      	b.n	8002874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f98e 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb82 	bl	8002f28 <UART_SetConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e022      	b.n	8002874 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fdda 	bl	80033f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800284a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800285a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fe61 	bl	8003534 <UART_CheckIdleState>
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002890:	2b20      	cmp	r3, #32
 8002892:	d132      	bne.n	80028fa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_UART_Receive_IT+0x24>
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e02b      	b.n	80028fc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d018      	beq.n	80028ea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	e853 3f00 	ldrex	r3, [r3]
 80028c4:	613b      	str	r3, [r7, #16]
   return(result);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	69f9      	ldr	r1, [r7, #28]
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e6      	bne.n	80028b8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	461a      	mov	r2, r3
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 ff33 	bl	800375c <UART_Start_Receive_IT>
 80028f6:	4603      	mov	r3, r0
 80028f8:	e000      	b.n	80028fc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
  }
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b0ba      	sub	sp, #232	; 0xe8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800292a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800292e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002932:	4013      	ands	r3, r2
 8002934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d115      	bne.n	800296c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00f      	beq.n	800296c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800294c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 82ac 	beq.w	8002eba <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
      }
      return;
 800296a:	e2a6      	b.n	8002eba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800296c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8117 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002982:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002986:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <HAL_UART_IRQHandler+0x298>)
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 810a 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d011      	beq.n	80029c0 <HAL_UART_IRQHandler+0xbc>
 800299c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d011      	beq.n	80029f0 <HAL_UART_IRQHandler+0xec>
 80029cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2202      	movs	r2, #2
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	f043 0204 	orr.w	r2, r3, #4
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d011      	beq.n	8002a20 <HAL_UART_IRQHandler+0x11c>
 80029fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a16:	f043 0202 	orr.w	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a52:	f043 0208 	orr.w	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <HAL_UART_IRQHandler+0x18a>
 8002a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8212 	beq.w	8002ebe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04f      	beq.n	8002b86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fefe 	bl	80038e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d141      	bne.n	8002b7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3308      	adds	r3, #8
 8002b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3308      	adds	r3, #8
 8002b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1d9      	bne.n	8002afa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d013      	beq.n	8002b76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <HAL_UART_IRQHandler+0x29c>)
 8002b54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fb9c 	bl	8001298 <HAL_DMA_Abort_IT>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d017      	beq.n	8002b96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b70:	4610      	mov	r0, r2
 8002b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e00f      	b.n	8002b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f9b6 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	e00b      	b.n	8002b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9b2 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	e007      	b.n	8002b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9ae 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002b94:	e193      	b.n	8002ebe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b96:	bf00      	nop
    return;
 8002b98:	e191      	b.n	8002ebe <HAL_UART_IRQHandler+0x5ba>
 8002b9a:	bf00      	nop
 8002b9c:	04000120 	.word	0x04000120
 8002ba0:	080039b1 	.word	0x080039b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 814c 	bne.w	8002e46 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8145 	beq.w	8002e46 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 813e 	beq.w	8002e46 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2210      	movs	r2, #16
 8002bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	f040 80b6 	bne.w	8002d4e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8165 	beq.w	8002ec2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c02:	429a      	cmp	r2, r3
 8002c04:	f080 815d 	bcs.w	8002ec2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1c:	f000 8086 	beq.w	8002d2c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1da      	bne.n	8002c20 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e1      	bne.n	8002c6a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3308      	adds	r3, #8
 8002cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e3      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfc:	f023 0310 	bic.w	r3, r3, #16
 8002d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e4      	bne.n	8002cec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fa46 	bl	80011b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8d8 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d4c:	e0b9      	b.n	8002ec2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80ab 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a6 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e4      	bne.n	8002d7a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3308      	adds	r3, #8
 8002dd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dd4:	633a      	str	r2, [r7, #48]	; 0x30
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e3      	bne.n	8002db0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f023 0310 	bic.w	r3, r3, #16
 8002e10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	69b9      	ldr	r1, [r7, #24]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e4      	bne.n	8002dfc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f85c 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e44:	e03f      	b.n	8002ec6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <HAL_UART_IRQHandler+0x56c>
 8002e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f853 	bl	8002f14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e6e:	e02d      	b.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00e      	beq.n	8002e9a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01c      	beq.n	8002eca <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
    }
    return;
 8002e98:	e017      	b.n	8002eca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d012      	beq.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
 8002ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fd92 	bl	80039dc <UART_EndTransmit_IT>
    return;
 8002eb8:	e008      	b.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
      return;
 8002eba:	bf00      	nop
 8002ebc:	e006      	b.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
    return;
 8002ebe:	bf00      	nop
 8002ec0:	e004      	b.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_UART_IRQHandler+0x5c8>
    return;
 8002eca:	bf00      	nop
  }

}
 8002ecc:	37e8      	adds	r7, #232	; 0xe8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4ba6      	ldr	r3, [pc, #664]	; (80031ec <UART_SetConfig+0x2c4>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	6979      	ldr	r1, [r7, #20]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a94      	ldr	r2, [pc, #592]	; (80031f0 <UART_SetConfig+0x2c8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d120      	bne.n	8002fe6 <UART_SetConfig+0xbe>
 8002fa4:	4b93      	ldr	r3, [pc, #588]	; (80031f4 <UART_SetConfig+0x2cc>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d816      	bhi.n	8002fe0 <UART_SetConfig+0xb8>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <UART_SetConfig+0x90>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fd5 	.word	0x08002fd5
 8002fc0:	08002fcf 	.word	0x08002fcf
 8002fc4:	08002fdb 	.word	0x08002fdb
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e150      	b.n	8003270 <UART_SetConfig+0x348>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	e14d      	b.n	8003270 <UART_SetConfig+0x348>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e14a      	b.n	8003270 <UART_SetConfig+0x348>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e147      	b.n	8003270 <UART_SetConfig+0x348>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e144      	b.n	8003270 <UART_SetConfig+0x348>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a83      	ldr	r2, [pc, #524]	; (80031f8 <UART_SetConfig+0x2d0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d132      	bne.n	8003056 <UART_SetConfig+0x12e>
 8002ff0:	4b80      	ldr	r3, [pc, #512]	; (80031f4 <UART_SetConfig+0x2cc>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d828      	bhi.n	8003050 <UART_SetConfig+0x128>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <UART_SetConfig+0xdc>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003039 	.word	0x08003039
 8003008:	08003051 	.word	0x08003051
 800300c:	08003051 	.word	0x08003051
 8003010:	08003051 	.word	0x08003051
 8003014:	08003045 	.word	0x08003045
 8003018:	08003051 	.word	0x08003051
 800301c:	08003051 	.word	0x08003051
 8003020:	08003051 	.word	0x08003051
 8003024:	0800303f 	.word	0x0800303f
 8003028:	08003051 	.word	0x08003051
 800302c:	08003051 	.word	0x08003051
 8003030:	08003051 	.word	0x08003051
 8003034:	0800304b 	.word	0x0800304b
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e118      	b.n	8003270 <UART_SetConfig+0x348>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e115      	b.n	8003270 <UART_SetConfig+0x348>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e112      	b.n	8003270 <UART_SetConfig+0x348>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e10f      	b.n	8003270 <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e10c      	b.n	8003270 <UART_SetConfig+0x348>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a68      	ldr	r2, [pc, #416]	; (80031fc <UART_SetConfig+0x2d4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d120      	bne.n	80030a2 <UART_SetConfig+0x17a>
 8003060:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <UART_SetConfig+0x2cc>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800306a:	2b30      	cmp	r3, #48	; 0x30
 800306c:	d013      	beq.n	8003096 <UART_SetConfig+0x16e>
 800306e:	2b30      	cmp	r3, #48	; 0x30
 8003070:	d814      	bhi.n	800309c <UART_SetConfig+0x174>
 8003072:	2b20      	cmp	r3, #32
 8003074:	d009      	beq.n	800308a <UART_SetConfig+0x162>
 8003076:	2b20      	cmp	r3, #32
 8003078:	d810      	bhi.n	800309c <UART_SetConfig+0x174>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <UART_SetConfig+0x15c>
 800307e:	2b10      	cmp	r3, #16
 8003080:	d006      	beq.n	8003090 <UART_SetConfig+0x168>
 8003082:	e00b      	b.n	800309c <UART_SetConfig+0x174>
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e0f2      	b.n	8003270 <UART_SetConfig+0x348>
 800308a:	2302      	movs	r3, #2
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e0ef      	b.n	8003270 <UART_SetConfig+0x348>
 8003090:	2304      	movs	r3, #4
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e0ec      	b.n	8003270 <UART_SetConfig+0x348>
 8003096:	2308      	movs	r3, #8
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e0e9      	b.n	8003270 <UART_SetConfig+0x348>
 800309c:	2310      	movs	r3, #16
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e0e6      	b.n	8003270 <UART_SetConfig+0x348>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a56      	ldr	r2, [pc, #344]	; (8003200 <UART_SetConfig+0x2d8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d120      	bne.n	80030ee <UART_SetConfig+0x1c6>
 80030ac:	4b51      	ldr	r3, [pc, #324]	; (80031f4 <UART_SetConfig+0x2cc>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030b6:	2bc0      	cmp	r3, #192	; 0xc0
 80030b8:	d013      	beq.n	80030e2 <UART_SetConfig+0x1ba>
 80030ba:	2bc0      	cmp	r3, #192	; 0xc0
 80030bc:	d814      	bhi.n	80030e8 <UART_SetConfig+0x1c0>
 80030be:	2b80      	cmp	r3, #128	; 0x80
 80030c0:	d009      	beq.n	80030d6 <UART_SetConfig+0x1ae>
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d810      	bhi.n	80030e8 <UART_SetConfig+0x1c0>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <UART_SetConfig+0x1a8>
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d006      	beq.n	80030dc <UART_SetConfig+0x1b4>
 80030ce:	e00b      	b.n	80030e8 <UART_SetConfig+0x1c0>
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
 80030d4:	e0cc      	b.n	8003270 <UART_SetConfig+0x348>
 80030d6:	2302      	movs	r3, #2
 80030d8:	77fb      	strb	r3, [r7, #31]
 80030da:	e0c9      	b.n	8003270 <UART_SetConfig+0x348>
 80030dc:	2304      	movs	r3, #4
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e0c6      	b.n	8003270 <UART_SetConfig+0x348>
 80030e2:	2308      	movs	r3, #8
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e0c3      	b.n	8003270 <UART_SetConfig+0x348>
 80030e8:	2310      	movs	r3, #16
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e0c0      	b.n	8003270 <UART_SetConfig+0x348>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a44      	ldr	r2, [pc, #272]	; (8003204 <UART_SetConfig+0x2dc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d125      	bne.n	8003144 <UART_SetConfig+0x21c>
 80030f8:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <UART_SetConfig+0x2cc>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003106:	d017      	beq.n	8003138 <UART_SetConfig+0x210>
 8003108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800310c:	d817      	bhi.n	800313e <UART_SetConfig+0x216>
 800310e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003112:	d00b      	beq.n	800312c <UART_SetConfig+0x204>
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d811      	bhi.n	800313e <UART_SetConfig+0x216>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <UART_SetConfig+0x1fe>
 800311e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003122:	d006      	beq.n	8003132 <UART_SetConfig+0x20a>
 8003124:	e00b      	b.n	800313e <UART_SetConfig+0x216>
 8003126:	2300      	movs	r3, #0
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e0a1      	b.n	8003270 <UART_SetConfig+0x348>
 800312c:	2302      	movs	r3, #2
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e09e      	b.n	8003270 <UART_SetConfig+0x348>
 8003132:	2304      	movs	r3, #4
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e09b      	b.n	8003270 <UART_SetConfig+0x348>
 8003138:	2308      	movs	r3, #8
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e098      	b.n	8003270 <UART_SetConfig+0x348>
 800313e:	2310      	movs	r3, #16
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e095      	b.n	8003270 <UART_SetConfig+0x348>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <UART_SetConfig+0x2e0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d125      	bne.n	800319a <UART_SetConfig+0x272>
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <UART_SetConfig+0x2cc>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800315c:	d017      	beq.n	800318e <UART_SetConfig+0x266>
 800315e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003162:	d817      	bhi.n	8003194 <UART_SetConfig+0x26c>
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003168:	d00b      	beq.n	8003182 <UART_SetConfig+0x25a>
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	d811      	bhi.n	8003194 <UART_SetConfig+0x26c>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <UART_SetConfig+0x254>
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d006      	beq.n	8003188 <UART_SetConfig+0x260>
 800317a:	e00b      	b.n	8003194 <UART_SetConfig+0x26c>
 800317c:	2301      	movs	r3, #1
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e076      	b.n	8003270 <UART_SetConfig+0x348>
 8003182:	2302      	movs	r3, #2
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e073      	b.n	8003270 <UART_SetConfig+0x348>
 8003188:	2304      	movs	r3, #4
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e070      	b.n	8003270 <UART_SetConfig+0x348>
 800318e:	2308      	movs	r3, #8
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e06d      	b.n	8003270 <UART_SetConfig+0x348>
 8003194:	2310      	movs	r3, #16
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e06a      	b.n	8003270 <UART_SetConfig+0x348>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <UART_SetConfig+0x2e4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d138      	bne.n	8003216 <UART_SetConfig+0x2ee>
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <UART_SetConfig+0x2cc>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031b2:	d017      	beq.n	80031e4 <UART_SetConfig+0x2bc>
 80031b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031b8:	d82a      	bhi.n	8003210 <UART_SetConfig+0x2e8>
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d00b      	beq.n	80031d8 <UART_SetConfig+0x2b0>
 80031c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c4:	d824      	bhi.n	8003210 <UART_SetConfig+0x2e8>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <UART_SetConfig+0x2aa>
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	d006      	beq.n	80031de <UART_SetConfig+0x2b6>
 80031d0:	e01e      	b.n	8003210 <UART_SetConfig+0x2e8>
 80031d2:	2300      	movs	r3, #0
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e04b      	b.n	8003270 <UART_SetConfig+0x348>
 80031d8:	2302      	movs	r3, #2
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e048      	b.n	8003270 <UART_SetConfig+0x348>
 80031de:	2304      	movs	r3, #4
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e045      	b.n	8003270 <UART_SetConfig+0x348>
 80031e4:	2308      	movs	r3, #8
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e042      	b.n	8003270 <UART_SetConfig+0x348>
 80031ea:	bf00      	nop
 80031ec:	efff69f3 	.word	0xefff69f3
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40004400 	.word	0x40004400
 80031fc:	40004800 	.word	0x40004800
 8003200:	40004c00 	.word	0x40004c00
 8003204:	40005000 	.word	0x40005000
 8003208:	40011400 	.word	0x40011400
 800320c:	40007800 	.word	0x40007800
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e02c      	b.n	8003270 <UART_SetConfig+0x348>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <UART_SetConfig+0x4bc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d125      	bne.n	800326c <UART_SetConfig+0x344>
 8003220:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <UART_SetConfig+0x4c0>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800322a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800322e:	d017      	beq.n	8003260 <UART_SetConfig+0x338>
 8003230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003234:	d817      	bhi.n	8003266 <UART_SetConfig+0x33e>
 8003236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323a:	d00b      	beq.n	8003254 <UART_SetConfig+0x32c>
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	d811      	bhi.n	8003266 <UART_SetConfig+0x33e>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <UART_SetConfig+0x326>
 8003246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324a:	d006      	beq.n	800325a <UART_SetConfig+0x332>
 800324c:	e00b      	b.n	8003266 <UART_SetConfig+0x33e>
 800324e:	2300      	movs	r3, #0
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e00d      	b.n	8003270 <UART_SetConfig+0x348>
 8003254:	2302      	movs	r3, #2
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e00a      	b.n	8003270 <UART_SetConfig+0x348>
 800325a:	2304      	movs	r3, #4
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e007      	b.n	8003270 <UART_SetConfig+0x348>
 8003260:	2308      	movs	r3, #8
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e004      	b.n	8003270 <UART_SetConfig+0x348>
 8003266:	2310      	movs	r3, #16
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e001      	b.n	8003270 <UART_SetConfig+0x348>
 800326c:	2310      	movs	r3, #16
 800326e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003278:	d15b      	bne.n	8003332 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800327a:	7ffb      	ldrb	r3, [r7, #31]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d828      	bhi.n	80032d2 <UART_SetConfig+0x3aa>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x360>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032bd 	.word	0x080032bd
 8003294:	080032d3 	.word	0x080032d3
 8003298:	080032c3 	.word	0x080032c3
 800329c:	080032d3 	.word	0x080032d3
 80032a0:	080032d3 	.word	0x080032d3
 80032a4:	080032d3 	.word	0x080032d3
 80032a8:	080032cb 	.word	0x080032cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7fe fe48 	bl	8001f40 <HAL_RCC_GetPCLK1Freq>
 80032b0:	61b8      	str	r0, [r7, #24]
        break;
 80032b2:	e013      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b4:	f7fe fe58 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 80032b8:	61b8      	str	r0, [r7, #24]
        break;
 80032ba:	e00f      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <UART_SetConfig+0x4c4>)
 80032be:	61bb      	str	r3, [r7, #24]
        break;
 80032c0:	e00c      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c2:	f7fe fd6b 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 80032c6:	61b8      	str	r0, [r7, #24]
        break;
 80032c8:	e008      	b.n	80032dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ce:	61bb      	str	r3, [r7, #24]
        break;
 80032d0:	e004      	b.n	80032dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	77bb      	strb	r3, [r7, #30]
        break;
 80032da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d074      	beq.n	80033cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	005a      	lsls	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d916      	bls.n	800332c <UART_SetConfig+0x404>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d212      	bcs.n	800332c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	b29a      	uxth	r2, r3
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	4313      	orrs	r3, r2
 8003320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	89fa      	ldrh	r2, [r7, #14]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e04f      	b.n	80033cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
 8003330:	e04c      	b.n	80033cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d828      	bhi.n	800338a <UART_SetConfig+0x462>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x418>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fdec 	bl	8001f40 <HAL_RCC_GetPCLK1Freq>
 8003368:	61b8      	str	r0, [r7, #24]
        break;
 800336a:	e013      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fdfc 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8003370:	61b8      	str	r0, [r7, #24]
        break;
 8003372:	e00f      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <UART_SetConfig+0x4c4>)
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e00c      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fd0f 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 800337e:	61b8      	str	r0, [r7, #24]
        break;
 8003380:	e008      	b.n	8003394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	61bb      	str	r3, [r7, #24]
        break;
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77bb      	strb	r3, [r7, #30]
        break;
 8003392:	bf00      	nop
    }

    if (pclk != 0U)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	085a      	lsrs	r2, r3, #1
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	d909      	bls.n	80033c8 <UART_SetConfig+0x4a0>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d205      	bcs.n	80033c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e001      	b.n	80033cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40007c00 	.word	0x40007c00
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400

080033f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01a      	beq.n	8003506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ee:	d10a      	bne.n	8003506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003544:	f7fd fc9e 	bl	8000e84 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b08      	cmp	r3, #8
 8003556:	d10e      	bne.n	8003576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f831 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e027      	b.n	80035c6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d10e      	bne.n	80035a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f81b 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e011      	b.n	80035c6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b09c      	sub	sp, #112	; 0x70
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e0a7      	b.n	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	f000 80a3 	beq.w	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fd fc4b 	bl	8000e84 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <UART_WaitOnFlagUntilTimeout+0x32>
 80035fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13f      	bne.n	8003680 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003614:	667b      	str	r3, [r7, #100]	; 0x64
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003620:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003624:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800362c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e6      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3308      	adds	r3, #8
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	663b      	str	r3, [r7, #96]	; 0x60
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003652:	64ba      	str	r2, [r7, #72]	; 0x48
 8003654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e068      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d050      	beq.n	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369c:	d148      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
 80036c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e6      	bne.n	80036a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3308      	adds	r3, #8
 80036e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3308      	adds	r3, #8
 80036f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036fa:	623a      	str	r2, [r7, #32]
 80036fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	69f9      	ldr	r1, [r7, #28]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	61bb      	str	r3, [r7, #24]
   return(result);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e010      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	429a      	cmp	r2, r3
 800374c:	f43f af48 	beq.w	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3770      	adds	r7, #112	; 0x70
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800375c:	b480      	push	{r7}
 800375e:	b097      	sub	sp, #92	; 0x5c
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d10e      	bne.n	80037ae <UART_Start_Receive_IT+0x52>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <UART_Start_Receive_IT+0x48>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800379e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a2:	e02d      	b.n	8003800 <UART_Start_Receive_IT+0xa4>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	22ff      	movs	r2, #255	; 0xff
 80037a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ac:	e028      	b.n	8003800 <UART_Start_Receive_IT+0xa4>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <UART_Start_Receive_IT+0x76>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <UART_Start_Receive_IT+0x6c>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	22ff      	movs	r2, #255	; 0xff
 80037c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c6:	e01b      	b.n	8003800 <UART_Start_Receive_IT+0xa4>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	227f      	movs	r2, #127	; 0x7f
 80037cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d0:	e016      	b.n	8003800 <UART_Start_Receive_IT+0xa4>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037da:	d10d      	bne.n	80037f8 <UART_Start_Receive_IT+0x9c>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <UART_Start_Receive_IT+0x92>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	227f      	movs	r2, #127	; 0x7f
 80037e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ec:	e008      	b.n	8003800 <UART_Start_Receive_IT+0xa4>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	223f      	movs	r2, #63	; 0x3f
 80037f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037f6:	e003      	b.n	8003800 <UART_Start_Receive_IT+0xa4>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2222      	movs	r2, #34	; 0x22
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	657b      	str	r3, [r7, #84]	; 0x54
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3308      	adds	r3, #8
 800382e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003830:	64ba      	str	r2, [r7, #72]	; 0x48
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800383e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d107      	bne.n	800385e <UART_Start_Receive_IT+0x102>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <UART_Start_Receive_IT+0x184>)
 800385a:	669a      	str	r2, [r3, #104]	; 0x68
 800385c:	e002      	b.n	8003864 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <UART_Start_Receive_IT+0x188>)
 8003862:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d019      	beq.n	80038a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
 800388c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e6      	bne.n	800386c <UART_Start_Receive_IT+0x110>
 800389e:	e018      	b.n	80038d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	613b      	str	r3, [r7, #16]
   return(result);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f043 0320 	orr.w	r3, r3, #32
 80038b4:	653b      	str	r3, [r7, #80]	; 0x50
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	69f9      	ldr	r1, [r7, #28]
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e6      	bne.n	80038a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	375c      	adds	r7, #92	; 0x5c
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	08003b97 	.word	0x08003b97
 80038e4:	08003a31 	.word	0x08003a31

080038e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b095      	sub	sp, #84	; 0x54
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390e:	643b      	str	r3, [r7, #64]	; 0x40
 8003910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e6      	bne.n	80038f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3308      	adds	r3, #8
 8003928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	61fb      	str	r3, [r7, #28]
   return(result);
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	64bb      	str	r3, [r7, #72]	; 0x48
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3308      	adds	r3, #8
 8003940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e5      	bne.n	8003922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395a:	2b01      	cmp	r3, #1
 800395c:	d118      	bne.n	8003990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	60bb      	str	r3, [r7, #8]
   return(result);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f023 0310 	bic.w	r3, r3, #16
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6979      	ldr	r1, [r7, #20]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	613b      	str	r3, [r7, #16]
   return(result);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e6      	bne.n	800395e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039a4:	bf00      	nop
 80039a6:	3754      	adds	r7, #84	; 0x54
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f7ff fa8a 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e6      	bne.n	80039e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fa56 	bl	8002ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a28:	bf00      	nop
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b096      	sub	sp, #88	; 0x58
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a48:	2b22      	cmp	r3, #34	; 0x22
 8003a4a:	f040 8098 	bne.w	8003b7e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a58:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a5c:	b2d9      	uxtb	r1, r3
 8003a5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	400a      	ands	r2, r1
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d17b      	bne.n	8003b8e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e6      	bne.n	8003a96 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ae8:	633a      	str	r2, [r7, #48]	; 0x30
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e5      	bne.n	8003ac8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d12e      	bne.n	8003b76 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0310 	bic.w	r3, r3, #16
 8003b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	69b9      	ldr	r1, [r7, #24]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	617b      	str	r3, [r7, #20]
   return(result);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e6      	bne.n	8003b1e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d103      	bne.n	8003b66 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2210      	movs	r2, #16
 8003b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff f9c4 	bl	8002efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b74:	e00b      	b.n	8003b8e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fc ff1e 	bl	80009b8 <HAL_UART_RxCpltCallback>
}
 8003b7c:	e007      	b.n	8003b8e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0208 	orr.w	r2, r2, #8
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	3758      	adds	r7, #88	; 0x58
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b096      	sub	sp, #88	; 0x58
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ba4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bae:	2b22      	cmp	r3, #34	; 0x22
 8003bb0:	f040 8098 	bne.w	8003ce4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bc4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003bc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bcc:	4013      	ands	r3, r2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d17b      	bne.n	8003cf4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e6      	bne.n	8003bfc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d12e      	bne.n	8003cdc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 0310 	bic.w	r3, r3, #16
 8003c98:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e6      	bne.n	8003c84 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d103      	bne.n	8003ccc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff f911 	bl	8002efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cda:	e00b      	b.n	8003cf4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fc fe6b 	bl	80009b8 <HAL_UART_RxCpltCallback>
}
 8003ce2:	e007      	b.n	8003cf4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	619a      	str	r2, [r3, #24]
}
 8003cf4:	bf00      	nop
 8003cf6:	3758      	adds	r7, #88	; 0x58
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <__errno>:
 8003cfc:	4b01      	ldr	r3, [pc, #4]	; (8003d04 <__errno+0x8>)
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000010 	.word	0x20000010

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4d0d      	ldr	r5, [pc, #52]	; (8003d40 <__libc_init_array+0x38>)
 8003d0c:	4c0d      	ldr	r4, [pc, #52]	; (8003d44 <__libc_init_array+0x3c>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	2600      	movs	r6, #0
 8003d14:	42a6      	cmp	r6, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	4d0b      	ldr	r5, [pc, #44]	; (8003d48 <__libc_init_array+0x40>)
 8003d1a:	4c0c      	ldr	r4, [pc, #48]	; (8003d4c <__libc_init_array+0x44>)
 8003d1c:	f000 ffae 	bl	8004c7c <_init>
 8003d20:	1b64      	subs	r4, r4, r5
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	2600      	movs	r6, #0
 8003d26:	42a6      	cmp	r6, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d30:	4798      	blx	r3
 8003d32:	3601      	adds	r6, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3a:	4798      	blx	r3
 8003d3c:	3601      	adds	r6, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	08004d70 	.word	0x08004d70
 8003d44:	08004d70 	.word	0x08004d70
 8003d48:	08004d70 	.word	0x08004d70
 8003d4c:	08004d74 	.word	0x08004d74

08003d50 <memset>:
 8003d50:	4402      	add	r2, r0
 8003d52:	4603      	mov	r3, r0
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <iprintf>:
 8003d60:	b40f      	push	{r0, r1, r2, r3}
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <iprintf+0x2c>)
 8003d64:	b513      	push	{r0, r1, r4, lr}
 8003d66:	681c      	ldr	r4, [r3, #0]
 8003d68:	b124      	cbz	r4, 8003d74 <iprintf+0x14>
 8003d6a:	69a3      	ldr	r3, [r4, #24]
 8003d6c:	b913      	cbnz	r3, 8003d74 <iprintf+0x14>
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f000 f866 	bl	8003e40 <__sinit>
 8003d74:	ab05      	add	r3, sp, #20
 8003d76:	9a04      	ldr	r2, [sp, #16]
 8003d78:	68a1      	ldr	r1, [r4, #8]
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f000 f9bd 	bl	80040fc <_vfiprintf_r>
 8003d82:	b002      	add	sp, #8
 8003d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d88:	b004      	add	sp, #16
 8003d8a:	4770      	bx	lr
 8003d8c:	20000010 	.word	0x20000010

08003d90 <std>:
 8003d90:	2300      	movs	r3, #0
 8003d92:	b510      	push	{r4, lr}
 8003d94:	4604      	mov	r4, r0
 8003d96:	e9c0 3300 	strd	r3, r3, [r0]
 8003d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d9e:	6083      	str	r3, [r0, #8]
 8003da0:	8181      	strh	r1, [r0, #12]
 8003da2:	6643      	str	r3, [r0, #100]	; 0x64
 8003da4:	81c2      	strh	r2, [r0, #14]
 8003da6:	6183      	str	r3, [r0, #24]
 8003da8:	4619      	mov	r1, r3
 8003daa:	2208      	movs	r2, #8
 8003dac:	305c      	adds	r0, #92	; 0x5c
 8003dae:	f7ff ffcf 	bl	8003d50 <memset>
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <std+0x38>)
 8003db4:	6263      	str	r3, [r4, #36]	; 0x24
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <std+0x3c>)
 8003db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <std+0x40>)
 8003dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <std+0x44>)
 8003dc0:	6224      	str	r4, [r4, #32]
 8003dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8003dc4:	bd10      	pop	{r4, pc}
 8003dc6:	bf00      	nop
 8003dc8:	080046a5 	.word	0x080046a5
 8003dcc:	080046c7 	.word	0x080046c7
 8003dd0:	080046ff 	.word	0x080046ff
 8003dd4:	08004723 	.word	0x08004723

08003dd8 <_cleanup_r>:
 8003dd8:	4901      	ldr	r1, [pc, #4]	; (8003de0 <_cleanup_r+0x8>)
 8003dda:	f000 b8af 	b.w	8003f3c <_fwalk_reent>
 8003dde:	bf00      	nop
 8003de0:	080049fd 	.word	0x080049fd

08003de4 <__sfmoreglue>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	2268      	movs	r2, #104	; 0x68
 8003de8:	1e4d      	subs	r5, r1, #1
 8003dea:	4355      	muls	r5, r2
 8003dec:	460e      	mov	r6, r1
 8003dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003df2:	f000 f8e5 	bl	8003fc0 <_malloc_r>
 8003df6:	4604      	mov	r4, r0
 8003df8:	b140      	cbz	r0, 8003e0c <__sfmoreglue+0x28>
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8003e00:	300c      	adds	r0, #12
 8003e02:	60a0      	str	r0, [r4, #8]
 8003e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e08:	f7ff ffa2 	bl	8003d50 <memset>
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}

08003e10 <__sfp_lock_acquire>:
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <__sfp_lock_acquire+0x8>)
 8003e12:	f000 b8b3 	b.w	8003f7c <__retarget_lock_acquire_recursive>
 8003e16:	bf00      	nop
 8003e18:	20000125 	.word	0x20000125

08003e1c <__sfp_lock_release>:
 8003e1c:	4801      	ldr	r0, [pc, #4]	; (8003e24 <__sfp_lock_release+0x8>)
 8003e1e:	f000 b8ae 	b.w	8003f7e <__retarget_lock_release_recursive>
 8003e22:	bf00      	nop
 8003e24:	20000125 	.word	0x20000125

08003e28 <__sinit_lock_acquire>:
 8003e28:	4801      	ldr	r0, [pc, #4]	; (8003e30 <__sinit_lock_acquire+0x8>)
 8003e2a:	f000 b8a7 	b.w	8003f7c <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	20000126 	.word	0x20000126

08003e34 <__sinit_lock_release>:
 8003e34:	4801      	ldr	r0, [pc, #4]	; (8003e3c <__sinit_lock_release+0x8>)
 8003e36:	f000 b8a2 	b.w	8003f7e <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	20000126 	.word	0x20000126

08003e40 <__sinit>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	4604      	mov	r4, r0
 8003e44:	f7ff fff0 	bl	8003e28 <__sinit_lock_acquire>
 8003e48:	69a3      	ldr	r3, [r4, #24]
 8003e4a:	b11b      	cbz	r3, 8003e54 <__sinit+0x14>
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f7ff bff0 	b.w	8003e34 <__sinit_lock_release>
 8003e54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e58:	6523      	str	r3, [r4, #80]	; 0x50
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <__sinit+0x68>)
 8003e5c:	4a13      	ldr	r2, [pc, #76]	; (8003eac <__sinit+0x6c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e62:	42a3      	cmp	r3, r4
 8003e64:	bf04      	itt	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	61a3      	streq	r3, [r4, #24]
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 f820 	bl	8003eb0 <__sfp>
 8003e70:	6060      	str	r0, [r4, #4]
 8003e72:	4620      	mov	r0, r4
 8003e74:	f000 f81c 	bl	8003eb0 <__sfp>
 8003e78:	60a0      	str	r0, [r4, #8]
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f000 f818 	bl	8003eb0 <__sfp>
 8003e80:	2200      	movs	r2, #0
 8003e82:	60e0      	str	r0, [r4, #12]
 8003e84:	2104      	movs	r1, #4
 8003e86:	6860      	ldr	r0, [r4, #4]
 8003e88:	f7ff ff82 	bl	8003d90 <std>
 8003e8c:	68a0      	ldr	r0, [r4, #8]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	2109      	movs	r1, #9
 8003e92:	f7ff ff7d 	bl	8003d90 <std>
 8003e96:	68e0      	ldr	r0, [r4, #12]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	2112      	movs	r1, #18
 8003e9c:	f7ff ff78 	bl	8003d90 <std>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	61a3      	str	r3, [r4, #24]
 8003ea4:	e7d2      	b.n	8003e4c <__sinit+0xc>
 8003ea6:	bf00      	nop
 8003ea8:	08004cd0 	.word	0x08004cd0
 8003eac:	08003dd9 	.word	0x08003dd9

08003eb0 <__sfp>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	4607      	mov	r7, r0
 8003eb4:	f7ff ffac 	bl	8003e10 <__sfp_lock_acquire>
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <__sfp+0x84>)
 8003eba:	681e      	ldr	r6, [r3, #0]
 8003ebc:	69b3      	ldr	r3, [r6, #24]
 8003ebe:	b913      	cbnz	r3, 8003ec6 <__sfp+0x16>
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7ff ffbd 	bl	8003e40 <__sinit>
 8003ec6:	3648      	adds	r6, #72	; 0x48
 8003ec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	d503      	bpl.n	8003ed8 <__sfp+0x28>
 8003ed0:	6833      	ldr	r3, [r6, #0]
 8003ed2:	b30b      	cbz	r3, 8003f18 <__sfp+0x68>
 8003ed4:	6836      	ldr	r6, [r6, #0]
 8003ed6:	e7f7      	b.n	8003ec8 <__sfp+0x18>
 8003ed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003edc:	b9d5      	cbnz	r5, 8003f14 <__sfp+0x64>
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <__sfp+0x88>)
 8003ee0:	60e3      	str	r3, [r4, #12]
 8003ee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ee6:	6665      	str	r5, [r4, #100]	; 0x64
 8003ee8:	f000 f847 	bl	8003f7a <__retarget_lock_init_recursive>
 8003eec:	f7ff ff96 	bl	8003e1c <__sfp_lock_release>
 8003ef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ef8:	6025      	str	r5, [r4, #0]
 8003efa:	61a5      	str	r5, [r4, #24]
 8003efc:	2208      	movs	r2, #8
 8003efe:	4629      	mov	r1, r5
 8003f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f04:	f7ff ff24 	bl	8003d50 <memset>
 8003f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f10:	4620      	mov	r0, r4
 8003f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f14:	3468      	adds	r4, #104	; 0x68
 8003f16:	e7d9      	b.n	8003ecc <__sfp+0x1c>
 8003f18:	2104      	movs	r1, #4
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f7ff ff62 	bl	8003de4 <__sfmoreglue>
 8003f20:	4604      	mov	r4, r0
 8003f22:	6030      	str	r0, [r6, #0]
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d1d5      	bne.n	8003ed4 <__sfp+0x24>
 8003f28:	f7ff ff78 	bl	8003e1c <__sfp_lock_release>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	e7ee      	b.n	8003f10 <__sfp+0x60>
 8003f32:	bf00      	nop
 8003f34:	08004cd0 	.word	0x08004cd0
 8003f38:	ffff0001 	.word	0xffff0001

08003f3c <_fwalk_reent>:
 8003f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f40:	4606      	mov	r6, r0
 8003f42:	4688      	mov	r8, r1
 8003f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f48:	2700      	movs	r7, #0
 8003f4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f52:	d505      	bpl.n	8003f60 <_fwalk_reent+0x24>
 8003f54:	6824      	ldr	r4, [r4, #0]
 8003f56:	2c00      	cmp	r4, #0
 8003f58:	d1f7      	bne.n	8003f4a <_fwalk_reent+0xe>
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f60:	89ab      	ldrh	r3, [r5, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d907      	bls.n	8003f76 <_fwalk_reent+0x3a>
 8003f66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	d003      	beq.n	8003f76 <_fwalk_reent+0x3a>
 8003f6e:	4629      	mov	r1, r5
 8003f70:	4630      	mov	r0, r6
 8003f72:	47c0      	blx	r8
 8003f74:	4307      	orrs	r7, r0
 8003f76:	3568      	adds	r5, #104	; 0x68
 8003f78:	e7e9      	b.n	8003f4e <_fwalk_reent+0x12>

08003f7a <__retarget_lock_init_recursive>:
 8003f7a:	4770      	bx	lr

08003f7c <__retarget_lock_acquire_recursive>:
 8003f7c:	4770      	bx	lr

08003f7e <__retarget_lock_release_recursive>:
 8003f7e:	4770      	bx	lr

08003f80 <sbrk_aligned>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	4e0e      	ldr	r6, [pc, #56]	; (8003fbc <sbrk_aligned+0x3c>)
 8003f84:	460c      	mov	r4, r1
 8003f86:	6831      	ldr	r1, [r6, #0]
 8003f88:	4605      	mov	r5, r0
 8003f8a:	b911      	cbnz	r1, 8003f92 <sbrk_aligned+0x12>
 8003f8c:	f000 fb7a 	bl	8004684 <_sbrk_r>
 8003f90:	6030      	str	r0, [r6, #0]
 8003f92:	4621      	mov	r1, r4
 8003f94:	4628      	mov	r0, r5
 8003f96:	f000 fb75 	bl	8004684 <_sbrk_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	d00a      	beq.n	8003fb4 <sbrk_aligned+0x34>
 8003f9e:	1cc4      	adds	r4, r0, #3
 8003fa0:	f024 0403 	bic.w	r4, r4, #3
 8003fa4:	42a0      	cmp	r0, r4
 8003fa6:	d007      	beq.n	8003fb8 <sbrk_aligned+0x38>
 8003fa8:	1a21      	subs	r1, r4, r0
 8003faa:	4628      	mov	r0, r5
 8003fac:	f000 fb6a 	bl	8004684 <_sbrk_r>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d101      	bne.n	8003fb8 <sbrk_aligned+0x38>
 8003fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8003fb8:	4620      	mov	r0, r4
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	2000012c 	.word	0x2000012c

08003fc0 <_malloc_r>:
 8003fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	1ccd      	adds	r5, r1, #3
 8003fc6:	f025 0503 	bic.w	r5, r5, #3
 8003fca:	3508      	adds	r5, #8
 8003fcc:	2d0c      	cmp	r5, #12
 8003fce:	bf38      	it	cc
 8003fd0:	250c      	movcc	r5, #12
 8003fd2:	2d00      	cmp	r5, #0
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	db01      	blt.n	8003fdc <_malloc_r+0x1c>
 8003fd8:	42a9      	cmp	r1, r5
 8003fda:	d905      	bls.n	8003fe8 <_malloc_r+0x28>
 8003fdc:	230c      	movs	r3, #12
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fe8:	4e2e      	ldr	r6, [pc, #184]	; (80040a4 <_malloc_r+0xe4>)
 8003fea:	f000 fdbb 	bl	8004b64 <__malloc_lock>
 8003fee:	6833      	ldr	r3, [r6, #0]
 8003ff0:	461c      	mov	r4, r3
 8003ff2:	bb34      	cbnz	r4, 8004042 <_malloc_r+0x82>
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	f7ff ffc2 	bl	8003f80 <sbrk_aligned>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	4604      	mov	r4, r0
 8004000:	d14d      	bne.n	800409e <_malloc_r+0xde>
 8004002:	6834      	ldr	r4, [r6, #0]
 8004004:	4626      	mov	r6, r4
 8004006:	2e00      	cmp	r6, #0
 8004008:	d140      	bne.n	800408c <_malloc_r+0xcc>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	4631      	mov	r1, r6
 800400e:	4638      	mov	r0, r7
 8004010:	eb04 0803 	add.w	r8, r4, r3
 8004014:	f000 fb36 	bl	8004684 <_sbrk_r>
 8004018:	4580      	cmp	r8, r0
 800401a:	d13a      	bne.n	8004092 <_malloc_r+0xd2>
 800401c:	6821      	ldr	r1, [r4, #0]
 800401e:	3503      	adds	r5, #3
 8004020:	1a6d      	subs	r5, r5, r1
 8004022:	f025 0503 	bic.w	r5, r5, #3
 8004026:	3508      	adds	r5, #8
 8004028:	2d0c      	cmp	r5, #12
 800402a:	bf38      	it	cc
 800402c:	250c      	movcc	r5, #12
 800402e:	4629      	mov	r1, r5
 8004030:	4638      	mov	r0, r7
 8004032:	f7ff ffa5 	bl	8003f80 <sbrk_aligned>
 8004036:	3001      	adds	r0, #1
 8004038:	d02b      	beq.n	8004092 <_malloc_r+0xd2>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	442b      	add	r3, r5
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	e00e      	b.n	8004060 <_malloc_r+0xa0>
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	1b52      	subs	r2, r2, r5
 8004046:	d41e      	bmi.n	8004086 <_malloc_r+0xc6>
 8004048:	2a0b      	cmp	r2, #11
 800404a:	d916      	bls.n	800407a <_malloc_r+0xba>
 800404c:	1961      	adds	r1, r4, r5
 800404e:	42a3      	cmp	r3, r4
 8004050:	6025      	str	r5, [r4, #0]
 8004052:	bf18      	it	ne
 8004054:	6059      	strne	r1, [r3, #4]
 8004056:	6863      	ldr	r3, [r4, #4]
 8004058:	bf08      	it	eq
 800405a:	6031      	streq	r1, [r6, #0]
 800405c:	5162      	str	r2, [r4, r5]
 800405e:	604b      	str	r3, [r1, #4]
 8004060:	4638      	mov	r0, r7
 8004062:	f104 060b 	add.w	r6, r4, #11
 8004066:	f000 fd83 	bl	8004b70 <__malloc_unlock>
 800406a:	f026 0607 	bic.w	r6, r6, #7
 800406e:	1d23      	adds	r3, r4, #4
 8004070:	1af2      	subs	r2, r6, r3
 8004072:	d0b6      	beq.n	8003fe2 <_malloc_r+0x22>
 8004074:	1b9b      	subs	r3, r3, r6
 8004076:	50a3      	str	r3, [r4, r2]
 8004078:	e7b3      	b.n	8003fe2 <_malloc_r+0x22>
 800407a:	6862      	ldr	r2, [r4, #4]
 800407c:	42a3      	cmp	r3, r4
 800407e:	bf0c      	ite	eq
 8004080:	6032      	streq	r2, [r6, #0]
 8004082:	605a      	strne	r2, [r3, #4]
 8004084:	e7ec      	b.n	8004060 <_malloc_r+0xa0>
 8004086:	4623      	mov	r3, r4
 8004088:	6864      	ldr	r4, [r4, #4]
 800408a:	e7b2      	b.n	8003ff2 <_malloc_r+0x32>
 800408c:	4634      	mov	r4, r6
 800408e:	6876      	ldr	r6, [r6, #4]
 8004090:	e7b9      	b.n	8004006 <_malloc_r+0x46>
 8004092:	230c      	movs	r3, #12
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4638      	mov	r0, r7
 8004098:	f000 fd6a 	bl	8004b70 <__malloc_unlock>
 800409c:	e7a1      	b.n	8003fe2 <_malloc_r+0x22>
 800409e:	6025      	str	r5, [r4, #0]
 80040a0:	e7de      	b.n	8004060 <_malloc_r+0xa0>
 80040a2:	bf00      	nop
 80040a4:	20000128 	.word	0x20000128

080040a8 <__sfputc_r>:
 80040a8:	6893      	ldr	r3, [r2, #8]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	b410      	push	{r4}
 80040b0:	6093      	str	r3, [r2, #8]
 80040b2:	da08      	bge.n	80040c6 <__sfputc_r+0x1e>
 80040b4:	6994      	ldr	r4, [r2, #24]
 80040b6:	42a3      	cmp	r3, r4
 80040b8:	db01      	blt.n	80040be <__sfputc_r+0x16>
 80040ba:	290a      	cmp	r1, #10
 80040bc:	d103      	bne.n	80040c6 <__sfputc_r+0x1e>
 80040be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c2:	f000 bb33 	b.w	800472c <__swbuf_r>
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	1c58      	adds	r0, r3, #1
 80040ca:	6010      	str	r0, [r2, #0]
 80040cc:	7019      	strb	r1, [r3, #0]
 80040ce:	4608      	mov	r0, r1
 80040d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <__sfputs_r>:
 80040d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d8:	4606      	mov	r6, r0
 80040da:	460f      	mov	r7, r1
 80040dc:	4614      	mov	r4, r2
 80040de:	18d5      	adds	r5, r2, r3
 80040e0:	42ac      	cmp	r4, r5
 80040e2:	d101      	bne.n	80040e8 <__sfputs_r+0x12>
 80040e4:	2000      	movs	r0, #0
 80040e6:	e007      	b.n	80040f8 <__sfputs_r+0x22>
 80040e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ec:	463a      	mov	r2, r7
 80040ee:	4630      	mov	r0, r6
 80040f0:	f7ff ffda 	bl	80040a8 <__sfputc_r>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d1f3      	bne.n	80040e0 <__sfputs_r+0xa>
 80040f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040fc <_vfiprintf_r>:
 80040fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004100:	460d      	mov	r5, r1
 8004102:	b09d      	sub	sp, #116	; 0x74
 8004104:	4614      	mov	r4, r2
 8004106:	4698      	mov	r8, r3
 8004108:	4606      	mov	r6, r0
 800410a:	b118      	cbz	r0, 8004114 <_vfiprintf_r+0x18>
 800410c:	6983      	ldr	r3, [r0, #24]
 800410e:	b90b      	cbnz	r3, 8004114 <_vfiprintf_r+0x18>
 8004110:	f7ff fe96 	bl	8003e40 <__sinit>
 8004114:	4b89      	ldr	r3, [pc, #548]	; (800433c <_vfiprintf_r+0x240>)
 8004116:	429d      	cmp	r5, r3
 8004118:	d11b      	bne.n	8004152 <_vfiprintf_r+0x56>
 800411a:	6875      	ldr	r5, [r6, #4]
 800411c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800411e:	07d9      	lsls	r1, r3, #31
 8004120:	d405      	bmi.n	800412e <_vfiprintf_r+0x32>
 8004122:	89ab      	ldrh	r3, [r5, #12]
 8004124:	059a      	lsls	r2, r3, #22
 8004126:	d402      	bmi.n	800412e <_vfiprintf_r+0x32>
 8004128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800412a:	f7ff ff27 	bl	8003f7c <__retarget_lock_acquire_recursive>
 800412e:	89ab      	ldrh	r3, [r5, #12]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	d501      	bpl.n	8004138 <_vfiprintf_r+0x3c>
 8004134:	692b      	ldr	r3, [r5, #16]
 8004136:	b9eb      	cbnz	r3, 8004174 <_vfiprintf_r+0x78>
 8004138:	4629      	mov	r1, r5
 800413a:	4630      	mov	r0, r6
 800413c:	f000 fb5a 	bl	80047f4 <__swsetup_r>
 8004140:	b1c0      	cbz	r0, 8004174 <_vfiprintf_r+0x78>
 8004142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004144:	07dc      	lsls	r4, r3, #31
 8004146:	d50e      	bpl.n	8004166 <_vfiprintf_r+0x6a>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	b01d      	add	sp, #116	; 0x74
 800414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004152:	4b7b      	ldr	r3, [pc, #492]	; (8004340 <_vfiprintf_r+0x244>)
 8004154:	429d      	cmp	r5, r3
 8004156:	d101      	bne.n	800415c <_vfiprintf_r+0x60>
 8004158:	68b5      	ldr	r5, [r6, #8]
 800415a:	e7df      	b.n	800411c <_vfiprintf_r+0x20>
 800415c:	4b79      	ldr	r3, [pc, #484]	; (8004344 <_vfiprintf_r+0x248>)
 800415e:	429d      	cmp	r5, r3
 8004160:	bf08      	it	eq
 8004162:	68f5      	ldreq	r5, [r6, #12]
 8004164:	e7da      	b.n	800411c <_vfiprintf_r+0x20>
 8004166:	89ab      	ldrh	r3, [r5, #12]
 8004168:	0598      	lsls	r0, r3, #22
 800416a:	d4ed      	bmi.n	8004148 <_vfiprintf_r+0x4c>
 800416c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800416e:	f7ff ff06 	bl	8003f7e <__retarget_lock_release_recursive>
 8004172:	e7e9      	b.n	8004148 <_vfiprintf_r+0x4c>
 8004174:	2300      	movs	r3, #0
 8004176:	9309      	str	r3, [sp, #36]	; 0x24
 8004178:	2320      	movs	r3, #32
 800417a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800417e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004182:	2330      	movs	r3, #48	; 0x30
 8004184:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004348 <_vfiprintf_r+0x24c>
 8004188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800418c:	f04f 0901 	mov.w	r9, #1
 8004190:	4623      	mov	r3, r4
 8004192:	469a      	mov	sl, r3
 8004194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004198:	b10a      	cbz	r2, 800419e <_vfiprintf_r+0xa2>
 800419a:	2a25      	cmp	r2, #37	; 0x25
 800419c:	d1f9      	bne.n	8004192 <_vfiprintf_r+0x96>
 800419e:	ebba 0b04 	subs.w	fp, sl, r4
 80041a2:	d00b      	beq.n	80041bc <_vfiprintf_r+0xc0>
 80041a4:	465b      	mov	r3, fp
 80041a6:	4622      	mov	r2, r4
 80041a8:	4629      	mov	r1, r5
 80041aa:	4630      	mov	r0, r6
 80041ac:	f7ff ff93 	bl	80040d6 <__sfputs_r>
 80041b0:	3001      	adds	r0, #1
 80041b2:	f000 80aa 	beq.w	800430a <_vfiprintf_r+0x20e>
 80041b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041b8:	445a      	add	r2, fp
 80041ba:	9209      	str	r2, [sp, #36]	; 0x24
 80041bc:	f89a 3000 	ldrb.w	r3, [sl]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a2 	beq.w	800430a <_vfiprintf_r+0x20e>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d0:	f10a 0a01 	add.w	sl, sl, #1
 80041d4:	9304      	str	r3, [sp, #16]
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041dc:	931a      	str	r3, [sp, #104]	; 0x68
 80041de:	4654      	mov	r4, sl
 80041e0:	2205      	movs	r2, #5
 80041e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e6:	4858      	ldr	r0, [pc, #352]	; (8004348 <_vfiprintf_r+0x24c>)
 80041e8:	f7fc f82a 	bl	8000240 <memchr>
 80041ec:	9a04      	ldr	r2, [sp, #16]
 80041ee:	b9d8      	cbnz	r0, 8004228 <_vfiprintf_r+0x12c>
 80041f0:	06d1      	lsls	r1, r2, #27
 80041f2:	bf44      	itt	mi
 80041f4:	2320      	movmi	r3, #32
 80041f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041fa:	0713      	lsls	r3, r2, #28
 80041fc:	bf44      	itt	mi
 80041fe:	232b      	movmi	r3, #43	; 0x2b
 8004200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004204:	f89a 3000 	ldrb.w	r3, [sl]
 8004208:	2b2a      	cmp	r3, #42	; 0x2a
 800420a:	d015      	beq.n	8004238 <_vfiprintf_r+0x13c>
 800420c:	9a07      	ldr	r2, [sp, #28]
 800420e:	4654      	mov	r4, sl
 8004210:	2000      	movs	r0, #0
 8004212:	f04f 0c0a 	mov.w	ip, #10
 8004216:	4621      	mov	r1, r4
 8004218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800421c:	3b30      	subs	r3, #48	; 0x30
 800421e:	2b09      	cmp	r3, #9
 8004220:	d94e      	bls.n	80042c0 <_vfiprintf_r+0x1c4>
 8004222:	b1b0      	cbz	r0, 8004252 <_vfiprintf_r+0x156>
 8004224:	9207      	str	r2, [sp, #28]
 8004226:	e014      	b.n	8004252 <_vfiprintf_r+0x156>
 8004228:	eba0 0308 	sub.w	r3, r0, r8
 800422c:	fa09 f303 	lsl.w	r3, r9, r3
 8004230:	4313      	orrs	r3, r2
 8004232:	9304      	str	r3, [sp, #16]
 8004234:	46a2      	mov	sl, r4
 8004236:	e7d2      	b.n	80041de <_vfiprintf_r+0xe2>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	1d19      	adds	r1, r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	9103      	str	r1, [sp, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	bfbb      	ittet	lt
 8004244:	425b      	neglt	r3, r3
 8004246:	f042 0202 	orrlt.w	r2, r2, #2
 800424a:	9307      	strge	r3, [sp, #28]
 800424c:	9307      	strlt	r3, [sp, #28]
 800424e:	bfb8      	it	lt
 8004250:	9204      	strlt	r2, [sp, #16]
 8004252:	7823      	ldrb	r3, [r4, #0]
 8004254:	2b2e      	cmp	r3, #46	; 0x2e
 8004256:	d10c      	bne.n	8004272 <_vfiprintf_r+0x176>
 8004258:	7863      	ldrb	r3, [r4, #1]
 800425a:	2b2a      	cmp	r3, #42	; 0x2a
 800425c:	d135      	bne.n	80042ca <_vfiprintf_r+0x1ce>
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	1d1a      	adds	r2, r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	9203      	str	r2, [sp, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	bfb8      	it	lt
 800426a:	f04f 33ff 	movlt.w	r3, #4294967295
 800426e:	3402      	adds	r4, #2
 8004270:	9305      	str	r3, [sp, #20]
 8004272:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004358 <_vfiprintf_r+0x25c>
 8004276:	7821      	ldrb	r1, [r4, #0]
 8004278:	2203      	movs	r2, #3
 800427a:	4650      	mov	r0, sl
 800427c:	f7fb ffe0 	bl	8000240 <memchr>
 8004280:	b140      	cbz	r0, 8004294 <_vfiprintf_r+0x198>
 8004282:	2340      	movs	r3, #64	; 0x40
 8004284:	eba0 000a 	sub.w	r0, r0, sl
 8004288:	fa03 f000 	lsl.w	r0, r3, r0
 800428c:	9b04      	ldr	r3, [sp, #16]
 800428e:	4303      	orrs	r3, r0
 8004290:	3401      	adds	r4, #1
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004298:	482c      	ldr	r0, [pc, #176]	; (800434c <_vfiprintf_r+0x250>)
 800429a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800429e:	2206      	movs	r2, #6
 80042a0:	f7fb ffce 	bl	8000240 <memchr>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d03f      	beq.n	8004328 <_vfiprintf_r+0x22c>
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <_vfiprintf_r+0x254>)
 80042aa:	bb1b      	cbnz	r3, 80042f4 <_vfiprintf_r+0x1f8>
 80042ac:	9b03      	ldr	r3, [sp, #12]
 80042ae:	3307      	adds	r3, #7
 80042b0:	f023 0307 	bic.w	r3, r3, #7
 80042b4:	3308      	adds	r3, #8
 80042b6:	9303      	str	r3, [sp, #12]
 80042b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ba:	443b      	add	r3, r7
 80042bc:	9309      	str	r3, [sp, #36]	; 0x24
 80042be:	e767      	b.n	8004190 <_vfiprintf_r+0x94>
 80042c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80042c4:	460c      	mov	r4, r1
 80042c6:	2001      	movs	r0, #1
 80042c8:	e7a5      	b.n	8004216 <_vfiprintf_r+0x11a>
 80042ca:	2300      	movs	r3, #0
 80042cc:	3401      	adds	r4, #1
 80042ce:	9305      	str	r3, [sp, #20]
 80042d0:	4619      	mov	r1, r3
 80042d2:	f04f 0c0a 	mov.w	ip, #10
 80042d6:	4620      	mov	r0, r4
 80042d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042dc:	3a30      	subs	r2, #48	; 0x30
 80042de:	2a09      	cmp	r2, #9
 80042e0:	d903      	bls.n	80042ea <_vfiprintf_r+0x1ee>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0c5      	beq.n	8004272 <_vfiprintf_r+0x176>
 80042e6:	9105      	str	r1, [sp, #20]
 80042e8:	e7c3      	b.n	8004272 <_vfiprintf_r+0x176>
 80042ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ee:	4604      	mov	r4, r0
 80042f0:	2301      	movs	r3, #1
 80042f2:	e7f0      	b.n	80042d6 <_vfiprintf_r+0x1da>
 80042f4:	ab03      	add	r3, sp, #12
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	462a      	mov	r2, r5
 80042fa:	4b16      	ldr	r3, [pc, #88]	; (8004354 <_vfiprintf_r+0x258>)
 80042fc:	a904      	add	r1, sp, #16
 80042fe:	4630      	mov	r0, r6
 8004300:	f3af 8000 	nop.w
 8004304:	4607      	mov	r7, r0
 8004306:	1c78      	adds	r0, r7, #1
 8004308:	d1d6      	bne.n	80042b8 <_vfiprintf_r+0x1bc>
 800430a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800430c:	07d9      	lsls	r1, r3, #31
 800430e:	d405      	bmi.n	800431c <_vfiprintf_r+0x220>
 8004310:	89ab      	ldrh	r3, [r5, #12]
 8004312:	059a      	lsls	r2, r3, #22
 8004314:	d402      	bmi.n	800431c <_vfiprintf_r+0x220>
 8004316:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004318:	f7ff fe31 	bl	8003f7e <__retarget_lock_release_recursive>
 800431c:	89ab      	ldrh	r3, [r5, #12]
 800431e:	065b      	lsls	r3, r3, #25
 8004320:	f53f af12 	bmi.w	8004148 <_vfiprintf_r+0x4c>
 8004324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004326:	e711      	b.n	800414c <_vfiprintf_r+0x50>
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	462a      	mov	r2, r5
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <_vfiprintf_r+0x258>)
 8004330:	a904      	add	r1, sp, #16
 8004332:	4630      	mov	r0, r6
 8004334:	f000 f880 	bl	8004438 <_printf_i>
 8004338:	e7e4      	b.n	8004304 <_vfiprintf_r+0x208>
 800433a:	bf00      	nop
 800433c:	08004cf4 	.word	0x08004cf4
 8004340:	08004d14 	.word	0x08004d14
 8004344:	08004cd4 	.word	0x08004cd4
 8004348:	08004d34 	.word	0x08004d34
 800434c:	08004d3e 	.word	0x08004d3e
 8004350:	00000000 	.word	0x00000000
 8004354:	080040d7 	.word	0x080040d7
 8004358:	08004d3a 	.word	0x08004d3a

0800435c <_printf_common>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	4616      	mov	r6, r2
 8004362:	4699      	mov	r9, r3
 8004364:	688a      	ldr	r2, [r1, #8]
 8004366:	690b      	ldr	r3, [r1, #16]
 8004368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800436c:	4293      	cmp	r3, r2
 800436e:	bfb8      	it	lt
 8004370:	4613      	movlt	r3, r2
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004378:	4607      	mov	r7, r0
 800437a:	460c      	mov	r4, r1
 800437c:	b10a      	cbz	r2, 8004382 <_printf_common+0x26>
 800437e:	3301      	adds	r3, #1
 8004380:	6033      	str	r3, [r6, #0]
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	0699      	lsls	r1, r3, #26
 8004386:	bf42      	ittt	mi
 8004388:	6833      	ldrmi	r3, [r6, #0]
 800438a:	3302      	addmi	r3, #2
 800438c:	6033      	strmi	r3, [r6, #0]
 800438e:	6825      	ldr	r5, [r4, #0]
 8004390:	f015 0506 	ands.w	r5, r5, #6
 8004394:	d106      	bne.n	80043a4 <_printf_common+0x48>
 8004396:	f104 0a19 	add.w	sl, r4, #25
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	6832      	ldr	r2, [r6, #0]
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dc26      	bgt.n	80043f2 <_printf_common+0x96>
 80043a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043a8:	1e13      	subs	r3, r2, #0
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	bf18      	it	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	0692      	lsls	r2, r2, #26
 80043b2:	d42b      	bmi.n	800440c <_printf_common+0xb0>
 80043b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043b8:	4649      	mov	r1, r9
 80043ba:	4638      	mov	r0, r7
 80043bc:	47c0      	blx	r8
 80043be:	3001      	adds	r0, #1
 80043c0:	d01e      	beq.n	8004400 <_printf_common+0xa4>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	68e5      	ldr	r5, [r4, #12]
 80043c6:	6832      	ldr	r2, [r6, #0]
 80043c8:	f003 0306 	and.w	r3, r3, #6
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	bf08      	it	eq
 80043d0:	1aad      	subeq	r5, r5, r2
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	6922      	ldr	r2, [r4, #16]
 80043d6:	bf0c      	ite	eq
 80043d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043dc:	2500      	movne	r5, #0
 80043de:	4293      	cmp	r3, r2
 80043e0:	bfc4      	itt	gt
 80043e2:	1a9b      	subgt	r3, r3, r2
 80043e4:	18ed      	addgt	r5, r5, r3
 80043e6:	2600      	movs	r6, #0
 80043e8:	341a      	adds	r4, #26
 80043ea:	42b5      	cmp	r5, r6
 80043ec:	d11a      	bne.n	8004424 <_printf_common+0xc8>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e008      	b.n	8004404 <_printf_common+0xa8>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4652      	mov	r2, sl
 80043f6:	4649      	mov	r1, r9
 80043f8:	4638      	mov	r0, r7
 80043fa:	47c0      	blx	r8
 80043fc:	3001      	adds	r0, #1
 80043fe:	d103      	bne.n	8004408 <_printf_common+0xac>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	3501      	adds	r5, #1
 800440a:	e7c6      	b.n	800439a <_printf_common+0x3e>
 800440c:	18e1      	adds	r1, r4, r3
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	2030      	movs	r0, #48	; 0x30
 8004412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004416:	4422      	add	r2, r4
 8004418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800441c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004420:	3302      	adds	r3, #2
 8004422:	e7c7      	b.n	80043b4 <_printf_common+0x58>
 8004424:	2301      	movs	r3, #1
 8004426:	4622      	mov	r2, r4
 8004428:	4649      	mov	r1, r9
 800442a:	4638      	mov	r0, r7
 800442c:	47c0      	blx	r8
 800442e:	3001      	adds	r0, #1
 8004430:	d0e6      	beq.n	8004400 <_printf_common+0xa4>
 8004432:	3601      	adds	r6, #1
 8004434:	e7d9      	b.n	80043ea <_printf_common+0x8e>
	...

08004438 <_printf_i>:
 8004438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	7e0f      	ldrb	r7, [r1, #24]
 800443e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004440:	2f78      	cmp	r7, #120	; 0x78
 8004442:	4691      	mov	r9, r2
 8004444:	4680      	mov	r8, r0
 8004446:	460c      	mov	r4, r1
 8004448:	469a      	mov	sl, r3
 800444a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800444e:	d807      	bhi.n	8004460 <_printf_i+0x28>
 8004450:	2f62      	cmp	r7, #98	; 0x62
 8004452:	d80a      	bhi.n	800446a <_printf_i+0x32>
 8004454:	2f00      	cmp	r7, #0
 8004456:	f000 80d8 	beq.w	800460a <_printf_i+0x1d2>
 800445a:	2f58      	cmp	r7, #88	; 0x58
 800445c:	f000 80a3 	beq.w	80045a6 <_printf_i+0x16e>
 8004460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004468:	e03a      	b.n	80044e0 <_printf_i+0xa8>
 800446a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800446e:	2b15      	cmp	r3, #21
 8004470:	d8f6      	bhi.n	8004460 <_printf_i+0x28>
 8004472:	a101      	add	r1, pc, #4	; (adr r1, 8004478 <_printf_i+0x40>)
 8004474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044e5 	.word	0x080044e5
 8004480:	08004461 	.word	0x08004461
 8004484:	08004461 	.word	0x08004461
 8004488:	08004461 	.word	0x08004461
 800448c:	08004461 	.word	0x08004461
 8004490:	080044e5 	.word	0x080044e5
 8004494:	08004461 	.word	0x08004461
 8004498:	08004461 	.word	0x08004461
 800449c:	08004461 	.word	0x08004461
 80044a0:	08004461 	.word	0x08004461
 80044a4:	080045f1 	.word	0x080045f1
 80044a8:	08004515 	.word	0x08004515
 80044ac:	080045d3 	.word	0x080045d3
 80044b0:	08004461 	.word	0x08004461
 80044b4:	08004461 	.word	0x08004461
 80044b8:	08004613 	.word	0x08004613
 80044bc:	08004461 	.word	0x08004461
 80044c0:	08004515 	.word	0x08004515
 80044c4:	08004461 	.word	0x08004461
 80044c8:	08004461 	.word	0x08004461
 80044cc:	080045db 	.word	0x080045db
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	1d1a      	adds	r2, r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	602a      	str	r2, [r5, #0]
 80044d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0a3      	b.n	800462c <_printf_i+0x1f4>
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	6829      	ldr	r1, [r5, #0]
 80044e8:	0606      	lsls	r6, r0, #24
 80044ea:	f101 0304 	add.w	r3, r1, #4
 80044ee:	d50a      	bpl.n	8004506 <_printf_i+0xce>
 80044f0:	680e      	ldr	r6, [r1, #0]
 80044f2:	602b      	str	r3, [r5, #0]
 80044f4:	2e00      	cmp	r6, #0
 80044f6:	da03      	bge.n	8004500 <_printf_i+0xc8>
 80044f8:	232d      	movs	r3, #45	; 0x2d
 80044fa:	4276      	negs	r6, r6
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004500:	485e      	ldr	r0, [pc, #376]	; (800467c <_printf_i+0x244>)
 8004502:	230a      	movs	r3, #10
 8004504:	e019      	b.n	800453a <_printf_i+0x102>
 8004506:	680e      	ldr	r6, [r1, #0]
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800450e:	bf18      	it	ne
 8004510:	b236      	sxthne	r6, r6
 8004512:	e7ef      	b.n	80044f4 <_printf_i+0xbc>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	6820      	ldr	r0, [r4, #0]
 8004518:	1d19      	adds	r1, r3, #4
 800451a:	6029      	str	r1, [r5, #0]
 800451c:	0601      	lsls	r1, r0, #24
 800451e:	d501      	bpl.n	8004524 <_printf_i+0xec>
 8004520:	681e      	ldr	r6, [r3, #0]
 8004522:	e002      	b.n	800452a <_printf_i+0xf2>
 8004524:	0646      	lsls	r6, r0, #25
 8004526:	d5fb      	bpl.n	8004520 <_printf_i+0xe8>
 8004528:	881e      	ldrh	r6, [r3, #0]
 800452a:	4854      	ldr	r0, [pc, #336]	; (800467c <_printf_i+0x244>)
 800452c:	2f6f      	cmp	r7, #111	; 0x6f
 800452e:	bf0c      	ite	eq
 8004530:	2308      	moveq	r3, #8
 8004532:	230a      	movne	r3, #10
 8004534:	2100      	movs	r1, #0
 8004536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800453a:	6865      	ldr	r5, [r4, #4]
 800453c:	60a5      	str	r5, [r4, #8]
 800453e:	2d00      	cmp	r5, #0
 8004540:	bfa2      	ittt	ge
 8004542:	6821      	ldrge	r1, [r4, #0]
 8004544:	f021 0104 	bicge.w	r1, r1, #4
 8004548:	6021      	strge	r1, [r4, #0]
 800454a:	b90e      	cbnz	r6, 8004550 <_printf_i+0x118>
 800454c:	2d00      	cmp	r5, #0
 800454e:	d04d      	beq.n	80045ec <_printf_i+0x1b4>
 8004550:	4615      	mov	r5, r2
 8004552:	fbb6 f1f3 	udiv	r1, r6, r3
 8004556:	fb03 6711 	mls	r7, r3, r1, r6
 800455a:	5dc7      	ldrb	r7, [r0, r7]
 800455c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004560:	4637      	mov	r7, r6
 8004562:	42bb      	cmp	r3, r7
 8004564:	460e      	mov	r6, r1
 8004566:	d9f4      	bls.n	8004552 <_printf_i+0x11a>
 8004568:	2b08      	cmp	r3, #8
 800456a:	d10b      	bne.n	8004584 <_printf_i+0x14c>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	07de      	lsls	r6, r3, #31
 8004570:	d508      	bpl.n	8004584 <_printf_i+0x14c>
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	6861      	ldr	r1, [r4, #4]
 8004576:	4299      	cmp	r1, r3
 8004578:	bfde      	ittt	le
 800457a:	2330      	movle	r3, #48	; 0x30
 800457c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004580:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004584:	1b52      	subs	r2, r2, r5
 8004586:	6122      	str	r2, [r4, #16]
 8004588:	f8cd a000 	str.w	sl, [sp]
 800458c:	464b      	mov	r3, r9
 800458e:	aa03      	add	r2, sp, #12
 8004590:	4621      	mov	r1, r4
 8004592:	4640      	mov	r0, r8
 8004594:	f7ff fee2 	bl	800435c <_printf_common>
 8004598:	3001      	adds	r0, #1
 800459a:	d14c      	bne.n	8004636 <_printf_i+0x1fe>
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	b004      	add	sp, #16
 80045a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a6:	4835      	ldr	r0, [pc, #212]	; (800467c <_printf_i+0x244>)
 80045a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045ac:	6829      	ldr	r1, [r5, #0]
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80045b4:	6029      	str	r1, [r5, #0]
 80045b6:	061d      	lsls	r5, r3, #24
 80045b8:	d514      	bpl.n	80045e4 <_printf_i+0x1ac>
 80045ba:	07df      	lsls	r7, r3, #31
 80045bc:	bf44      	itt	mi
 80045be:	f043 0320 	orrmi.w	r3, r3, #32
 80045c2:	6023      	strmi	r3, [r4, #0]
 80045c4:	b91e      	cbnz	r6, 80045ce <_printf_i+0x196>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f023 0320 	bic.w	r3, r3, #32
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	2310      	movs	r3, #16
 80045d0:	e7b0      	b.n	8004534 <_printf_i+0xfc>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f043 0320 	orr.w	r3, r3, #32
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	2378      	movs	r3, #120	; 0x78
 80045dc:	4828      	ldr	r0, [pc, #160]	; (8004680 <_printf_i+0x248>)
 80045de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045e2:	e7e3      	b.n	80045ac <_printf_i+0x174>
 80045e4:	0659      	lsls	r1, r3, #25
 80045e6:	bf48      	it	mi
 80045e8:	b2b6      	uxthmi	r6, r6
 80045ea:	e7e6      	b.n	80045ba <_printf_i+0x182>
 80045ec:	4615      	mov	r5, r2
 80045ee:	e7bb      	b.n	8004568 <_printf_i+0x130>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	6826      	ldr	r6, [r4, #0]
 80045f4:	6961      	ldr	r1, [r4, #20]
 80045f6:	1d18      	adds	r0, r3, #4
 80045f8:	6028      	str	r0, [r5, #0]
 80045fa:	0635      	lsls	r5, r6, #24
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	d501      	bpl.n	8004604 <_printf_i+0x1cc>
 8004600:	6019      	str	r1, [r3, #0]
 8004602:	e002      	b.n	800460a <_printf_i+0x1d2>
 8004604:	0670      	lsls	r0, r6, #25
 8004606:	d5fb      	bpl.n	8004600 <_printf_i+0x1c8>
 8004608:	8019      	strh	r1, [r3, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	6123      	str	r3, [r4, #16]
 800460e:	4615      	mov	r5, r2
 8004610:	e7ba      	b.n	8004588 <_printf_i+0x150>
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	1d1a      	adds	r2, r3, #4
 8004616:	602a      	str	r2, [r5, #0]
 8004618:	681d      	ldr	r5, [r3, #0]
 800461a:	6862      	ldr	r2, [r4, #4]
 800461c:	2100      	movs	r1, #0
 800461e:	4628      	mov	r0, r5
 8004620:	f7fb fe0e 	bl	8000240 <memchr>
 8004624:	b108      	cbz	r0, 800462a <_printf_i+0x1f2>
 8004626:	1b40      	subs	r0, r0, r5
 8004628:	6060      	str	r0, [r4, #4]
 800462a:	6863      	ldr	r3, [r4, #4]
 800462c:	6123      	str	r3, [r4, #16]
 800462e:	2300      	movs	r3, #0
 8004630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004634:	e7a8      	b.n	8004588 <_printf_i+0x150>
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	462a      	mov	r2, r5
 800463a:	4649      	mov	r1, r9
 800463c:	4640      	mov	r0, r8
 800463e:	47d0      	blx	sl
 8004640:	3001      	adds	r0, #1
 8004642:	d0ab      	beq.n	800459c <_printf_i+0x164>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	079b      	lsls	r3, r3, #30
 8004648:	d413      	bmi.n	8004672 <_printf_i+0x23a>
 800464a:	68e0      	ldr	r0, [r4, #12]
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	4298      	cmp	r0, r3
 8004650:	bfb8      	it	lt
 8004652:	4618      	movlt	r0, r3
 8004654:	e7a4      	b.n	80045a0 <_printf_i+0x168>
 8004656:	2301      	movs	r3, #1
 8004658:	4632      	mov	r2, r6
 800465a:	4649      	mov	r1, r9
 800465c:	4640      	mov	r0, r8
 800465e:	47d0      	blx	sl
 8004660:	3001      	adds	r0, #1
 8004662:	d09b      	beq.n	800459c <_printf_i+0x164>
 8004664:	3501      	adds	r5, #1
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	9903      	ldr	r1, [sp, #12]
 800466a:	1a5b      	subs	r3, r3, r1
 800466c:	42ab      	cmp	r3, r5
 800466e:	dcf2      	bgt.n	8004656 <_printf_i+0x21e>
 8004670:	e7eb      	b.n	800464a <_printf_i+0x212>
 8004672:	2500      	movs	r5, #0
 8004674:	f104 0619 	add.w	r6, r4, #25
 8004678:	e7f5      	b.n	8004666 <_printf_i+0x22e>
 800467a:	bf00      	nop
 800467c:	08004d45 	.word	0x08004d45
 8004680:	08004d56 	.word	0x08004d56

08004684 <_sbrk_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d06      	ldr	r5, [pc, #24]	; (80046a0 <_sbrk_r+0x1c>)
 8004688:	2300      	movs	r3, #0
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	f7fc fb36 	bl	8000d00 <_sbrk>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_sbrk_r+0x1a>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_sbrk_r+0x1a>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000130 	.word	0x20000130

080046a4 <__sread>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	460c      	mov	r4, r1
 80046a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ac:	f000 fab2 	bl	8004c14 <_read_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	bfab      	itete	ge
 80046b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046b6:	89a3      	ldrhlt	r3, [r4, #12]
 80046b8:	181b      	addge	r3, r3, r0
 80046ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046be:	bfac      	ite	ge
 80046c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046c2:	81a3      	strhlt	r3, [r4, #12]
 80046c4:	bd10      	pop	{r4, pc}

080046c6 <__swrite>:
 80046c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ca:	461f      	mov	r7, r3
 80046cc:	898b      	ldrh	r3, [r1, #12]
 80046ce:	05db      	lsls	r3, r3, #23
 80046d0:	4605      	mov	r5, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	4616      	mov	r6, r2
 80046d6:	d505      	bpl.n	80046e4 <__swrite+0x1e>
 80046d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046dc:	2302      	movs	r3, #2
 80046de:	2200      	movs	r2, #0
 80046e0:	f000 f9c8 	bl	8004a74 <_lseek_r>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	4632      	mov	r2, r6
 80046f2:	463b      	mov	r3, r7
 80046f4:	4628      	mov	r0, r5
 80046f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	f000 b869 	b.w	80047d0 <_write_r>

080046fe <__sseek>:
 80046fe:	b510      	push	{r4, lr}
 8004700:	460c      	mov	r4, r1
 8004702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004706:	f000 f9b5 	bl	8004a74 <_lseek_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	bf15      	itete	ne
 8004710:	6560      	strne	r0, [r4, #84]	; 0x54
 8004712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800471a:	81a3      	strheq	r3, [r4, #12]
 800471c:	bf18      	it	ne
 800471e:	81a3      	strhne	r3, [r4, #12]
 8004720:	bd10      	pop	{r4, pc}

08004722 <__sclose>:
 8004722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004726:	f000 b8d3 	b.w	80048d0 <_close_r>
	...

0800472c <__swbuf_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	460e      	mov	r6, r1
 8004730:	4614      	mov	r4, r2
 8004732:	4605      	mov	r5, r0
 8004734:	b118      	cbz	r0, 800473e <__swbuf_r+0x12>
 8004736:	6983      	ldr	r3, [r0, #24]
 8004738:	b90b      	cbnz	r3, 800473e <__swbuf_r+0x12>
 800473a:	f7ff fb81 	bl	8003e40 <__sinit>
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <__swbuf_r+0x98>)
 8004740:	429c      	cmp	r4, r3
 8004742:	d12b      	bne.n	800479c <__swbuf_r+0x70>
 8004744:	686c      	ldr	r4, [r5, #4]
 8004746:	69a3      	ldr	r3, [r4, #24]
 8004748:	60a3      	str	r3, [r4, #8]
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	071a      	lsls	r2, r3, #28
 800474e:	d52f      	bpl.n	80047b0 <__swbuf_r+0x84>
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	b36b      	cbz	r3, 80047b0 <__swbuf_r+0x84>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	1ac0      	subs	r0, r0, r3
 800475a:	6963      	ldr	r3, [r4, #20]
 800475c:	b2f6      	uxtb	r6, r6
 800475e:	4283      	cmp	r3, r0
 8004760:	4637      	mov	r7, r6
 8004762:	dc04      	bgt.n	800476e <__swbuf_r+0x42>
 8004764:	4621      	mov	r1, r4
 8004766:	4628      	mov	r0, r5
 8004768:	f000 f948 	bl	80049fc <_fflush_r>
 800476c:	bb30      	cbnz	r0, 80047bc <__swbuf_r+0x90>
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	3b01      	subs	r3, #1
 8004772:	60a3      	str	r3, [r4, #8]
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	6022      	str	r2, [r4, #0]
 800477a:	701e      	strb	r6, [r3, #0]
 800477c:	6963      	ldr	r3, [r4, #20]
 800477e:	3001      	adds	r0, #1
 8004780:	4283      	cmp	r3, r0
 8004782:	d004      	beq.n	800478e <__swbuf_r+0x62>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	07db      	lsls	r3, r3, #31
 8004788:	d506      	bpl.n	8004798 <__swbuf_r+0x6c>
 800478a:	2e0a      	cmp	r6, #10
 800478c:	d104      	bne.n	8004798 <__swbuf_r+0x6c>
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f933 	bl	80049fc <_fflush_r>
 8004796:	b988      	cbnz	r0, 80047bc <__swbuf_r+0x90>
 8004798:	4638      	mov	r0, r7
 800479a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <__swbuf_r+0x9c>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	d101      	bne.n	80047a6 <__swbuf_r+0x7a>
 80047a2:	68ac      	ldr	r4, [r5, #8]
 80047a4:	e7cf      	b.n	8004746 <__swbuf_r+0x1a>
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <__swbuf_r+0xa0>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	bf08      	it	eq
 80047ac:	68ec      	ldreq	r4, [r5, #12]
 80047ae:	e7ca      	b.n	8004746 <__swbuf_r+0x1a>
 80047b0:	4621      	mov	r1, r4
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 f81e 	bl	80047f4 <__swsetup_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d0cb      	beq.n	8004754 <__swbuf_r+0x28>
 80047bc:	f04f 37ff 	mov.w	r7, #4294967295
 80047c0:	e7ea      	b.n	8004798 <__swbuf_r+0x6c>
 80047c2:	bf00      	nop
 80047c4:	08004cf4 	.word	0x08004cf4
 80047c8:	08004d14 	.word	0x08004d14
 80047cc:	08004cd4 	.word	0x08004cd4

080047d0 <_write_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d07      	ldr	r5, [pc, #28]	; (80047f0 <_write_r+0x20>)
 80047d4:	4604      	mov	r4, r0
 80047d6:	4608      	mov	r0, r1
 80047d8:	4611      	mov	r1, r2
 80047da:	2200      	movs	r2, #0
 80047dc:	602a      	str	r2, [r5, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fb ff91 	bl	8000706 <_write>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_write_r+0x1e>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_write_r+0x1e>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000130 	.word	0x20000130

080047f4 <__swsetup_r>:
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <__swsetup_r+0xcc>)
 80047f6:	b570      	push	{r4, r5, r6, lr}
 80047f8:	681d      	ldr	r5, [r3, #0]
 80047fa:	4606      	mov	r6, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	b125      	cbz	r5, 800480a <__swsetup_r+0x16>
 8004800:	69ab      	ldr	r3, [r5, #24]
 8004802:	b913      	cbnz	r3, 800480a <__swsetup_r+0x16>
 8004804:	4628      	mov	r0, r5
 8004806:	f7ff fb1b 	bl	8003e40 <__sinit>
 800480a:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <__swsetup_r+0xd0>)
 800480c:	429c      	cmp	r4, r3
 800480e:	d10f      	bne.n	8004830 <__swsetup_r+0x3c>
 8004810:	686c      	ldr	r4, [r5, #4]
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004818:	0719      	lsls	r1, r3, #28
 800481a:	d42c      	bmi.n	8004876 <__swsetup_r+0x82>
 800481c:	06dd      	lsls	r5, r3, #27
 800481e:	d411      	bmi.n	8004844 <__swsetup_r+0x50>
 8004820:	2309      	movs	r3, #9
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	f04f 30ff 	mov.w	r0, #4294967295
 800482e:	e03e      	b.n	80048ae <__swsetup_r+0xba>
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <__swsetup_r+0xd4>)
 8004832:	429c      	cmp	r4, r3
 8004834:	d101      	bne.n	800483a <__swsetup_r+0x46>
 8004836:	68ac      	ldr	r4, [r5, #8]
 8004838:	e7eb      	b.n	8004812 <__swsetup_r+0x1e>
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <__swsetup_r+0xd8>)
 800483c:	429c      	cmp	r4, r3
 800483e:	bf08      	it	eq
 8004840:	68ec      	ldreq	r4, [r5, #12]
 8004842:	e7e6      	b.n	8004812 <__swsetup_r+0x1e>
 8004844:	0758      	lsls	r0, r3, #29
 8004846:	d512      	bpl.n	800486e <__swsetup_r+0x7a>
 8004848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484a:	b141      	cbz	r1, 800485e <__swsetup_r+0x6a>
 800484c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004850:	4299      	cmp	r1, r3
 8004852:	d002      	beq.n	800485a <__swsetup_r+0x66>
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f991 	bl	8004b7c <_free_r>
 800485a:	2300      	movs	r3, #0
 800485c:	6363      	str	r3, [r4, #52]	; 0x34
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	b94b      	cbnz	r3, 800488e <__swsetup_r+0x9a>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004884:	d003      	beq.n	800488e <__swsetup_r+0x9a>
 8004886:	4621      	mov	r1, r4
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f92b 	bl	8004ae4 <__smakebuf_r>
 800488e:	89a0      	ldrh	r0, [r4, #12]
 8004890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004894:	f010 0301 	ands.w	r3, r0, #1
 8004898:	d00a      	beq.n	80048b0 <__swsetup_r+0xbc>
 800489a:	2300      	movs	r3, #0
 800489c:	60a3      	str	r3, [r4, #8]
 800489e:	6963      	ldr	r3, [r4, #20]
 80048a0:	425b      	negs	r3, r3
 80048a2:	61a3      	str	r3, [r4, #24]
 80048a4:	6923      	ldr	r3, [r4, #16]
 80048a6:	b943      	cbnz	r3, 80048ba <__swsetup_r+0xc6>
 80048a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048ac:	d1ba      	bne.n	8004824 <__swsetup_r+0x30>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	0781      	lsls	r1, r0, #30
 80048b2:	bf58      	it	pl
 80048b4:	6963      	ldrpl	r3, [r4, #20]
 80048b6:	60a3      	str	r3, [r4, #8]
 80048b8:	e7f4      	b.n	80048a4 <__swsetup_r+0xb0>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e7f7      	b.n	80048ae <__swsetup_r+0xba>
 80048be:	bf00      	nop
 80048c0:	20000010 	.word	0x20000010
 80048c4:	08004cf4 	.word	0x08004cf4
 80048c8:	08004d14 	.word	0x08004d14
 80048cc:	08004cd4 	.word	0x08004cd4

080048d0 <_close_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d06      	ldr	r5, [pc, #24]	; (80048ec <_close_r+0x1c>)
 80048d4:	2300      	movs	r3, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f7fc f9db 	bl	8000c96 <_close>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_close_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_close_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20000130 	.word	0x20000130

080048f0 <__sflush_r>:
 80048f0:	898a      	ldrh	r2, [r1, #12]
 80048f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	4605      	mov	r5, r0
 80048f8:	0710      	lsls	r0, r2, #28
 80048fa:	460c      	mov	r4, r1
 80048fc:	d458      	bmi.n	80049b0 <__sflush_r+0xc0>
 80048fe:	684b      	ldr	r3, [r1, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	dc05      	bgt.n	8004910 <__sflush_r+0x20>
 8004904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	dc02      	bgt.n	8004910 <__sflush_r+0x20>
 800490a:	2000      	movs	r0, #0
 800490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004912:	2e00      	cmp	r6, #0
 8004914:	d0f9      	beq.n	800490a <__sflush_r+0x1a>
 8004916:	2300      	movs	r3, #0
 8004918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800491c:	682f      	ldr	r7, [r5, #0]
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	d032      	beq.n	8004988 <__sflush_r+0x98>
 8004922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	075a      	lsls	r2, r3, #29
 8004928:	d505      	bpl.n	8004936 <__sflush_r+0x46>
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	1ac0      	subs	r0, r0, r3
 800492e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004930:	b10b      	cbz	r3, 8004936 <__sflush_r+0x46>
 8004932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004934:	1ac0      	subs	r0, r0, r3
 8004936:	2300      	movs	r3, #0
 8004938:	4602      	mov	r2, r0
 800493a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800493c:	6a21      	ldr	r1, [r4, #32]
 800493e:	4628      	mov	r0, r5
 8004940:	47b0      	blx	r6
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	d106      	bne.n	8004956 <__sflush_r+0x66>
 8004948:	6829      	ldr	r1, [r5, #0]
 800494a:	291d      	cmp	r1, #29
 800494c:	d82c      	bhi.n	80049a8 <__sflush_r+0xb8>
 800494e:	4a2a      	ldr	r2, [pc, #168]	; (80049f8 <__sflush_r+0x108>)
 8004950:	40ca      	lsrs	r2, r1
 8004952:	07d6      	lsls	r6, r2, #31
 8004954:	d528      	bpl.n	80049a8 <__sflush_r+0xb8>
 8004956:	2200      	movs	r2, #0
 8004958:	6062      	str	r2, [r4, #4]
 800495a:	04d9      	lsls	r1, r3, #19
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	6022      	str	r2, [r4, #0]
 8004960:	d504      	bpl.n	800496c <__sflush_r+0x7c>
 8004962:	1c42      	adds	r2, r0, #1
 8004964:	d101      	bne.n	800496a <__sflush_r+0x7a>
 8004966:	682b      	ldr	r3, [r5, #0]
 8004968:	b903      	cbnz	r3, 800496c <__sflush_r+0x7c>
 800496a:	6560      	str	r0, [r4, #84]	; 0x54
 800496c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800496e:	602f      	str	r7, [r5, #0]
 8004970:	2900      	cmp	r1, #0
 8004972:	d0ca      	beq.n	800490a <__sflush_r+0x1a>
 8004974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004978:	4299      	cmp	r1, r3
 800497a:	d002      	beq.n	8004982 <__sflush_r+0x92>
 800497c:	4628      	mov	r0, r5
 800497e:	f000 f8fd 	bl	8004b7c <_free_r>
 8004982:	2000      	movs	r0, #0
 8004984:	6360      	str	r0, [r4, #52]	; 0x34
 8004986:	e7c1      	b.n	800490c <__sflush_r+0x1c>
 8004988:	6a21      	ldr	r1, [r4, #32]
 800498a:	2301      	movs	r3, #1
 800498c:	4628      	mov	r0, r5
 800498e:	47b0      	blx	r6
 8004990:	1c41      	adds	r1, r0, #1
 8004992:	d1c7      	bne.n	8004924 <__sflush_r+0x34>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0c4      	beq.n	8004924 <__sflush_r+0x34>
 800499a:	2b1d      	cmp	r3, #29
 800499c:	d001      	beq.n	80049a2 <__sflush_r+0xb2>
 800499e:	2b16      	cmp	r3, #22
 80049a0:	d101      	bne.n	80049a6 <__sflush_r+0xb6>
 80049a2:	602f      	str	r7, [r5, #0]
 80049a4:	e7b1      	b.n	800490a <__sflush_r+0x1a>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7ad      	b.n	800490c <__sflush_r+0x1c>
 80049b0:	690f      	ldr	r7, [r1, #16]
 80049b2:	2f00      	cmp	r7, #0
 80049b4:	d0a9      	beq.n	800490a <__sflush_r+0x1a>
 80049b6:	0793      	lsls	r3, r2, #30
 80049b8:	680e      	ldr	r6, [r1, #0]
 80049ba:	bf08      	it	eq
 80049bc:	694b      	ldreq	r3, [r1, #20]
 80049be:	600f      	str	r7, [r1, #0]
 80049c0:	bf18      	it	ne
 80049c2:	2300      	movne	r3, #0
 80049c4:	eba6 0807 	sub.w	r8, r6, r7
 80049c8:	608b      	str	r3, [r1, #8]
 80049ca:	f1b8 0f00 	cmp.w	r8, #0
 80049ce:	dd9c      	ble.n	800490a <__sflush_r+0x1a>
 80049d0:	6a21      	ldr	r1, [r4, #32]
 80049d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049d4:	4643      	mov	r3, r8
 80049d6:	463a      	mov	r2, r7
 80049d8:	4628      	mov	r0, r5
 80049da:	47b0      	blx	r6
 80049dc:	2800      	cmp	r0, #0
 80049de:	dc06      	bgt.n	80049ee <__sflush_r+0xfe>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	e78e      	b.n	800490c <__sflush_r+0x1c>
 80049ee:	4407      	add	r7, r0
 80049f0:	eba8 0800 	sub.w	r8, r8, r0
 80049f4:	e7e9      	b.n	80049ca <__sflush_r+0xda>
 80049f6:	bf00      	nop
 80049f8:	20400001 	.word	0x20400001

080049fc <_fflush_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	690b      	ldr	r3, [r1, #16]
 8004a00:	4605      	mov	r5, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	b913      	cbnz	r3, 8004a0c <_fflush_r+0x10>
 8004a06:	2500      	movs	r5, #0
 8004a08:	4628      	mov	r0, r5
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	b118      	cbz	r0, 8004a16 <_fflush_r+0x1a>
 8004a0e:	6983      	ldr	r3, [r0, #24]
 8004a10:	b90b      	cbnz	r3, 8004a16 <_fflush_r+0x1a>
 8004a12:	f7ff fa15 	bl	8003e40 <__sinit>
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <_fflush_r+0x6c>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	d11b      	bne.n	8004a54 <_fflush_r+0x58>
 8004a1c:	686c      	ldr	r4, [r5, #4]
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ef      	beq.n	8004a06 <_fflush_r+0xa>
 8004a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a28:	07d0      	lsls	r0, r2, #31
 8004a2a:	d404      	bmi.n	8004a36 <_fflush_r+0x3a>
 8004a2c:	0599      	lsls	r1, r3, #22
 8004a2e:	d402      	bmi.n	8004a36 <_fflush_r+0x3a>
 8004a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a32:	f7ff faa3 	bl	8003f7c <__retarget_lock_acquire_recursive>
 8004a36:	4628      	mov	r0, r5
 8004a38:	4621      	mov	r1, r4
 8004a3a:	f7ff ff59 	bl	80048f0 <__sflush_r>
 8004a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a40:	07da      	lsls	r2, r3, #31
 8004a42:	4605      	mov	r5, r0
 8004a44:	d4e0      	bmi.n	8004a08 <_fflush_r+0xc>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	059b      	lsls	r3, r3, #22
 8004a4a:	d4dd      	bmi.n	8004a08 <_fflush_r+0xc>
 8004a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4e:	f7ff fa96 	bl	8003f7e <__retarget_lock_release_recursive>
 8004a52:	e7d9      	b.n	8004a08 <_fflush_r+0xc>
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <_fflush_r+0x70>)
 8004a56:	429c      	cmp	r4, r3
 8004a58:	d101      	bne.n	8004a5e <_fflush_r+0x62>
 8004a5a:	68ac      	ldr	r4, [r5, #8]
 8004a5c:	e7df      	b.n	8004a1e <_fflush_r+0x22>
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <_fflush_r+0x74>)
 8004a60:	429c      	cmp	r4, r3
 8004a62:	bf08      	it	eq
 8004a64:	68ec      	ldreq	r4, [r5, #12]
 8004a66:	e7da      	b.n	8004a1e <_fflush_r+0x22>
 8004a68:	08004cf4 	.word	0x08004cf4
 8004a6c:	08004d14 	.word	0x08004d14
 8004a70:	08004cd4 	.word	0x08004cd4

08004a74 <_lseek_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	; (8004a94 <_lseek_r+0x20>)
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	602a      	str	r2, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fc f92e 	bl	8000ce4 <_lseek>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_lseek_r+0x1e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_lseek_r+0x1e>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20000130 	.word	0x20000130

08004a98 <__swhatbuf_r>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	460e      	mov	r6, r1
 8004a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	b096      	sub	sp, #88	; 0x58
 8004aa4:	4614      	mov	r4, r2
 8004aa6:	461d      	mov	r5, r3
 8004aa8:	da08      	bge.n	8004abc <__swhatbuf_r+0x24>
 8004aaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	602a      	str	r2, [r5, #0]
 8004ab2:	061a      	lsls	r2, r3, #24
 8004ab4:	d410      	bmi.n	8004ad8 <__swhatbuf_r+0x40>
 8004ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aba:	e00e      	b.n	8004ada <__swhatbuf_r+0x42>
 8004abc:	466a      	mov	r2, sp
 8004abe:	f000 f8bb 	bl	8004c38 <_fstat_r>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	dbf1      	blt.n	8004aaa <__swhatbuf_r+0x12>
 8004ac6:	9a01      	ldr	r2, [sp, #4]
 8004ac8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004acc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ad0:	425a      	negs	r2, r3
 8004ad2:	415a      	adcs	r2, r3
 8004ad4:	602a      	str	r2, [r5, #0]
 8004ad6:	e7ee      	b.n	8004ab6 <__swhatbuf_r+0x1e>
 8004ad8:	2340      	movs	r3, #64	; 0x40
 8004ada:	2000      	movs	r0, #0
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	b016      	add	sp, #88	; 0x58
 8004ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ae4 <__smakebuf_r>:
 8004ae4:	898b      	ldrh	r3, [r1, #12]
 8004ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ae8:	079d      	lsls	r5, r3, #30
 8004aea:	4606      	mov	r6, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	d507      	bpl.n	8004b00 <__smakebuf_r+0x1c>
 8004af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	2301      	movs	r3, #1
 8004afa:	6163      	str	r3, [r4, #20]
 8004afc:	b002      	add	sp, #8
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	ab01      	add	r3, sp, #4
 8004b02:	466a      	mov	r2, sp
 8004b04:	f7ff ffc8 	bl	8004a98 <__swhatbuf_r>
 8004b08:	9900      	ldr	r1, [sp, #0]
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f7ff fa57 	bl	8003fc0 <_malloc_r>
 8004b12:	b948      	cbnz	r0, 8004b28 <__smakebuf_r+0x44>
 8004b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b18:	059a      	lsls	r2, r3, #22
 8004b1a:	d4ef      	bmi.n	8004afc <__smakebuf_r+0x18>
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	e7e3      	b.n	8004af0 <__smakebuf_r+0xc>
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <__smakebuf_r+0x7c>)
 8004b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	6020      	str	r0, [r4, #0]
 8004b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b34:	81a3      	strh	r3, [r4, #12]
 8004b36:	9b00      	ldr	r3, [sp, #0]
 8004b38:	6163      	str	r3, [r4, #20]
 8004b3a:	9b01      	ldr	r3, [sp, #4]
 8004b3c:	6120      	str	r0, [r4, #16]
 8004b3e:	b15b      	cbz	r3, 8004b58 <__smakebuf_r+0x74>
 8004b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b44:	4630      	mov	r0, r6
 8004b46:	f000 f889 	bl	8004c5c <_isatty_r>
 8004b4a:	b128      	cbz	r0, 8004b58 <__smakebuf_r+0x74>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	89a0      	ldrh	r0, [r4, #12]
 8004b5a:	4305      	orrs	r5, r0
 8004b5c:	81a5      	strh	r5, [r4, #12]
 8004b5e:	e7cd      	b.n	8004afc <__smakebuf_r+0x18>
 8004b60:	08003dd9 	.word	0x08003dd9

08004b64 <__malloc_lock>:
 8004b64:	4801      	ldr	r0, [pc, #4]	; (8004b6c <__malloc_lock+0x8>)
 8004b66:	f7ff ba09 	b.w	8003f7c <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	20000124 	.word	0x20000124

08004b70 <__malloc_unlock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	; (8004b78 <__malloc_unlock+0x8>)
 8004b72:	f7ff ba04 	b.w	8003f7e <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000124 	.word	0x20000124

08004b7c <_free_r>:
 8004b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	d044      	beq.n	8004c0c <_free_r+0x90>
 8004b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b86:	9001      	str	r0, [sp, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b8e:	bfb8      	it	lt
 8004b90:	18e4      	addlt	r4, r4, r3
 8004b92:	f7ff ffe7 	bl	8004b64 <__malloc_lock>
 8004b96:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <_free_r+0x94>)
 8004b98:	9801      	ldr	r0, [sp, #4]
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	b933      	cbnz	r3, 8004bac <_free_r+0x30>
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	6014      	str	r4, [r2, #0]
 8004ba2:	b003      	add	sp, #12
 8004ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ba8:	f7ff bfe2 	b.w	8004b70 <__malloc_unlock>
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	d908      	bls.n	8004bc2 <_free_r+0x46>
 8004bb0:	6825      	ldr	r5, [r4, #0]
 8004bb2:	1961      	adds	r1, r4, r5
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	bf01      	itttt	eq
 8004bb8:	6819      	ldreq	r1, [r3, #0]
 8004bba:	685b      	ldreq	r3, [r3, #4]
 8004bbc:	1949      	addeq	r1, r1, r5
 8004bbe:	6021      	streq	r1, [r4, #0]
 8004bc0:	e7ed      	b.n	8004b9e <_free_r+0x22>
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	b10b      	cbz	r3, 8004bcc <_free_r+0x50>
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	d9fa      	bls.n	8004bc2 <_free_r+0x46>
 8004bcc:	6811      	ldr	r1, [r2, #0]
 8004bce:	1855      	adds	r5, r2, r1
 8004bd0:	42a5      	cmp	r5, r4
 8004bd2:	d10b      	bne.n	8004bec <_free_r+0x70>
 8004bd4:	6824      	ldr	r4, [r4, #0]
 8004bd6:	4421      	add	r1, r4
 8004bd8:	1854      	adds	r4, r2, r1
 8004bda:	42a3      	cmp	r3, r4
 8004bdc:	6011      	str	r1, [r2, #0]
 8004bde:	d1e0      	bne.n	8004ba2 <_free_r+0x26>
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	6053      	str	r3, [r2, #4]
 8004be6:	4421      	add	r1, r4
 8004be8:	6011      	str	r1, [r2, #0]
 8004bea:	e7da      	b.n	8004ba2 <_free_r+0x26>
 8004bec:	d902      	bls.n	8004bf4 <_free_r+0x78>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	6003      	str	r3, [r0, #0]
 8004bf2:	e7d6      	b.n	8004ba2 <_free_r+0x26>
 8004bf4:	6825      	ldr	r5, [r4, #0]
 8004bf6:	1961      	adds	r1, r4, r5
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	bf04      	itt	eq
 8004bfc:	6819      	ldreq	r1, [r3, #0]
 8004bfe:	685b      	ldreq	r3, [r3, #4]
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	bf04      	itt	eq
 8004c04:	1949      	addeq	r1, r1, r5
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	6054      	str	r4, [r2, #4]
 8004c0a:	e7ca      	b.n	8004ba2 <_free_r+0x26>
 8004c0c:	b003      	add	sp, #12
 8004c0e:	bd30      	pop	{r4, r5, pc}
 8004c10:	20000128 	.word	0x20000128

08004c14 <_read_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d07      	ldr	r5, [pc, #28]	; (8004c34 <_read_r+0x20>)
 8004c18:	4604      	mov	r4, r0
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	602a      	str	r2, [r5, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7fc f81a 	bl	8000c5c <_read>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_read_r+0x1e>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_read_r+0x1e>
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	20000130 	.word	0x20000130

08004c38 <_fstat_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d07      	ldr	r5, [pc, #28]	; (8004c58 <_fstat_r+0x20>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	f7fc f832 	bl	8000cae <_fstat>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	d102      	bne.n	8004c54 <_fstat_r+0x1c>
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	b103      	cbz	r3, 8004c54 <_fstat_r+0x1c>
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	bf00      	nop
 8004c58:	20000130 	.word	0x20000130

08004c5c <_isatty_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4d06      	ldr	r5, [pc, #24]	; (8004c78 <_isatty_r+0x1c>)
 8004c60:	2300      	movs	r3, #0
 8004c62:	4604      	mov	r4, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f7fc f831 	bl	8000cce <_isatty>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_isatty_r+0x1a>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_isatty_r+0x1a>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	20000130 	.word	0x20000130

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
