
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005858  08005858  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005860  08005860  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  080058d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080058d8  00020280  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b798  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  0002b836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002da78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002703c  00000000  00000000  0002e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad27  00000000  00000000  0005521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21a9  00000000  00000000  0005ff43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001520ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002494  00000000  00000000  0015213c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005658 	.word	0x08005658

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005658 	.word	0x08005658

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fe:	f3bf 8f6f 	isb	sy
}
 8000602:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <SCB_EnableICache+0x48>)
 8000606:	2200      	movs	r2, #0
 8000608:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <SCB_EnableICache+0x48>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <SCB_EnableICache+0x48>)
 800061e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000622:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000624:	f3bf 8f4f 	dsb	sy
}
 8000628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062a:	f3bf 8f6f 	isb	sy
}
 800062e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SCB_EnableDCache+0x84>)
 8000648:	2200      	movs	r2, #0
 800064a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <SCB_EnableDCache+0x84>)
 8000656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800065a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0b5b      	lsrs	r3, r3, #13
 8000660:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000664:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800066e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	015a      	lsls	r2, r3, #5
 8000674:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000678:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800067e:	4911      	ldr	r1, [pc, #68]	; (80006c4 <SCB_EnableDCache+0x84>)
 8000680:	4313      	orrs	r3, r2
 8000682:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1e5a      	subs	r2, r3, #1
 800068a:	60ba      	str	r2, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1ef      	bne.n	8000670 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	60fa      	str	r2, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1e5      	bne.n	8000666 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <SCB_EnableDCache+0x84>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <SCB_EnableDCache+0x84>)
 80006a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b2:	f3bf 8f6f 	isb	sy
}
 80006b6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <uart_print+0x2c>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 80006d8:	bf00      	nop
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <uart_print+0x2c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f9      	beq.n	80006da <uart_print+0x12>
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	40004800 	.word	0x40004800

080006f8 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b0d      	cmp	r3, #13
 8000706:	d002      	beq.n	800070e <char_is_endmessage+0x16>
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b0a      	cmp	r3, #10
 800070c:	d101      	bne.n	8000712 <char_is_endmessage+0x1a>
	{
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <char_is_endmessage+0x1c>
	}
	else return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <rx_has_data>:

// Reception
uint8_t rx_has_data()
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <rx_has_data+0x24>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <rx_has_data+0x28>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	429a      	cmp	r2, r3
 8000732:	d101      	bne.n	8000738 <rx_has_data+0x18>
	{
		return 0;
 8000734:	2300      	movs	r3, #0
 8000736:	e000      	b.n	800073a <rx_has_data+0x1a>
	}
	else return 1;
 8000738:	2301      	movs	r3, #1
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	2000014a 	.word	0x2000014a
 8000748:	2000014b 	.word	0x2000014b

0800074c <increase_rx_empty>:

void increase_rx_empty()
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	rx_empty++;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <increase_rx_empty+0x2c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <increase_rx_empty+0x2c>)
 800075c:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <increase_rx_empty+0x2c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b31      	cmp	r3, #49	; 0x31
 8000766:	d902      	bls.n	800076e <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <increase_rx_empty+0x2c>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	}
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	2000014a 	.word	0x2000014a

0800077c <increase_rx_busy>:

void increase_rx_busy()
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	rx_busy++;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <increase_rx_busy+0x2c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	3301      	adds	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <increase_rx_busy+0x2c>)
 800078c:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <increase_rx_busy+0x2c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b31      	cmp	r3, #49	; 0x31
 8000796:	d902      	bls.n	800079e <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <increase_rx_busy+0x2c>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
	}
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	2000014b 	.word	0x2000014b

080007ac <tx_has_data>:

// Transmission
uint8_t tx_has_data()
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <tx_has_data+0x24>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <tx_has_data+0x28>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	429a      	cmp	r2, r3
 80007be:	d101      	bne.n	80007c4 <tx_has_data+0x18>
	{
		return 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	e000      	b.n	80007c6 <tx_has_data+0x1a>
	}
	else return 1;
 80007c4:	2301      	movs	r3, #1
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	2000017e 	.word	0x2000017e
 80007d4:	2000017f 	.word	0x2000017f

080007d8 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	tx_busy++;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <increase_tx_busy+0x2c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <increase_tx_busy+0x2c>)
 80007e8:	701a      	strb	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <increase_tx_busy+0x2c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b31      	cmp	r3, #49	; 0x31
 80007f2:	d902      	bls.n	80007fa <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <increase_tx_busy+0x2c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	}
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	2000017f 	.word	0x2000017f

08000808 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <get_char+0x24>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <get_char+0x28>)
 8000818:	5c9b      	ldrb	r3, [r3, r2]
 800081a:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 800081c:	f7ff ffae 	bl	800077c <increase_rx_busy>
	return tmp;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000014b 	.word	0x2000014b
 8000830:	20000118 	.word	0x20000118

08000834 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000840:	e041      	b.n	80008c6 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <get_message+0xa8>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	461c      	mov	r4, r3
 8000848:	f7ff ffde 	bl	8000808 <get_char>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <get_message+0xac>)
 8000852:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <get_message+0xa8>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <get_message+0xac>)
 800085c:	5c9b      	ldrb	r3, [r3, r2]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff4a 	bl	80006f8 <char_is_endmessage>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d021      	beq.n	80008ae <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <get_message+0xa8>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <get_message+0xac>)
 8000872:	2100      	movs	r1, #0
 8000874:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e009      	b.n	8000890 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	440b      	add	r3, r1
 8000884:	4916      	ldr	r1, [pc, #88]	; (80008e0 <get_message+0xac>)
 8000886:	5c8a      	ldrb	r2, [r1, r2]
 8000888:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	3301      	adds	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	b29a      	uxth	r2, r3
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <get_message+0xa8>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d3ef      	bcc.n	800087c <get_message+0x48>
			}

			message_length = idx;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <get_message+0xa8>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <get_message+0xa8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	801a      	strh	r2, [r3, #0]
			return message_length;
 80008a8:	89bb      	ldrh	r3, [r7, #12]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	e011      	b.n	80008d2 <get_message+0x9e>
		}
		else
		{
			idx++;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <get_message+0xa8>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <get_message+0xa8>)
 80008b8:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <get_message+0xa8>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	2b32      	cmp	r3, #50	; 0x32
 80008c0:	d901      	bls.n	80008c6 <get_message+0x92>
 80008c2:	2300      	movs	r3, #0
 80008c4:	e005      	b.n	80008d2 <get_message+0x9e>
	while(rx_has_data() == 1)
 80008c6:	f7ff ff2b 	bl	8000720 <rx_has_data>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d0b8      	beq.n	8000842 <get_message+0xe>
		}
	}
	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000022e 	.word	0x2000022e
 80008e0:	20000230 	.word	0x20000230

080008e4 <send_response>:

// Send response from STM
void send_response(char *message, ...)
{
 80008e4:	b40f      	push	{r0, r1, r2, r3}
 80008e6:	b590      	push	{r4, r7, lr}
 80008e8:	b091      	sub	sp, #68	; 0x44
 80008ea:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 80008ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f0:	607b      	str	r3, [r7, #4]
	vsprintf(response, message, arglist);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 f9da 	bl	8004cb4 <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <send_response+0xc4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 8000908:	2300      	movs	r3, #0
 800090a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800090c:	e012      	b.n	8000934 <send_response+0x50>
	{
		tx_buffer[idx] = response[i];
 800090e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000910:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000912:	3240      	adds	r2, #64	; 0x40
 8000914:	443a      	add	r2, r7
 8000916:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 800091a:	4a24      	ldr	r2, [pc, #144]	; (80009ac <send_response+0xc8>)
 800091c:	54d1      	strb	r1, [r2, r3]
		idx++;
 800091e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000920:	3301      	adds	r3, #1
 8000922:	87fb      	strh	r3, [r7, #62]	; 0x3e

		if (idx >= BUFFER_LENGTH)
 8000924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000926:	2b31      	cmp	r3, #49	; 0x31
 8000928:	d901      	bls.n	800092e <send_response+0x4a>
			idx = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	for (uint16_t i=0; i<strlen(response); i++)
 800092e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000930:	3301      	adds	r3, #1
 8000932:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000934:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc80 	bl	8000240 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	429c      	cmp	r4, r3
 8000944:	d3e3      	bcc.n	800090e <send_response+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000946:	b672      	cpsid	i
}
 8000948:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 800094a:	f7ff ff2f 	bl	80007ac <tx_has_data>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d118      	bne.n	8000986 <send_response+0xa2>
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <send_response+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	2b80      	cmp	r3, #128	; 0x80
 8000960:	d111      	bne.n	8000986 <send_response+0xa2>
	{
		tx_empty = idx;
 8000962:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <send_response+0xc4>)
 8000968:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <send_response+0xd0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <send_response+0xc8>)
 8000974:	4413      	add	r3, r2
 8000976:	2201      	movs	r2, #1
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <send_response+0xcc>)
 800097c:	f002 fd50 	bl	8003420 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 8000980:	f7ff ff2a 	bl	80007d8 <increase_tx_busy>
 8000984:	e003      	b.n	800098e <send_response+0xaa>
	}
	else
		tx_empty = idx;
 8000986:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <send_response+0xc4>)
 800098c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800098e:	b662      	cpsie	i
}
 8000990:	bf00      	nop

	__enable_irq();

	// Wait after re-enabling interrupts
	HAL_Delay(5);
 8000992:	2005      	movs	r0, #5
 8000994:	f001 f816 	bl	80019c4 <HAL_Delay>
}
 8000998:	bf00      	nop
 800099a:	3744      	adds	r7, #68	; 0x44
 800099c:	46bd      	mov	sp, r7
 800099e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009a2:	b004      	add	sp, #16
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	2000017e 	.word	0x2000017e
 80009ac:	2000014c 	.word	0x2000014c
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	2000017f 	.word	0x2000017f

080009b8 <turn_on_led>:

void turn_on_led()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <turn_on_led+0x14>)
 80009c2:	f001 fbef 	bl	80021a4 <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40020400 	.word	0x40020400

080009d0 <turn_off_led>:

void turn_off_led()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <turn_off_led+0x14>)
 80009da:	f001 fbe3 	bl	80021a4 <HAL_GPIO_WritePin>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40020400 	.word	0x40020400

080009e8 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <calculate_delay+0x58>)
 80009f4:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	ee07 3a90 	vmov	s15, r3
 80009fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a00:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a08:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a14:	eeb0 0b47 	vmov.f64	d0, d7
 8000a18:	f004 fda6 	bl	8005568 <ceil>
 8000a1c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a24:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a30:	ee17 3a90 	vmov	r3, s15
 8000a34:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 8000a36:	897b      	ldrh	r3, [r7, #10]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	447a0000 	.word	0x447a0000

08000a44 <validate_command>:

uint8_t validate_command(char *single_command_message)
{
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b092      	sub	sp, #72	; 0x48
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	uint8_t command_valid = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Command template arrays
	char led_on[] = "LED[ON]";
 8000a52:	4a46      	ldr	r2, [pc, #280]	; (8000b6c <validate_command+0x128>)
 8000a54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a5c:	e883 0003 	stmia.w	r3, {r0, r1}
	char led_off[] = "LED[OFF]";
 8000a60:	4a43      	ldr	r2, [pc, #268]	; (8000b70 <validate_command+0x12c>)
 8000a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a68:	c303      	stmia	r3!, {r0, r1}
 8000a6a:	701a      	strb	r2, [r3, #0]
	char led_blink[] = "LED[BLINK,X]";
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <validate_command+0x130>)
 8000a6e:	f107 0420 	add.w	r4, r7, #32
 8000a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a74:	c407      	stmia	r4!, {r0, r1, r2}
 8000a76:	7023      	strb	r3, [r4, #0]
	char insert_delay[] = "INSERT[DELAY,XXXX]";
 8000a78:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <validate_command+0x134>)
 8000a7a:	f107 040c 	add.w	r4, r7, #12
 8000a7e:	461d      	mov	r5, r3
 8000a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	8022      	strh	r2, [r4, #0]
 8000a8a:	3402      	adds	r4, #2
 8000a8c:	0c1b      	lsrs	r3, r3, #16
 8000a8e:	7023      	strb	r3, [r4, #0]

	// Compare command with templates
	if (strncmp(single_command_message, led_on, sizeof(led_on)) == 0)
 8000a90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a94:	2208      	movs	r2, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f004 f854 	bl	8004b46 <strncmp>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d103      	bne.n	8000aac <validate_command+0x68>
	{
		command_valid = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000aaa:	e059      	b.n	8000b60 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_off, sizeof(led_off)) == 0)
 8000aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab0:	2209      	movs	r2, #9
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f004 f846 	bl	8004b46 <strncmp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d103      	bne.n	8000ac8 <validate_command+0x84>
	{
		command_valid = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ac6:	e04b      	b.n	8000b60 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_blink, sizeof(led_blink)-3) == 0)
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	220a      	movs	r2, #10
 8000ace:	4619      	mov	r1, r3
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f004 f838 	bl	8004b46 <strncmp>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d111      	bne.n	8000b00 <validate_command+0xbc>
	{
		if ((single_command_message[10] >= 0x30 && single_command_message[10] <= 0x39) && single_command[11] == ']')
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	330a      	adds	r3, #10
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ae4:	d93c      	bls.n	8000b60 <validate_command+0x11c>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	330a      	adds	r3, #10
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b39      	cmp	r3, #57	; 0x39
 8000aee:	d837      	bhi.n	8000b60 <validate_command+0x11c>
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <validate_command+0x138>)
 8000af2:	7adb      	ldrb	r3, [r3, #11]
 8000af4:	2b5d      	cmp	r3, #93	; 0x5d
 8000af6:	d133      	bne.n	8000b60 <validate_command+0x11c>
			command_valid = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000afe:	e02f      	b.n	8000b60 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, insert_delay, sizeof(insert_delay)-6) == 0)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	220d      	movs	r2, #13
 8000b06:	4619      	mov	r1, r3
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f004 f81c 	bl	8004b46 <strncmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d125      	bne.n	8000b60 <validate_command+0x11c>
	{
		for (uint8_t y=0; y<4; y++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000b1a:	e01d      	b.n	8000b58 <validate_command+0x114>
			if ((single_command_message[12+y] >= 0x30 && single_command_message[12+y] <= 0x39) && single_command[17] == ']')
 8000b1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000b20:	330c      	adds	r3, #12
 8000b22:	461a      	mov	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b2f      	cmp	r3, #47	; 0x2f
 8000b2c:	d90f      	bls.n	8000b4e <validate_command+0x10a>
 8000b2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000b32:	330c      	adds	r3, #12
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b39      	cmp	r3, #57	; 0x39
 8000b3e:	d806      	bhi.n	8000b4e <validate_command+0x10a>
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <validate_command+0x138>)
 8000b42:	7c5b      	ldrb	r3, [r3, #17]
 8000b44:	2b5d      	cmp	r3, #93	; 0x5d
 8000b46:	d102      	bne.n	8000b4e <validate_command+0x10a>
				command_valid = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for (uint8_t y=0; y<4; y++)
 8000b4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000b52:	3301      	adds	r3, #1
 8000b54:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000b58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d9dd      	bls.n	8000b1c <validate_command+0xd8>
	}

	return command_valid;
 8000b60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3748      	adds	r7, #72	; 0x48
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6c:	08005670 	.word	0x08005670
 8000b70:	08005678 	.word	0x08005678
 8000b74:	08005684 	.word	0x08005684
 8000b78:	08005694 	.word	0x08005694
 8000b7c:	200001f4 	.word	0x200001f4

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b0b0      	sub	sp, #192	; 0xc0
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b86:	f000 fd5d 	bl	8001644 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b8a:	f7ff fd33 	bl	80005f4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b8e:	f7ff fd57 	bl	8000640 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 feba 	bl	800190a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 fc29 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f000 fcb3 	bl	8001504 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b9e:	f000 fc81 	bl	80014a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	49ae      	ldr	r1, [pc, #696]	; (8000e60 <main+0x2e0>)
 8000ba6:	48af      	ldr	r0, [pc, #700]	; (8000e64 <main+0x2e4>)
 8000ba8:	f002 fc98 	bl	80034dc <HAL_UART_Receive_IT>
  __IO uint16_t param_length;
  static uint16_t command_length;

  // LED command parameters
  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000bac:	4aae      	ldr	r2, [pc, #696]	; (8000e68 <main+0x2e8>)
 8000bae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	8019      	strh	r1, [r3, #0]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	0c12      	lsrs	r2, r2, #16
 8000bbc:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 8000bbe:	4bab      	ldr	r3, [pc, #684]	; (8000e6c <main+0x2ec>)
 8000bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  char blink_cmd[] = "BLINK,";
 8000bc4:	4aaa      	ldr	r2, [pc, #680]	; (8000e70 <main+0x2f0>)
 8000bc6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bce:	6018      	str	r0, [r3, #0]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	8019      	strh	r1, [r3, #0]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	0c0a      	lsrs	r2, r1, #16
 8000bd8:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 8000bda:	4aa6      	ldr	r2, [pc, #664]	; (8000e74 <main+0x2f4>)
 8000bdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000be0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be4:	6018      	str	r0, [r3, #0]
 8000be6:	3304      	adds	r3, #4
 8000be8:	8019      	strh	r1, [r3, #0]
 8000bea:	3302      	adds	r3, #2
 8000bec:	0c0a      	lsrs	r2, r1, #16
 8000bee:	701a      	strb	r2, [r3, #0]

  // Error messages
  char invalid_command[] = "Error: Command not found\r\n";
 8000bf0:	4ba1      	ldr	r3, [pc, #644]	; (8000e78 <main+0x2f8>)
 8000bf2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c00:	c403      	stmia	r4!, {r0, r1}
 8000c02:	8022      	strh	r2, [r4, #0]
 8000c04:	3402      	adds	r4, #2
 8000c06:	0c13      	lsrs	r3, r2, #16
 8000c08:	7023      	strb	r3, [r4, #0]
  char missing_separator[] = "Error: No command separator found\r\n";
 8000c0a:	4b9c      	ldr	r3, [pc, #624]	; (8000e7c <main+0x2fc>)
 8000c0c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000c10:	461d      	mov	r5, r3
 8000c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	6023      	str	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000c1e:	4b90      	ldr	r3, [pc, #576]	; (8000e60 <main+0x2e0>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b0a      	cmp	r3, #10
 8000c24:	d003      	beq.n	8000c2e <main+0xae>
 8000c26:	4b8e      	ldr	r3, [pc, #568]	; (8000e60 <main+0x2e0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b0d      	cmp	r3, #13
 8000c2c:	d106      	bne.n	8000c3c <main+0xbc>
	{
		message_length = get_message(message);
 8000c2e:	4894      	ldr	r0, [pc, #592]	; (8000e80 <main+0x300>)
 8000c30:	f7ff fe00 	bl	8000834 <get_message>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b92      	ldr	r3, [pc, #584]	; (8000e84 <main+0x304>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000c3c:	4b91      	ldr	r3, [pc, #580]	; (8000e84 <main+0x304>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 839b 	beq.w	800137e <main+0x7fe>
	{
		for (uint8_t i=0; i<message_length; i++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8000c4e:	e38e      	b.n	800136e <main+0x7ee>
		{
			// Check for command separator character
			command_separator = strchr(message, ';');
 8000c50:	213b      	movs	r1, #59	; 0x3b
 8000c52:	488b      	ldr	r0, [pc, #556]	; (8000e80 <main+0x300>)
 8000c54:	f003 ff6a 	bl	8004b2c <strchr>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a8b      	ldr	r2, [pc, #556]	; (8000e88 <main+0x308>)
 8000c5c:	6013      	str	r3, [r2, #0]

			// If separator char was not found
			if (command_separator == NULL)
 8000c5e:	4b8a      	ldr	r3, [pc, #552]	; (8000e88 <main+0x308>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d111      	bne.n	8000c8a <main+0x10a>
			{
				while (i < message_length)
 8000c66:	e004      	b.n	8000c72 <main+0xf2>
					i++;
 8000c68:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (i < message_length)
 8000c72:	4b84      	ldr	r3, [pc, #528]	; (8000e84 <main+0x304>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3f3      	bcc.n	8000c68 <main+0xe8>
				send_response(missing_separator);
 8000c80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fe2d 	bl	80008e4 <send_response>
			}

			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000c8a:	4b80      	ldr	r3, [pc, #512]	; (8000e8c <main+0x30c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d105      	bne.n	8000ca0 <main+0x120>
 8000c94:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000c98:	4a79      	ldr	r2, [pc, #484]	; (8000e80 <main+0x300>)
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	2b4c      	cmp	r3, #76	; 0x4c
 8000c9e:	d00a      	beq.n	8000cb6 <main+0x136>
 8000ca0:	4b7a      	ldr	r3, [pc, #488]	; (8000e8c <main+0x30c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d109      	bne.n	8000cbe <main+0x13e>
 8000caa:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000cae:	4a74      	ldr	r2, [pc, #464]	; (8000e80 <main+0x300>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	2b49      	cmp	r3, #73	; 0x49
 8000cb4:	d103      	bne.n	8000cbe <main+0x13e>
				sw_state = 1;
 8000cb6:	4b75      	ldr	r3, [pc, #468]	; (8000e8c <main+0x30c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e019      	b.n	8000cf2 <main+0x172>
			else if (sw_state == 0 && (message[i] != ';' && message[i] != '#' && message[i] != ','))
 8000cbe:	4b73      	ldr	r3, [pc, #460]	; (8000e8c <main+0x30c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d114      	bne.n	8000cf2 <main+0x172>
 8000cc8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ccc:	4a6c      	ldr	r2, [pc, #432]	; (8000e80 <main+0x300>)
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	2b3b      	cmp	r3, #59	; 0x3b
 8000cd2:	d00e      	beq.n	8000cf2 <main+0x172>
 8000cd4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000cd8:	4a69      	ldr	r2, [pc, #420]	; (8000e80 <main+0x300>)
 8000cda:	5cd3      	ldrb	r3, [r2, r3]
 8000cdc:	2b23      	cmp	r3, #35	; 0x23
 8000cde:	d008      	beq.n	8000cf2 <main+0x172>
 8000ce0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ce4:	4a66      	ldr	r2, [pc, #408]	; (8000e80 <main+0x300>)
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	2b2c      	cmp	r3, #44	; 0x2c
 8000cea:	d002      	beq.n	8000cf2 <main+0x172>
				error_found = 1;
 8000cec:	4b68      	ldr	r3, [pc, #416]	; (8000e90 <main+0x310>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <main+0x30c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	f200 82ce 	bhi.w	800129c <main+0x71c>
 8000d00:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <main+0x188>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000d1d 	.word	0x08000d1d
 8000d0c:	08000db3 	.word	0x08000db3
 8000d10:	08000df3 	.word	0x08000df3
 8000d14:	08000e33 	.word	0x08000e33
 8000d18:	08000f09 	.word	0x08000f09
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000d1c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a57      	ldr	r2, [pc, #348]	; (8000e80 <main+0x300>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	2b45      	cmp	r3, #69	; 0x45
 8000d28:	d10f      	bne.n	8000d4a <main+0x1ca>
 8000d2a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d2e:	3302      	adds	r3, #2
 8000d30:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <main+0x300>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	2b44      	cmp	r3, #68	; 0x44
 8000d36:	d108      	bne.n	8000d4a <main+0x1ca>
				{
					i = i+2;
 8000d38:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000d42:	4b52      	ldr	r3, [pc, #328]	; (8000e8c <main+0x30c>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e032      	b.n	8000db0 <main+0x230>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 8000d4a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a4b      	ldr	r2, [pc, #300]	; (8000e80 <main+0x300>)
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	2b4e      	cmp	r3, #78	; 0x4e
 8000d56:	d124      	bne.n	8000da2 <main+0x222>
 8000d58:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <main+0x300>)
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	2b53      	cmp	r3, #83	; 0x53
 8000d64:	d11d      	bne.n	8000da2 <main+0x222>
 8000d66:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <main+0x300>)
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	2b45      	cmp	r3, #69	; 0x45
 8000d72:	d116      	bne.n	8000da2 <main+0x222>
 8000d74:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d78:	3304      	adds	r3, #4
 8000d7a:	4a41      	ldr	r2, [pc, #260]	; (8000e80 <main+0x300>)
 8000d7c:	5cd3      	ldrb	r3, [r2, r3]
 8000d7e:	2b52      	cmp	r3, #82	; 0x52
 8000d80:	d10f      	bne.n	8000da2 <main+0x222>
 8000d82:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d86:	3305      	adds	r3, #5
 8000d88:	4a3d      	ldr	r2, [pc, #244]	; (8000e80 <main+0x300>)
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	2b54      	cmp	r3, #84	; 0x54
 8000d8e:	d108      	bne.n	8000da2 <main+0x222>
				{
					i = i+5;
 8000d90:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d94:	3305      	adds	r3, #5
 8000d96:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <main+0x30c>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e006      	b.n	8000db0 <main+0x230>
				}
				else
				{
					error_found = 1;
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <main+0x310>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <main+0x30c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000dae:	e275      	b.n	800129c <main+0x71c>
 8000db0:	e274      	b.n	800129c <main+0x71c>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000db2:	215b      	movs	r1, #91	; 0x5b
 8000db4:	4832      	ldr	r0, [pc, #200]	; (8000e80 <main+0x300>)
 8000db6:	f003 feb9 	bl	8004b2c <strchr>
 8000dba:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10b      	bne.n	8000dde <main+0x25e>
				{
					i = i+1;
 8000dc6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <main+0x310>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <main+0x30c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000ddc:	e25e      	b.n	800129c <main+0x71c>
					open_idx = (uint16_t)(open_bracket - message);
 8000dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000de2:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <main+0x300>)
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
					sw_state = 3;
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <main+0x30c>)
 8000dec:	2203      	movs	r2, #3
 8000dee:	701a      	strb	r2, [r3, #0]
				break;
 8000df0:	e254      	b.n	800129c <main+0x71c>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000df2:	215d      	movs	r1, #93	; 0x5d
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <main+0x300>)
 8000df6:	f003 fe99 	bl	8004b2c <strchr>
 8000dfa:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10b      	bne.n	8000e1e <main+0x29e>
				{
					i = i+1;
 8000e06:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <main+0x310>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <main+0x30c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000e1c:	e23e      	b.n	800129c <main+0x71c>
					close_idx = (uint16_t)(close_bracket - message);
 8000e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <main+0x300>)
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
					sw_state = 4;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <main+0x30c>)
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	701a      	strb	r2, [r3, #0]
				break;
 8000e30:	e234      	b.n	800129c <main+0x71c>

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000e32:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8000e36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <main+0x314>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000e56:	3301      	adds	r3, #1
 8000e58:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000e5c:	e03f      	b.n	8000ede <main+0x35e>
 8000e5e:	bf00      	nop
 8000e60:	20000114 	.word	0x20000114
 8000e64:	2000008c 	.word	0x2000008c
 8000e68:	080056a8 	.word	0x080056a8
 8000e6c:	0046464f 	.word	0x0046464f
 8000e70:	080056ac 	.word	0x080056ac
 8000e74:	080056b4 	.word	0x080056b4
 8000e78:	080056bc 	.word	0x080056bc
 8000e7c:	080056d8 	.word	0x080056d8
 8000e80:	20000180 	.word	0x20000180
 8000e84:	200001b2 	.word	0x200001b2
 8000e88:	20000228 	.word	0x20000228
 8000e8c:	200001b3 	.word	0x200001b3
 8000e90:	2000022c 	.word	0x2000022c
 8000e94:	20000262 	.word	0x20000262
				{
					command[j] = message[y];
 8000e98:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8000e9c:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000ea0:	49af      	ldr	r1, [pc, #700]	; (8001160 <main+0x5e0>)
 8000ea2:	5c8a      	ldrb	r2, [r1, r2]
 8000ea4:	33c0      	adds	r3, #192	; 0xc0
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f803 2cbc 	strb.w	r2, [r3, #-188]
					temp_command[j] = command[j];
 8000eac:	f897 20ba 	ldrb.w	r2, [r7, #186]	; 0xba
 8000eb0:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000eb4:	32c0      	adds	r2, #192	; 0xc0
 8000eb6:	443a      	add	r2, r7
 8000eb8:	f812 1cbc 	ldrb.w	r1, [r2, #-188]
 8000ebc:	4aa9      	ldr	r2, [pc, #676]	; (8001164 <main+0x5e4>)
 8000ebe:	54d1      	strb	r1, [r2, r3]
					j++;
 8000ec0:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
					command_length = j;
 8000eca:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4ba5      	ldr	r3, [pc, #660]	; (8001168 <main+0x5e8>)
 8000ed2:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000ed4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000ede:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8000ee2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d3d6      	bcc.n	8000e98 <main+0x318>
				}

				if (command_length == param_length)
 8000eea:	4b9f      	ldr	r3, [pc, #636]	; (8001168 <main+0x5e8>)
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d103      	bne.n	8000f00 <main+0x380>
					sw_state = 5;
 8000ef8:	4b9c      	ldr	r3, [pc, #624]	; (800116c <main+0x5ec>)
 8000efa:	2205      	movs	r2, #5
 8000efc:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 8000efe:	e1cd      	b.n	800129c <main+0x71c>
					sw_state = 0;
 8000f00:	4b9a      	ldr	r3, [pc, #616]	; (800116c <main+0x5ec>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
				break;
 8000f06:	e1c9      	b.n	800129c <main+0x71c>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 8000f08:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a94      	ldr	r2, [pc, #592]	; (8001160 <main+0x5e0>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	2b3b      	cmp	r3, #59	; 0x3b
 8000f14:	d008      	beq.n	8000f28 <main+0x3a8>
				{
					send_response(missing_separator);
 8000f16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fce2 	bl	80008e4 <send_response>
					sw_state = 0;
 8000f20:	4b92      	ldr	r3, [pc, #584]	; (800116c <main+0x5ec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
					break;
 8000f26:	e1b9      	b.n	800129c <main+0x71c>
				}

				// Print executed command
				char CMD[] = "COMMAND: ";
 8000f28:	4a91      	ldr	r2, [pc, #580]	; (8001170 <main+0x5f0>)
 8000f2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f30:	c303      	stmia	r3!, {r0, r1}
 8000f32:	801a      	strh	r2, [r3, #0]
				char NEWLINE[] = "\r\n";
 8000f34:	4a8f      	ldr	r2, [pc, #572]	; (8001174 <main+0x5f4>)
 8000f36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	8019      	strh	r1, [r3, #0]
 8000f40:	3302      	adds	r3, #2
 8000f42:	0c12      	lsrs	r2, r2, #16
 8000f44:	701a      	strb	r2, [r3, #0]

				send_response(CMD);
 8000f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fcca 	bl	80008e4 <send_response>
				send_response(temp_command);
 8000f50:	4884      	ldr	r0, [pc, #528]	; (8001164 <main+0x5e4>)
 8000f52:	f7ff fcc7 	bl	80008e4 <send_response>
				send_response(NEWLINE);
 8000f56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fcc2 	bl	80008e4 <send_response>

				// Clear temp array
				for (uint8_t y=0; y<command_length; y++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8000f66:	e009      	b.n	8000f7c <main+0x3fc>
					temp_command[y] = '\0';
 8000f68:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000f6c:	4a7d      	ldr	r2, [pc, #500]	; (8001164 <main+0x5e4>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<command_length; y++)
 8000f72:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000f76:	3301      	adds	r3, #1
 8000f78:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8000f7c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b79      	ldr	r3, [pc, #484]	; (8001168 <main+0x5e8>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3ee      	bcc.n	8000f68 <main+0x3e8>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 8000f8a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 8000f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f94:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fdd3 	bl	8004b46 <strncmp>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d13b      	bne.n	800101e <main+0x49e>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<7; y++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8000fac:	e010      	b.n	8000fd0 <main+0x450>
						single_command[y] = message[close_idx-6+y];
 8000fae:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000fb2:	1f9a      	subs	r2, r3, #6
 8000fb4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8000fb8:	441a      	add	r2, r3
 8000fba:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8000fbe:	4968      	ldr	r1, [pc, #416]	; (8001160 <main+0x5e0>)
 8000fc0:	5c89      	ldrb	r1, [r1, r2]
 8000fc2:	4a6d      	ldr	r2, [pc, #436]	; (8001178 <main+0x5f8>)
 8000fc4:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<7; y++)
 8000fc6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8000fd0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d9ea      	bls.n	8000fae <main+0x42e>

					// Validate last command
					temp_check = validate_command(single_command);
 8000fd8:	4867      	ldr	r0, [pc, #412]	; (8001178 <main+0x5f8>)
 8000fda:	f7ff fd33 	bl	8000a44 <validate_command>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b66      	ldr	r3, [pc, #408]	; (800117c <main+0x5fc>)
 8000fe4:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8000fe6:	4b65      	ldr	r3, [pc, #404]	; (800117c <main+0x5fc>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10f      	bne.n	8001010 <main+0x490>
					{
						i = i+param_length;
 8000ff0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <main+0x600>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]

						// Turn on LED
						led_action = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 800100e:	e120      	b.n	8001252 <main+0x6d2>
					}
					else
					{
						error_found = 1;
 8001010:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <main+0x600>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001016:	4b55      	ldr	r3, [pc, #340]	; (800116c <main+0x5ec>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e119      	b.n	8001252 <main+0x6d2>
					}
				}
				else if (strncmp(command, off_cmd, len) == 0)
 800101e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001020:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fd8d 	bl	8004b46 <strncmp>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d13b      	bne.n	80010aa <main+0x52a>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<8; y++)
 8001032:	2300      	movs	r3, #0
 8001034:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8001038:	e010      	b.n	800105c <main+0x4dc>
						single_command[y] = message[close_idx-7+y];
 800103a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800103e:	1fda      	subs	r2, r3, #7
 8001040:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001044:	441a      	add	r2, r3
 8001046:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800104a:	4945      	ldr	r1, [pc, #276]	; (8001160 <main+0x5e0>)
 800104c:	5c89      	ldrb	r1, [r1, r2]
 800104e:	4a4a      	ldr	r2, [pc, #296]	; (8001178 <main+0x5f8>)
 8001050:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<8; y++)
 8001052:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001056:	3301      	adds	r3, #1
 8001058:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800105c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001060:	2b07      	cmp	r3, #7
 8001062:	d9ea      	bls.n	800103a <main+0x4ba>

					// Validate last command
					temp_check = validate_command(single_command);
 8001064:	4844      	ldr	r0, [pc, #272]	; (8001178 <main+0x5f8>)
 8001066:	f7ff fced 	bl	8000a44 <validate_command>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b43      	ldr	r3, [pc, #268]	; (800117c <main+0x5fc>)
 8001070:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001072:	4b42      	ldr	r3, [pc, #264]	; (800117c <main+0x5fc>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10f      	bne.n	800109c <main+0x51c>
					{
						i = i+param_length;
 800107c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001080:	b29b      	uxth	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001088:	4413      	add	r3, r2
 800108a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 800108e:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <main+0x600>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]

						// Turn off LED
						led_action = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 800109a:	e0da      	b.n	8001252 <main+0x6d2>
					}
					else
					{
						error_found = 1;
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <main+0x600>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <main+0x5ec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e0d3      	b.n	8001252 <main+0x6d2>
					}
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 80010aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ac:	1e5a      	subs	r2, r3, #1
 80010ae:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fd46 	bl	8004b46 <strncmp>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d13f      	bne.n	8001140 <main+0x5c0>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<12; y++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80010c6:	e011      	b.n	80010ec <main+0x56c>
						single_command[y] = message[close_idx-11+y];
 80010c8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80010cc:	f1a3 020b 	sub.w	r2, r3, #11
 80010d0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80010d4:	441a      	add	r2, r3
 80010d6:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80010da:	4921      	ldr	r1, [pc, #132]	; (8001160 <main+0x5e0>)
 80010dc:	5c89      	ldrb	r1, [r1, r2]
 80010de:	4a26      	ldr	r2, [pc, #152]	; (8001178 <main+0x5f8>)
 80010e0:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<12; y++)
 80010e2:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80010e6:	3301      	adds	r3, #1
 80010e8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80010ec:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80010f0:	2b0b      	cmp	r3, #11
 80010f2:	d9e9      	bls.n	80010c8 <main+0x548>

					// Validate last command
					temp_check = validate_command(single_command);
 80010f4:	4820      	ldr	r0, [pc, #128]	; (8001178 <main+0x5f8>)
 80010f6:	f7ff fca5 	bl	8000a44 <validate_command>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <main+0x5fc>)
 8001100:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <main+0x5fc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d112      	bne.n	8001132 <main+0x5b2>
					{
						i = i+param_length;
 800110c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2da      	uxtb	r2, r3
 8001114:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001118:	4413      	add	r3, r2
 800111a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <main+0x600>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]

						// Enable LED blink
						blink_setup = 1;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <main+0x604>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001130:	e08f      	b.n	8001252 <main+0x6d2>
					}
					else
					{
						error_found = 1;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <main+0x600>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <main+0x5ec>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e088      	b.n	8001252 <main+0x6d2>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 8001140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001142:	1f1a      	subs	r2, r3, #4
 8001144:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fcfb 	bl	8004b46 <strncmp>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d17d      	bne.n	8001252 <main+0x6d2>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 8001156:	2300      	movs	r3, #0
 8001158:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800115c:	e039      	b.n	80011d2 <main+0x652>
 800115e:	bf00      	nop
 8001160:	20000180 	.word	0x20000180
 8001164:	200001c0 	.word	0x200001c0
 8001168:	20000262 	.word	0x20000262
 800116c:	200001b3 	.word	0x200001b3
 8001170:	080056fc 	.word	0x080056fc
 8001174:	08005708 	.word	0x08005708
 8001178:	200001f4 	.word	0x200001f4
 800117c:	2000022d 	.word	0x2000022d
 8001180:	2000022c 	.word	0x2000022c
 8001184:	200001b4 	.word	0x200001b4
						if (message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39)
 8001188:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800118c:	1f1a      	subs	r2, r3, #4
 800118e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001192:	4413      	add	r3, r2
 8001194:	4a89      	ldr	r2, [pc, #548]	; (80013bc <main+0x83c>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	2b2f      	cmp	r3, #47	; 0x2f
 800119a:	d91e      	bls.n	80011da <main+0x65a>
 800119c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80011a0:	1f1a      	subs	r2, r3, #4
 80011a2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011a6:	4413      	add	r3, r2
 80011a8:	4a84      	ldr	r2, [pc, #528]	; (80013bc <main+0x83c>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	2b39      	cmp	r3, #57	; 0x39
 80011ae:	d814      	bhi.n	80011da <main+0x65a>
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 80011b0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80011b4:	1f1a      	subs	r2, r3, #4
 80011b6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011ba:	441a      	add	r2, r3
 80011bc:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011c0:	497e      	ldr	r1, [pc, #504]	; (80013bc <main+0x83c>)
 80011c2:	5c89      	ldrb	r1, [r1, r2]
 80011c4:	4a7e      	ldr	r2, [pc, #504]	; (80013c0 <main+0x840>)
 80011c6:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<4; y++)
 80011c8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011cc:	3301      	adds	r3, #1
 80011ce:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80011d2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d9d6      	bls.n	8001188 <main+0x608>
						else
							break;

					// Store last command in a separate array
					for (uint8_t y=0; y<18; y++)
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 80011e0:	e011      	b.n	8001206 <main+0x686>
						single_command[y] = message[close_idx-17+y];
 80011e2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80011e6:	f1a3 0211 	sub.w	r2, r3, #17
 80011ea:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80011ee:	441a      	add	r2, r3
 80011f0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80011f4:	4971      	ldr	r1, [pc, #452]	; (80013bc <main+0x83c>)
 80011f6:	5c89      	ldrb	r1, [r1, r2]
 80011f8:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <main+0x844>)
 80011fa:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<18; y++)
 80011fc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001200:	3301      	adds	r3, #1
 8001202:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8001206:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800120a:	2b11      	cmp	r3, #17
 800120c:	d9e9      	bls.n	80011e2 <main+0x662>

					// Validate last command
					temp_check = validate_command(single_command);
 800120e:	486d      	ldr	r0, [pc, #436]	; (80013c4 <main+0x844>)
 8001210:	f7ff fc18 	bl	8000a44 <validate_command>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <main+0x848>)
 800121a:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 800121c:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <main+0x848>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10f      	bne.n	8001246 <main+0x6c6>
					{
						i = i+param_length;
 8001226:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800122a:	b29b      	uxth	r3, r3
 800122c:	b2da      	uxtb	r2, r3
 800122e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001232:	4413      	add	r3, r2
 8001234:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001238:	4b64      	ldr	r3, [pc, #400]	; (80013cc <main+0x84c>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]

						// Enable the delay
						led_action = 3;
 800123e:	2303      	movs	r3, #3
 8001240:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001244:	e005      	b.n	8001252 <main+0x6d2>
					}
					else
					{
						error_found = 1;
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <main+0x84c>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 800124c:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <main+0x850>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
					}
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 8001252:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001256:	4a59      	ldr	r2, [pc, #356]	; (80013bc <main+0x83c>)
 8001258:	2123      	movs	r1, #35	; 0x23
 800125a:	54d1      	strb	r1, [r2, r3]
				message[close_idx] = '#';
 800125c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001260:	4a56      	ldr	r2, [pc, #344]	; (80013bc <main+0x83c>)
 8001262:	2123      	movs	r1, #35	; 0x23
 8001264:	54d1      	strb	r1, [r2, r3]

				// Clear the single_command array
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 8001266:	2300      	movs	r3, #0
 8001268:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 800126c:	e009      	b.n	8001282 <main+0x702>
					single_command[y] = '\0';
 800126e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001272:	4a54      	ldr	r2, [pc, #336]	; (80013c4 <main+0x844>)
 8001274:	2100      	movs	r1, #0
 8001276:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 8001278:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800127c:	3301      	adds	r3, #1
 800127e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8001282:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001286:	2b31      	cmp	r3, #49	; 0x31
 8001288:	d9f1      	bls.n	800126e <main+0x6ee>

				// Reset sw_state
				i = i-1;
 800128a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800128e:	3b01      	subs	r3, #1
 8001290:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				sw_state = 0;
 8001294:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <main+0x850>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
				break;
 800129a:	bf00      	nop
			} /* sw_state switch end */

			// Display error alert
			if (error_found == 1)
 800129c:	4b4b      	ldr	r3, [pc, #300]	; (80013cc <main+0x84c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d119      	bne.n	80012da <main+0x75a>
			{
				while (message[i] != ';')
 80012a6:	e004      	b.n	80012b2 <main+0x732>
					i++;
 80012a8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80012ac:	3301      	adds	r3, #1
 80012ae:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (message[i] != ';')
 80012b2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80012b6:	4a41      	ldr	r2, [pc, #260]	; (80013bc <main+0x83c>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
 80012ba:	2b3b      	cmp	r3, #59	; 0x3b
 80012bc:	d1f4      	bne.n	80012a8 <main+0x728>
				if (message[i] == ';')
 80012be:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80012c2:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <main+0x83c>)
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
 80012c6:	2b3b      	cmp	r3, #59	; 0x3b
 80012c8:	d104      	bne.n	80012d4 <main+0x754>
					send_response(invalid_command);
 80012ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb08 	bl	80008e4 <send_response>
				error_found = 0;
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <main+0x84c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
			}

			// Diode control switch
			switch (led_action)
 80012da:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d83f      	bhi.n	8001364 <main+0x7e4>
 80012e4:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <main+0x76c>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	080012fd 	.word	0x080012fd
 80012f0:	08001303 	.word	0x08001303
 80012f4:	08001309 	.word	0x08001309
 80012f8:	08001353 	.word	0x08001353
			{
			case 0:
				// Turn off LED
				turn_off_led();
 80012fc:	f7ff fb68 	bl	80009d0 <turn_off_led>
				break;
 8001300:	e030      	b.n	8001364 <main+0x7e4>

			case 1:
				// Turn on LED
				turn_on_led();
 8001302:	f7ff fb59 	bl	80009b8 <turn_on_led>
				break;
 8001306:	e02d      	b.n	8001364 <main+0x7e4>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <main+0x854>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d127      	bne.n	8001362 <main+0x7e2>
				{
					delay = message[close_idx-1] - '0';
 8001312:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001316:	3b01      	subs	r3, #1
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <main+0x83c>)
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	3b30      	subs	r3, #48	; 0x30
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <main+0x858>)
 8001322:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <main+0x858>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <main+0x7b6>
						blink_ms = 0;
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <main+0x85c>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
 8001334:	e009      	b.n	800134a <main+0x7ca>
					else
						blink_ms = calculate_delay(delay);
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <main+0x858>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fb53 	bl	80009e8 <calculate_delay>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <main+0x85c>)
 8001348:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <main+0x854>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001350:	e007      	b.n	8001362 <main+0x7e2>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 8001352:	481b      	ldr	r0, [pc, #108]	; (80013c0 <main+0x840>)
 8001354:	f003 fbb3 	bl	8004abe <atoi>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <main+0x860>)
 800135e:	801a      	strh	r2, [r3, #0]
				break;
 8001360:	e000      	b.n	8001364 <main+0x7e4>
				break;
 8001362:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8001364:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001368:	3301      	adds	r3, #1
 800136a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <main+0x864>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8001378:	429a      	cmp	r2, r3
 800137a:	f4ff ac69 	bcc.w	8000c50 <main+0xd0>
		} /* for loop end */
	} /* if statement end */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (blink_ms != 0 && (led_action == 2 || led_action == 3))
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <main+0x85c>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <main+0x830>
 8001388:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d004      	beq.n	800139c <main+0x81c>
 8001392:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b03      	cmp	r3, #3
 800139a:	d109      	bne.n	80013b0 <main+0x830>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <main+0x868>)
 80013a0:	f000 ff19 	bl	80021d6 <HAL_GPIO_TogglePin>
		HAL_Delay(blink_ms);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <main+0x85c>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fb0a 	bl	80019c4 <HAL_Delay>
	}

	// Start the delay
	HAL_Delay(loop_delay);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <main+0x860>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fb05 	bl	80019c4 <HAL_Delay>
	if (character == '\n' || character == '\r')
 80013ba:	e430      	b.n	8000c1e <main+0x9e>
 80013bc:	20000180 	.word	0x20000180
 80013c0:	200001bc 	.word	0x200001bc
 80013c4:	200001f4 	.word	0x200001f4
 80013c8:	2000022d 	.word	0x2000022d
 80013cc:	2000022c 	.word	0x2000022c
 80013d0:	200001b3 	.word	0x200001b3
 80013d4:	200001b4 	.word	0x200001b4
 80013d8:	200001b5 	.word	0x200001b5
 80013dc:	200001b6 	.word	0x200001b6
 80013e0:	200001b8 	.word	0x200001b8
 80013e4:	200001b2 	.word	0x200001b2
 80013e8:	40020400 	.word	0x40020400

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	2234      	movs	r2, #52	; 0x34
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fb8e 	bl	8004b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <SystemClock_Config+0xb0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <SystemClock_Config+0xb0>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <SystemClock_Config+0xb0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <SystemClock_Config+0xb4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <SystemClock_Config+0xb4>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <SystemClock_Config+0xb4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144c:	2310      	movs	r3, #16
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001450:	2300      	movs	r3, #0
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fed7 	bl	800220c <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001464:	f000 f91a 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f001 f970 	bl	8002768 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800148e:	f000 f905 	bl	800169c <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	; 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <MX_USART3_UART_Init+0x5c>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_USART3_UART_Init+0x58>)
 80014e8:	f001 ff4c 	bl	8003384 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014f2:	f000 f8d3 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000008c 	.word	0x2000008c
 8001500:	40004800 	.word	0x40004800

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_GPIO_Init+0x8c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <MX_GPIO_Init+0x8c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_GPIO_Init+0x8c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_GPIO_Init+0x8c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <MX_GPIO_Init+0x8c>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_GPIO_Init+0x8c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_GPIO_Init+0x8c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <MX_GPIO_Init+0x8c>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_GPIO_Init+0x8c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <MX_GPIO_Init+0x90>)
 8001568:	f000 fe1c 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4619      	mov	r1, r3
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_GPIO_Init+0x90>)
 8001584:	f000 fc62 	bl	8001e4c <HAL_GPIO_Init>

}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400

08001598 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Reception callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_RxCpltCallback+0x44>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff f88f 	bl	80006c8 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <HAL_UART_RxCpltCallback+0x48>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d10e      	bne.n	80015d2 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_UART_RxCpltCallback+0x4c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_UART_RxCpltCallback+0x44>)
 80015be:	7819      	ldrb	r1, [r3, #0]
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_UART_RxCpltCallback+0x50>)
 80015c2:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 80015c4:	f7ff f8c2 	bl	800074c <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	4904      	ldr	r1, [pc, #16]	; (80015dc <HAL_UART_RxCpltCallback+0x44>)
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <HAL_UART_RxCpltCallback+0x54>)
 80015ce:	f001 ff85 	bl	80034dc <HAL_UART_Receive_IT>
	}
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000114 	.word	0x20000114
 80015e0:	40004800 	.word	0x40004800
 80015e4:	2000014a 	.word	0x2000014a
 80015e8:	20000118 	.word	0x20000118
 80015ec:	2000008c 	.word	0x2000008c

080015f0 <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_UART_TxCpltCallback+0x44>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d113      	bne.n	800162a <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 8001602:	f7ff f8d3 	bl	80007ac <tx_has_data>
 8001606:	4603      	mov	r3, r0
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10e      	bne.n	800162a <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_UART_TxCpltCallback+0x48>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_UART_TxCpltCallback+0x4c>)
 8001616:	5c9a      	ldrb	r2, [r3, r2]
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_UART_TxCpltCallback+0x50>)
 800161a:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 800161c:	f7ff f8dc 	bl	80007d8 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	4907      	ldr	r1, [pc, #28]	; (8001640 <HAL_UART_TxCpltCallback+0x50>)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f001 fefb 	bl	8003420 <HAL_UART_Transmit_IT>
		}
	}
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004800 	.word	0x40004800
 8001638:	2000017f 	.word	0x2000017f
 800163c:	2000014c 	.word	0x2000014c
 8001640:	20000264 	.word	0x20000264

08001644 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800164a:	463b      	mov	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001656:	f000 faeb 	bl	8001c30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800165e:	2300      	movs	r3, #0
 8001660:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001666:	231f      	movs	r3, #31
 8001668:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800166a:	2387      	movs	r3, #135	; 0x87
 800166c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800166e:	2300      	movs	r3, #0
 8001670:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001672:	2300      	movs	r3, #0
 8001674:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001676:	2301      	movs	r3, #1
 8001678:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800167a:	2301      	movs	r3, #1
 800167c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001686:	463b      	mov	r3, r7
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fb09 	bl	8001ca0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800168e:	2004      	movs	r0, #4
 8001690:	f000 fae6 	bl	8001c60 <HAL_MPU_Enable>

}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_MspInit+0x44>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_MspInit+0x44>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_MspInit+0x44>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x44>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_MspInit+0x44>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x44>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0ae      	sub	sp, #184	; 0xb8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2290      	movs	r2, #144	; 0x90
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f003 fa03 	bl	8004b1c <memset>
  if(huart->Instance==USART3)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <HAL_UART_MspInit+0xc4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d144      	bne.n	80017aa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001724:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001726:	2300      	movs	r3, #0
 8001728:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fa00 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800173a:	f7ff ffaf 	bl	800169c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_UART_MspInit+0xc8>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_UART_MspInit+0xc8>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_UART_MspInit+0xc8>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_UART_MspInit+0xc8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <HAL_UART_MspInit+0xc8>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_UART_MspInit+0xc8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001788:	2307      	movs	r3, #7
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001792:	4619      	mov	r1, r3
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <HAL_UART_MspInit+0xcc>)
 8001796:	f000 fb59 	bl	8001e4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2027      	movs	r0, #39	; 0x27
 80017a0:	f000 fa0f 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a4:	2027      	movs	r0, #39	; 0x27
 80017a6:	f000 fa28 	bl	8001bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	37b8      	adds	r7, #184	; 0xb8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40004800 	.word	0x40004800
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020c00 	.word	0x40020c00

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f000 f8ba 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USART3_IRQHandler+0x10>)
 800181a:	f001 fea3 	bl	8003564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000008c 	.word	0x2000008c

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f003 f936 	bl	8004ac8 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20080000 	.word	0x20080000
 8001888:	00000400 	.word	0x00000400
 800188c:	20000268 	.word	0x20000268
 8001890:	20000280 	.word	0x20000280

08001894 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018be:	490e      	ldr	r1, [pc, #56]	; (80018f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d4:	4c0b      	ldr	r4, [pc, #44]	; (8001904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e2:	f7ff ffd7 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f003 f8f5 	bl	8004ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7ff f949 	bl	8000b80 <main>
  bx  lr    
 80018ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018fc:	08005868 	.word	0x08005868
  ldr r2, =_sbss
 8001900:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001904:	20000280 	.word	0x20000280

08001908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC_IRQHandler>

0800190a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190e:	2003      	movs	r0, #3
 8001910:	f000 f94c 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001914:	200f      	movs	r0, #15
 8001916:	f000 f805 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191a:	f7ff fec5 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f967 	bl	8001c16 <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 f92f 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000000 	.word	0x20000000
 800197c:	20000008 	.word	0x20000008
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	2000026c 	.word	0x2000026c

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000026c 	.word	0x2000026c

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffde 	bl	80019ac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008

08001a0c <__NVIC_SetPriorityGrouping>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	05fa0000 	.word	0x05fa0000

08001a54 <__NVIC_GetPriorityGrouping>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	; (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff29 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff3e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff8e 	bl	8001b00 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5d 	bl	8001aac <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff31 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c34:	f3bf 8f5f 	dmb	sy
}
 8001c38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_MPU_Disable+0x28>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_MPU_Disable+0x28>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c44:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_MPU_Disable+0x2c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	e000ed90 	.word	0xe000ed90

08001c60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <HAL_MPU_Enable+0x38>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_MPU_Enable+0x3c>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_MPU_Enable+0x3c>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c7e:	f3bf 8f4f 	dsb	sy
}
 8001c82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c84:	f3bf 8f6f 	isb	sy
}
 8001c88:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed90 	.word	0xe000ed90
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	785a      	ldrb	r2, [r3, #1]
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_MPU_ConfigRegion+0x84>)
 8001cae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d029      	beq.n	8001d0c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_MPU_ConfigRegion+0x84>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7b1b      	ldrb	r3, [r3, #12]
 8001cc4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7adb      	ldrb	r3, [r3, #11]
 8001cca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ccc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7a9b      	ldrb	r3, [r3, #10]
 8001cd2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7b5b      	ldrb	r3, [r3, #13]
 8001cda:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7b9b      	ldrb	r3, [r3, #14]
 8001ce2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ce4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7bdb      	ldrb	r3, [r3, #15]
 8001cea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7a5b      	ldrb	r3, [r3, #9]
 8001cf2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7a1b      	ldrb	r3, [r3, #8]
 8001cfa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cfc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d06:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001d0a:	e005      	b.n	8001d18 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_MPU_ConfigRegion+0x84>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_MPU_ConfigRegion+0x84>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed90 	.word	0xe000ed90

08001d28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d36:	f7ff fe39 	bl	80019ac <HAL_GetTick>
 8001d3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e052      	b.n	8001e00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0216 	bic.w	r2, r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_DMA_Abort+0x62>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0208 	bic.w	r2, r2, #8
 8001d98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	e013      	b.n	8001dd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dac:	f7ff fdfe 	bl	80019ac <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d90c      	bls.n	8001dd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e015      	b.n	8001e00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e4      	bne.n	8001dac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	223f      	movs	r2, #63	; 0x3f
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d004      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00c      	b.n	8001e40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2205      	movs	r2, #5
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e175      	b.n	8002158 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8164 	bne.w	8002152 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_GPIO_Init+0x56>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d130      	bne.n	8001f04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80be 	beq.w	8002152 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <HAL_GPIO_Init+0x324>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_GPIO_Init+0x324>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_GPIO_Init+0x324>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fee:	4a61      	ldr	r2, [pc, #388]	; (8002174 <HAL_GPIO_Init+0x328>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_GPIO_Init+0x32c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d037      	beq.n	800208a <HAL_GPIO_Init+0x23e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_GPIO_Init+0x330>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_GPIO_Init+0x23a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_GPIO_Init+0x334>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02b      	beq.n	8002082 <HAL_GPIO_Init+0x236>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a55      	ldr	r2, [pc, #340]	; (8002184 <HAL_GPIO_Init+0x338>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d025      	beq.n	800207e <HAL_GPIO_Init+0x232>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x33c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <HAL_GPIO_Init+0x22e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_GPIO_Init+0x340>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x22a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x344>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x226>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_GPIO_Init+0x348>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x222>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x34c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x21e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x350>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x21a>
 8002062:	2309      	movs	r3, #9
 8002064:	e012      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002066:	230a      	movs	r3, #10
 8002068:	e010      	b.n	800208c <HAL_GPIO_Init+0x240>
 800206a:	2308      	movs	r3, #8
 800206c:	e00e      	b.n	800208c <HAL_GPIO_Init+0x240>
 800206e:	2307      	movs	r3, #7
 8002070:	e00c      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002072:	2306      	movs	r3, #6
 8002074:	e00a      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002076:	2305      	movs	r3, #5
 8002078:	e008      	b.n	800208c <HAL_GPIO_Init+0x240>
 800207a:	2304      	movs	r3, #4
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x240>
 800207e:	2303      	movs	r3, #3
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x240>
 800208a:	2300      	movs	r3, #0
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800209c:	4935      	ldr	r1, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x328>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_GPIO_Init+0x354>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_GPIO_Init+0x354>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_GPIO_Init+0x354>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_GPIO_Init+0x354>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	f67f ae86 	bls.w	8001e6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40013800 	.word	0x40013800
 8002178:	40020000 	.word	0x40020000
 800217c:	40020400 	.word	0x40020400
 8002180:	40020800 	.word	0x40020800
 8002184:	40020c00 	.word	0x40020c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40021400 	.word	0x40021400
 8002190:	40021800 	.word	0x40021800
 8002194:	40021c00 	.word	0x40021c00
 8002198:	40022000 	.word	0x40022000
 800219c:	40022400 	.word	0x40022400
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	400b      	ands	r3, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e29b      	b.n	800275a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002230:	4b96      	ldr	r3, [pc, #600]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b04      	cmp	r3, #4
 800223a:	d00c      	beq.n	8002256 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223c:	4b93      	ldr	r3, [pc, #588]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d112      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
 8002248:	4b90      	ldr	r3, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002254:	d10b      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002256:	4b8d      	ldr	r3, [pc, #564]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06c      	beq.n	800233c <HAL_RCC_OscConfig+0x130>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d168      	bne.n	800233c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e275      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x7a>
 8002278:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e02e      	b.n	80022e4 <HAL_RCC_OscConfig+0xd8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x9c>
 800228e:	4b7f      	ldr	r3, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7e      	ldr	r2, [pc, #504]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b7c      	ldr	r3, [pc, #496]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7b      	ldr	r2, [pc, #492]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xd8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0xc0>
 80022b2:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a75      	ldr	r2, [pc, #468]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a72      	ldr	r2, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xd8>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b6c      	ldr	r3, [pc, #432]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6b      	ldr	r2, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff fb5e 	bl	80019ac <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7ff fb5a 	bl	80019ac <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e229      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe8>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff fb4a 	bl	80019ac <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fb46 	bl	80019ac <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e215      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b57      	ldr	r3, [pc, #348]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x110>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d069      	beq.n	800241e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b4d      	ldr	r3, [pc, #308]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x190>
 8002362:	4b4a      	ldr	r3, [pc, #296]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x17a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1e9      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	493d      	ldr	r1, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e040      	b.n	800241e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a38      	ldr	r2, [pc, #224]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff fafc 	bl	80019ac <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7ff faf8 	bl	80019ac <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1c7      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4929      	ldr	r1, [pc, #164]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
 80023ea:	e018      	b.n	800241e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x280>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7ff fad8 	bl	80019ac <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7ff fad4 	bl	80019ac <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1a3      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d038      	beq.n	800249c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d019      	beq.n	8002466 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	4a15      	ldr	r2, [pc, #84]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7ff fab5 	bl	80019ac <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002446:	f7ff fab1 	bl	80019ac <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e180      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x23a>
 8002464:	e01a      	b.n	800249c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x280>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_RCC_OscConfig+0x280>)
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7ff fa9b 	bl	80019ac <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247a:	f7ff fa97 	bl	80019ac <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d903      	bls.n	8002490 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e166      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
 800248c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	4b92      	ldr	r3, [pc, #584]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a4 	beq.w	80025f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b8c      	ldr	r3, [pc, #560]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b89      	ldr	r3, [pc, #548]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a88      	ldr	r2, [pc, #544]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b86      	ldr	r3, [pc, #536]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d2:	4b83      	ldr	r3, [pc, #524]	; (80026e0 <HAL_RCC_OscConfig+0x4d4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024de:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <HAL_RCC_OscConfig+0x4d4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7f      	ldr	r2, [pc, #508]	; (80026e0 <HAL_RCC_OscConfig+0x4d4>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fa5f 	bl	80019ac <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7ff fa5b 	bl	80019ac <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e12a      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002504:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x4d4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x31a>
 8002518:	4b70      	ldr	r3, [pc, #448]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a6f      	ldr	r2, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	e02d      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x33c>
 800252e:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	4b68      	ldr	r3, [pc, #416]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a67      	ldr	r2, [pc, #412]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	e01c      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x35e>
 8002550:	4b62      	ldr	r3, [pc, #392]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a61      	ldr	r2, [pc, #388]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a5e      	ldr	r2, [pc, #376]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
 800256a:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a5b      	ldr	r2, [pc, #364]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a58      	ldr	r2, [pc, #352]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7ff fa0f 	bl	80019ac <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7ff fa0b 	bl	80019ac <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0d8      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RCC_OscConfig+0x386>
 80025b4:	e014      	b.n	80025e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7ff f9f9 	bl	80019ac <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7ff f9f5 	bl	80019ac <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0c2      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a3c      	ldr	r2, [pc, #240]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80ae 	beq.w	8002758 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b37      	ldr	r3, [pc, #220]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d06d      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d14b      	bne.n	80026a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7ff f9c6 	bl	80019ac <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7ff f9c2 	bl	80019ac <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e091      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	3b01      	subs	r3, #1
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	071b      	lsls	r3, r3, #28
 800266e:	491b      	ldr	r1, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800267a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff f994 	bl	80019ac <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f990 	bl	80019ac <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e05f      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x47c>
 80026a6:	e057      	b.n	8002758 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff f97a 	bl	80019ac <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7ff f976 	bl	80019ac <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e045      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_OscConfig+0x4d0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x4b0>
 80026da:	e03d      	b.n	8002758 <HAL_RCC_OscConfig+0x54c>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_RCC_OscConfig+0x558>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d030      	beq.n	8002754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d129      	bne.n	8002754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d122      	bne.n	8002754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800271a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800271c:	4293      	cmp	r3, r2
 800271e:	d119      	bne.n	8002754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d10f      	bne.n	8002754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d107      	bne.n	8002754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0d0      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d910      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 020f 	bic.w	r2, r3, #15
 8002796:	4965      	ldr	r1, [pc, #404]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d040      	beq.n	800288c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e073      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06b      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4936      	ldr	r1, [pc, #216]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7ff f8a6 	bl	80019ac <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7ff f8a2 	bl	80019ac <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e053      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d210      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 020f 	bic.w	r2, r3, #15
 80028a2:	4922      	ldr	r1, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e032      	b.n	8002922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4916      	ldr	r1, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fa:	f000 f821 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1c8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x1cc>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1d0>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1d4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f802 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023c00 	.word	0x40023c00
 8002930:	40023800 	.word	0x40023800
 8002934:	0800570c 	.word	0x0800570c
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b090      	sub	sp, #64	; 0x40
 8002946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	2300      	movs	r3, #0
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002950:	2300      	movs	r3, #0
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d00d      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x40>
 8002964:	2b08      	cmp	r3, #8
 8002966:	f200 80a1 	bhi.w	8002aac <HAL_RCC_GetSysClockFreq+0x16c>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x3a>
 8002972:	e09b      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002978:	e09b      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297a:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800297e:	e098      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800298a:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d028      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	2200      	movs	r2, #0
 800299e:	623b      	str	r3, [r7, #32]
 80029a0:	627a      	str	r2, [r7, #36]	; 0x24
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029a8:	2100      	movs	r1, #0
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ac:	fb03 f201 	mul.w	r2, r3, r1
 80029b0:	2300      	movs	r3, #0
 80029b2:	fb00 f303 	mul.w	r3, r0, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	4a43      	ldr	r2, [pc, #268]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ba:	fba0 1202 	umull	r1, r2, r0, r2
 80029be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c0:	460a      	mov	r2, r1
 80029c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	4413      	add	r3, r2
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	2200      	movs	r2, #0
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	61fa      	str	r2, [r7, #28]
 80029d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029da:	f7fd fc89 	bl	80002f0 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4613      	mov	r3, r2
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e6:	e053      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	2200      	movs	r2, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	617a      	str	r2, [r7, #20]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029fa:	f04f 0b00 	mov.w	fp, #0
 80029fe:	4652      	mov	r2, sl
 8002a00:	465b      	mov	r3, fp
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	0159      	lsls	r1, r3, #5
 8002a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a10:	0150      	lsls	r0, r2, #5
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ebb2 080a 	subs.w	r8, r2, sl
 8002a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a32:	ebb2 0408 	subs.w	r4, r2, r8
 8002a36:	eb63 0509 	sbc.w	r5, r3, r9
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	00eb      	lsls	r3, r5, #3
 8002a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a48:	00e2      	lsls	r2, r4, #3
 8002a4a:	4614      	mov	r4, r2
 8002a4c:	461d      	mov	r5, r3
 8002a4e:	eb14 030a 	adds.w	r3, r4, sl
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	eb45 030b 	adc.w	r3, r5, fp
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a66:	4629      	mov	r1, r5
 8002a68:	028b      	lsls	r3, r1, #10
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a70:	4621      	mov	r1, r4
 8002a72:	028a      	lsls	r2, r1, #10
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	60fa      	str	r2, [r7, #12]
 8002a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a84:	f7fd fc34 	bl	80002f0 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3740      	adds	r7, #64	; 0x40
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	017d7840 	.word	0x017d7840

08002acc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a9b      	lsrs	r3, r3, #10
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	0800571c 	.word	0x0800571c

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b10:	f7ff ffdc 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0b5b      	lsrs	r3, r3, #13
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4903      	ldr	r1, [pc, #12]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	0800571c 	.word	0x0800571c

08002b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d012      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b5c:	4b69      	ldr	r3, [pc, #420]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	4964      	ldr	r1, [pc, #400]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d017      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	4959      	ldr	r1, [pc, #356]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d017      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	494a      	ldr	r1, [pc, #296]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be8:	d101      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 808b 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe feb6 	bl	80019ac <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fe feb2 	bl	80019ac <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e38f      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d035      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d02e      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d114      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fe7a 	bl	80019ac <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fe76 	bl	80019ac <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e351      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cea:	d111      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	4901      	ldr	r1, [pc, #4]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	0ffffcff 	.word	0x0ffffcff
 8002d10:	4bac      	ldr	r3, [pc, #688]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4aab      	ldr	r2, [pc, #684]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d1a:	6093      	str	r3, [r2, #8]
 8002d1c:	4ba9      	ldr	r3, [pc, #676]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	49a6      	ldr	r1, [pc, #664]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d3a:	4ba2      	ldr	r3, [pc, #648]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	4aa0      	ldr	r2, [pc, #640]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d4a:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	499b      	ldr	r1, [pc, #620]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d68:	4b96      	ldr	r3, [pc, #600]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d76:	4993      	ldr	r1, [pc, #588]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d8a:	4b8e      	ldr	r3, [pc, #568]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d98:	498a      	ldr	r1, [pc, #552]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dac:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dba:	4982      	ldr	r1, [pc, #520]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dce:	4b7d      	ldr	r3, [pc, #500]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4979      	ldr	r1, [pc, #484]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002df0:	4b74      	ldr	r3, [pc, #464]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4971      	ldr	r1, [pc, #452]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f023 020c 	bic.w	r2, r3, #12
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	4968      	ldr	r1, [pc, #416]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e34:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	4960      	ldr	r1, [pc, #384]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e56:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	4957      	ldr	r1, [pc, #348]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	494f      	ldr	r1, [pc, #316]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	4946      	ldr	r1, [pc, #280]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ebc:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	493e      	ldr	r1, [pc, #248]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ede:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	4935      	ldr	r1, [pc, #212]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f00:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d011      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f30:	4924      	ldr	r1, [pc, #144]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f40:	d101      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	4914      	ldr	r1, [pc, #80]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f94:	490b      	ldr	r1, [pc, #44]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00f      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb8:	4902      	ldr	r1, [pc, #8]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fd4:	4b8a      	ldr	r3, [pc, #552]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	4986      	ldr	r1, [pc, #536]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ff8:	4b81      	ldr	r3, [pc, #516]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	497d      	ldr	r1, [pc, #500]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d006      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80d6 	beq.w	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003024:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a75      	ldr	r2, [pc, #468]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800302e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fe fcbc 	bl	80019ac <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003038:	f7fe fcb8 	bl	80019ac <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e195      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800304a:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d021      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11d      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307e:	0e1b      	lsrs	r3, r3, #24
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	019a      	lsls	r2, r3, #6
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	4958      	ldr	r1, [pc, #352]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02e      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d0:	d129      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030d2:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030e0:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	0f1b      	lsrs	r3, r3, #28
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	019a      	lsls	r2, r3, #6
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	061b      	lsls	r3, r3, #24
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	071b      	lsls	r3, r3, #28
 8003106:	493e      	ldr	r1, [pc, #248]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800310e:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003114:	f023 021f 	bic.w	r2, r3, #31
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	3b01      	subs	r3, #1
 800311e:	4938      	ldr	r1, [pc, #224]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01d      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003132:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003138:	0e1b      	lsrs	r3, r3, #24
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	0f1b      	lsrs	r3, r3, #28
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	019a      	lsls	r2, r3, #6
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	4926      	ldr	r1, [pc, #152]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	019a      	lsls	r2, r3, #6
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	491a      	ldr	r1, [pc, #104]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031aa:	f7fe fbff 	bl	80019ac <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031b2:	f7fe fbfb 	bl	80019ac <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0d8      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 80ce 	bne.w	8003374 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe fbe2 	bl	80019ac <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ea:	e00b      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031ec:	f7fe fbde 	bl	80019ac <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d904      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0bb      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003204:	4b5e      	ldr	r3, [pc, #376]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003210:	d0ec      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02e      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d12a      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800323a:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003248:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	0f1b      	lsrs	r3, r3, #28
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	4944      	ldr	r1, [pc, #272]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003276:	4b42      	ldr	r3, [pc, #264]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	493d      	ldr	r1, [pc, #244]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a4:	d11d      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	0e1b      	lsrs	r3, r3, #24
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	0f1b      	lsrs	r3, r3, #28
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	019a      	lsls	r2, r3, #6
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	431a      	orrs	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	071b      	lsls	r3, r3, #28
 80032da:	4929      	ldr	r1, [pc, #164]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d028      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	0e1b      	lsrs	r3, r3, #24
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	019a      	lsls	r2, r3, #6
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	431a      	orrs	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	4917      	ldr	r1, [pc, #92]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4911      	ldr	r1, [pc, #68]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fe fb2e 	bl	80019ac <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003354:	f7fe fb2a 	bl	80019ac <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e007      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003372:	d1ef      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e040      	b.n	8003418 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f9a2 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fbd6 	bl	8003b74 <UART_SetConfig>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e022      	b.n	8003418 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fe2e 	bl	800403c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 feb5 	bl	8004180 <UART_CheckIdleState>
 8003416:	4603      	mov	r3, r0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003420:	b480      	push	{r7}
 8003422:	b08b      	sub	sp, #44	; 0x2c
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003432:	2b20      	cmp	r3, #32
 8003434:	d147      	bne.n	80034c6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_Transmit_IT+0x22>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e040      	b.n	80034c8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	d107      	bne.n	800348a <HAL_UART_Transmit_IT+0x6a>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <HAL_UART_Transmit_IT+0xb4>)
 8003486:	66da      	str	r2, [r3, #108]	; 0x6c
 8003488:	e002      	b.n	8003490 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <HAL_UART_Transmit_IT+0xb8>)
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	613b      	str	r3, [r7, #16]
   return(result);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	69f9      	ldr	r1, [r7, #28]
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e6      	bne.n	8003490 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	372c      	adds	r7, #44	; 0x2c
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	080046df 	.word	0x080046df
 80034d8:	08004629 	.word	0x08004629

080034dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d132      	bne.n	800355a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_UART_Receive_IT+0x24>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e02b      	b.n	800355c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d018      	beq.n	800354a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	613b      	str	r3, [r7, #16]
   return(result);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	69f9      	ldr	r1, [r7, #28]
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	61bb      	str	r3, [r7, #24]
   return(result);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e6      	bne.n	8003518 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	461a      	mov	r2, r3
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 ff29 	bl	80043a8 <UART_Start_Receive_IT>
 8003556:	4603      	mov	r3, r0
 8003558:	e000      	b.n	800355c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b0ba      	sub	sp, #232	; 0xe8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800358a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800358e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003592:	4013      	ands	r3, r2
 8003594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d115      	bne.n	80035cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00f      	beq.n	80035cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 82ac 	beq.w	8003b1a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
      }
      return;
 80035ca:	e2a6      	b.n	8003b1a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8117 	beq.w	8003804 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035e6:	4b85      	ldr	r3, [pc, #532]	; (80037fc <HAL_UART_IRQHandler+0x298>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 810a 	beq.w	8003804 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d011      	beq.n	8003620 <HAL_UART_IRQHandler+0xbc>
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d011      	beq.n	8003650 <HAL_UART_IRQHandler+0xec>
 800362c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2202      	movs	r2, #2
 800363e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d011      	beq.n	8003680 <HAL_UART_IRQHandler+0x11c>
 800365c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2204      	movs	r2, #4
 800366e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d017      	beq.n	80036bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2208      	movs	r2, #8
 80036aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b2:	f043 0208 	orr.w	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <HAL_UART_IRQHandler+0x18a>
 80036c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8212 	beq.w	8003b1e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800373a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800373e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04f      	beq.n	80037e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fef4 	bl	8004534 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d141      	bne.n	80037de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3308      	adds	r3, #8
 8003760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800378a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800379e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1d9      	bne.n	800375a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_UART_IRQHandler+0x29c>)
 80037b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fb24 	bl	8001e08 <HAL_DMA_Abort_IT>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d017      	beq.n	80037f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037d0:	4610      	mov	r0, r2
 80037d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	e00f      	b.n	80037f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f9ac 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00b      	b.n	80037f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9a8 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e007      	b.n	80037f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f9a4 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80037f4:	e193      	b.n	8003b1e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f6:	bf00      	nop
    return;
 80037f8:	e191      	b.n	8003b1e <HAL_UART_IRQHandler+0x5ba>
 80037fa:	bf00      	nop
 80037fc:	04000120 	.word	0x04000120
 8003800:	080045fd 	.word	0x080045fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 814c 	bne.w	8003aa6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8145 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 813e 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2210      	movs	r2, #16
 8003830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	f040 80b6 	bne.w	80039ae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800384e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8165 	beq.w	8003b22 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800385e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003862:	429a      	cmp	r2, r3
 8003864:	f080 815d 	bcs.w	8003b22 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387c:	f000 8086 	beq.w	800398c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1da      	bne.n	8003880 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3308      	adds	r3, #8
 80038d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e1      	bne.n	80038ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3308      	adds	r3, #8
 800390c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800391c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3308      	adds	r3, #8
 8003926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800392a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800392c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e3      	bne.n	8003906 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395c:	f023 0310 	bic.w	r3, r3, #16
 8003960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003970:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e4      	bne.n	800394c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe f9ce 	bl	8001d28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8ce 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039ac:	e0b9      	b.n	8003b22 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80ab 	beq.w	8003b26 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80039d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80a6 	beq.w	8003b26 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
 80039fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e4      	bne.n	80039da <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a34:	633a      	str	r2, [r7, #48]	; 0x30
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e3      	bne.n	8003a10 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f023 0310 	bic.w	r3, r3, #16
 8003a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e4      	bne.n	8003a5c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f852 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aa4:	e03f      	b.n	8003b26 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x56c>
 8003ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ac6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f849 	bl	8003b60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ace:	e02d      	b.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01c      	beq.n	8003b2a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
    }
    return;
 8003af8:	e017      	b.n	8003b2a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d012      	beq.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fe43 	bl	800479e <UART_EndTransmit_IT>
    return;
 8003b18:	e008      	b.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003b1a:	bf00      	nop
 8003b1c:	e006      	b.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003b2a:	bf00      	nop
  }

}
 8003b2c:	37e8      	adds	r7, #232	; 0xe8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop

08003b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4ba6      	ldr	r3, [pc, #664]	; (8003e38 <UART_SetConfig+0x2c4>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	6979      	ldr	r1, [r7, #20]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a94      	ldr	r2, [pc, #592]	; (8003e3c <UART_SetConfig+0x2c8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d120      	bne.n	8003c32 <UART_SetConfig+0xbe>
 8003bf0:	4b93      	ldr	r3, [pc, #588]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d816      	bhi.n	8003c2c <UART_SetConfig+0xb8>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0x90>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003c21 	.word	0x08003c21
 8003c0c:	08003c1b 	.word	0x08003c1b
 8003c10:	08003c27 	.word	0x08003c27
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e150      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e14d      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c20:	2304      	movs	r3, #4
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e14a      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c26:	2308      	movs	r3, #8
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e147      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e144      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a83      	ldr	r2, [pc, #524]	; (8003e44 <UART_SetConfig+0x2d0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d132      	bne.n	8003ca2 <UART_SetConfig+0x12e>
 8003c3c:	4b80      	ldr	r3, [pc, #512]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d828      	bhi.n	8003c9c <UART_SetConfig+0x128>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0xdc>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003c9d 	.word	0x08003c9d
 8003c58:	08003c9d 	.word	0x08003c9d
 8003c5c:	08003c9d 	.word	0x08003c9d
 8003c60:	08003c91 	.word	0x08003c91
 8003c64:	08003c9d 	.word	0x08003c9d
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003c8b 	.word	0x08003c8b
 8003c74:	08003c9d 	.word	0x08003c9d
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003c9d 	.word	0x08003c9d
 8003c80:	08003c97 	.word	0x08003c97
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e118      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e115      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c90:	2304      	movs	r3, #4
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e112      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c96:	2308      	movs	r3, #8
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e10f      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e10c      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a68      	ldr	r2, [pc, #416]	; (8003e48 <UART_SetConfig+0x2d4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d120      	bne.n	8003cee <UART_SetConfig+0x17a>
 8003cac:	4b64      	ldr	r3, [pc, #400]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cb6:	2b30      	cmp	r3, #48	; 0x30
 8003cb8:	d013      	beq.n	8003ce2 <UART_SetConfig+0x16e>
 8003cba:	2b30      	cmp	r3, #48	; 0x30
 8003cbc:	d814      	bhi.n	8003ce8 <UART_SetConfig+0x174>
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d009      	beq.n	8003cd6 <UART_SetConfig+0x162>
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d810      	bhi.n	8003ce8 <UART_SetConfig+0x174>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <UART_SetConfig+0x15c>
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d006      	beq.n	8003cdc <UART_SetConfig+0x168>
 8003cce:	e00b      	b.n	8003ce8 <UART_SetConfig+0x174>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e0f2      	b.n	8003ebc <UART_SetConfig+0x348>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e0ef      	b.n	8003ebc <UART_SetConfig+0x348>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e0ec      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e0e9      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e0e6      	b.n	8003ebc <UART_SetConfig+0x348>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <UART_SetConfig+0x2d8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d120      	bne.n	8003d3a <UART_SetConfig+0x1c6>
 8003cf8:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d02:	2bc0      	cmp	r3, #192	; 0xc0
 8003d04:	d013      	beq.n	8003d2e <UART_SetConfig+0x1ba>
 8003d06:	2bc0      	cmp	r3, #192	; 0xc0
 8003d08:	d814      	bhi.n	8003d34 <UART_SetConfig+0x1c0>
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d009      	beq.n	8003d22 <UART_SetConfig+0x1ae>
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d810      	bhi.n	8003d34 <UART_SetConfig+0x1c0>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <UART_SetConfig+0x1a8>
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d006      	beq.n	8003d28 <UART_SetConfig+0x1b4>
 8003d1a:	e00b      	b.n	8003d34 <UART_SetConfig+0x1c0>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e0cc      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d22:	2302      	movs	r3, #2
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e0c9      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e0c6      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e0c3      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d34:	2310      	movs	r3, #16
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e0c0      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a44      	ldr	r2, [pc, #272]	; (8003e50 <UART_SetConfig+0x2dc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d125      	bne.n	8003d90 <UART_SetConfig+0x21c>
 8003d44:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d52:	d017      	beq.n	8003d84 <UART_SetConfig+0x210>
 8003d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d58:	d817      	bhi.n	8003d8a <UART_SetConfig+0x216>
 8003d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5e:	d00b      	beq.n	8003d78 <UART_SetConfig+0x204>
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d811      	bhi.n	8003d8a <UART_SetConfig+0x216>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <UART_SetConfig+0x1fe>
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6e:	d006      	beq.n	8003d7e <UART_SetConfig+0x20a>
 8003d70:	e00b      	b.n	8003d8a <UART_SetConfig+0x216>
 8003d72:	2300      	movs	r3, #0
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e0a1      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e09e      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e09b      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d84:	2308      	movs	r3, #8
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e098      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e095      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <UART_SetConfig+0x2e0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d125      	bne.n	8003de6 <UART_SetConfig+0x272>
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da8:	d017      	beq.n	8003dda <UART_SetConfig+0x266>
 8003daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dae:	d817      	bhi.n	8003de0 <UART_SetConfig+0x26c>
 8003db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db4:	d00b      	beq.n	8003dce <UART_SetConfig+0x25a>
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d811      	bhi.n	8003de0 <UART_SetConfig+0x26c>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <UART_SetConfig+0x254>
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc4:	d006      	beq.n	8003dd4 <UART_SetConfig+0x260>
 8003dc6:	e00b      	b.n	8003de0 <UART_SetConfig+0x26c>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e076      	b.n	8003ebc <UART_SetConfig+0x348>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e073      	b.n	8003ebc <UART_SetConfig+0x348>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e070      	b.n	8003ebc <UART_SetConfig+0x348>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e06d      	b.n	8003ebc <UART_SetConfig+0x348>
 8003de0:	2310      	movs	r3, #16
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e06a      	b.n	8003ebc <UART_SetConfig+0x348>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <UART_SetConfig+0x2e4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d138      	bne.n	8003e62 <UART_SetConfig+0x2ee>
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003dfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dfe:	d017      	beq.n	8003e30 <UART_SetConfig+0x2bc>
 8003e00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e04:	d82a      	bhi.n	8003e5c <UART_SetConfig+0x2e8>
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	d00b      	beq.n	8003e24 <UART_SetConfig+0x2b0>
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e10:	d824      	bhi.n	8003e5c <UART_SetConfig+0x2e8>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <UART_SetConfig+0x2aa>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d006      	beq.n	8003e2a <UART_SetConfig+0x2b6>
 8003e1c:	e01e      	b.n	8003e5c <UART_SetConfig+0x2e8>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e04b      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e24:	2302      	movs	r3, #2
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e048      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e045      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e30:	2308      	movs	r3, #8
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e042      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e36:	bf00      	nop
 8003e38:	efff69f3 	.word	0xefff69f3
 8003e3c:	40011000 	.word	0x40011000
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40004400 	.word	0x40004400
 8003e48:	40004800 	.word	0x40004800
 8003e4c:	40004c00 	.word	0x40004c00
 8003e50:	40005000 	.word	0x40005000
 8003e54:	40011400 	.word	0x40011400
 8003e58:	40007800 	.word	0x40007800
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e02c      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a72      	ldr	r2, [pc, #456]	; (8004030 <UART_SetConfig+0x4bc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d125      	bne.n	8003eb8 <UART_SetConfig+0x344>
 8003e6c:	4b71      	ldr	r3, [pc, #452]	; (8004034 <UART_SetConfig+0x4c0>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e7a:	d017      	beq.n	8003eac <UART_SetConfig+0x338>
 8003e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e80:	d817      	bhi.n	8003eb2 <UART_SetConfig+0x33e>
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d00b      	beq.n	8003ea0 <UART_SetConfig+0x32c>
 8003e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8c:	d811      	bhi.n	8003eb2 <UART_SetConfig+0x33e>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <UART_SetConfig+0x326>
 8003e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e96:	d006      	beq.n	8003ea6 <UART_SetConfig+0x332>
 8003e98:	e00b      	b.n	8003eb2 <UART_SetConfig+0x33e>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e00d      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e00a      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e007      	b.n	8003ebc <UART_SetConfig+0x348>
 8003eac:	2308      	movs	r3, #8
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e004      	b.n	8003ebc <UART_SetConfig+0x348>
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e001      	b.n	8003ebc <UART_SetConfig+0x348>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d15b      	bne.n	8003f7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ec6:	7ffb      	ldrb	r3, [r7, #31]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d828      	bhi.n	8003f1e <UART_SetConfig+0x3aa>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0x360>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f1f 	.word	0x08003f1f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f1f 	.word	0x08003f1f
 8003eec:	08003f1f 	.word	0x08003f1f
 8003ef0:	08003f1f 	.word	0x08003f1f
 8003ef4:	08003f17 	.word	0x08003f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f7fe fdf4 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003efc:	61b8      	str	r0, [r7, #24]
        break;
 8003efe:	e013      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f00:	f7fe fe04 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003f04:	61b8      	str	r0, [r7, #24]
        break;
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <UART_SetConfig+0x4c4>)
 8003f0a:	61bb      	str	r3, [r7, #24]
        break;
 8003f0c:	e00c      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0e:	f7fe fd17 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8003f12:	61b8      	str	r0, [r7, #24]
        break;
 8003f14:	e008      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1a:	61bb      	str	r3, [r7, #24]
        break;
 8003f1c:	e004      	b.n	8003f28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	77bb      	strb	r3, [r7, #30]
        break;
 8003f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d074      	beq.n	8004018 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	005a      	lsls	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b0f      	cmp	r3, #15
 8003f48:	d916      	bls.n	8003f78 <UART_SetConfig+0x404>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d212      	bcs.n	8003f78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f023 030f 	bic.w	r3, r3, #15
 8003f5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	89fb      	ldrh	r3, [r7, #14]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	89fa      	ldrh	r2, [r7, #14]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	e04f      	b.n	8004018 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77bb      	strb	r3, [r7, #30]
 8003f7c:	e04c      	b.n	8004018 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d828      	bhi.n	8003fd6 <UART_SetConfig+0x462>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0x418>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fd7 	.word	0x08003fd7
 8003f9c:	08003fc7 	.word	0x08003fc7
 8003fa0:	08003fd7 	.word	0x08003fd7
 8003fa4:	08003fd7 	.word	0x08003fd7
 8003fa8:	08003fd7 	.word	0x08003fd7
 8003fac:	08003fcf 	.word	0x08003fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe fd98 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	61b8      	str	r0, [r7, #24]
        break;
 8003fb6:	e013      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb8:	f7fe fda8 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003fbc:	61b8      	str	r0, [r7, #24]
        break;
 8003fbe:	e00f      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <UART_SetConfig+0x4c4>)
 8003fc2:	61bb      	str	r3, [r7, #24]
        break;
 8003fc4:	e00c      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc6:	f7fe fcbb 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8003fca:	61b8      	str	r0, [r7, #24]
        break;
 8003fcc:	e008      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e004      	b.n	8003fe0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	77bb      	strb	r3, [r7, #30]
        break;
 8003fde:	bf00      	nop
    }

    if (pclk != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d018      	beq.n	8004018 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	085a      	lsrs	r2, r3, #1
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b0f      	cmp	r3, #15
 8003ffe:	d909      	bls.n	8004014 <UART_SetConfig+0x4a0>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d205      	bcs.n	8004014 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e001      	b.n	8004018 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004024:	7fbb      	ldrb	r3, [r7, #30]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40007c00 	.word	0x40007c00
 8004034:	40023800 	.word	0x40023800
 8004038:	00f42400 	.word	0x00f42400

0800403c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413a:	d10a      	bne.n	8004152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004190:	f7fd fc0c 	bl	80019ac <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d10e      	bne.n	80041c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f831 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e027      	b.n	8004212 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d10e      	bne.n	80041ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f81b 	bl	800421a <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e011      	b.n	8004212 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b09c      	sub	sp, #112	; 0x70
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422a:	e0a7      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	f000 80a3 	beq.w	800437c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fd fbb9 	bl	80019ac <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <UART_WaitOnFlagUntilTimeout+0x32>
 8004246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004248:	2b00      	cmp	r3, #0
 800424a:	d13f      	bne.n	80042cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800425a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004260:	667b      	str	r3, [r7, #100]	; 0x64
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800426a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e6      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	663b      	str	r3, [r7, #96]	; 0x60
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3308      	adds	r3, #8
 800429c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800429e:	64ba      	str	r2, [r7, #72]	; 0x48
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e068      	b.n	800439e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d050      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e8:	d148      	bne.n	800437c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
 8004314:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004346:	623a      	str	r2, [r7, #32]
 8004348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	61bb      	str	r3, [r7, #24]
   return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e010      	b.n	800439e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	429a      	cmp	r2, r3
 8004398:	f43f af48 	beq.w	800422c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3770      	adds	r7, #112	; 0x70
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b097      	sub	sp, #92	; 0x5c
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d10e      	bne.n	80043fa <UART_Start_Receive_IT+0x52>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <UART_Start_Receive_IT+0x48>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043ee:	e02d      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043f8:	e028      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10d      	bne.n	800441e <UART_Start_Receive_IT+0x76>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <UART_Start_Receive_IT+0x6c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004412:	e01b      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	227f      	movs	r2, #127	; 0x7f
 8004418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800441c:	e016      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004426:	d10d      	bne.n	8004444 <UART_Start_Receive_IT+0x9c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <UART_Start_Receive_IT+0x92>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	227f      	movs	r2, #127	; 0x7f
 8004434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004438:	e008      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	223f      	movs	r2, #63	; 0x3f
 800443e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004442:	e003      	b.n	800444c <UART_Start_Receive_IT+0xa4>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2222      	movs	r2, #34	; 0x22
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800447c:	64ba      	str	r2, [r7, #72]	; 0x48
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800448a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d107      	bne.n	80044aa <UART_Start_Receive_IT+0x102>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a21      	ldr	r2, [pc, #132]	; (800452c <UART_Start_Receive_IT+0x184>)
 80044a6:	669a      	str	r2, [r3, #104]	; 0x68
 80044a8:	e002      	b.n	80044b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a20      	ldr	r2, [pc, #128]	; (8004530 <UART_Start_Receive_IT+0x188>)
 80044ae:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d019      	beq.n	80044ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80044cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
 80044d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e6      	bne.n	80044b8 <UART_Start_Receive_IT+0x110>
 80044ea:	e018      	b.n	800451e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f043 0320 	orr.w	r3, r3, #32
 8004500:	653b      	str	r3, [r7, #80]	; 0x50
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	69f9      	ldr	r1, [r7, #28]
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	61bb      	str	r3, [r7, #24]
   return(result);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e6      	bne.n	80044ec <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	375c      	adds	r7, #92	; 0x5c
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	08004959 	.word	0x08004959
 8004530:	080047f3 	.word	0x080047f3

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b095      	sub	sp, #84	; 0x54
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	643b      	str	r3, [r7, #64]	; 0x40
 800455c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	61fb      	str	r3, [r7, #28]
   return(result);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	64bb      	str	r3, [r7, #72]	; 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d118      	bne.n	80045dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	647b      	str	r3, [r7, #68]	; 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	613b      	str	r3, [r7, #16]
   return(result);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e6      	bne.n	80045aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045f0:	bf00      	nop
 80045f2:	3754      	adds	r7, #84	; 0x54
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fa8a 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b08f      	sub	sp, #60	; 0x3c
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	2b21      	cmp	r3, #33	; 0x21
 8004636:	d14c      	bne.n	80046d2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d132      	bne.n	80046aa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	61fb      	str	r3, [r7, #28]
   return(result);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004664:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e6      	bne.n	8004644 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	60bb      	str	r3, [r7, #8]
   return(result);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468a:	633b      	str	r3, [r7, #48]	; 0x30
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6979      	ldr	r1, [r7, #20]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	613b      	str	r3, [r7, #16]
   return(result);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e6      	bne.n	8004676 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046a8:	e013      	b.n	80046d2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80046d2:	bf00      	nop
 80046d4:	373c      	adds	r7, #60	; 0x3c
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046de:	b480      	push	{r7}
 80046e0:	b091      	sub	sp, #68	; 0x44
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ea:	2b21      	cmp	r3, #33	; 0x21
 80046ec:	d151      	bne.n	8004792 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d132      	bne.n	8004760 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	623b      	str	r3, [r7, #32]
   return(result);
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	633b      	str	r3, [r7, #48]	; 0x30
 800471a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800471e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	60fb      	str	r3, [r7, #12]
   return(result);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	617b      	str	r3, [r7, #20]
   return(result);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e6      	bne.n	800472c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800475e:	e018      	b.n	8004792 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004792:	bf00      	nop
 8004794:	3744      	adds	r7, #68	; 0x44
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b088      	sub	sp, #32
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	613b      	str	r3, [r7, #16]
   return(result);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc ff03 	bl	80015f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b096      	sub	sp, #88	; 0x58
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004800:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480a:	2b22      	cmp	r3, #34	; 0x22
 800480c:	f040 8098 	bne.w	8004940 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800481a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800481e:	b2d9      	uxtb	r1, r3
 8004820:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004824:	b2da      	uxtb	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	400a      	ands	r2, r1
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d17b      	bne.n	8004950 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800486c:	653b      	str	r3, [r7, #80]	; 0x50
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004876:	647b      	str	r3, [r7, #68]	; 0x44
 8004878:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800487c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e6      	bne.n	8004858 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	623b      	str	r3, [r7, #32]
   return(result);
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048aa:	633a      	str	r2, [r7, #48]	; 0x30
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d12e      	bne.n	8004938 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 0310 	bic.w	r3, r3, #16
 80048f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	69b9      	ldr	r1, [r7, #24]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	617b      	str	r3, [r7, #20]
   return(result);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b10      	cmp	r3, #16
 800491e:	d103      	bne.n	8004928 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2210      	movs	r2, #16
 8004926:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff f909 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004936:	e00b      	b.n	8004950 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fc fe2d 	bl	8001598 <HAL_UART_RxCpltCallback>
}
 800493e:	e007      	b.n	8004950 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	619a      	str	r2, [r3, #24]
}
 8004950:	bf00      	nop
 8004952:	3758      	adds	r7, #88	; 0x58
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b096      	sub	sp, #88	; 0x58
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004966:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004970:	2b22      	cmp	r3, #34	; 0x22
 8004972:	f040 8098 	bne.w	8004aa6 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004986:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800498a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800498e:	4013      	ands	r3, r2
 8004990:	b29a      	uxth	r2, r3
 8004992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004994:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d17b      	bne.n	8004ab6 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049dc:	643b      	str	r3, [r7, #64]	; 0x40
 80049de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e6      	bne.n	80049be <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d12e      	bne.n	8004a9e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0310 	bic.w	r3, r3, #16
 8004a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6979      	ldr	r1, [r7, #20]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	613b      	str	r3, [r7, #16]
   return(result);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d103      	bne.n	8004a8e <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2210      	movs	r2, #16
 8004a8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff f856 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a9c:	e00b      	b.n	8004ab6 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fd7a 	bl	8001598 <HAL_UART_RxCpltCallback>
}
 8004aa4:	e007      	b.n	8004ab6 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0208 	orr.w	r2, r2, #8
 8004ab4:	619a      	str	r2, [r3, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	3758      	adds	r7, #88	; 0x58
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <atoi>:
 8004abe:	220a      	movs	r2, #10
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	f000 b8d7 	b.w	8004c74 <strtol>
	...

08004ac8 <__errno>:
 8004ac8:	4b01      	ldr	r3, [pc, #4]	; (8004ad0 <__errno+0x8>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	2000000c 	.word	0x2000000c

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4d0d      	ldr	r5, [pc, #52]	; (8004b0c <__libc_init_array+0x38>)
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	; (8004b10 <__libc_init_array+0x3c>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	2600      	movs	r6, #0
 8004ae0:	42a6      	cmp	r6, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	4d0b      	ldr	r5, [pc, #44]	; (8004b14 <__libc_init_array+0x40>)
 8004ae6:	4c0c      	ldr	r4, [pc, #48]	; (8004b18 <__libc_init_array+0x44>)
 8004ae8:	f000 fdb6 	bl	8005658 <_init>
 8004aec:	1b64      	subs	r4, r4, r5
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	2600      	movs	r6, #0
 8004af2:	42a6      	cmp	r6, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afc:	4798      	blx	r3
 8004afe:	3601      	adds	r6, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b06:	4798      	blx	r3
 8004b08:	3601      	adds	r6, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	08005860 	.word	0x08005860
 8004b10:	08005860 	.word	0x08005860
 8004b14:	08005860 	.word	0x08005860
 8004b18:	08005864 	.word	0x08005864

08004b1c <memset>:
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <strchr>:
 8004b2c:	b2c9      	uxtb	r1, r1
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b34:	b11a      	cbz	r2, 8004b3e <strchr+0x12>
 8004b36:	428a      	cmp	r2, r1
 8004b38:	d1f9      	bne.n	8004b2e <strchr+0x2>
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	4770      	bx	lr
 8004b3e:	2900      	cmp	r1, #0
 8004b40:	bf18      	it	ne
 8004b42:	2300      	movne	r3, #0
 8004b44:	e7f9      	b.n	8004b3a <strchr+0xe>

08004b46 <strncmp>:
 8004b46:	b510      	push	{r4, lr}
 8004b48:	b17a      	cbz	r2, 8004b6a <strncmp+0x24>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	3901      	subs	r1, #1
 8004b4e:	1884      	adds	r4, r0, r2
 8004b50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004b54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004b58:	4290      	cmp	r0, r2
 8004b5a:	d101      	bne.n	8004b60 <strncmp+0x1a>
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	d101      	bne.n	8004b64 <strncmp+0x1e>
 8004b60:	1a80      	subs	r0, r0, r2
 8004b62:	bd10      	pop	{r4, pc}
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d1f3      	bne.n	8004b50 <strncmp+0xa>
 8004b68:	e7fa      	b.n	8004b60 <strncmp+0x1a>
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	e7f9      	b.n	8004b62 <strncmp+0x1c>
	...

08004b70 <_strtol_l.constprop.0>:
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b76:	d001      	beq.n	8004b7c <_strtol_l.constprop.0+0xc>
 8004b78:	2b24      	cmp	r3, #36	; 0x24
 8004b7a:	d906      	bls.n	8004b8a <_strtol_l.constprop.0+0x1a>
 8004b7c:	f7ff ffa4 	bl	8004ac8 <__errno>
 8004b80:	2316      	movs	r3, #22
 8004b82:	6003      	str	r3, [r0, #0]
 8004b84:	2000      	movs	r0, #0
 8004b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004c70 <_strtol_l.constprop.0+0x100>
 8004b8e:	460d      	mov	r5, r1
 8004b90:	462e      	mov	r6, r5
 8004b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b96:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004b9a:	f017 0708 	ands.w	r7, r7, #8
 8004b9e:	d1f7      	bne.n	8004b90 <_strtol_l.constprop.0+0x20>
 8004ba0:	2c2d      	cmp	r4, #45	; 0x2d
 8004ba2:	d132      	bne.n	8004c0a <_strtol_l.constprop.0+0x9a>
 8004ba4:	782c      	ldrb	r4, [r5, #0]
 8004ba6:	2701      	movs	r7, #1
 8004ba8:	1cb5      	adds	r5, r6, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d05b      	beq.n	8004c66 <_strtol_l.constprop.0+0xf6>
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d109      	bne.n	8004bc6 <_strtol_l.constprop.0+0x56>
 8004bb2:	2c30      	cmp	r4, #48	; 0x30
 8004bb4:	d107      	bne.n	8004bc6 <_strtol_l.constprop.0+0x56>
 8004bb6:	782c      	ldrb	r4, [r5, #0]
 8004bb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004bbc:	2c58      	cmp	r4, #88	; 0x58
 8004bbe:	d14d      	bne.n	8004c5c <_strtol_l.constprop.0+0xec>
 8004bc0:	786c      	ldrb	r4, [r5, #1]
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	3502      	adds	r5, #2
 8004bc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004bca:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bce:	f04f 0c00 	mov.w	ip, #0
 8004bd2:	fbb8 f9f3 	udiv	r9, r8, r3
 8004bd6:	4666      	mov	r6, ip
 8004bd8:	fb03 8a19 	mls	sl, r3, r9, r8
 8004bdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004be0:	f1be 0f09 	cmp.w	lr, #9
 8004be4:	d816      	bhi.n	8004c14 <_strtol_l.constprop.0+0xa4>
 8004be6:	4674      	mov	r4, lr
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	dd24      	ble.n	8004c36 <_strtol_l.constprop.0+0xc6>
 8004bec:	f1bc 0f00 	cmp.w	ip, #0
 8004bf0:	db1e      	blt.n	8004c30 <_strtol_l.constprop.0+0xc0>
 8004bf2:	45b1      	cmp	r9, r6
 8004bf4:	d31c      	bcc.n	8004c30 <_strtol_l.constprop.0+0xc0>
 8004bf6:	d101      	bne.n	8004bfc <_strtol_l.constprop.0+0x8c>
 8004bf8:	45a2      	cmp	sl, r4
 8004bfa:	db19      	blt.n	8004c30 <_strtol_l.constprop.0+0xc0>
 8004bfc:	fb06 4603 	mla	r6, r6, r3, r4
 8004c00:	f04f 0c01 	mov.w	ip, #1
 8004c04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c08:	e7e8      	b.n	8004bdc <_strtol_l.constprop.0+0x6c>
 8004c0a:	2c2b      	cmp	r4, #43	; 0x2b
 8004c0c:	bf04      	itt	eq
 8004c0e:	782c      	ldrbeq	r4, [r5, #0]
 8004c10:	1cb5      	addeq	r5, r6, #2
 8004c12:	e7ca      	b.n	8004baa <_strtol_l.constprop.0+0x3a>
 8004c14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004c18:	f1be 0f19 	cmp.w	lr, #25
 8004c1c:	d801      	bhi.n	8004c22 <_strtol_l.constprop.0+0xb2>
 8004c1e:	3c37      	subs	r4, #55	; 0x37
 8004c20:	e7e2      	b.n	8004be8 <_strtol_l.constprop.0+0x78>
 8004c22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004c26:	f1be 0f19 	cmp.w	lr, #25
 8004c2a:	d804      	bhi.n	8004c36 <_strtol_l.constprop.0+0xc6>
 8004c2c:	3c57      	subs	r4, #87	; 0x57
 8004c2e:	e7db      	b.n	8004be8 <_strtol_l.constprop.0+0x78>
 8004c30:	f04f 3cff 	mov.w	ip, #4294967295
 8004c34:	e7e6      	b.n	8004c04 <_strtol_l.constprop.0+0x94>
 8004c36:	f1bc 0f00 	cmp.w	ip, #0
 8004c3a:	da05      	bge.n	8004c48 <_strtol_l.constprop.0+0xd8>
 8004c3c:	2322      	movs	r3, #34	; 0x22
 8004c3e:	6003      	str	r3, [r0, #0]
 8004c40:	4646      	mov	r6, r8
 8004c42:	b942      	cbnz	r2, 8004c56 <_strtol_l.constprop.0+0xe6>
 8004c44:	4630      	mov	r0, r6
 8004c46:	e79e      	b.n	8004b86 <_strtol_l.constprop.0+0x16>
 8004c48:	b107      	cbz	r7, 8004c4c <_strtol_l.constprop.0+0xdc>
 8004c4a:	4276      	negs	r6, r6
 8004c4c:	2a00      	cmp	r2, #0
 8004c4e:	d0f9      	beq.n	8004c44 <_strtol_l.constprop.0+0xd4>
 8004c50:	f1bc 0f00 	cmp.w	ip, #0
 8004c54:	d000      	beq.n	8004c58 <_strtol_l.constprop.0+0xe8>
 8004c56:	1e69      	subs	r1, r5, #1
 8004c58:	6011      	str	r1, [r2, #0]
 8004c5a:	e7f3      	b.n	8004c44 <_strtol_l.constprop.0+0xd4>
 8004c5c:	2430      	movs	r4, #48	; 0x30
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1b1      	bne.n	8004bc6 <_strtol_l.constprop.0+0x56>
 8004c62:	2308      	movs	r3, #8
 8004c64:	e7af      	b.n	8004bc6 <_strtol_l.constprop.0+0x56>
 8004c66:	2c30      	cmp	r4, #48	; 0x30
 8004c68:	d0a5      	beq.n	8004bb6 <_strtol_l.constprop.0+0x46>
 8004c6a:	230a      	movs	r3, #10
 8004c6c:	e7ab      	b.n	8004bc6 <_strtol_l.constprop.0+0x56>
 8004c6e:	bf00      	nop
 8004c70:	08005725 	.word	0x08005725

08004c74 <strtol>:
 8004c74:	4613      	mov	r3, r2
 8004c76:	460a      	mov	r2, r1
 8004c78:	4601      	mov	r1, r0
 8004c7a:	4802      	ldr	r0, [pc, #8]	; (8004c84 <strtol+0x10>)
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f7ff bf77 	b.w	8004b70 <_strtol_l.constprop.0>
 8004c82:	bf00      	nop
 8004c84:	2000000c 	.word	0x2000000c

08004c88 <_vsiprintf_r>:
 8004c88:	b500      	push	{lr}
 8004c8a:	b09b      	sub	sp, #108	; 0x6c
 8004c8c:	9100      	str	r1, [sp, #0]
 8004c8e:	9104      	str	r1, [sp, #16]
 8004c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c94:	9105      	str	r1, [sp, #20]
 8004c96:	9102      	str	r1, [sp, #8]
 8004c98:	4905      	ldr	r1, [pc, #20]	; (8004cb0 <_vsiprintf_r+0x28>)
 8004c9a:	9103      	str	r1, [sp, #12]
 8004c9c:	4669      	mov	r1, sp
 8004c9e:	f000 f86f 	bl	8004d80 <_svfiprintf_r>
 8004ca2:	9b00      	ldr	r3, [sp, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	b01b      	add	sp, #108	; 0x6c
 8004caa:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cae:	bf00      	nop
 8004cb0:	ffff0208 	.word	0xffff0208

08004cb4 <vsiprintf>:
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	4601      	mov	r1, r0
 8004cba:	4802      	ldr	r0, [pc, #8]	; (8004cc4 <vsiprintf+0x10>)
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f7ff bfe3 	b.w	8004c88 <_vsiprintf_r>
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <__ssputs_r>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	688e      	ldr	r6, [r1, #8]
 8004cce:	429e      	cmp	r6, r3
 8004cd0:	4682      	mov	sl, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4690      	mov	r8, r2
 8004cd6:	461f      	mov	r7, r3
 8004cd8:	d838      	bhi.n	8004d4c <__ssputs_r+0x84>
 8004cda:	898a      	ldrh	r2, [r1, #12]
 8004cdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ce0:	d032      	beq.n	8004d48 <__ssputs_r+0x80>
 8004ce2:	6825      	ldr	r5, [r4, #0]
 8004ce4:	6909      	ldr	r1, [r1, #16]
 8004ce6:	eba5 0901 	sub.w	r9, r5, r1
 8004cea:	6965      	ldr	r5, [r4, #20]
 8004cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	444b      	add	r3, r9
 8004cf8:	106d      	asrs	r5, r5, #1
 8004cfa:	429d      	cmp	r5, r3
 8004cfc:	bf38      	it	cc
 8004cfe:	461d      	movcc	r5, r3
 8004d00:	0553      	lsls	r3, r2, #21
 8004d02:	d531      	bpl.n	8004d68 <__ssputs_r+0xa0>
 8004d04:	4629      	mov	r1, r5
 8004d06:	f000 fb63 	bl	80053d0 <_malloc_r>
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	b950      	cbnz	r0, 8004d24 <__ssputs_r+0x5c>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	f8ca 3000 	str.w	r3, [sl]
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d24:	6921      	ldr	r1, [r4, #16]
 8004d26:	464a      	mov	r2, r9
 8004d28:	f000 fabe 	bl	80052a8 <memcpy>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d36:	81a3      	strh	r3, [r4, #12]
 8004d38:	6126      	str	r6, [r4, #16]
 8004d3a:	6165      	str	r5, [r4, #20]
 8004d3c:	444e      	add	r6, r9
 8004d3e:	eba5 0509 	sub.w	r5, r5, r9
 8004d42:	6026      	str	r6, [r4, #0]
 8004d44:	60a5      	str	r5, [r4, #8]
 8004d46:	463e      	mov	r6, r7
 8004d48:	42be      	cmp	r6, r7
 8004d4a:	d900      	bls.n	8004d4e <__ssputs_r+0x86>
 8004d4c:	463e      	mov	r6, r7
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	4632      	mov	r2, r6
 8004d52:	4641      	mov	r1, r8
 8004d54:	f000 fab6 	bl	80052c4 <memmove>
 8004d58:	68a3      	ldr	r3, [r4, #8]
 8004d5a:	1b9b      	subs	r3, r3, r6
 8004d5c:	60a3      	str	r3, [r4, #8]
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	4433      	add	r3, r6
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	2000      	movs	r0, #0
 8004d66:	e7db      	b.n	8004d20 <__ssputs_r+0x58>
 8004d68:	462a      	mov	r2, r5
 8004d6a:	f000 fba5 	bl	80054b8 <_realloc_r>
 8004d6e:	4606      	mov	r6, r0
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d1e1      	bne.n	8004d38 <__ssputs_r+0x70>
 8004d74:	6921      	ldr	r1, [r4, #16]
 8004d76:	4650      	mov	r0, sl
 8004d78:	f000 fabe 	bl	80052f8 <_free_r>
 8004d7c:	e7c7      	b.n	8004d0e <__ssputs_r+0x46>
	...

08004d80 <_svfiprintf_r>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	4698      	mov	r8, r3
 8004d86:	898b      	ldrh	r3, [r1, #12]
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	b09d      	sub	sp, #116	; 0x74
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	460d      	mov	r5, r1
 8004d90:	4614      	mov	r4, r2
 8004d92:	d50e      	bpl.n	8004db2 <_svfiprintf_r+0x32>
 8004d94:	690b      	ldr	r3, [r1, #16]
 8004d96:	b963      	cbnz	r3, 8004db2 <_svfiprintf_r+0x32>
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	f000 fb19 	bl	80053d0 <_malloc_r>
 8004d9e:	6028      	str	r0, [r5, #0]
 8004da0:	6128      	str	r0, [r5, #16]
 8004da2:	b920      	cbnz	r0, 8004dae <_svfiprintf_r+0x2e>
 8004da4:	230c      	movs	r3, #12
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	e0d1      	b.n	8004f52 <_svfiprintf_r+0x1d2>
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	616b      	str	r3, [r5, #20]
 8004db2:	2300      	movs	r3, #0
 8004db4:	9309      	str	r3, [sp, #36]	; 0x24
 8004db6:	2320      	movs	r3, #32
 8004db8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dc0:	2330      	movs	r3, #48	; 0x30
 8004dc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f6c <_svfiprintf_r+0x1ec>
 8004dc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dca:	f04f 0901 	mov.w	r9, #1
 8004dce:	4623      	mov	r3, r4
 8004dd0:	469a      	mov	sl, r3
 8004dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd6:	b10a      	cbz	r2, 8004ddc <_svfiprintf_r+0x5c>
 8004dd8:	2a25      	cmp	r2, #37	; 0x25
 8004dda:	d1f9      	bne.n	8004dd0 <_svfiprintf_r+0x50>
 8004ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8004de0:	d00b      	beq.n	8004dfa <_svfiprintf_r+0x7a>
 8004de2:	465b      	mov	r3, fp
 8004de4:	4622      	mov	r2, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	4638      	mov	r0, r7
 8004dea:	f7ff ff6d 	bl	8004cc8 <__ssputs_r>
 8004dee:	3001      	adds	r0, #1
 8004df0:	f000 80aa 	beq.w	8004f48 <_svfiprintf_r+0x1c8>
 8004df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df6:	445a      	add	r2, fp
 8004df8:	9209      	str	r2, [sp, #36]	; 0x24
 8004dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80a2 	beq.w	8004f48 <_svfiprintf_r+0x1c8>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0e:	f10a 0a01 	add.w	sl, sl, #1
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	9307      	str	r3, [sp, #28]
 8004e16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e1c:	4654      	mov	r4, sl
 8004e1e:	2205      	movs	r2, #5
 8004e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e24:	4851      	ldr	r0, [pc, #324]	; (8004f6c <_svfiprintf_r+0x1ec>)
 8004e26:	f7fb fa13 	bl	8000250 <memchr>
 8004e2a:	9a04      	ldr	r2, [sp, #16]
 8004e2c:	b9d8      	cbnz	r0, 8004e66 <_svfiprintf_r+0xe6>
 8004e2e:	06d0      	lsls	r0, r2, #27
 8004e30:	bf44      	itt	mi
 8004e32:	2320      	movmi	r3, #32
 8004e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e38:	0711      	lsls	r1, r2, #28
 8004e3a:	bf44      	itt	mi
 8004e3c:	232b      	movmi	r3, #43	; 0x2b
 8004e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e42:	f89a 3000 	ldrb.w	r3, [sl]
 8004e46:	2b2a      	cmp	r3, #42	; 0x2a
 8004e48:	d015      	beq.n	8004e76 <_svfiprintf_r+0xf6>
 8004e4a:	9a07      	ldr	r2, [sp, #28]
 8004e4c:	4654      	mov	r4, sl
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f04f 0c0a 	mov.w	ip, #10
 8004e54:	4621      	mov	r1, r4
 8004e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e5a:	3b30      	subs	r3, #48	; 0x30
 8004e5c:	2b09      	cmp	r3, #9
 8004e5e:	d94e      	bls.n	8004efe <_svfiprintf_r+0x17e>
 8004e60:	b1b0      	cbz	r0, 8004e90 <_svfiprintf_r+0x110>
 8004e62:	9207      	str	r2, [sp, #28]
 8004e64:	e014      	b.n	8004e90 <_svfiprintf_r+0x110>
 8004e66:	eba0 0308 	sub.w	r3, r0, r8
 8004e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	9304      	str	r3, [sp, #16]
 8004e72:	46a2      	mov	sl, r4
 8004e74:	e7d2      	b.n	8004e1c <_svfiprintf_r+0x9c>
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	1d19      	adds	r1, r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	9103      	str	r1, [sp, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbb      	ittet	lt
 8004e82:	425b      	neglt	r3, r3
 8004e84:	f042 0202 	orrlt.w	r2, r2, #2
 8004e88:	9307      	strge	r3, [sp, #28]
 8004e8a:	9307      	strlt	r3, [sp, #28]
 8004e8c:	bfb8      	it	lt
 8004e8e:	9204      	strlt	r2, [sp, #16]
 8004e90:	7823      	ldrb	r3, [r4, #0]
 8004e92:	2b2e      	cmp	r3, #46	; 0x2e
 8004e94:	d10c      	bne.n	8004eb0 <_svfiprintf_r+0x130>
 8004e96:	7863      	ldrb	r3, [r4, #1]
 8004e98:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9a:	d135      	bne.n	8004f08 <_svfiprintf_r+0x188>
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	9203      	str	r2, [sp, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bfb8      	it	lt
 8004ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eac:	3402      	adds	r4, #2
 8004eae:	9305      	str	r3, [sp, #20]
 8004eb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f7c <_svfiprintf_r+0x1fc>
 8004eb4:	7821      	ldrb	r1, [r4, #0]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	4650      	mov	r0, sl
 8004eba:	f7fb f9c9 	bl	8000250 <memchr>
 8004ebe:	b140      	cbz	r0, 8004ed2 <_svfiprintf_r+0x152>
 8004ec0:	2340      	movs	r3, #64	; 0x40
 8004ec2:	eba0 000a 	sub.w	r0, r0, sl
 8004ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eca:	9b04      	ldr	r3, [sp, #16]
 8004ecc:	4303      	orrs	r3, r0
 8004ece:	3401      	adds	r4, #1
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed6:	4826      	ldr	r0, [pc, #152]	; (8004f70 <_svfiprintf_r+0x1f0>)
 8004ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004edc:	2206      	movs	r2, #6
 8004ede:	f7fb f9b7 	bl	8000250 <memchr>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d038      	beq.n	8004f58 <_svfiprintf_r+0x1d8>
 8004ee6:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <_svfiprintf_r+0x1f4>)
 8004ee8:	bb1b      	cbnz	r3, 8004f32 <_svfiprintf_r+0x1b2>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	3307      	adds	r3, #7
 8004eee:	f023 0307 	bic.w	r3, r3, #7
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	9303      	str	r3, [sp, #12]
 8004ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef8:	4433      	add	r3, r6
 8004efa:	9309      	str	r3, [sp, #36]	; 0x24
 8004efc:	e767      	b.n	8004dce <_svfiprintf_r+0x4e>
 8004efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f02:	460c      	mov	r4, r1
 8004f04:	2001      	movs	r0, #1
 8004f06:	e7a5      	b.n	8004e54 <_svfiprintf_r+0xd4>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	3401      	adds	r4, #1
 8004f0c:	9305      	str	r3, [sp, #20]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f04f 0c0a 	mov.w	ip, #10
 8004f14:	4620      	mov	r0, r4
 8004f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f1a:	3a30      	subs	r2, #48	; 0x30
 8004f1c:	2a09      	cmp	r2, #9
 8004f1e:	d903      	bls.n	8004f28 <_svfiprintf_r+0x1a8>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0c5      	beq.n	8004eb0 <_svfiprintf_r+0x130>
 8004f24:	9105      	str	r1, [sp, #20]
 8004f26:	e7c3      	b.n	8004eb0 <_svfiprintf_r+0x130>
 8004f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e7f0      	b.n	8004f14 <_svfiprintf_r+0x194>
 8004f32:	ab03      	add	r3, sp, #12
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	462a      	mov	r2, r5
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <_svfiprintf_r+0x1f8>)
 8004f3a:	a904      	add	r1, sp, #16
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	f3af 8000 	nop.w
 8004f42:	1c42      	adds	r2, r0, #1
 8004f44:	4606      	mov	r6, r0
 8004f46:	d1d6      	bne.n	8004ef6 <_svfiprintf_r+0x176>
 8004f48:	89ab      	ldrh	r3, [r5, #12]
 8004f4a:	065b      	lsls	r3, r3, #25
 8004f4c:	f53f af2c 	bmi.w	8004da8 <_svfiprintf_r+0x28>
 8004f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f52:	b01d      	add	sp, #116	; 0x74
 8004f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	ab03      	add	r3, sp, #12
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <_svfiprintf_r+0x1f8>)
 8004f60:	a904      	add	r1, sp, #16
 8004f62:	4638      	mov	r0, r7
 8004f64:	f000 f87a 	bl	800505c <_printf_i>
 8004f68:	e7eb      	b.n	8004f42 <_svfiprintf_r+0x1c2>
 8004f6a:	bf00      	nop
 8004f6c:	08005825 	.word	0x08005825
 8004f70:	0800582f 	.word	0x0800582f
 8004f74:	00000000 	.word	0x00000000
 8004f78:	08004cc9 	.word	0x08004cc9
 8004f7c:	0800582b 	.word	0x0800582b

08004f80 <_printf_common>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	4616      	mov	r6, r2
 8004f86:	4699      	mov	r9, r3
 8004f88:	688a      	ldr	r2, [r1, #8]
 8004f8a:	690b      	ldr	r3, [r1, #16]
 8004f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfb8      	it	lt
 8004f94:	4613      	movlt	r3, r2
 8004f96:	6033      	str	r3, [r6, #0]
 8004f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	b10a      	cbz	r2, 8004fa6 <_printf_common+0x26>
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	6033      	str	r3, [r6, #0]
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	0699      	lsls	r1, r3, #26
 8004faa:	bf42      	ittt	mi
 8004fac:	6833      	ldrmi	r3, [r6, #0]
 8004fae:	3302      	addmi	r3, #2
 8004fb0:	6033      	strmi	r3, [r6, #0]
 8004fb2:	6825      	ldr	r5, [r4, #0]
 8004fb4:	f015 0506 	ands.w	r5, r5, #6
 8004fb8:	d106      	bne.n	8004fc8 <_printf_common+0x48>
 8004fba:	f104 0a19 	add.w	sl, r4, #25
 8004fbe:	68e3      	ldr	r3, [r4, #12]
 8004fc0:	6832      	ldr	r2, [r6, #0]
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	42ab      	cmp	r3, r5
 8004fc6:	dc26      	bgt.n	8005016 <_printf_common+0x96>
 8004fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fcc:	1e13      	subs	r3, r2, #0
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	bf18      	it	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	0692      	lsls	r2, r2, #26
 8004fd6:	d42b      	bmi.n	8005030 <_printf_common+0xb0>
 8004fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fdc:	4649      	mov	r1, r9
 8004fde:	4638      	mov	r0, r7
 8004fe0:	47c0      	blx	r8
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d01e      	beq.n	8005024 <_printf_common+0xa4>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	68e5      	ldr	r5, [r4, #12]
 8004fea:	6832      	ldr	r2, [r6, #0]
 8004fec:	f003 0306 	and.w	r3, r3, #6
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	bf08      	it	eq
 8004ff4:	1aad      	subeq	r5, r5, r2
 8004ff6:	68a3      	ldr	r3, [r4, #8]
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	bf0c      	ite	eq
 8004ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005000:	2500      	movne	r5, #0
 8005002:	4293      	cmp	r3, r2
 8005004:	bfc4      	itt	gt
 8005006:	1a9b      	subgt	r3, r3, r2
 8005008:	18ed      	addgt	r5, r5, r3
 800500a:	2600      	movs	r6, #0
 800500c:	341a      	adds	r4, #26
 800500e:	42b5      	cmp	r5, r6
 8005010:	d11a      	bne.n	8005048 <_printf_common+0xc8>
 8005012:	2000      	movs	r0, #0
 8005014:	e008      	b.n	8005028 <_printf_common+0xa8>
 8005016:	2301      	movs	r3, #1
 8005018:	4652      	mov	r2, sl
 800501a:	4649      	mov	r1, r9
 800501c:	4638      	mov	r0, r7
 800501e:	47c0      	blx	r8
 8005020:	3001      	adds	r0, #1
 8005022:	d103      	bne.n	800502c <_printf_common+0xac>
 8005024:	f04f 30ff 	mov.w	r0, #4294967295
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	3501      	adds	r5, #1
 800502e:	e7c6      	b.n	8004fbe <_printf_common+0x3e>
 8005030:	18e1      	adds	r1, r4, r3
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	2030      	movs	r0, #48	; 0x30
 8005036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800503a:	4422      	add	r2, r4
 800503c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005044:	3302      	adds	r3, #2
 8005046:	e7c7      	b.n	8004fd8 <_printf_common+0x58>
 8005048:	2301      	movs	r3, #1
 800504a:	4622      	mov	r2, r4
 800504c:	4649      	mov	r1, r9
 800504e:	4638      	mov	r0, r7
 8005050:	47c0      	blx	r8
 8005052:	3001      	adds	r0, #1
 8005054:	d0e6      	beq.n	8005024 <_printf_common+0xa4>
 8005056:	3601      	adds	r6, #1
 8005058:	e7d9      	b.n	800500e <_printf_common+0x8e>
	...

0800505c <_printf_i>:
 800505c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	7e0f      	ldrb	r7, [r1, #24]
 8005062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005064:	2f78      	cmp	r7, #120	; 0x78
 8005066:	4691      	mov	r9, r2
 8005068:	4680      	mov	r8, r0
 800506a:	460c      	mov	r4, r1
 800506c:	469a      	mov	sl, r3
 800506e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005072:	d807      	bhi.n	8005084 <_printf_i+0x28>
 8005074:	2f62      	cmp	r7, #98	; 0x62
 8005076:	d80a      	bhi.n	800508e <_printf_i+0x32>
 8005078:	2f00      	cmp	r7, #0
 800507a:	f000 80d8 	beq.w	800522e <_printf_i+0x1d2>
 800507e:	2f58      	cmp	r7, #88	; 0x58
 8005080:	f000 80a3 	beq.w	80051ca <_printf_i+0x16e>
 8005084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800508c:	e03a      	b.n	8005104 <_printf_i+0xa8>
 800508e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005092:	2b15      	cmp	r3, #21
 8005094:	d8f6      	bhi.n	8005084 <_printf_i+0x28>
 8005096:	a101      	add	r1, pc, #4	; (adr r1, 800509c <_printf_i+0x40>)
 8005098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800509c:	080050f5 	.word	0x080050f5
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005085 	.word	0x08005085
 80050a8:	08005085 	.word	0x08005085
 80050ac:	08005085 	.word	0x08005085
 80050b0:	08005085 	.word	0x08005085
 80050b4:	08005109 	.word	0x08005109
 80050b8:	08005085 	.word	0x08005085
 80050bc:	08005085 	.word	0x08005085
 80050c0:	08005085 	.word	0x08005085
 80050c4:	08005085 	.word	0x08005085
 80050c8:	08005215 	.word	0x08005215
 80050cc:	08005139 	.word	0x08005139
 80050d0:	080051f7 	.word	0x080051f7
 80050d4:	08005085 	.word	0x08005085
 80050d8:	08005085 	.word	0x08005085
 80050dc:	08005237 	.word	0x08005237
 80050e0:	08005085 	.word	0x08005085
 80050e4:	08005139 	.word	0x08005139
 80050e8:	08005085 	.word	0x08005085
 80050ec:	08005085 	.word	0x08005085
 80050f0:	080051ff 	.word	0x080051ff
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	1d1a      	adds	r2, r3, #4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	602a      	str	r2, [r5, #0]
 80050fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005104:	2301      	movs	r3, #1
 8005106:	e0a3      	b.n	8005250 <_printf_i+0x1f4>
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	6829      	ldr	r1, [r5, #0]
 800510c:	0606      	lsls	r6, r0, #24
 800510e:	f101 0304 	add.w	r3, r1, #4
 8005112:	d50a      	bpl.n	800512a <_printf_i+0xce>
 8005114:	680e      	ldr	r6, [r1, #0]
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	2e00      	cmp	r6, #0
 800511a:	da03      	bge.n	8005124 <_printf_i+0xc8>
 800511c:	232d      	movs	r3, #45	; 0x2d
 800511e:	4276      	negs	r6, r6
 8005120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005124:	485e      	ldr	r0, [pc, #376]	; (80052a0 <_printf_i+0x244>)
 8005126:	230a      	movs	r3, #10
 8005128:	e019      	b.n	800515e <_printf_i+0x102>
 800512a:	680e      	ldr	r6, [r1, #0]
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005132:	bf18      	it	ne
 8005134:	b236      	sxthne	r6, r6
 8005136:	e7ef      	b.n	8005118 <_printf_i+0xbc>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	1d19      	adds	r1, r3, #4
 800513e:	6029      	str	r1, [r5, #0]
 8005140:	0601      	lsls	r1, r0, #24
 8005142:	d501      	bpl.n	8005148 <_printf_i+0xec>
 8005144:	681e      	ldr	r6, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0xf2>
 8005148:	0646      	lsls	r6, r0, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0xe8>
 800514c:	881e      	ldrh	r6, [r3, #0]
 800514e:	4854      	ldr	r0, [pc, #336]	; (80052a0 <_printf_i+0x244>)
 8005150:	2f6f      	cmp	r7, #111	; 0x6f
 8005152:	bf0c      	ite	eq
 8005154:	2308      	moveq	r3, #8
 8005156:	230a      	movne	r3, #10
 8005158:	2100      	movs	r1, #0
 800515a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800515e:	6865      	ldr	r5, [r4, #4]
 8005160:	60a5      	str	r5, [r4, #8]
 8005162:	2d00      	cmp	r5, #0
 8005164:	bfa2      	ittt	ge
 8005166:	6821      	ldrge	r1, [r4, #0]
 8005168:	f021 0104 	bicge.w	r1, r1, #4
 800516c:	6021      	strge	r1, [r4, #0]
 800516e:	b90e      	cbnz	r6, 8005174 <_printf_i+0x118>
 8005170:	2d00      	cmp	r5, #0
 8005172:	d04d      	beq.n	8005210 <_printf_i+0x1b4>
 8005174:	4615      	mov	r5, r2
 8005176:	fbb6 f1f3 	udiv	r1, r6, r3
 800517a:	fb03 6711 	mls	r7, r3, r1, r6
 800517e:	5dc7      	ldrb	r7, [r0, r7]
 8005180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005184:	4637      	mov	r7, r6
 8005186:	42bb      	cmp	r3, r7
 8005188:	460e      	mov	r6, r1
 800518a:	d9f4      	bls.n	8005176 <_printf_i+0x11a>
 800518c:	2b08      	cmp	r3, #8
 800518e:	d10b      	bne.n	80051a8 <_printf_i+0x14c>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07de      	lsls	r6, r3, #31
 8005194:	d508      	bpl.n	80051a8 <_printf_i+0x14c>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	6861      	ldr	r1, [r4, #4]
 800519a:	4299      	cmp	r1, r3
 800519c:	bfde      	ittt	le
 800519e:	2330      	movle	r3, #48	; 0x30
 80051a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051a8:	1b52      	subs	r2, r2, r5
 80051aa:	6122      	str	r2, [r4, #16]
 80051ac:	f8cd a000 	str.w	sl, [sp]
 80051b0:	464b      	mov	r3, r9
 80051b2:	aa03      	add	r2, sp, #12
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff fee2 	bl	8004f80 <_printf_common>
 80051bc:	3001      	adds	r0, #1
 80051be:	d14c      	bne.n	800525a <_printf_i+0x1fe>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	b004      	add	sp, #16
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	4835      	ldr	r0, [pc, #212]	; (80052a0 <_printf_i+0x244>)
 80051cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051d0:	6829      	ldr	r1, [r5, #0]
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051d8:	6029      	str	r1, [r5, #0]
 80051da:	061d      	lsls	r5, r3, #24
 80051dc:	d514      	bpl.n	8005208 <_printf_i+0x1ac>
 80051de:	07df      	lsls	r7, r3, #31
 80051e0:	bf44      	itt	mi
 80051e2:	f043 0320 	orrmi.w	r3, r3, #32
 80051e6:	6023      	strmi	r3, [r4, #0]
 80051e8:	b91e      	cbnz	r6, 80051f2 <_printf_i+0x196>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f023 0320 	bic.w	r3, r3, #32
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	2310      	movs	r3, #16
 80051f4:	e7b0      	b.n	8005158 <_printf_i+0xfc>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	f043 0320 	orr.w	r3, r3, #32
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	2378      	movs	r3, #120	; 0x78
 8005200:	4828      	ldr	r0, [pc, #160]	; (80052a4 <_printf_i+0x248>)
 8005202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005206:	e7e3      	b.n	80051d0 <_printf_i+0x174>
 8005208:	0659      	lsls	r1, r3, #25
 800520a:	bf48      	it	mi
 800520c:	b2b6      	uxthmi	r6, r6
 800520e:	e7e6      	b.n	80051de <_printf_i+0x182>
 8005210:	4615      	mov	r5, r2
 8005212:	e7bb      	b.n	800518c <_printf_i+0x130>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	6826      	ldr	r6, [r4, #0]
 8005218:	6961      	ldr	r1, [r4, #20]
 800521a:	1d18      	adds	r0, r3, #4
 800521c:	6028      	str	r0, [r5, #0]
 800521e:	0635      	lsls	r5, r6, #24
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	d501      	bpl.n	8005228 <_printf_i+0x1cc>
 8005224:	6019      	str	r1, [r3, #0]
 8005226:	e002      	b.n	800522e <_printf_i+0x1d2>
 8005228:	0670      	lsls	r0, r6, #25
 800522a:	d5fb      	bpl.n	8005224 <_printf_i+0x1c8>
 800522c:	8019      	strh	r1, [r3, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	4615      	mov	r5, r2
 8005234:	e7ba      	b.n	80051ac <_printf_i+0x150>
 8005236:	682b      	ldr	r3, [r5, #0]
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	602a      	str	r2, [r5, #0]
 800523c:	681d      	ldr	r5, [r3, #0]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	2100      	movs	r1, #0
 8005242:	4628      	mov	r0, r5
 8005244:	f7fb f804 	bl	8000250 <memchr>
 8005248:	b108      	cbz	r0, 800524e <_printf_i+0x1f2>
 800524a:	1b40      	subs	r0, r0, r5
 800524c:	6060      	str	r0, [r4, #4]
 800524e:	6863      	ldr	r3, [r4, #4]
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	2300      	movs	r3, #0
 8005254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005258:	e7a8      	b.n	80051ac <_printf_i+0x150>
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	462a      	mov	r2, r5
 800525e:	4649      	mov	r1, r9
 8005260:	4640      	mov	r0, r8
 8005262:	47d0      	blx	sl
 8005264:	3001      	adds	r0, #1
 8005266:	d0ab      	beq.n	80051c0 <_printf_i+0x164>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	079b      	lsls	r3, r3, #30
 800526c:	d413      	bmi.n	8005296 <_printf_i+0x23a>
 800526e:	68e0      	ldr	r0, [r4, #12]
 8005270:	9b03      	ldr	r3, [sp, #12]
 8005272:	4298      	cmp	r0, r3
 8005274:	bfb8      	it	lt
 8005276:	4618      	movlt	r0, r3
 8005278:	e7a4      	b.n	80051c4 <_printf_i+0x168>
 800527a:	2301      	movs	r3, #1
 800527c:	4632      	mov	r2, r6
 800527e:	4649      	mov	r1, r9
 8005280:	4640      	mov	r0, r8
 8005282:	47d0      	blx	sl
 8005284:	3001      	adds	r0, #1
 8005286:	d09b      	beq.n	80051c0 <_printf_i+0x164>
 8005288:	3501      	adds	r5, #1
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	9903      	ldr	r1, [sp, #12]
 800528e:	1a5b      	subs	r3, r3, r1
 8005290:	42ab      	cmp	r3, r5
 8005292:	dcf2      	bgt.n	800527a <_printf_i+0x21e>
 8005294:	e7eb      	b.n	800526e <_printf_i+0x212>
 8005296:	2500      	movs	r5, #0
 8005298:	f104 0619 	add.w	r6, r4, #25
 800529c:	e7f5      	b.n	800528a <_printf_i+0x22e>
 800529e:	bf00      	nop
 80052a0:	08005836 	.word	0x08005836
 80052a4:	08005847 	.word	0x08005847

080052a8 <memcpy>:
 80052a8:	440a      	add	r2, r1
 80052aa:	4291      	cmp	r1, r2
 80052ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80052b0:	d100      	bne.n	80052b4 <memcpy+0xc>
 80052b2:	4770      	bx	lr
 80052b4:	b510      	push	{r4, lr}
 80052b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052be:	4291      	cmp	r1, r2
 80052c0:	d1f9      	bne.n	80052b6 <memcpy+0xe>
 80052c2:	bd10      	pop	{r4, pc}

080052c4 <memmove>:
 80052c4:	4288      	cmp	r0, r1
 80052c6:	b510      	push	{r4, lr}
 80052c8:	eb01 0402 	add.w	r4, r1, r2
 80052cc:	d902      	bls.n	80052d4 <memmove+0x10>
 80052ce:	4284      	cmp	r4, r0
 80052d0:	4623      	mov	r3, r4
 80052d2:	d807      	bhi.n	80052e4 <memmove+0x20>
 80052d4:	1e43      	subs	r3, r0, #1
 80052d6:	42a1      	cmp	r1, r4
 80052d8:	d008      	beq.n	80052ec <memmove+0x28>
 80052da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052e2:	e7f8      	b.n	80052d6 <memmove+0x12>
 80052e4:	4402      	add	r2, r0
 80052e6:	4601      	mov	r1, r0
 80052e8:	428a      	cmp	r2, r1
 80052ea:	d100      	bne.n	80052ee <memmove+0x2a>
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052f6:	e7f7      	b.n	80052e8 <memmove+0x24>

080052f8 <_free_r>:
 80052f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052fa:	2900      	cmp	r1, #0
 80052fc:	d044      	beq.n	8005388 <_free_r+0x90>
 80052fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005302:	9001      	str	r0, [sp, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f1a1 0404 	sub.w	r4, r1, #4
 800530a:	bfb8      	it	lt
 800530c:	18e4      	addlt	r4, r4, r3
 800530e:	f000 f913 	bl	8005538 <__malloc_lock>
 8005312:	4a1e      	ldr	r2, [pc, #120]	; (800538c <_free_r+0x94>)
 8005314:	9801      	ldr	r0, [sp, #4]
 8005316:	6813      	ldr	r3, [r2, #0]
 8005318:	b933      	cbnz	r3, 8005328 <_free_r+0x30>
 800531a:	6063      	str	r3, [r4, #4]
 800531c:	6014      	str	r4, [r2, #0]
 800531e:	b003      	add	sp, #12
 8005320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005324:	f000 b90e 	b.w	8005544 <__malloc_unlock>
 8005328:	42a3      	cmp	r3, r4
 800532a:	d908      	bls.n	800533e <_free_r+0x46>
 800532c:	6825      	ldr	r5, [r4, #0]
 800532e:	1961      	adds	r1, r4, r5
 8005330:	428b      	cmp	r3, r1
 8005332:	bf01      	itttt	eq
 8005334:	6819      	ldreq	r1, [r3, #0]
 8005336:	685b      	ldreq	r3, [r3, #4]
 8005338:	1949      	addeq	r1, r1, r5
 800533a:	6021      	streq	r1, [r4, #0]
 800533c:	e7ed      	b.n	800531a <_free_r+0x22>
 800533e:	461a      	mov	r2, r3
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b10b      	cbz	r3, 8005348 <_free_r+0x50>
 8005344:	42a3      	cmp	r3, r4
 8005346:	d9fa      	bls.n	800533e <_free_r+0x46>
 8005348:	6811      	ldr	r1, [r2, #0]
 800534a:	1855      	adds	r5, r2, r1
 800534c:	42a5      	cmp	r5, r4
 800534e:	d10b      	bne.n	8005368 <_free_r+0x70>
 8005350:	6824      	ldr	r4, [r4, #0]
 8005352:	4421      	add	r1, r4
 8005354:	1854      	adds	r4, r2, r1
 8005356:	42a3      	cmp	r3, r4
 8005358:	6011      	str	r1, [r2, #0]
 800535a:	d1e0      	bne.n	800531e <_free_r+0x26>
 800535c:	681c      	ldr	r4, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	6053      	str	r3, [r2, #4]
 8005362:	4421      	add	r1, r4
 8005364:	6011      	str	r1, [r2, #0]
 8005366:	e7da      	b.n	800531e <_free_r+0x26>
 8005368:	d902      	bls.n	8005370 <_free_r+0x78>
 800536a:	230c      	movs	r3, #12
 800536c:	6003      	str	r3, [r0, #0]
 800536e:	e7d6      	b.n	800531e <_free_r+0x26>
 8005370:	6825      	ldr	r5, [r4, #0]
 8005372:	1961      	adds	r1, r4, r5
 8005374:	428b      	cmp	r3, r1
 8005376:	bf04      	itt	eq
 8005378:	6819      	ldreq	r1, [r3, #0]
 800537a:	685b      	ldreq	r3, [r3, #4]
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	bf04      	itt	eq
 8005380:	1949      	addeq	r1, r1, r5
 8005382:	6021      	streq	r1, [r4, #0]
 8005384:	6054      	str	r4, [r2, #4]
 8005386:	e7ca      	b.n	800531e <_free_r+0x26>
 8005388:	b003      	add	sp, #12
 800538a:	bd30      	pop	{r4, r5, pc}
 800538c:	20000270 	.word	0x20000270

08005390 <sbrk_aligned>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4e0e      	ldr	r6, [pc, #56]	; (80053cc <sbrk_aligned+0x3c>)
 8005394:	460c      	mov	r4, r1
 8005396:	6831      	ldr	r1, [r6, #0]
 8005398:	4605      	mov	r5, r0
 800539a:	b911      	cbnz	r1, 80053a2 <sbrk_aligned+0x12>
 800539c:	f000 f8bc 	bl	8005518 <_sbrk_r>
 80053a0:	6030      	str	r0, [r6, #0]
 80053a2:	4621      	mov	r1, r4
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 f8b7 	bl	8005518 <_sbrk_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	d00a      	beq.n	80053c4 <sbrk_aligned+0x34>
 80053ae:	1cc4      	adds	r4, r0, #3
 80053b0:	f024 0403 	bic.w	r4, r4, #3
 80053b4:	42a0      	cmp	r0, r4
 80053b6:	d007      	beq.n	80053c8 <sbrk_aligned+0x38>
 80053b8:	1a21      	subs	r1, r4, r0
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f8ac 	bl	8005518 <_sbrk_r>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d101      	bne.n	80053c8 <sbrk_aligned+0x38>
 80053c4:	f04f 34ff 	mov.w	r4, #4294967295
 80053c8:	4620      	mov	r0, r4
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	20000274 	.word	0x20000274

080053d0 <_malloc_r>:
 80053d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	1ccd      	adds	r5, r1, #3
 80053d6:	f025 0503 	bic.w	r5, r5, #3
 80053da:	3508      	adds	r5, #8
 80053dc:	2d0c      	cmp	r5, #12
 80053de:	bf38      	it	cc
 80053e0:	250c      	movcc	r5, #12
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	4607      	mov	r7, r0
 80053e6:	db01      	blt.n	80053ec <_malloc_r+0x1c>
 80053e8:	42a9      	cmp	r1, r5
 80053ea:	d905      	bls.n	80053f8 <_malloc_r+0x28>
 80053ec:	230c      	movs	r3, #12
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	2600      	movs	r6, #0
 80053f2:	4630      	mov	r0, r6
 80053f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f8:	4e2e      	ldr	r6, [pc, #184]	; (80054b4 <_malloc_r+0xe4>)
 80053fa:	f000 f89d 	bl	8005538 <__malloc_lock>
 80053fe:	6833      	ldr	r3, [r6, #0]
 8005400:	461c      	mov	r4, r3
 8005402:	bb34      	cbnz	r4, 8005452 <_malloc_r+0x82>
 8005404:	4629      	mov	r1, r5
 8005406:	4638      	mov	r0, r7
 8005408:	f7ff ffc2 	bl	8005390 <sbrk_aligned>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	4604      	mov	r4, r0
 8005410:	d14d      	bne.n	80054ae <_malloc_r+0xde>
 8005412:	6834      	ldr	r4, [r6, #0]
 8005414:	4626      	mov	r6, r4
 8005416:	2e00      	cmp	r6, #0
 8005418:	d140      	bne.n	800549c <_malloc_r+0xcc>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	4631      	mov	r1, r6
 800541e:	4638      	mov	r0, r7
 8005420:	eb04 0803 	add.w	r8, r4, r3
 8005424:	f000 f878 	bl	8005518 <_sbrk_r>
 8005428:	4580      	cmp	r8, r0
 800542a:	d13a      	bne.n	80054a2 <_malloc_r+0xd2>
 800542c:	6821      	ldr	r1, [r4, #0]
 800542e:	3503      	adds	r5, #3
 8005430:	1a6d      	subs	r5, r5, r1
 8005432:	f025 0503 	bic.w	r5, r5, #3
 8005436:	3508      	adds	r5, #8
 8005438:	2d0c      	cmp	r5, #12
 800543a:	bf38      	it	cc
 800543c:	250c      	movcc	r5, #12
 800543e:	4629      	mov	r1, r5
 8005440:	4638      	mov	r0, r7
 8005442:	f7ff ffa5 	bl	8005390 <sbrk_aligned>
 8005446:	3001      	adds	r0, #1
 8005448:	d02b      	beq.n	80054a2 <_malloc_r+0xd2>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	442b      	add	r3, r5
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	e00e      	b.n	8005470 <_malloc_r+0xa0>
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	1b52      	subs	r2, r2, r5
 8005456:	d41e      	bmi.n	8005496 <_malloc_r+0xc6>
 8005458:	2a0b      	cmp	r2, #11
 800545a:	d916      	bls.n	800548a <_malloc_r+0xba>
 800545c:	1961      	adds	r1, r4, r5
 800545e:	42a3      	cmp	r3, r4
 8005460:	6025      	str	r5, [r4, #0]
 8005462:	bf18      	it	ne
 8005464:	6059      	strne	r1, [r3, #4]
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	bf08      	it	eq
 800546a:	6031      	streq	r1, [r6, #0]
 800546c:	5162      	str	r2, [r4, r5]
 800546e:	604b      	str	r3, [r1, #4]
 8005470:	4638      	mov	r0, r7
 8005472:	f104 060b 	add.w	r6, r4, #11
 8005476:	f000 f865 	bl	8005544 <__malloc_unlock>
 800547a:	f026 0607 	bic.w	r6, r6, #7
 800547e:	1d23      	adds	r3, r4, #4
 8005480:	1af2      	subs	r2, r6, r3
 8005482:	d0b6      	beq.n	80053f2 <_malloc_r+0x22>
 8005484:	1b9b      	subs	r3, r3, r6
 8005486:	50a3      	str	r3, [r4, r2]
 8005488:	e7b3      	b.n	80053f2 <_malloc_r+0x22>
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	42a3      	cmp	r3, r4
 800548e:	bf0c      	ite	eq
 8005490:	6032      	streq	r2, [r6, #0]
 8005492:	605a      	strne	r2, [r3, #4]
 8005494:	e7ec      	b.n	8005470 <_malloc_r+0xa0>
 8005496:	4623      	mov	r3, r4
 8005498:	6864      	ldr	r4, [r4, #4]
 800549a:	e7b2      	b.n	8005402 <_malloc_r+0x32>
 800549c:	4634      	mov	r4, r6
 800549e:	6876      	ldr	r6, [r6, #4]
 80054a0:	e7b9      	b.n	8005416 <_malloc_r+0x46>
 80054a2:	230c      	movs	r3, #12
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4638      	mov	r0, r7
 80054a8:	f000 f84c 	bl	8005544 <__malloc_unlock>
 80054ac:	e7a1      	b.n	80053f2 <_malloc_r+0x22>
 80054ae:	6025      	str	r5, [r4, #0]
 80054b0:	e7de      	b.n	8005470 <_malloc_r+0xa0>
 80054b2:	bf00      	nop
 80054b4:	20000270 	.word	0x20000270

080054b8 <_realloc_r>:
 80054b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054bc:	4680      	mov	r8, r0
 80054be:	4614      	mov	r4, r2
 80054c0:	460e      	mov	r6, r1
 80054c2:	b921      	cbnz	r1, 80054ce <_realloc_r+0x16>
 80054c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c8:	4611      	mov	r1, r2
 80054ca:	f7ff bf81 	b.w	80053d0 <_malloc_r>
 80054ce:	b92a      	cbnz	r2, 80054dc <_realloc_r+0x24>
 80054d0:	f7ff ff12 	bl	80052f8 <_free_r>
 80054d4:	4625      	mov	r5, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054dc:	f000 f838 	bl	8005550 <_malloc_usable_size_r>
 80054e0:	4284      	cmp	r4, r0
 80054e2:	4607      	mov	r7, r0
 80054e4:	d802      	bhi.n	80054ec <_realloc_r+0x34>
 80054e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054ea:	d812      	bhi.n	8005512 <_realloc_r+0x5a>
 80054ec:	4621      	mov	r1, r4
 80054ee:	4640      	mov	r0, r8
 80054f0:	f7ff ff6e 	bl	80053d0 <_malloc_r>
 80054f4:	4605      	mov	r5, r0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d0ed      	beq.n	80054d6 <_realloc_r+0x1e>
 80054fa:	42bc      	cmp	r4, r7
 80054fc:	4622      	mov	r2, r4
 80054fe:	4631      	mov	r1, r6
 8005500:	bf28      	it	cs
 8005502:	463a      	movcs	r2, r7
 8005504:	f7ff fed0 	bl	80052a8 <memcpy>
 8005508:	4631      	mov	r1, r6
 800550a:	4640      	mov	r0, r8
 800550c:	f7ff fef4 	bl	80052f8 <_free_r>
 8005510:	e7e1      	b.n	80054d6 <_realloc_r+0x1e>
 8005512:	4635      	mov	r5, r6
 8005514:	e7df      	b.n	80054d6 <_realloc_r+0x1e>
	...

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	; (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fc f980 	bl	8001828 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	20000278 	.word	0x20000278

08005538 <__malloc_lock>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__malloc_lock+0x8>)
 800553a:	f000 b811 	b.w	8005560 <__retarget_lock_acquire_recursive>
 800553e:	bf00      	nop
 8005540:	2000027c 	.word	0x2000027c

08005544 <__malloc_unlock>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__malloc_unlock+0x8>)
 8005546:	f000 b80c 	b.w	8005562 <__retarget_lock_release_recursive>
 800554a:	bf00      	nop
 800554c:	2000027c 	.word	0x2000027c

08005550 <_malloc_usable_size_r>:
 8005550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005554:	1f18      	subs	r0, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	bfbc      	itt	lt
 800555a:	580b      	ldrlt	r3, [r1, r0]
 800555c:	18c0      	addlt	r0, r0, r3
 800555e:	4770      	bx	lr

08005560 <__retarget_lock_acquire_recursive>:
 8005560:	4770      	bx	lr

08005562 <__retarget_lock_release_recursive>:
 8005562:	4770      	bx	lr
 8005564:	0000      	movs	r0, r0
	...

08005568 <ceil>:
 8005568:	ee10 1a90 	vmov	r1, s1
 800556c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005570:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8005574:	2b13      	cmp	r3, #19
 8005576:	b530      	push	{r4, r5, lr}
 8005578:	ee10 0a10 	vmov	r0, s0
 800557c:	ee10 5a10 	vmov	r5, s0
 8005580:	dc2f      	bgt.n	80055e2 <ceil+0x7a>
 8005582:	2b00      	cmp	r3, #0
 8005584:	da13      	bge.n	80055ae <ceil+0x46>
 8005586:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8005648 <ceil+0xe0>
 800558a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800558e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005596:	dd05      	ble.n	80055a4 <ceil+0x3c>
 8005598:	2900      	cmp	r1, #0
 800559a:	db4c      	blt.n	8005636 <ceil+0xce>
 800559c:	4301      	orrs	r1, r0
 800559e:	d04e      	beq.n	800563e <ceil+0xd6>
 80055a0:	492b      	ldr	r1, [pc, #172]	; (8005650 <ceil+0xe8>)
 80055a2:	2000      	movs	r0, #0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4602      	mov	r2, r0
 80055a8:	ec43 2b10 	vmov	d0, r2, r3
 80055ac:	e020      	b.n	80055f0 <ceil+0x88>
 80055ae:	4a29      	ldr	r2, [pc, #164]	; (8005654 <ceil+0xec>)
 80055b0:	411a      	asrs	r2, r3
 80055b2:	ea01 0402 	and.w	r4, r1, r2
 80055b6:	4304      	orrs	r4, r0
 80055b8:	d01a      	beq.n	80055f0 <ceil+0x88>
 80055ba:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8005648 <ceil+0xe0>
 80055be:	ee30 0b07 	vadd.f64	d0, d0, d7
 80055c2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80055c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ca:	ddeb      	ble.n	80055a4 <ceil+0x3c>
 80055cc:	2900      	cmp	r1, #0
 80055ce:	bfc2      	ittt	gt
 80055d0:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 80055d4:	fa40 f303 	asrgt.w	r3, r0, r3
 80055d8:	18c9      	addgt	r1, r1, r3
 80055da:	ea21 0102 	bic.w	r1, r1, r2
 80055de:	2000      	movs	r0, #0
 80055e0:	e7e0      	b.n	80055a4 <ceil+0x3c>
 80055e2:	2b33      	cmp	r3, #51	; 0x33
 80055e4:	dd05      	ble.n	80055f2 <ceil+0x8a>
 80055e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ea:	d101      	bne.n	80055f0 <ceil+0x88>
 80055ec:	ee30 0b00 	vadd.f64	d0, d0, d0
 80055f0:	bd30      	pop	{r4, r5, pc}
 80055f2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	40e2      	lsrs	r2, r4
 80055fc:	4202      	tst	r2, r0
 80055fe:	d0f7      	beq.n	80055f0 <ceil+0x88>
 8005600:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8005648 <ceil+0xe0>
 8005604:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005608:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005610:	ddc8      	ble.n	80055a4 <ceil+0x3c>
 8005612:	2900      	cmp	r1, #0
 8005614:	dd02      	ble.n	800561c <ceil+0xb4>
 8005616:	2b14      	cmp	r3, #20
 8005618:	d103      	bne.n	8005622 <ceil+0xba>
 800561a:	3101      	adds	r1, #1
 800561c:	ea20 0002 	bic.w	r0, r0, r2
 8005620:	e7c0      	b.n	80055a4 <ceil+0x3c>
 8005622:	2401      	movs	r4, #1
 8005624:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005628:	fa04 f303 	lsl.w	r3, r4, r3
 800562c:	4418      	add	r0, r3
 800562e:	42a8      	cmp	r0, r5
 8005630:	bf38      	it	cc
 8005632:	1909      	addcc	r1, r1, r4
 8005634:	e7f2      	b.n	800561c <ceil+0xb4>
 8005636:	2000      	movs	r0, #0
 8005638:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800563c:	e7b2      	b.n	80055a4 <ceil+0x3c>
 800563e:	4608      	mov	r0, r1
 8005640:	e7b0      	b.n	80055a4 <ceil+0x3c>
 8005642:	bf00      	nop
 8005644:	f3af 8000 	nop.w
 8005648:	8800759c 	.word	0x8800759c
 800564c:	7e37e43c 	.word	0x7e37e43c
 8005650:	3ff00000 	.word	0x3ff00000
 8005654:	000fffff 	.word	0x000fffff

08005658 <_init>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr

08005664 <_fini>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr
