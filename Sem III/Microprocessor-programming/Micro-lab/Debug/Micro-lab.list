
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006768  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b58  08006b58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000070  08006bd0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08006bd0  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012601  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256d  00000000  00000000  0003269f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00035a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028829  00000000  00000000  000367d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126c0  00000000  00000000  0005f001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc80d  00000000  00000000  000716c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016dece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000404c  00000000  00000000  0016df20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006950 	.word	0x08006950

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006950 	.word	0x08006950

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_GPIO_Init+0xa4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a22      	ldr	r2, [pc, #136]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_GPIO_Init+0xa4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xa8>)
 8000670:	f001 fec2 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xa8>)
 800068c:	f001 fd08 	bl	80020a0 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020400 	.word	0x40020400

080006a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a4:	f3bf 8f4f 	dsb	sy
}
 80006a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006aa:	f3bf 8f6f 	isb	sy
}
 80006ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <SCB_EnableICache+0x48>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
}
 80006bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006be:	f3bf 8f6f 	isb	sy
}
 80006c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SCB_EnableICache+0x48>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SCB_EnableICache+0x48>)
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d0:	f3bf 8f4f 	dsb	sy
}
 80006d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d6:	f3bf 8f6f 	isb	sy
}
 80006da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SCB_EnableDCache+0x84>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <SCB_EnableDCache+0x84>)
 8000702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000706:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0b5b      	lsrs	r3, r3, #13
 800070c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000710:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800071a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	015a      	lsls	r2, r3, #5
 8000720:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000724:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072a:	4911      	ldr	r1, [pc, #68]	; (8000770 <SCB_EnableDCache+0x84>)
 800072c:	4313      	orrs	r3, r2
 800072e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	60ba      	str	r2, [r7, #8]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1ef      	bne.n	800071c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1e5      	bne.n	8000712 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000746:	f3bf 8f4f 	dsb	sy
}
 800074a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SCB_EnableDCache+0x84>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <SCB_EnableDCache+0x84>)
 8000752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000756:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800075e:	f3bf 8f6f 	isb	sy
}
 8000762:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <uart_print>:
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <uart_print+0x2c>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000784:	bf00      	nop
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <uart_print+0x2c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <uart_print+0x12>
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40004800 	.word	0x40004800

080007a4 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b0d      	cmp	r3, #13
 80007b2:	d002      	beq.n	80007ba <char_is_endmessage+0x16>
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d101      	bne.n	80007be <char_is_endmessage+0x1a>
	{
		return 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <char_is_endmessage+0x1c>
	}
	else return 0;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <rx_has_data>:

// Reception
uint8_t rx_has_data()
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <rx_has_data+0x24>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <rx_has_data+0x28>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	429a      	cmp	r2, r3
 80007de:	d101      	bne.n	80007e4 <rx_has_data+0x18>
	{
		return 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e000      	b.n	80007e6 <rx_has_data+0x1a>
	}
	else return 1;
 80007e4:	2301      	movs	r3, #1
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	200000c2 	.word	0x200000c2
 80007f4:	200000c3 	.word	0x200000c3

080007f8 <increase_rx_empty>:

void increase_rx_empty()
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	rx_empty++;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <increase_rx_empty+0x2c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	3301      	adds	r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <increase_rx_empty+0x2c>)
 8000808:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <increase_rx_empty+0x2c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b31      	cmp	r3, #49	; 0x31
 8000812:	d902      	bls.n	800081a <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <increase_rx_empty+0x2c>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
	}
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	200000c2 	.word	0x200000c2

08000828 <increase_rx_busy>:

void increase_rx_busy()
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	rx_busy++;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <increase_rx_busy+0x2c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <increase_rx_busy+0x2c>)
 8000838:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <increase_rx_busy+0x2c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b31      	cmp	r3, #49	; 0x31
 8000842:	d902      	bls.n	800084a <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <increase_rx_busy+0x2c>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	}
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	200000c3 	.word	0x200000c3

08000858 <tx_has_data>:

// Transmission
uint8_t tx_has_data()
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <tx_has_data+0x24>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <tx_has_data+0x28>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	429a      	cmp	r2, r3
 800086a:	d101      	bne.n	8000870 <tx_has_data+0x18>
	{
		return 0;
 800086c:	2300      	movs	r3, #0
 800086e:	e000      	b.n	8000872 <tx_has_data+0x1a>
	}
	else return 1;
 8000870:	2301      	movs	r3, #1
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	200000f6 	.word	0x200000f6
 8000880:	200000f7 	.word	0x200000f7

08000884 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	tx_busy++;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <increase_tx_busy+0x2c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <increase_tx_busy+0x2c>)
 8000894:	701a      	strb	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <increase_tx_busy+0x2c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b31      	cmp	r3, #49	; 0x31
 800089e:	d902      	bls.n	80008a6 <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <increase_tx_busy+0x2c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	}
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	200000f7 	.word	0x200000f7

080008b4 <timer_delay>:

void timer_delay(uint16_t ms)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
	// Reset timer counter
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <timer_delay+0x30>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for set period to pass
	while (__HAL_TIM_GET_COUNTER(&htim3) < ms);
 80008c6:	bf00      	nop
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <timer_delay+0x30>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3f9      	bcc.n	80008c8 <timer_delay+0x14>
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	200001e4 	.word	0x200001e4

080008e8 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <get_char+0x24>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <get_char+0x28>)
 80008f8:	5c9b      	ldrb	r3, [r3, r2]
 80008fa:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 80008fc:	f7ff ff94 	bl	8000828 <increase_rx_busy>
	return tmp;
 8000900:	79fb      	ldrb	r3, [r7, #7]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000c3 	.word	0x200000c3
 8000910:	20000090 	.word	0x20000090

08000914 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000920:	e041      	b.n	80009a6 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <get_message+0xa8>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	461c      	mov	r4, r3
 8000928:	f7ff ffde 	bl	80008e8 <get_char>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <get_message+0xac>)
 8000932:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <get_message+0xa8>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <get_message+0xac>)
 800093c:	5c9b      	ldrb	r3, [r3, r2]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff30 	bl	80007a4 <char_is_endmessage>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d021      	beq.n	800098e <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <get_message+0xa8>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <get_message+0xac>)
 8000952:	2100      	movs	r1, #0
 8000954:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e009      	b.n	8000970 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	440b      	add	r3, r1
 8000964:	4916      	ldr	r1, [pc, #88]	; (80009c0 <get_message+0xac>)
 8000966:	5c8a      	ldrb	r2, [r1, r2]
 8000968:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	3301      	adds	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <get_message+0xa8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d3ef      	bcc.n	800095c <get_message+0x48>
			}

			message_length = idx;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <get_message+0xa8>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <get_message+0xa8>)
 8000984:	2200      	movs	r2, #0
 8000986:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000988:	89bb      	ldrh	r3, [r7, #12]
 800098a:	b29b      	uxth	r3, r3
 800098c:	e011      	b.n	80009b2 <get_message+0x9e>
		}
		else
		{
			idx++;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <get_message+0xa8>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <get_message+0xa8>)
 8000998:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <get_message+0xa8>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b32      	cmp	r3, #50	; 0x32
 80009a0:	d901      	bls.n	80009a6 <get_message+0x92>
 80009a2:	2300      	movs	r3, #0
 80009a4:	e005      	b.n	80009b2 <get_message+0x9e>
	while(rx_has_data() == 1)
 80009a6:	f7ff ff11 	bl	80007cc <rx_has_data>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d0b8      	beq.n	8000922 <get_message+0xe>
		}
	}
	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001a6 	.word	0x200001a6
 80009c0:	200001a8 	.word	0x200001a8

080009c4 <send_response>:

// Send response from STM
void send_response(char *message, ...)
{
 80009c4:	b40f      	push	{r0, r1, r2, r3}
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b091      	sub	sp, #68	; 0x44
 80009ca:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 80009cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009d0:	607b      	str	r3, [r7, #4]
	vsprintf(response, message, arglist);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 fae6 	bl	8005fac <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <send_response+0xc4>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80009ec:	e012      	b.n	8000a14 <send_response+0x50>
	{
		tx_buffer[idx] = response[i];
 80009ee:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80009f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009f2:	3240      	adds	r2, #64	; 0x40
 80009f4:	443a      	add	r2, r7
 80009f6:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 80009fa:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <send_response+0xc8>)
 80009fc:	54d1      	strb	r1, [r2, r3]
		idx++;
 80009fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a00:	3301      	adds	r3, #1
 8000a02:	87fb      	strh	r3, [r7, #62]	; 0x3e

		if (idx >= BUFFER_LENGTH)
 8000a04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a06:	2b31      	cmp	r3, #49	; 0x31
 8000a08:	d901      	bls.n	8000a0e <send_response+0x4a>
			idx = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	for (uint16_t i=0; i<strlen(response); i++)
 8000a0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a10:	3301      	adds	r3, #1
 8000a12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000a14:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fc10 	bl	8000240 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	429c      	cmp	r4, r3
 8000a24:	d3e3      	bcc.n	80009ee <send_response+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a26:	b672      	cpsid	i
}
 8000a28:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 8000a2a:	f7ff ff15 	bl	8000858 <tx_has_data>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d118      	bne.n	8000a66 <send_response+0xa2>
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <send_response+0xcc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	2b80      	cmp	r3, #128	; 0x80
 8000a40:	d111      	bne.n	8000a66 <send_response+0xa2>
	{
		tx_empty = idx;
 8000a42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <send_response+0xc4>)
 8000a48:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <send_response+0xd0>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <send_response+0xc8>)
 8000a54:	4413      	add	r3, r2
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <send_response+0xcc>)
 8000a5c:	f003 fe5c 	bl	8004718 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 8000a60:	f7ff ff10 	bl	8000884 <increase_tx_busy>
 8000a64:	e003      	b.n	8000a6e <send_response+0xaa>
	}
	else
		tx_empty = idx;
 8000a66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <send_response+0xc4>)
 8000a6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a6e:	b662      	cpsie	i
}
 8000a70:	bf00      	nop

	__enable_irq();

	// Wait after re-enabling interrupts
	timer_delay(5);
 8000a72:	2005      	movs	r0, #5
 8000a74:	f7ff ff1e 	bl	80008b4 <timer_delay>
}
 8000a78:	bf00      	nop
 8000a7a:	3744      	adds	r7, #68	; 0x44
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a82:	b004      	add	sp, #16
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000f6 	.word	0x200000f6
 8000a8c:	200000c4 	.word	0x200000c4
 8000a90:	20000230 	.word	0x20000230
 8000a94:	200000f7 	.word	0x200000f7

08000a98 <turn_on_led>:

void turn_on_led()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <turn_on_led+0x14>)
 8000aa2:	f001 fca9 	bl	80023f8 <HAL_GPIO_WritePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40020400 	.word	0x40020400

08000ab0 <turn_off_led>:

void turn_off_led()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <turn_off_led+0x14>)
 8000aba:	f001 fc9d 	bl	80023f8 <HAL_GPIO_WritePin>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1800.0;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <calculate_delay+0x90>)
 8000ad4:	60fb      	str	r3, [r7, #12]

	if (blink_hz == 1)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10b      	bne.n	8000af4 <calculate_delay+0x2c>
		delay_f = delay_f / blink_hz;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	ee07 3a90 	vmov	s15, r3
 8000ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ae6:	edd7 6a03 	vldr	s13, [r7, #12]
 8000aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aee:	edc7 7a03 	vstr	s15, [r7, #12]
 8000af2:	e012      	b.n	8000b1a <calculate_delay+0x52>
	else
		delay_f = delay_f / (blink_hz * 1.8);
 8000af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b06:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000b50 <calculate_delay+0x88>
 8000b0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b0e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b16:	edc7 7a03 	vstr	s15, [r7, #12]

	delay_f = ceil(delay_f);
 8000b1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b22:	eeb0 0b47 	vmov.f64	d0, d7
 8000b26:	f005 fe9b 	bl	8006860 <ceil>
 8000b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b32:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b3e:	ee17 3a90 	vmov	r3, s15
 8000b42:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 8000b44:	897b      	ldrh	r3, [r7, #10]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	cccccccd 	.word	0xcccccccd
 8000b54:	3ffccccc 	.word	0x3ffccccc
 8000b58:	44e10000 	.word	0x44e10000

08000b5c <validate_command>:

uint8_t validate_command(char *single_command_message)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b092      	sub	sp, #72	; 0x48
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	uint8_t command_valid = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Command template arrays
	char led_on[] = "LED[ON]";
 8000b6a:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <validate_command+0x128>)
 8000b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b74:	e883 0003 	stmia.w	r3, {r0, r1}
	char led_off[] = "LED[OFF]";
 8000b78:	4a43      	ldr	r2, [pc, #268]	; (8000c88 <validate_command+0x12c>)
 8000b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b80:	c303      	stmia	r3!, {r0, r1}
 8000b82:	701a      	strb	r2, [r3, #0]
	char led_blink[] = "LED[BLINK,X]";
 8000b84:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <validate_command+0x130>)
 8000b86:	f107 0420 	add.w	r4, r7, #32
 8000b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b8e:	7023      	strb	r3, [r4, #0]
	char insert_delay[] = "INSERT[DELAY,XXXX]";
 8000b90:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <validate_command+0x134>)
 8000b92:	f107 040c 	add.w	r4, r7, #12
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	8022      	strh	r2, [r4, #0]
 8000ba2:	3402      	adds	r4, #2
 8000ba4:	0c1b      	lsrs	r3, r3, #16
 8000ba6:	7023      	strb	r3, [r4, #0]

	// Compare command with templates
	if (strncmp(single_command_message, led_on, sizeof(led_on)) == 0)
 8000ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bac:	2208      	movs	r2, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f005 f944 	bl	8005e3e <strncmp>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <validate_command+0x68>
	{
		command_valid = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000bc2:	e059      	b.n	8000c78 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_off, sizeof(led_off)) == 0)
 8000bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc8:	2209      	movs	r2, #9
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f005 f936 	bl	8005e3e <strncmp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d103      	bne.n	8000be0 <validate_command+0x84>
	{
		command_valid = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000bde:	e04b      	b.n	8000c78 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_blink, sizeof(led_blink)-3) == 0)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	220a      	movs	r2, #10
 8000be6:	4619      	mov	r1, r3
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f005 f928 	bl	8005e3e <strncmp>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d111      	bne.n	8000c18 <validate_command+0xbc>
	{
		if ((single_command_message[10] >= 0x30 && single_command_message[10] <= 0x39) && single_command[11] == ']')
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	330a      	adds	r3, #10
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8000bfc:	d93c      	bls.n	8000c78 <validate_command+0x11c>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	330a      	adds	r3, #10
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b39      	cmp	r3, #57	; 0x39
 8000c06:	d837      	bhi.n	8000c78 <validate_command+0x11c>
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <validate_command+0x138>)
 8000c0a:	7adb      	ldrb	r3, [r3, #11]
 8000c0c:	2b5d      	cmp	r3, #93	; 0x5d
 8000c0e:	d133      	bne.n	8000c78 <validate_command+0x11c>
			command_valid = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c16:	e02f      	b.n	8000c78 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, insert_delay, sizeof(insert_delay)-6) == 0)
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	220d      	movs	r2, #13
 8000c1e:	4619      	mov	r1, r3
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f005 f90c 	bl	8005e3e <strncmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d125      	bne.n	8000c78 <validate_command+0x11c>
	{
		for (uint8_t y=0; y<4; y++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000c32:	e01d      	b.n	8000c70 <validate_command+0x114>
			if ((single_command_message[12+y] >= 0x30 && single_command_message[12+y] <= 0x39) && single_command[17] == ']')
 8000c34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c38:	330c      	adds	r3, #12
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b2f      	cmp	r3, #47	; 0x2f
 8000c44:	d90f      	bls.n	8000c66 <validate_command+0x10a>
 8000c46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c4a:	330c      	adds	r3, #12
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b39      	cmp	r3, #57	; 0x39
 8000c56:	d806      	bhi.n	8000c66 <validate_command+0x10a>
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <validate_command+0x138>)
 8000c5a:	7c5b      	ldrb	r3, [r3, #17]
 8000c5c:	2b5d      	cmp	r3, #93	; 0x5d
 8000c5e:	d102      	bne.n	8000c66 <validate_command+0x10a>
				command_valid = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for (uint8_t y=0; y<4; y++)
 8000c66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000c70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d9dd      	bls.n	8000c34 <validate_command+0xd8>
	}

	return command_valid;
 8000c78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3748      	adds	r7, #72	; 0x48
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bdb0      	pop	{r4, r5, r7, pc}
 8000c84:	08006968 	.word	0x08006968
 8000c88:	08006970 	.word	0x08006970
 8000c8c:	0800697c 	.word	0x0800697c
 8000c90:	0800698c 	.word	0x0800698c
 8000c94:	2000016c 	.word	0x2000016c

08000c98 <clear_array>:

void clear_array(char *array, uint16_t array_length)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	81fb      	strh	r3, [r7, #14]
	while (idx < array_length)
 8000ca8:	e007      	b.n	8000cba <clear_array+0x22>
	{
		array[idx] = '\0';
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
		idx++;
 8000cb4:	89fb      	ldrh	r3, [r7, #14]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	81fb      	strh	r3, [r7, #14]
	while (idx < array_length)
 8000cba:	89fa      	ldrh	r2, [r7, #14]
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3f3      	bcc.n	8000caa <clear_array+0x12>
	}
	array_length = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	807b      	strh	r3, [r7, #2]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b5b0      	push	{r4, r5, r7, lr}
 8000cd6:	b0b0      	sub	sp, #192	; 0xc0
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000cda:	f000 fd1d 	bl	8001718 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000cde:	f7ff fcdf 	bl	80006a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ce2:	f7ff fd03 	bl	80006ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 ff5e 	bl	8001ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 fc4d 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f7ff fc81 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cf2:	f000 fe97 	bl	8001a24 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000cf6:	f000 fdf9 	bl	80018ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000cfa:	48b0      	ldr	r0, [pc, #704]	; (8000fbc <main+0x2e8>)
 8000cfc:	f002 fd14 	bl	8003728 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	49af      	ldr	r1, [pc, #700]	; (8000fc0 <main+0x2ec>)
 8000d04:	48af      	ldr	r0, [pc, #700]	; (8000fc4 <main+0x2f0>)
 8000d06:	f003 fd65 	bl	80047d4 <HAL_UART_Receive_IT>
  __IO uint16_t param_length;
  static uint16_t command_length;

  // LED command parameters
  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000d0a:	4aaf      	ldr	r2, [pc, #700]	; (8000fc8 <main+0x2f4>)
 8000d0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	4611      	mov	r1, r2
 8000d14:	8019      	strh	r1, [r3, #0]
 8000d16:	3302      	adds	r3, #2
 8000d18:	0c12      	lsrs	r2, r2, #16
 8000d1a:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 8000d1c:	4bab      	ldr	r3, [pc, #684]	; (8000fcc <main+0x2f8>)
 8000d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  char blink_cmd[] = "BLINK,";
 8000d22:	4aab      	ldr	r2, [pc, #684]	; (8000fd0 <main+0x2fc>)
 8000d24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d2c:	6018      	str	r0, [r3, #0]
 8000d2e:	3304      	adds	r3, #4
 8000d30:	8019      	strh	r1, [r3, #0]
 8000d32:	3302      	adds	r3, #2
 8000d34:	0c0a      	lsrs	r2, r1, #16
 8000d36:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 8000d38:	4aa6      	ldr	r2, [pc, #664]	; (8000fd4 <main+0x300>)
 8000d3a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d42:	6018      	str	r0, [r3, #0]
 8000d44:	3304      	adds	r3, #4
 8000d46:	8019      	strh	r1, [r3, #0]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	0c0a      	lsrs	r2, r1, #16
 8000d4c:	701a      	strb	r2, [r3, #0]

  // Error messages
  char invalid_command[] = "Error: Command not found\r\n";
 8000d4e:	4ba2      	ldr	r3, [pc, #648]	; (8000fd8 <main+0x304>)
 8000d50:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000d54:	461d      	mov	r5, r3
 8000d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d5e:	c403      	stmia	r4!, {r0, r1}
 8000d60:	8022      	strh	r2, [r4, #0]
 8000d62:	3402      	adds	r4, #2
 8000d64:	0c13      	lsrs	r3, r2, #16
 8000d66:	7023      	strb	r3, [r4, #0]
  char missing_separator[] = "Error: No command separator found\r\n";
 8000d68:	4b9c      	ldr	r3, [pc, #624]	; (8000fdc <main+0x308>)
 8000d6a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000d6e:	461d      	mov	r5, r3
 8000d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	6023      	str	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000d7c:	4b90      	ldr	r3, [pc, #576]	; (8000fc0 <main+0x2ec>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	d003      	beq.n	8000d8c <main+0xb8>
 8000d84:	4b8e      	ldr	r3, [pc, #568]	; (8000fc0 <main+0x2ec>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b0d      	cmp	r3, #13
 8000d8a:	d106      	bne.n	8000d9a <main+0xc6>
	{
		message_length = get_message(message);
 8000d8c:	4894      	ldr	r0, [pc, #592]	; (8000fe0 <main+0x30c>)
 8000d8e:	f7ff fdc1 	bl	8000914 <get_message>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b93      	ldr	r3, [pc, #588]	; (8000fe4 <main+0x310>)
 8000d98:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000d9a:	4b92      	ldr	r3, [pc, #584]	; (8000fe4 <main+0x310>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 83aa 	beq.w	80014fa <main+0x826>
	{
		for (uint8_t i=0; i<message_length; i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8000dac:	e395      	b.n	80014da <main+0x806>
		{
			// Check for command separator character
			command_separator = strchr(message, ';');
 8000dae:	213b      	movs	r1, #59	; 0x3b
 8000db0:	488b      	ldr	r0, [pc, #556]	; (8000fe0 <main+0x30c>)
 8000db2:	f005 f837 	bl	8005e24 <strchr>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a8b      	ldr	r2, [pc, #556]	; (8000fe8 <main+0x314>)
 8000dba:	6013      	str	r3, [r2, #0]

			// If separator char was not found
			if (command_separator == NULL)
 8000dbc:	4b8a      	ldr	r3, [pc, #552]	; (8000fe8 <main+0x314>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d111      	bne.n	8000de8 <main+0x114>
			{
				while (i < message_length)
 8000dc4:	e004      	b.n	8000dd0 <main+0xfc>
					i++;
 8000dc6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (i < message_length)
 8000dd0:	4b84      	ldr	r3, [pc, #528]	; (8000fe4 <main+0x310>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d3f3      	bcc.n	8000dc6 <main+0xf2>
				send_response(missing_separator);
 8000dde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fdee 	bl	80009c4 <send_response>
			}

			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000de8:	4b80      	ldr	r3, [pc, #512]	; (8000fec <main+0x318>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <main+0x12a>
 8000df2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000df6:	4a7a      	ldr	r2, [pc, #488]	; (8000fe0 <main+0x30c>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	2b4c      	cmp	r3, #76	; 0x4c
 8000dfc:	d00a      	beq.n	8000e14 <main+0x140>
 8000dfe:	4b7b      	ldr	r3, [pc, #492]	; (8000fec <main+0x318>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d109      	bne.n	8000e1c <main+0x148>
 8000e08:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e0c:	4a74      	ldr	r2, [pc, #464]	; (8000fe0 <main+0x30c>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	2b49      	cmp	r3, #73	; 0x49
 8000e12:	d103      	bne.n	8000e1c <main+0x148>
				sw_state = 1;
 8000e14:	4b75      	ldr	r3, [pc, #468]	; (8000fec <main+0x318>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e019      	b.n	8000e50 <main+0x17c>
			else if (sw_state == 0 && (message[i] != ';' && message[i] != '#' && message[i] != ','))
 8000e1c:	4b73      	ldr	r3, [pc, #460]	; (8000fec <main+0x318>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d114      	bne.n	8000e50 <main+0x17c>
 8000e26:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e2a:	4a6d      	ldr	r2, [pc, #436]	; (8000fe0 <main+0x30c>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	2b3b      	cmp	r3, #59	; 0x3b
 8000e30:	d00e      	beq.n	8000e50 <main+0x17c>
 8000e32:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e36:	4a6a      	ldr	r2, [pc, #424]	; (8000fe0 <main+0x30c>)
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	2b23      	cmp	r3, #35	; 0x23
 8000e3c:	d008      	beq.n	8000e50 <main+0x17c>
 8000e3e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e42:	4a67      	ldr	r2, [pc, #412]	; (8000fe0 <main+0x30c>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	2b2c      	cmp	r3, #44	; 0x2c
 8000e48:	d002      	beq.n	8000e50 <main+0x17c>
				error_found = 1;
 8000e4a:	4b69      	ldr	r3, [pc, #420]	; (8000ff0 <main+0x31c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000e50:	4b66      	ldr	r3, [pc, #408]	; (8000fec <main+0x318>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3b01      	subs	r3, #1
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	f200 82cf 	bhi.w	80013fc <main+0x728>
 8000e5e:	a201      	add	r2, pc, #4	; (adr r2, 8000e64 <main+0x190>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000e79 	.word	0x08000e79
 8000e68:	08000f0f 	.word	0x08000f0f
 8000e6c:	08000f4f 	.word	0x08000f4f
 8000e70:	08000f8f 	.word	0x08000f8f
 8000e74:	08001069 	.word	0x08001069
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000e78:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a58      	ldr	r2, [pc, #352]	; (8000fe0 <main+0x30c>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	2b45      	cmp	r3, #69	; 0x45
 8000e84:	d10f      	bne.n	8000ea6 <main+0x1d2>
 8000e86:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <main+0x30c>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	2b44      	cmp	r3, #68	; 0x44
 8000e92:	d108      	bne.n	8000ea6 <main+0x1d2>
				{
					i = i+2;
 8000e94:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000e9e:	4b53      	ldr	r3, [pc, #332]	; (8000fec <main+0x318>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e032      	b.n	8000f0c <main+0x238>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 8000ea6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <main+0x30c>)
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	2b4e      	cmp	r3, #78	; 0x4e
 8000eb2:	d124      	bne.n	8000efe <main+0x22a>
 8000eb4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000eb8:	3302      	adds	r3, #2
 8000eba:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <main+0x30c>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	2b53      	cmp	r3, #83	; 0x53
 8000ec0:	d11d      	bne.n	8000efe <main+0x22a>
 8000ec2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ec6:	3303      	adds	r3, #3
 8000ec8:	4a45      	ldr	r2, [pc, #276]	; (8000fe0 <main+0x30c>)
 8000eca:	5cd3      	ldrb	r3, [r2, r3]
 8000ecc:	2b45      	cmp	r3, #69	; 0x45
 8000ece:	d116      	bne.n	8000efe <main+0x22a>
 8000ed0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	4a42      	ldr	r2, [pc, #264]	; (8000fe0 <main+0x30c>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	2b52      	cmp	r3, #82	; 0x52
 8000edc:	d10f      	bne.n	8000efe <main+0x22a>
 8000ede:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ee2:	3305      	adds	r3, #5
 8000ee4:	4a3e      	ldr	r2, [pc, #248]	; (8000fe0 <main+0x30c>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	2b54      	cmp	r3, #84	; 0x54
 8000eea:	d108      	bne.n	8000efe <main+0x22a>
				{
					i = i+5;
 8000eec:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <main+0x318>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e006      	b.n	8000f0c <main+0x238>
				}
				else
				{
					error_found = 1;
 8000efe:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <main+0x31c>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000f04:	4b39      	ldr	r3, [pc, #228]	; (8000fec <main+0x318>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f0a:	e277      	b.n	80013fc <main+0x728>
 8000f0c:	e276      	b.n	80013fc <main+0x728>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000f0e:	215b      	movs	r1, #91	; 0x5b
 8000f10:	4833      	ldr	r0, [pc, #204]	; (8000fe0 <main+0x30c>)
 8000f12:	f004 ff87 	bl	8005e24 <strchr>
 8000f16:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10b      	bne.n	8000f3a <main+0x266>
				{
					i = i+1;
 8000f22:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f26:	3301      	adds	r3, #1
 8000f28:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000f2c:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <main+0x31c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <main+0x318>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000f38:	e260      	b.n	80013fc <main+0x728>
					open_idx = (uint16_t)(open_bracket - message);
 8000f3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f3e:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <main+0x30c>)
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
					sw_state = 3;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <main+0x318>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	701a      	strb	r2, [r3, #0]
				break;
 8000f4c:	e256      	b.n	80013fc <main+0x728>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000f4e:	215d      	movs	r1, #93	; 0x5d
 8000f50:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <main+0x30c>)
 8000f52:	f004 ff67 	bl	8005e24 <strchr>
 8000f56:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10b      	bne.n	8000f7a <main+0x2a6>
				{
					i = i+1;
 8000f62:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f66:	3301      	adds	r3, #1
 8000f68:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <main+0x31c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <main+0x318>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000f78:	e240      	b.n	80013fc <main+0x728>
					close_idx = (uint16_t)(close_bracket - message);
 8000f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f7e:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <main+0x30c>)
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
					sw_state = 4;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <main+0x318>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	701a      	strb	r2, [r3, #0]
				break;
 8000f8c:	e236      	b.n	80013fc <main+0x728>

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000f8e:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8000f92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <main+0x320>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000fae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000fb8:	e041      	b.n	800103e <main+0x36a>
 8000fba:	bf00      	nop
 8000fbc:	200001e4 	.word	0x200001e4
 8000fc0:	2000008c 	.word	0x2000008c
 8000fc4:	20000230 	.word	0x20000230
 8000fc8:	080069a0 	.word	0x080069a0
 8000fcc:	0046464f 	.word	0x0046464f
 8000fd0:	080069a4 	.word	0x080069a4
 8000fd4:	080069ac 	.word	0x080069ac
 8000fd8:	080069b4 	.word	0x080069b4
 8000fdc:	080069d0 	.word	0x080069d0
 8000fe0:	200000f8 	.word	0x200000f8
 8000fe4:	2000012a 	.word	0x2000012a
 8000fe8:	200001a0 	.word	0x200001a0
 8000fec:	2000012b 	.word	0x2000012b
 8000ff0:	200001a4 	.word	0x200001a4
 8000ff4:	200001da 	.word	0x200001da
				{
					command[j] = message[y];
 8000ff8:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8000ffc:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001000:	49af      	ldr	r1, [pc, #700]	; (80012c0 <main+0x5ec>)
 8001002:	5c8a      	ldrb	r2, [r1, r2]
 8001004:	33c0      	adds	r3, #192	; 0xc0
 8001006:	443b      	add	r3, r7
 8001008:	f803 2cbc 	strb.w	r2, [r3, #-188]
					temp_command[j] = command[j];
 800100c:	f897 20ba 	ldrb.w	r2, [r7, #186]	; 0xba
 8001010:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001014:	32c0      	adds	r2, #192	; 0xc0
 8001016:	443a      	add	r2, r7
 8001018:	f812 1cbc 	ldrb.w	r1, [r2, #-188]
 800101c:	4aa9      	ldr	r2, [pc, #676]	; (80012c4 <main+0x5f0>)
 800101e:	54d1      	strb	r1, [r2, r3]
					j++;
 8001020:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001024:	3301      	adds	r3, #1
 8001026:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
					command_length = j;
 800102a:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800102e:	b29a      	uxth	r2, r3
 8001030:	4ba5      	ldr	r3, [pc, #660]	; (80012c8 <main+0x5f4>)
 8001032:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8001034:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001038:	3301      	adds	r3, #1
 800103a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800103e:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8001042:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001046:	429a      	cmp	r2, r3
 8001048:	d3d6      	bcc.n	8000ff8 <main+0x324>
				}

				if (command_length == param_length)
 800104a:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <main+0x5f4>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001052:	b29b      	uxth	r3, r3
 8001054:	429a      	cmp	r2, r3
 8001056:	d103      	bne.n	8001060 <main+0x38c>
					sw_state = 5;
 8001058:	4b9c      	ldr	r3, [pc, #624]	; (80012cc <main+0x5f8>)
 800105a:	2205      	movs	r2, #5
 800105c:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 800105e:	e1cd      	b.n	80013fc <main+0x728>
					sw_state = 0;
 8001060:	4b9a      	ldr	r3, [pc, #616]	; (80012cc <main+0x5f8>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
				break;
 8001066:	e1c9      	b.n	80013fc <main+0x728>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 8001068:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800106c:	3301      	adds	r3, #1
 800106e:	4a94      	ldr	r2, [pc, #592]	; (80012c0 <main+0x5ec>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	2b3b      	cmp	r3, #59	; 0x3b
 8001074:	d008      	beq.n	8001088 <main+0x3b4>
				{
					send_response(missing_separator);
 8001076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fca2 	bl	80009c4 <send_response>
					sw_state = 0;
 8001080:	4b92      	ldr	r3, [pc, #584]	; (80012cc <main+0x5f8>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
					break;
 8001086:	e1b9      	b.n	80013fc <main+0x728>
				}

				// Print executed command
				char CMD[] = "COMMAND: ";
 8001088:	4a91      	ldr	r2, [pc, #580]	; (80012d0 <main+0x5fc>)
 800108a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800108e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001090:	c303      	stmia	r3!, {r0, r1}
 8001092:	801a      	strh	r2, [r3, #0]
				char NEWLINE[] = "\r\n";
 8001094:	4a8f      	ldr	r2, [pc, #572]	; (80012d4 <main+0x600>)
 8001096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	4611      	mov	r1, r2
 800109e:	8019      	strh	r1, [r3, #0]
 80010a0:	3302      	adds	r3, #2
 80010a2:	0c12      	lsrs	r2, r2, #16
 80010a4:	701a      	strb	r2, [r3, #0]

				send_response(CMD);
 80010a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fc8a 	bl	80009c4 <send_response>
				send_response(temp_command);
 80010b0:	4884      	ldr	r0, [pc, #528]	; (80012c4 <main+0x5f0>)
 80010b2:	f7ff fc87 	bl	80009c4 <send_response>
				send_response(NEWLINE);
 80010b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fc82 	bl	80009c4 <send_response>

				// Clear temp array
				for (uint8_t y=0; y<command_length; y++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80010c6:	e009      	b.n	80010dc <main+0x408>
					temp_command[y] = '\0';
 80010c8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010cc:	4a7d      	ldr	r2, [pc, #500]	; (80012c4 <main+0x5f0>)
 80010ce:	2100      	movs	r1, #0
 80010d0:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<command_length; y++)
 80010d2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80010dc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b79      	ldr	r3, [pc, #484]	; (80012c8 <main+0x5f4>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3ee      	bcc.n	80010c8 <main+0x3f4>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 80010ea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 80010f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fe9f 	bl	8005e3e <strncmp>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d13b      	bne.n	800117e <main+0x4aa>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<7; y++)
 8001106:	2300      	movs	r3, #0
 8001108:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 800110c:	e010      	b.n	8001130 <main+0x45c>
						single_command[y] = message[close_idx-6+y];
 800110e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001112:	1f9a      	subs	r2, r3, #6
 8001114:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001118:	441a      	add	r2, r3
 800111a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800111e:	4968      	ldr	r1, [pc, #416]	; (80012c0 <main+0x5ec>)
 8001120:	5c89      	ldrb	r1, [r1, r2]
 8001122:	4a6d      	ldr	r2, [pc, #436]	; (80012d8 <main+0x604>)
 8001124:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<7; y++)
 8001126:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800112a:	3301      	adds	r3, #1
 800112c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001130:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001134:	2b06      	cmp	r3, #6
 8001136:	d9ea      	bls.n	800110e <main+0x43a>

					// Validate last command
					temp_check = validate_command(single_command);
 8001138:	4867      	ldr	r0, [pc, #412]	; (80012d8 <main+0x604>)
 800113a:	f7ff fd0f 	bl	8000b5c <validate_command>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b66      	ldr	r3, [pc, #408]	; (80012dc <main+0x608>)
 8001144:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001146:	4b65      	ldr	r3, [pc, #404]	; (80012dc <main+0x608>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10f      	bne.n	8001170 <main+0x49c>
					{
						i = i+param_length;
 8001150:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800115c:	4413      	add	r3, r2
 800115e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <main+0x60c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

						// Turn on LED
						led_action = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 800116e:	e120      	b.n	80013b2 <main+0x6de>
					}
					else
					{
						error_found = 1;
 8001170:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <main+0x60c>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001176:	4b55      	ldr	r3, [pc, #340]	; (80012cc <main+0x5f8>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e119      	b.n	80013b2 <main+0x6de>
					}
				}
				else if (strncmp(command, off_cmd, len) == 0)
 800117e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001180:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fe59 	bl	8005e3e <strncmp>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d13b      	bne.n	800120a <main+0x536>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<8; y++)
 8001192:	2300      	movs	r3, #0
 8001194:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8001198:	e010      	b.n	80011bc <main+0x4e8>
						single_command[y] = message[close_idx-7+y];
 800119a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800119e:	1fda      	subs	r2, r3, #7
 80011a0:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80011a4:	441a      	add	r2, r3
 80011a6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80011aa:	4945      	ldr	r1, [pc, #276]	; (80012c0 <main+0x5ec>)
 80011ac:	5c89      	ldrb	r1, [r1, r2]
 80011ae:	4a4a      	ldr	r2, [pc, #296]	; (80012d8 <main+0x604>)
 80011b0:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<8; y++)
 80011b2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80011b6:	3301      	adds	r3, #1
 80011b8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80011bc:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d9ea      	bls.n	800119a <main+0x4c6>

					// Validate last command
					temp_check = validate_command(single_command);
 80011c4:	4844      	ldr	r0, [pc, #272]	; (80012d8 <main+0x604>)
 80011c6:	f7ff fcc9 	bl	8000b5c <validate_command>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <main+0x608>)
 80011d0:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 80011d2:	4b42      	ldr	r3, [pc, #264]	; (80012dc <main+0x608>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10f      	bne.n	80011fc <main+0x528>
					{
						i = i+param_length;
 80011dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80011e8:	4413      	add	r3, r2
 80011ea:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <main+0x60c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]

						// Turn off LED
						led_action = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80011fa:	e0da      	b.n	80013b2 <main+0x6de>
					}
					else
					{
						error_found = 1;
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <main+0x60c>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <main+0x5f8>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e0d3      	b.n	80013b2 <main+0x6de>
					}
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 800120a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fe12 	bl	8005e3e <strncmp>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d13f      	bne.n	80012a0 <main+0x5cc>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<12; y++)
 8001220:	2300      	movs	r3, #0
 8001222:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8001226:	e011      	b.n	800124c <main+0x578>
						single_command[y] = message[close_idx-11+y];
 8001228:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800122c:	f1a3 020b 	sub.w	r2, r3, #11
 8001230:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001234:	441a      	add	r2, r3
 8001236:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800123a:	4921      	ldr	r1, [pc, #132]	; (80012c0 <main+0x5ec>)
 800123c:	5c89      	ldrb	r1, [r1, r2]
 800123e:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <main+0x604>)
 8001240:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<12; y++)
 8001242:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001246:	3301      	adds	r3, #1
 8001248:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800124c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001250:	2b0b      	cmp	r3, #11
 8001252:	d9e9      	bls.n	8001228 <main+0x554>

					// Validate last command
					temp_check = validate_command(single_command);
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <main+0x604>)
 8001256:	f7ff fc81 	bl	8000b5c <validate_command>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <main+0x608>)
 8001260:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <main+0x608>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d112      	bne.n	8001292 <main+0x5be>
					{
						i = i+param_length;
 800126c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001270:	b29b      	uxth	r3, r3
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001278:	4413      	add	r3, r2
 800127a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <main+0x60c>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]

						// Enable LED blink
						blink_setup = 1;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <main+0x610>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8001290:	e08f      	b.n	80013b2 <main+0x6de>
					}
					else
					{
						error_found = 1;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <main+0x60c>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <main+0x5f8>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e088      	b.n	80013b2 <main+0x6de>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 80012a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a2:	1f1a      	subs	r2, r3, #4
 80012a4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fdc7 	bl	8005e3e <strncmp>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d17d      	bne.n	80013b2 <main+0x6de>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80012bc:	e039      	b.n	8001332 <main+0x65e>
 80012be:	bf00      	nop
 80012c0:	200000f8 	.word	0x200000f8
 80012c4:	20000138 	.word	0x20000138
 80012c8:	200001da 	.word	0x200001da
 80012cc:	2000012b 	.word	0x2000012b
 80012d0:	080069f4 	.word	0x080069f4
 80012d4:	08006a00 	.word	0x08006a00
 80012d8:	2000016c 	.word	0x2000016c
 80012dc:	200001a5 	.word	0x200001a5
 80012e0:	200001a4 	.word	0x200001a4
 80012e4:	2000012c 	.word	0x2000012c
						if (message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39)
 80012e8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80012ec:	1f1a      	subs	r2, r3, #4
 80012ee:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012f2:	4413      	add	r3, r2
 80012f4:	4a98      	ldr	r2, [pc, #608]	; (8001558 <main+0x884>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	2b2f      	cmp	r3, #47	; 0x2f
 80012fa:	d91e      	bls.n	800133a <main+0x666>
 80012fc:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001300:	1f1a      	subs	r2, r3, #4
 8001302:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001306:	4413      	add	r3, r2
 8001308:	4a93      	ldr	r2, [pc, #588]	; (8001558 <main+0x884>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	2b39      	cmp	r3, #57	; 0x39
 800130e:	d814      	bhi.n	800133a <main+0x666>
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 8001310:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001314:	1f1a      	subs	r2, r3, #4
 8001316:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800131a:	441a      	add	r2, r3
 800131c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001320:	498d      	ldr	r1, [pc, #564]	; (8001558 <main+0x884>)
 8001322:	5c89      	ldrb	r1, [r1, r2]
 8001324:	4a8d      	ldr	r2, [pc, #564]	; (800155c <main+0x888>)
 8001326:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<4; y++)
 8001328:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800132c:	3301      	adds	r3, #1
 800132e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001332:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d9d6      	bls.n	80012e8 <main+0x614>
						else
							break;

					// Store last command in a separate array
					for (uint8_t y=0; y<18; y++)
 800133a:	2300      	movs	r3, #0
 800133c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8001340:	e011      	b.n	8001366 <main+0x692>
						single_command[y] = message[close_idx-17+y];
 8001342:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001346:	f1a3 0211 	sub.w	r2, r3, #17
 800134a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800134e:	441a      	add	r2, r3
 8001350:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001354:	4980      	ldr	r1, [pc, #512]	; (8001558 <main+0x884>)
 8001356:	5c89      	ldrb	r1, [r1, r2]
 8001358:	4a81      	ldr	r2, [pc, #516]	; (8001560 <main+0x88c>)
 800135a:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<18; y++)
 800135c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001360:	3301      	adds	r3, #1
 8001362:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8001366:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800136a:	2b11      	cmp	r3, #17
 800136c:	d9e9      	bls.n	8001342 <main+0x66e>

					// Validate last command
					temp_check = validate_command(single_command);
 800136e:	487c      	ldr	r0, [pc, #496]	; (8001560 <main+0x88c>)
 8001370:	f7ff fbf4 	bl	8000b5c <validate_command>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b7a      	ldr	r3, [pc, #488]	; (8001564 <main+0x890>)
 800137a:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 800137c:	4b79      	ldr	r3, [pc, #484]	; (8001564 <main+0x890>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10f      	bne.n	80013a6 <main+0x6d2>
					{
						i = i+param_length;
 8001386:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800138a:	b29b      	uxth	r3, r3
 800138c:	b2da      	uxtb	r2, r3
 800138e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001392:	4413      	add	r3, r2
 8001394:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001398:	4b73      	ldr	r3, [pc, #460]	; (8001568 <main+0x894>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]

						// Enable the delay
						led_action = 3;
 800139e:	2303      	movs	r3, #3
 80013a0:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80013a4:	e005      	b.n	80013b2 <main+0x6de>
					}
					else
					{
						error_found = 1;
 80013a6:	4b70      	ldr	r3, [pc, #448]	; (8001568 <main+0x894>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 80013ac:	4b6f      	ldr	r3, [pc, #444]	; (800156c <main+0x898>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
					}
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 80013b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80013b6:	4a68      	ldr	r2, [pc, #416]	; (8001558 <main+0x884>)
 80013b8:	2123      	movs	r1, #35	; 0x23
 80013ba:	54d1      	strb	r1, [r2, r3]
				message[close_idx] = '#';
 80013bc:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80013c0:	4a65      	ldr	r2, [pc, #404]	; (8001558 <main+0x884>)
 80013c2:	2123      	movs	r1, #35	; 0x23
 80013c4:	54d1      	strb	r1, [r2, r3]

				// Clear the single_command array
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 80013cc:	e009      	b.n	80013e2 <main+0x70e>
					single_command[y] = '\0';
 80013ce:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80013d2:	4a63      	ldr	r2, [pc, #396]	; (8001560 <main+0x88c>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 80013d8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80013dc:	3301      	adds	r3, #1
 80013de:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 80013e2:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80013e6:	2b31      	cmp	r3, #49	; 0x31
 80013e8:	d9f1      	bls.n	80013ce <main+0x6fa>

				// Reset sw_state
				i = i-1;
 80013ea:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				sw_state = 0;
 80013f4:	4b5d      	ldr	r3, [pc, #372]	; (800156c <main+0x898>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
				break;
 80013fa:	bf00      	nop
			} /* sw_state switch end */

			// Display error alert
			if (error_found == 1)
 80013fc:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <main+0x894>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d119      	bne.n	800143a <main+0x766>
			{
				while (message[i] != ';')
 8001406:	e004      	b.n	8001412 <main+0x73e>
					i++;
 8001408:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800140c:	3301      	adds	r3, #1
 800140e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (message[i] != ';')
 8001412:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001416:	4a50      	ldr	r2, [pc, #320]	; (8001558 <main+0x884>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	2b3b      	cmp	r3, #59	; 0x3b
 800141c:	d1f4      	bne.n	8001408 <main+0x734>
				if (message[i] == ';')
 800141e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001422:	4a4d      	ldr	r2, [pc, #308]	; (8001558 <main+0x884>)
 8001424:	5cd3      	ldrb	r3, [r2, r3]
 8001426:	2b3b      	cmp	r3, #59	; 0x3b
 8001428:	d104      	bne.n	8001434 <main+0x760>
					send_response(invalid_command);
 800142a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fac8 	bl	80009c4 <send_response>
				error_found = 0;
 8001434:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <main+0x894>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
			}

			// Diode control switch
			switch (led_action)
 800143a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b03      	cmp	r3, #3
 8001442:	d83f      	bhi.n	80014c4 <main+0x7f0>
 8001444:	a201      	add	r2, pc, #4	; (adr r2, 800144c <main+0x778>)
 8001446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144a:	bf00      	nop
 800144c:	0800145d 	.word	0x0800145d
 8001450:	08001463 	.word	0x08001463
 8001454:	08001469 	.word	0x08001469
 8001458:	080014b3 	.word	0x080014b3
			{
			case 0:
				// Turn off LED
				turn_off_led();
 800145c:	f7ff fb28 	bl	8000ab0 <turn_off_led>
				break;
 8001460:	e030      	b.n	80014c4 <main+0x7f0>

			case 1:
				// Turn on LED
				turn_on_led();
 8001462:	f7ff fb19 	bl	8000a98 <turn_on_led>
				break;
 8001466:	e02d      	b.n	80014c4 <main+0x7f0>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <main+0x89c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d127      	bne.n	80014c2 <main+0x7ee>
				{
					delay = message[close_idx-1] - '0';
 8001472:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001476:	3b01      	subs	r3, #1
 8001478:	4a37      	ldr	r2, [pc, #220]	; (8001558 <main+0x884>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	3b30      	subs	r3, #48	; 0x30
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <main+0x8a0>)
 8001482:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 8001484:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <main+0x8a0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <main+0x7c2>
						blink_ms = 0;
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <main+0x8a4>)
 8001490:	2200      	movs	r2, #0
 8001492:	801a      	strh	r2, [r3, #0]
 8001494:	e009      	b.n	80014aa <main+0x7d6>
					else
						 blink_ms = calculate_delay(delay);
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <main+0x8a0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fb13 	bl	8000ac8 <calculate_delay>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <main+0x8a4>)
 80014a8:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <main+0x89c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
				}
				break;
 80014b0:	e007      	b.n	80014c2 <main+0x7ee>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 80014b2:	482a      	ldr	r0, [pc, #168]	; (800155c <main+0x888>)
 80014b4:	f004 fc7f 	bl	8005db6 <atoi>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <main+0x8a8>)
 80014be:	801a      	strh	r2, [r3, #0]
				break;
 80014c0:	e000      	b.n	80014c4 <main+0x7f0>
				break;
 80014c2:	bf00      	nop
			} /* control switch end */

			// Set the delay
			timer_delay(loop_delay);
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <main+0x8a8>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f9f2 	bl	80008b4 <timer_delay>
		for (uint8_t i=0; i<message_length; i++)
 80014d0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80014d4:	3301      	adds	r3, #1
 80014d6:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <main+0x8ac>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f4ff ac62 	bcc.w	8000dae <main+0xda>
		} /* for loop end */

		// Clear the message array processing the commands
		clear_array(message, message_length);
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <main+0x8ac>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	4818      	ldr	r0, [pc, #96]	; (8001558 <main+0x884>)
 80014f6:	f7ff fbcf 	bl	8000c98 <clear_array>
	} /* if statement end */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Command: LED[BLINK,x]
	if (blink_ms != 0 && (led_action == 2 || led_action == 3))
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <main+0x8a4>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d014      	beq.n	800152e <main+0x85a>
 8001504:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d004      	beq.n	8001518 <main+0x844>
 800150e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d10a      	bne.n	800152e <main+0x85a>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	481a      	ldr	r0, [pc, #104]	; (8001584 <main+0x8b0>)
 800151c:	f000 ff85 	bl	800242a <HAL_GPIO_TogglePin>
		timer_delay(blink_ms);
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <main+0x8a4>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f9c4 	bl	80008b4 <timer_delay>
 800152c:	e00c      	b.n	8001548 <main+0x874>
	}
	// Command: LED[ON] / LED[OFF]
	else if (led_action != 2 || led_action != 3)
 800152e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d104      	bne.n	8001542 <main+0x86e>
 8001538:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b03      	cmp	r3, #3
 8001540:	d002      	beq.n	8001548 <main+0x874>
		// Disable LED blink with other commands
		blink_ms = 0;
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <main+0x8a4>)
 8001544:	2200      	movs	r2, #0
 8001546:	801a      	strh	r2, [r3, #0]

	// Set the delay
	timer_delay(loop_delay);
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <main+0x8a8>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f9b0 	bl	80008b4 <timer_delay>
	if (character == '\n' || character == '\r')
 8001554:	e412      	b.n	8000d7c <main+0xa8>
 8001556:	bf00      	nop
 8001558:	200000f8 	.word	0x200000f8
 800155c:	20000134 	.word	0x20000134
 8001560:	2000016c 	.word	0x2000016c
 8001564:	200001a5 	.word	0x200001a5
 8001568:	200001a4 	.word	0x200001a4
 800156c:	2000012b 	.word	0x2000012b
 8001570:	2000012c 	.word	0x2000012c
 8001574:	2000012d 	.word	0x2000012d
 8001578:	2000012e 	.word	0x2000012e
 800157c:	20000130 	.word	0x20000130
 8001580:	2000012a 	.word	0x2000012a
 8001584:	40020400 	.word	0x40020400

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	2234      	movs	r2, #52	; 0x34
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fc3c 	bl	8005e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <SystemClock_Config+0xdc>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <SystemClock_Config+0xdc>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <SystemClock_Config+0xdc>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <SystemClock_Config+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <SystemClock_Config+0xe0>)
 80015ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <SystemClock_Config+0xe0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80015e0:	2303      	movs	r3, #3
 80015e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ea:	2301      	movs	r3, #1
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ee:	2310      	movs	r3, #16
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2302      	movs	r3, #2
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015fc:	2319      	movs	r3, #25
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001600:	23d8      	movs	r3, #216	; 0xd8
 8001602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001604:	2302      	movs	r3, #2
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4618      	mov	r0, r3
 8001616:	f000 ff73 	bl	8002500 <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001620:	f000 f8a6 	bl	8001770 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001624:	f000 ff1c 	bl	8002460 <HAL_PWREx_EnableOverDrive>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800162e:	f000 f89f 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001632:	230f      	movs	r3, #15
 8001634:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	2302      	movs	r3, #2
 8001638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	2101      	movs	r1, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f001 fa05 	bl	8002a5c <HAL_RCC_ClockConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001658:	f000 f88a 	bl	8001770 <Error_Handler>
  }
}
 800165c:	bf00      	nop
 800165e:	3750      	adds	r7, #80	; 0x50
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Reception callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_UART_RxCpltCallback+0x44>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f87b 	bl	8000774 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <HAL_UART_RxCpltCallback+0x48>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d10e      	bne.n	80016a6 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_UART_RxCpltCallback+0x4c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <HAL_UART_RxCpltCallback+0x44>)
 8001692:	7819      	ldrb	r1, [r3, #0]
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_UART_RxCpltCallback+0x50>)
 8001696:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8001698:	f7ff f8ae 	bl	80007f8 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 800169c:	2201      	movs	r2, #1
 800169e:	4904      	ldr	r1, [pc, #16]	; (80016b0 <HAL_UART_RxCpltCallback+0x44>)
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <HAL_UART_RxCpltCallback+0x54>)
 80016a2:	f003 f897 	bl	80047d4 <HAL_UART_Receive_IT>
	}
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000008c 	.word	0x2000008c
 80016b4:	40004800 	.word	0x40004800
 80016b8:	200000c2 	.word	0x200000c2
 80016bc:	20000090 	.word	0x20000090
 80016c0:	20000230 	.word	0x20000230

080016c4 <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <HAL_UART_TxCpltCallback+0x44>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d113      	bne.n	80016fe <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 80016d6:	f7ff f8bf 	bl	8000858 <tx_has_data>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d10e      	bne.n	80016fe <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_UART_TxCpltCallback+0x48>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_UART_TxCpltCallback+0x4c>)
 80016ea:	5c9a      	ldrb	r2, [r3, r2]
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_UART_TxCpltCallback+0x50>)
 80016ee:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 80016f0:	f7ff f8c8 	bl	8000884 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	4907      	ldr	r1, [pc, #28]	; (8001714 <HAL_UART_TxCpltCallback+0x50>)
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f003 f80d 	bl	8004718 <HAL_UART_Transmit_IT>
		}
	}
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004800 	.word	0x40004800
 800170c:	200000f7 	.word	0x200000f7
 8001710:	200000c4 	.word	0x200000c4
 8001714:	200001dc 	.word	0x200001dc

08001718 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800172a:	f000 fbab 	bl	8001e84 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800172e:	2301      	movs	r3, #1
 8001730:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001732:	2300      	movs	r3, #0
 8001734:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800173a:	231f      	movs	r3, #31
 800173c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800173e:	2387      	movs	r3, #135	; 0x87
 8001740:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001742:	2300      	movs	r3, #0
 8001744:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001746:	2300      	movs	r3, #0
 8001748:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800175a:	463b      	mov	r3, r7
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fbc9 	bl	8001ef4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001762:	2004      	movs	r0, #4
 8001764:	f000 fba6 	bl	8001eb4 <HAL_MPU_Enable>

}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_MspInit+0x50>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_MspInit+0x50>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_MspInit+0x50>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_MspInit+0x50>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_MspInit+0x50>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x50>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2005      	movs	r0, #5
 80017b8:	f000 fb2d 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017bc:	2005      	movs	r0, #5
 80017be:	f000 fb46 	bl	8001e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 fa00 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM3_IRQHandler+0x10>)
 800183a:	f002 f846 	bl	80038ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
  /* USER CODE END TIM3_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001e4 	.word	0x200001e4

08001848 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <USART3_IRQHandler+0x10>)
 800184e:	f003 f805 	bl	800485c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000230 	.word	0x20000230

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f004 fa98 	bl	8005dc0 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20080000 	.word	0x20080000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	200001e0 	.word	0x200001e0
 80018c4:	200002d0 	.word	0x200002d0

080018c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	; 0x38
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <MX_TIM3_Init+0xe8>)
 8001922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001926:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800192a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <MX_TIM3_Init+0xe4>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001934:	f242 720f 	movw	r2, #9999	; 0x270f
 8001938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <MX_TIM3_Init+0xe4>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001946:	4822      	ldr	r0, [pc, #136]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001948:	f001 fe96 	bl	8003678 <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001952:	f7ff ff0d 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800195c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001960:	4619      	mov	r1, r3
 8001962:	481b      	ldr	r0, [pc, #108]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001964:	f002 f94a 	bl	8003bfc <HAL_TIM_ConfigClockSource>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800196e:	f7ff feff 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001972:	4817      	ldr	r0, [pc, #92]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001974:	f001 ff48 	bl	8003808 <HAL_TIM_OC_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800197e:	f7ff fef7 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <MX_TIM3_Init+0xe4>)
 8001992:	f002 fdc7 	bl	8004524 <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800199c:	f7ff fee8 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019a0:	2300      	movs	r3, #0
 80019a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <MX_TIM3_Init+0xe4>)
 80019b8:	f002 f8a6 	bl	8003b08 <HAL_TIM_OC_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80019c2:	f7ff fed5 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200001e4 	.word	0x200001e4
 80019d4:	40000400 	.word	0x40000400

080019d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_TIM_Base_MspInit+0x44>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_TIM_Base_MspInit+0x48>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_TIM_Base_MspInit+0x48>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_TIM_Base_MspInit+0x48>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	201d      	movs	r0, #29
 8001a08:	f000 fa05 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a0c:	201d      	movs	r0, #29
 8001a0e:	f000 fa1e 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40023800 	.word	0x40023800

08001a24 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <MX_USART3_UART_Init+0x5c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a68:	f002 fe08 	bl	800467c <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a72:	f7ff fe7d 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000230 	.word	0x20000230
 8001a80:	40004800 	.word	0x40004800

08001a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0ae      	sub	sp, #184	; 0xb8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2290      	movs	r2, #144	; 0x90
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 f9b5 	bl	8005e14 <memset>
  if(uartHandle->Instance==USART3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_UART_MspInit+0xc4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d144      	bne.n	8001b3e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8001aba:	2320      	movs	r3, #32
 8001abc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f9b0 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ace:	f7ff fe4f 	bl	8001770 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <HAL_UART_MspInit+0xcc>)
 8001b2a:	f000 fab9 	bl	80020a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2027      	movs	r0, #39	; 0x27
 8001b34:	f000 f96f 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b38:	2027      	movs	r0, #39	; 0x27
 8001b3a:	f000 f988 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	37b8      	adds	r7, #184	; 0xb8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40004800 	.word	0x40004800
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff fea3 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f004 f923 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff f8a5 	bl	8000cd4 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b98:	08006b60 	.word	0x08006b60
  ldr r2, =_sbss
 8001b9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ba0:	200002cc 	.word	0x200002cc

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>

08001ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f000 f928 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	200f      	movs	r0, #15
 8001bb2:	f000 f805 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fde1 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f943 	bl	8001e6a <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f90b 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008
 8001c44:	200002b8 	.word	0x200002b8

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200002b8 	.word	0x200002b8

08001c60 <__NVIC_SetPriorityGrouping>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	05fa0000 	.word	0x05fa0000

08001ca8 <__NVIC_GetPriorityGrouping>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff3e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff31 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e88:	f3bf 8f5f 	dmb	sy
}
 8001e8c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_MPU_Disable+0x28>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_MPU_Disable+0x28>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_MPU_Disable+0x2c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00
 8001eb0:	e000ed90 	.word	0xe000ed90

08001eb4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <HAL_MPU_Enable+0x38>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_MPU_Enable+0x3c>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_MPU_Enable+0x3c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed2:	f3bf 8f4f 	dsb	sy
}
 8001ed6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ed8:	f3bf 8f6f 	isb	sy
}
 8001edc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed90 	.word	0xe000ed90
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	785a      	ldrb	r2, [r3, #1]
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_MPU_ConfigRegion+0x84>)
 8001f02:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d029      	beq.n	8001f60 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <HAL_MPU_ConfigRegion+0x84>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7b1b      	ldrb	r3, [r3, #12]
 8001f18:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7adb      	ldrb	r3, [r3, #11]
 8001f1e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7a9b      	ldrb	r3, [r3, #10]
 8001f26:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7b5b      	ldrb	r3, [r3, #13]
 8001f2e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7b9b      	ldrb	r3, [r3, #14]
 8001f36:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7bdb      	ldrb	r3, [r3, #15]
 8001f3e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7a5b      	ldrb	r3, [r3, #9]
 8001f46:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7a1b      	ldrb	r3, [r3, #8]
 8001f4e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f50:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f5a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f5c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001f5e:	e005      	b.n	8001f6c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_MPU_ConfigRegion+0x84>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_MPU_ConfigRegion+0x84>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed90 	.word	0xe000ed90

08001f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8a:	f7ff fe5d 	bl	8001c48 <HAL_GetTick>
 8001f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e052      	b.n	8002054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0216 	bic.w	r2, r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_DMA_Abort+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffe:	e013      	b.n	8002028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002000:	f7ff fe22 	bl	8001c48 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d90c      	bls.n	8002028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e015      	b.n	8002054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1e4      	bne.n	8002000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	223f      	movs	r2, #63	; 0x3f
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d004      	beq.n	800207a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00c      	b.n	8002094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e175      	b.n	80023ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8164 	bne.w	80023a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d005      	beq.n	80020f6 <HAL_GPIO_Init+0x56>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d130      	bne.n	8002158 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80be 	beq.w	80023a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_GPIO_Init+0x324>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_GPIO_Init+0x324>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_GPIO_Init+0x324>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002242:	4a61      	ldr	r2, [pc, #388]	; (80023c8 <HAL_GPIO_Init+0x328>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_GPIO_Init+0x32c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d037      	beq.n	80022de <HAL_GPIO_Init+0x23e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a57      	ldr	r2, [pc, #348]	; (80023d0 <HAL_GPIO_Init+0x330>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d031      	beq.n	80022da <HAL_GPIO_Init+0x23a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a56      	ldr	r2, [pc, #344]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d02b      	beq.n	80022d6 <HAL_GPIO_Init+0x236>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a55      	ldr	r2, [pc, #340]	; (80023d8 <HAL_GPIO_Init+0x338>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x232>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a54      	ldr	r2, [pc, #336]	; (80023dc <HAL_GPIO_Init+0x33c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x22e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a53      	ldr	r2, [pc, #332]	; (80023e0 <HAL_GPIO_Init+0x340>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x22a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_GPIO_Init+0x344>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a51      	ldr	r2, [pc, #324]	; (80023e8 <HAL_GPIO_Init+0x348>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a50      	ldr	r2, [pc, #320]	; (80023ec <HAL_GPIO_Init+0x34c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	; (80023f0 <HAL_GPIO_Init+0x350>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x21a>
 80022b6:	2309      	movs	r3, #9
 80022b8:	e012      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ba:	230a      	movs	r3, #10
 80022bc:	e010      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022be:	2308      	movs	r3, #8
 80022c0:	e00e      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00c      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022c6:	2306      	movs	r3, #6
 80022c8:	e00a      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e008      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e004      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x240>
 80022de:	2300      	movs	r3, #0
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f002 0203 	and.w	r2, r2, #3
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4093      	lsls	r3, r2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022f0:	4935      	ldr	r1, [pc, #212]	; (80023c8 <HAL_GPIO_Init+0x328>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002322:	4a34      	ldr	r2, [pc, #208]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_GPIO_Init+0x354>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_GPIO_Init+0x354>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_GPIO_Init+0x354>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_GPIO_Init+0x354>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_GPIO_Init+0x354>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3301      	adds	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	f67f ae86 	bls.w	80020c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40013800 	.word	0x40013800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40021800 	.word	0x40021800
 80023e8:	40021c00 	.word	0x40021c00
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40022400 	.word	0x40022400
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
 8002404:	4613      	mov	r3, r2
 8002406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002414:	e003      	b.n	800241e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	041a      	lsls	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	041a      	lsls	r2, r3, #16
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43d9      	mvns	r1, r3
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	400b      	ands	r3, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248e:	f7ff fbdb 	bl	8001c48 <HAL_GetTick>
 8002492:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002494:	e009      	b.n	80024aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002496:	f7ff fbd7 	bl	8001c48 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a4:	d901      	bls.n	80024aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e022      	b.n	80024f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b6:	d1ee      	bne.n	8002496 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c4:	f7ff fbc0 	bl	8001c48 <HAL_GetTick>
 80024c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ca:	e009      	b.n	80024e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024cc:	f7ff fbbc 	bl	8001c48 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024da:	d901      	bls.n	80024e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e007      	b.n	80024f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ec:	d1ee      	bne.n	80024cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000

08002500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e29b      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8087 	beq.w	8002632 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002524:	4b96      	ldr	r3, [pc, #600]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b04      	cmp	r3, #4
 800252e:	d00c      	beq.n	800254a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002530:	4b93      	ldr	r3, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d112      	bne.n	8002562 <HAL_RCC_OscConfig+0x62>
 800253c:	4b90      	ldr	r3, [pc, #576]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254a:	4b8d      	ldr	r3, [pc, #564]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d06c      	beq.n	8002630 <HAL_RCC_OscConfig+0x130>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d168      	bne.n	8002630 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e275      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x7a>
 800256c:	4b84      	ldr	r3, [pc, #528]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a83      	ldr	r2, [pc, #524]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e02e      	b.n	80025d8 <HAL_RCC_OscConfig+0xd8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x9c>
 8002582:	4b7f      	ldr	r3, [pc, #508]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7e      	ldr	r2, [pc, #504]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b7c      	ldr	r3, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a7b      	ldr	r2, [pc, #492]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xd8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a75      	ldr	r2, [pc, #468]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a72      	ldr	r2, [pc, #456]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xd8>
 80025c0:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6e      	ldr	r2, [pc, #440]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b6c      	ldr	r3, [pc, #432]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a6b      	ldr	r2, [pc, #428]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff fb32 	bl	8001c48 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fb2e 	bl	8001c48 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e229      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe8>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff fb1e 	bl	8001c48 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff fb1a 	bl	8001c48 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e215      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x110>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d069      	beq.n	8002712 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800263e:	4b50      	ldr	r3, [pc, #320]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_OscConfig+0x190>
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x17a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1e9      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	493d      	ldr	r1, [pc, #244]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	e040      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a38      	ldr	r2, [pc, #224]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff fad0 	bl	8001c48 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7ff facc 	bl	8001c48 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1c7      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4929      	ldr	r1, [pc, #164]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
 80026de:	e018      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a26      	ldr	r2, [pc, #152]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7ff faac 	bl	8001c48 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f4:	f7ff faa8 	bl	8001c48 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1a3      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d038      	beq.n	8002790 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d019      	beq.n	800275a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7ff fa89 	bl	8001c48 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff fa85 	bl	8001c48 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e180      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x23a>
 8002758:	e01a      	b.n	8002790 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_RCC_OscConfig+0x280>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7ff fa6f 	bl	8001c48 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276e:	f7ff fa6b 	bl	8001c48 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d903      	bls.n	8002784 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e166      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
 8002780:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a4 	beq.w	80028e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a88      	ldr	r2, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c6:	4b83      	ldr	r3, [pc, #524]	; (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027d2:	4b80      	ldr	r3, [pc, #512]	; (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7f      	ldr	r2, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7ff fa33 	bl	8001c48 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7ff fa2f 	bl	8001c48 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	; 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e12a      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f8:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x4d4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x31a>
 800280c:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a6f      	ldr	r2, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	e02d      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x33c>
 8002822:	4b6b      	ldr	r3, [pc, #428]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
 800282e:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
 800283a:	e01c      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0x35e>
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
 8002850:	4b5f      	ldr	r3, [pc, #380]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a5e      	ldr	r2, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
 800285e:	4b5c      	ldr	r3, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6713      	str	r3, [r2, #112]	; 0x70
 800286a:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7ff f9e3 	bl	8001c48 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff f9df 	bl	8001c48 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0d8      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCC_OscConfig+0x386>
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7ff f9cd 	bl	8001c48 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7ff f9c9 	bl	8001c48 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0c2      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80ae 	beq.w	8002a4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d06d      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d14b      	bne.n	800299c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7ff f99a 	bl	8001c48 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7ff f996 	bl	8001c48 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e091      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	071b      	lsls	r3, r3, #28
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff f968 	bl	8001c48 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7ff f964 	bl	8001c48 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e05f      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x47c>
 800299a:	e057      	b.n	8002a4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7ff f94e 	bl	8001c48 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff f94a 	bl	8001c48 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e045      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4b0>
 80029ce:	e03d      	b.n	8002a4c <HAL_RCC_OscConfig+0x54c>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_RCC_OscConfig+0x558>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d030      	beq.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d129      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d122      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d119      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10f      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d0      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ade:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d040      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e073      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b50:	f7ff f87a 	bl	8001c48 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7ff f876 	bl	8001c48 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e053      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d210      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 020f 	bic.w	r2, r3, #15
 8002b96:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x1cc>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1d0>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1d4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe ffd6 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08006a04 	.word	0x08006a04
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b090      	sub	sp, #64	; 0x40
 8002c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c40:	2300      	movs	r3, #0
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c44:	2300      	movs	r3, #0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4c:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d00d      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x40>
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	f200 80a1 	bhi.w	8002da0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c66:	e09b      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c6c:	e09b      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6e:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c72:	e098      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c7e:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d028      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	2200      	movs	r2, #0
 8002c92:	623b      	str	r3, [r7, #32]
 8002c94:	627a      	str	r2, [r7, #36]	; 0x24
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca0:	fb03 f201 	mul.w	r2, r3, r1
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	4a43      	ldr	r2, [pc, #268]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cae:	fba0 1202 	umull	r1, r2, r0, r2
 8002cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cba:	4413      	add	r3, r2
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	61fa      	str	r2, [r7, #28]
 8002cc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cce:	f7fd fb0f 	bl	80002f0 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cda:	e053      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	617a      	str	r2, [r7, #20]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cee:	f04f 0b00 	mov.w	fp, #0
 8002cf2:	4652      	mov	r2, sl
 8002cf4:	465b      	mov	r3, fp
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d04:	0150      	lsls	r0, r2, #5
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d26:	ebb2 0408 	subs.w	r4, r2, r8
 8002d2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	00eb      	lsls	r3, r5, #3
 8002d38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3c:	00e2      	lsls	r2, r4, #3
 8002d3e:	4614      	mov	r4, r2
 8002d40:	461d      	mov	r5, r3
 8002d42:	eb14 030a 	adds.w	r3, r4, sl
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	eb45 030b 	adc.w	r3, r5, fp
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	028b      	lsls	r3, r1, #10
 8002d5e:	4621      	mov	r1, r4
 8002d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d64:	4621      	mov	r1, r4
 8002d66:	028a      	lsls	r2, r1, #10
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6e:	2200      	movs	r2, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	60fa      	str	r2, [r7, #12]
 8002d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d78:	f7fd faba 	bl	80002f0 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4613      	mov	r3, r2
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d9e:	e002      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3740      	adds	r7, #64	; 0x40
 8002dac:	46bd      	mov	sp, r7
 8002dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	00f42400 	.word	0x00f42400
 8002dbc:	017d7840 	.word	0x017d7840

08002dc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	f7ff fff0 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0a9b      	lsrs	r3, r3, #10
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	08006a14 	.word	0x08006a14

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e04:	f7ff ffdc 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08006a14 	.word	0x08006a14

08002e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e50:	4b69      	ldr	r3, [pc, #420]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a68      	ldr	r2, [pc, #416]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e5a:	6093      	str	r3, [r2, #8]
 8002e5c:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	4964      	ldr	r1, [pc, #400]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d017      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e82:	4b5d      	ldr	r3, [pc, #372]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	4959      	ldr	r1, [pc, #356]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d017      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ebe:	4b4e      	ldr	r3, [pc, #312]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	494a      	ldr	r1, [pc, #296]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 808b 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f0c:	4b3a      	ldr	r3, [pc, #232]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	4a39      	ldr	r2, [pc, #228]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6413      	str	r3, [r2, #64]	; 0x40
 8002f18:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a34      	ldr	r2, [pc, #208]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe fe8a 	bl	8001c48 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7fe fe86 	bl	8001c48 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e38f      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f56:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d035      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d02e      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d114      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fe4e 	bl	8001c48 <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fe4a 	bl	8001c48 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e351      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0ee      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fde:	d111      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fee:	400b      	ands	r3, r1
 8002ff0:	4901      	ldr	r1, [pc, #4]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000
 8003000:	0ffffcff 	.word	0x0ffffcff
 8003004:	4bac      	ldr	r3, [pc, #688]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4aab      	ldr	r2, [pc, #684]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800300e:	6093      	str	r3, [r2, #8]
 8003010:	4ba9      	ldr	r3, [pc, #676]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	49a6      	ldr	r1, [pc, #664]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800302e:	4ba2      	ldr	r3, [pc, #648]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003034:	4aa0      	ldr	r2, [pc, #640]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800303e:	4b9e      	ldr	r3, [pc, #632]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	499b      	ldr	r1, [pc, #620]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800305c:	4b96      	ldr	r3, [pc, #600]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306a:	4993      	ldr	r1, [pc, #588]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307e:	4b8e      	ldr	r3, [pc, #568]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800308c:	498a      	ldr	r1, [pc, #552]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030a0:	4b85      	ldr	r3, [pc, #532]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ae:	4982      	ldr	r1, [pc, #520]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030c2:	4b7d      	ldr	r3, [pc, #500]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	4979      	ldr	r1, [pc, #484]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e4:	4b74      	ldr	r3, [pc, #464]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	4971      	ldr	r1, [pc, #452]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f023 020c 	bic.w	r2, r3, #12
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	4968      	ldr	r1, [pc, #416]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003128:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	4960      	ldr	r1, [pc, #384]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800314a:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	4957      	ldr	r1, [pc, #348]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800316c:	4b52      	ldr	r3, [pc, #328]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	494f      	ldr	r1, [pc, #316]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	4946      	ldr	r1, [pc, #280]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031b0:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	493e      	ldr	r1, [pc, #248]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e0:	4935      	ldr	r1, [pc, #212]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003202:	492d      	ldr	r1, [pc, #180]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003224:	4924      	ldr	r1, [pc, #144]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003234:	d101      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	4914      	ldr	r1, [pc, #80]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003288:	490b      	ldr	r1, [pc, #44]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00f      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	4902      	ldr	r1, [pc, #8]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032b4:	e002      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032c8:	4b8a      	ldr	r3, [pc, #552]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	4986      	ldr	r1, [pc, #536]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032ec:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032fc:	497d      	ldr	r1, [pc, #500]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d006      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80d6 	beq.w	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003318:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a75      	ldr	r2, [pc, #468]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003324:	f7fe fc90 	bl	8001c48 <HAL_GetTick>
 8003328:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800332c:	f7fe fc8c 	bl	8001c48 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e195      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800333e:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d021      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11d      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003372:	0e1b      	lsrs	r3, r3, #24
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	019a      	lsls	r2, r3, #6
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	4958      	ldr	r1, [pc, #352]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c4:	d129      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033c6:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033d4:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033da:	0f1b      	lsrs	r3, r3, #28
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	019a      	lsls	r2, r3, #6
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	041b      	lsls	r3, r3, #16
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	061b      	lsls	r3, r3, #24
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	071b      	lsls	r3, r3, #28
 80033fa:	493e      	ldr	r1, [pc, #248]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	f023 021f 	bic.w	r2, r3, #31
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	3b01      	subs	r3, #1
 8003412:	4938      	ldr	r1, [pc, #224]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01d      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003426:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	0e1b      	lsrs	r3, r3, #24
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003434:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343a:	0f1b      	lsrs	r3, r3, #28
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	019a      	lsls	r2, r3, #6
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	071b      	lsls	r3, r3, #28
 800345a:	4926      	ldr	r1, [pc, #152]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d011      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	019a      	lsls	r2, r3, #6
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	071b      	lsls	r3, r3, #28
 800348a:	491a      	ldr	r1, [pc, #104]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800349c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349e:	f7fe fbd3 	bl	8001c48 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034a6:	f7fe fbcf 	bl	8001c48 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b64      	cmp	r3, #100	; 0x64
 80034b2:	d901      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0d8      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	f040 80ce 	bne.w	8003668 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d8:	f7fe fbb6 	bl	8001c48 <HAL_GetTick>
 80034dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034de:	e00b      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034e0:	f7fe fbb2 	bl	8001c48 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d904      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0bb      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034f8:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003504:	d0ec      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02e      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d12a      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800352e:	4b51      	ldr	r3, [pc, #324]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800353c:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	0f1b      	lsrs	r3, r3, #28
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	019a      	lsls	r2, r3, #6
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	061b      	lsls	r3, r3, #24
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	071b      	lsls	r3, r3, #28
 8003562:	4944      	ldr	r1, [pc, #272]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800356a:	4b42      	ldr	r3, [pc, #264]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	3b01      	subs	r3, #1
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	493d      	ldr	r1, [pc, #244]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d022      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003598:	d11d      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	0e1b      	lsrs	r3, r3, #24
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035a8:	4b32      	ldr	r3, [pc, #200]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	0f1b      	lsrs	r3, r3, #28
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	019a      	lsls	r2, r3, #6
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	061b      	lsls	r3, r3, #24
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	4929      	ldr	r1, [pc, #164]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d028      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	0e1b      	lsrs	r3, r3, #24
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	0c1b      	lsrs	r3, r3, #16
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	019a      	lsls	r2, r3, #6
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	431a      	orrs	r2, r3
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	071b      	lsls	r3, r3, #28
 8003616:	4917      	ldr	r1, [pc, #92]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4911      	ldr	r1, [pc, #68]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003640:	f7fe fb02 	bl	8001c48 <HAL_GetTick>
 8003644:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003648:	f7fe fafe 	bl	8001c48 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e007      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003666:	d1ef      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800

08003678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e049      	b.n	800371e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fe f99a 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f000 fb9c 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e04c      	b.n	80037da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <HAL_TIM_Base_Start+0xc0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d022      	beq.n	8003798 <HAL_TIM_Base_Start+0x70>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375a:	d01d      	beq.n	8003798 <HAL_TIM_Base_Start+0x70>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_TIM_Base_Start+0xc4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <HAL_TIM_Base_Start+0x70>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <HAL_TIM_Base_Start+0xc8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <HAL_TIM_Base_Start+0x70>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_TIM_Base_Start+0xcc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00e      	beq.n	8003798 <HAL_TIM_Base_Start+0x70>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_TIM_Base_Start+0xd0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_TIM_Base_Start+0x70>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_TIM_Base_Start+0xd4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_Base_Start+0x70>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_TIM_Base_Start+0xd8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d115      	bne.n	80037c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_TIM_Base_Start+0xdc>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d015      	beq.n	80037d6 <HAL_TIM_Base_Start+0xae>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d011      	beq.n	80037d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	e008      	b.n	80037d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40010400 	.word	0x40010400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40001800 	.word	0x40001800
 8003804:	00010007 	.word	0x00010007

08003808 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e049      	b.n	80038ae <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f841 	bl	80038b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 fad4 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d122      	bne.n	8003926 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d11b      	bne.n	8003926 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f06f 0202 	mvn.w	r2, #2
 80038f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fa53 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003912:	e005      	b.n	8003920 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fa45 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fa56 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b04      	cmp	r3, #4
 8003932:	d122      	bne.n	800397a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d11b      	bne.n	800397a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f06f 0204 	mvn.w	r2, #4
 800394a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa29 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003966:	e005      	b.n	8003974 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa1b 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa2c 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d122      	bne.n	80039ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11b      	bne.n	80039ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f06f 0208 	mvn.w	r2, #8
 800399e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f9ff 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 80039ba:	e005      	b.n	80039c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f9f1 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa02 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d122      	bne.n	8003a22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d11b      	bne.n	8003a22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f06f 0210 	mvn.w	r2, #16
 80039f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2208      	movs	r2, #8
 80039f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f9d5 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003a0e:	e005      	b.n	8003a1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f9c7 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f9d8 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10e      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f06f 0201 	mvn.w	r2, #1
 8003a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f9a1 	bl	8003d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b80      	cmp	r3, #128	; 0x80
 8003a5a:	d10e      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d107      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fded 	bl	8004654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b80      	cmp	r3, #128	; 0x80
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fde0 	bl	8004668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f986 	bl	8003de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d10e      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0220 	mvn.w	r2, #32
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fda0 	bl	8004640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e066      	b.n	8003bf4 <HAL_TIM_OC_ConfigChannel+0xec>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b14      	cmp	r3, #20
 8003b32:	d857      	bhi.n	8003be4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003be5 	.word	0x08003be5
 8003b44:	08003be5 	.word	0x08003be5
 8003b48:	08003be5 	.word	0x08003be5
 8003b4c:	08003b9f 	.word	0x08003b9f
 8003b50:	08003be5 	.word	0x08003be5
 8003b54:	08003be5 	.word	0x08003be5
 8003b58:	08003be5 	.word	0x08003be5
 8003b5c:	08003bad 	.word	0x08003bad
 8003b60:	08003be5 	.word	0x08003be5
 8003b64:	08003be5 	.word	0x08003be5
 8003b68:	08003be5 	.word	0x08003be5
 8003b6c:	08003bbb 	.word	0x08003bbb
 8003b70:	08003be5 	.word	0x08003be5
 8003b74:	08003be5 	.word	0x08003be5
 8003b78:	08003be5 	.word	0x08003be5
 8003b7c:	08003bc9 	.word	0x08003bc9
 8003b80:	08003be5 	.word	0x08003be5
 8003b84:	08003be5 	.word	0x08003be5
 8003b88:	08003be5 	.word	0x08003be5
 8003b8c:	08003bd7 	.word	0x08003bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f9cc 	bl	8003f34 <TIM_OC1_SetConfig>
      break;
 8003b9c:	e025      	b.n	8003bea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fa37 	bl	8004018 <TIM_OC2_SetConfig>
      break;
 8003baa:	e01e      	b.n	8003bea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 faa8 	bl	8004108 <TIM_OC3_SetConfig>
      break;
 8003bb8:	e017      	b.n	8003bea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fb17 	bl	80041f4 <TIM_OC4_SetConfig>
      break;
 8003bc6:	e010      	b.n	8003bea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fb68 	bl	80042a4 <TIM_OC5_SetConfig>
      break;
 8003bd4:	e009      	b.n	8003bea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fbb3 	bl	8004348 <TIM_OC6_SetConfig>
      break;
 8003be2:	e002      	b.n	8003bea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
      break;
 8003be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIM_ConfigClockSource+0x1c>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0b4      	b.n	8003d82 <HAL_TIM_ConfigClockSource+0x186>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4b56      	ldr	r3, [pc, #344]	; (8003d8c <HAL_TIM_ConfigClockSource+0x190>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c50:	d03e      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	f200 8087 	bhi.w	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	f000 8086 	beq.w	8003d6e <HAL_TIM_ConfigClockSource+0x172>
 8003c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c66:	d87f      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b70      	cmp	r3, #112	; 0x70
 8003c6a:	d01a      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8003c6c:	2b70      	cmp	r3, #112	; 0x70
 8003c6e:	d87b      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b60      	cmp	r3, #96	; 0x60
 8003c72:	d050      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x11a>
 8003c74:	2b60      	cmp	r3, #96	; 0x60
 8003c76:	d877      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b50      	cmp	r3, #80	; 0x50
 8003c7a:	d03c      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c7c:	2b50      	cmp	r3, #80	; 0x50
 8003c7e:	d873      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d058      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x13a>
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d86f      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b30      	cmp	r3, #48	; 0x30
 8003c8a:	d064      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d86b      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d060      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x15a>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d867      	bhi.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d05c      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x15a>
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d05a      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x15a>
 8003ca0:	e062      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6899      	ldr	r1, [r3, #8]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f000 fc17 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	609a      	str	r2, [r3, #8]
      break;
 8003cce:	e04f      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6899      	ldr	r1, [r3, #8]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f000 fc00 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf2:	609a      	str	r2, [r3, #8]
      break;
 8003cf4:	e03c      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 fb74 	bl	80043f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2150      	movs	r1, #80	; 0x50
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fbcd 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 8003d14:	e02c      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fb93 	bl	800444e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2160      	movs	r1, #96	; 0x60
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fbbd 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 8003d34:	e01c      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 fb54 	bl	80043f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2140      	movs	r1, #64	; 0x40
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fbad 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 8003d54:	e00c      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f000 fba4 	bl	80044ae <TIM_ITRx_SetConfig>
      break;
 8003d66:	e003      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6c:	e000      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	fffeff88 	.word	0xfffeff88

08003d90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3b      	ldr	r2, [pc, #236]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3a      	ldr	r2, [pc, #232]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d027      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d023      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2b      	ldr	r2, [pc, #172]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40010400 	.word	0x40010400
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800
 8003f28:	40001800 	.word	0x40001800
 8003f2c:	40001c00 	.word	0x40001c00
 8003f30:	40002000 	.word	0x40002000

08003f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <TIM_OC1_SetConfig+0xd8>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 0302 	bic.w	r3, r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a21      	ldr	r2, [pc, #132]	; (8004010 <TIM_OC1_SetConfig+0xdc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC1_SetConfig+0x64>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a20      	ldr	r2, [pc, #128]	; (8004014 <TIM_OC1_SetConfig+0xe0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10c      	bne.n	8003fb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0308 	bic.w	r3, r3, #8
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	; (8004010 <TIM_OC1_SetConfig+0xdc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC1_SetConfig+0x8e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	; (8004014 <TIM_OC1_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d111      	bne.n	8003fe6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	fffeff8f 	.word	0xfffeff8f
 8004010:	40010000 	.word	0x40010000
 8004014:	40010400 	.word	0x40010400

08004018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f023 0210 	bic.w	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <TIM_OC2_SetConfig+0xe4>)
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0320 	bic.w	r3, r3, #32
 8004062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a23      	ldr	r2, [pc, #140]	; (8004100 <TIM_OC2_SetConfig+0xe8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC2_SetConfig+0x68>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a22      	ldr	r2, [pc, #136]	; (8004104 <TIM_OC2_SetConfig+0xec>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10d      	bne.n	800409c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a18      	ldr	r2, [pc, #96]	; (8004100 <TIM_OC2_SetConfig+0xe8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_OC2_SetConfig+0x94>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a17      	ldr	r2, [pc, #92]	; (8004104 <TIM_OC2_SetConfig+0xec>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d113      	bne.n	80040d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	feff8fff 	.word	0xfeff8fff
 8004100:	40010000 	.word	0x40010000
 8004104:	40010400 	.word	0x40010400

08004108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <TIM_OC3_SetConfig+0xe0>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a22      	ldr	r2, [pc, #136]	; (80041ec <TIM_OC3_SetConfig+0xe4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_OC3_SetConfig+0x66>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <TIM_OC3_SetConfig+0xe8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10d      	bne.n	800418a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a17      	ldr	r2, [pc, #92]	; (80041ec <TIM_OC3_SetConfig+0xe4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_OC3_SetConfig+0x92>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a16      	ldr	r2, [pc, #88]	; (80041f0 <TIM_OC3_SetConfig+0xe8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d113      	bne.n	80041c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	fffeff8f 	.word	0xfffeff8f
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40010400 	.word	0x40010400

080041f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <TIM_OC4_SetConfig+0xa4>)
 8004220:	4013      	ands	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800423e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	031b      	lsls	r3, r3, #12
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <TIM_OC4_SetConfig+0xa8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_OC4_SetConfig+0x68>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <TIM_OC4_SetConfig+0xac>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d109      	bne.n	8004270 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004262:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	019b      	lsls	r3, r3, #6
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	feff8fff 	.word	0xfeff8fff
 800429c:	40010000 	.word	0x40010000
 80042a0:	40010400 	.word	0x40010400

080042a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <TIM_OC5_SetConfig+0x98>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a12      	ldr	r2, [pc, #72]	; (8004340 <TIM_OC5_SetConfig+0x9c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_OC5_SetConfig+0x5e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a11      	ldr	r2, [pc, #68]	; (8004344 <TIM_OC5_SetConfig+0xa0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d109      	bne.n	8004316 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004308:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	fffeff8f 	.word	0xfffeff8f
 8004340:	40010000 	.word	0x40010000
 8004344:	40010400 	.word	0x40010400

08004348 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <TIM_OC6_SetConfig+0x9c>)
 8004374:	4013      	ands	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800438a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	051b      	lsls	r3, r3, #20
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <TIM_OC6_SetConfig+0xa0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_OC6_SetConfig+0x60>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <TIM_OC6_SetConfig+0xa4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d109      	bne.n	80043bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	feff8fff 	.word	0xfeff8fff
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010400 	.word	0x40010400

080043f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800441a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f023 030a 	bic.w	r3, r3, #10
 800442c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0210 	bic.w	r2, r3, #16
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	031b      	lsls	r3, r3, #12
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f043 0307 	orr.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	609a      	str	r2, [r3, #8]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	431a      	orrs	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004538:	2302      	movs	r3, #2
 800453a:	e06d      	b.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a30      	ldr	r2, [pc, #192]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2f      	ldr	r2, [pc, #188]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a20      	ldr	r2, [pc, #128]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d01d      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1a      	ldr	r2, [pc, #104]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a15      	ldr	r2, [pc, #84]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d10c      	bne.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40010000 	.word	0x40010000
 8004628:	40010400 	.word	0x40010400
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40014000 	.word	0x40014000
 800463c:	40001800 	.word	0x40001800

08004640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e040      	b.n	8004710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd f9f0 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fbd6 	bl	8004e6c <UART_SetConfig>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e022      	b.n	8004710 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fe2e 	bl	8005334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 feb5 	bl	8005478 <UART_CheckIdleState>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004718:	b480      	push	{r7}
 800471a:	b08b      	sub	sp, #44	; 0x2c
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472a:	2b20      	cmp	r3, #32
 800472c:	d147      	bne.n	80047be <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_Transmit_IT+0x22>
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e040      	b.n	80047c0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2221      	movs	r2, #33	; 0x21
 8004766:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004770:	d107      	bne.n	8004782 <HAL_UART_Transmit_IT+0x6a>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a13      	ldr	r2, [pc, #76]	; (80047cc <HAL_UART_Transmit_IT+0xb4>)
 800477e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004780:	e002      	b.n	8004788 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <HAL_UART_Transmit_IT+0xb8>)
 8004786:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	613b      	str	r3, [r7, #16]
   return(result);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	69f9      	ldr	r1, [r7, #28]
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e6      	bne.n	8004788 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
  }
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	372c      	adds	r7, #44	; 0x2c
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	080059d7 	.word	0x080059d7
 80047d0:	08005921 	.word	0x08005921

080047d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d132      	bne.n	8004852 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Receive_IT+0x24>
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e02b      	b.n	8004854 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d018      	beq.n	8004842 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	61bb      	str	r3, [r7, #24]
   return(result);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	461a      	mov	r2, r3
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 ff29 	bl	80056a0 <UART_Start_Receive_IT>
 800484e:	4603      	mov	r3, r0
 8004850:	e000      	b.n	8004854 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
  }
}
 8004854:	4618      	mov	r0, r3
 8004856:	3728      	adds	r7, #40	; 0x28
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b0ba      	sub	sp, #232	; 0xe8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004886:	f640 030f 	movw	r3, #2063	; 0x80f
 800488a:	4013      	ands	r3, r2
 800488c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d115      	bne.n	80048c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00f      	beq.n	80048c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 82ac 	beq.w	8004e12 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
      }
      return;
 80048c2:	e2a6      	b.n	8004e12 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8117 	beq.w	8004afc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_UART_IRQHandler+0x298>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 810a 	beq.w	8004afc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d011      	beq.n	8004918 <HAL_UART_IRQHandler+0xbc>
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490e:	f043 0201 	orr.w	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d011      	beq.n	8004948 <HAL_UART_IRQHandler+0xec>
 8004924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2202      	movs	r2, #2
 8004936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493e:	f043 0204 	orr.w	r2, r3, #4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_UART_IRQHandler+0x11c>
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2204      	movs	r2, #4
 8004966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496e:	f043 0202 	orr.w	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004994:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2208      	movs	r2, #8
 80049a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049aa:	f043 0208 	orr.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <HAL_UART_IRQHandler+0x18a>
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8212 	beq.w	8004e16 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04f      	beq.n	8004ade <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fef4 	bl	800582c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d141      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1d9      	bne.n	8004a52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d013      	beq.n	8004ace <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <HAL_UART_IRQHandler+0x29c>)
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fad2 	bl	800205c <HAL_DMA_Abort_IT>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d017      	beq.n	8004aee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e00f      	b.n	8004aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9ac 	bl	8004e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e00b      	b.n	8004aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9a8 	bl	8004e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	e007      	b.n	8004aee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f9a4 	bl	8004e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004aec:	e193      	b.n	8004e16 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aee:	bf00      	nop
    return;
 8004af0:	e191      	b.n	8004e16 <HAL_UART_IRQHandler+0x5ba>
 8004af2:	bf00      	nop
 8004af4:	04000120 	.word	0x04000120
 8004af8:	080058f5 	.word	0x080058f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	f040 814c 	bne.w	8004d9e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8145 	beq.w	8004d9e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 813e 	beq.w	8004d9e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2210      	movs	r2, #16
 8004b28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	f040 80b6 	bne.w	8004ca6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8165 	beq.w	8004e1a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	f080 815d 	bcs.w	8004e1a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b74:	f000 8086 	beq.w	8004c84 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ba6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1da      	bne.n	8004b78 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004be6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e1      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e3      	bne.n	8004bfe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c54:	f023 0310 	bic.w	r3, r3, #16
 8004c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e4      	bne.n	8004c44 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fd f97c 	bl	8001f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8ce 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ca4:	e0b9      	b.n	8004e1a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80ab 	beq.w	8004e1e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80a6 	beq.w	8004e1e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cf6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e4      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	623b      	str	r3, [r7, #32]
   return(result);
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d2c:	633a      	str	r2, [r7, #48]	; 0x30
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69b9      	ldr	r1, [r7, #24]
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	617b      	str	r3, [r7, #20]
   return(result);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e4      	bne.n	8004d54 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f852 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d9c:	e03f      	b.n	8004e1e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00e      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x56c>
 8004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f849 	bl	8004e58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dc6:	e02d      	b.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
    }
    return;
 8004df0:	e017      	b.n	8004e22 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d012      	beq.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
 8004dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fe43 	bl	8005a96 <UART_EndTransmit_IT>
    return;
 8004e10:	e008      	b.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e12:	bf00      	nop
 8004e14:	e006      	b.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004e16:	bf00      	nop
 8004e18:	e004      	b.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004e22:	bf00      	nop
  }

}
 8004e24:	37e8      	adds	r7, #232	; 0xe8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop

08004e2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4ba6      	ldr	r3, [pc, #664]	; (8005130 <UART_SetConfig+0x2c4>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	6979      	ldr	r1, [r7, #20]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a94      	ldr	r2, [pc, #592]	; (8005134 <UART_SetConfig+0x2c8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d120      	bne.n	8004f2a <UART_SetConfig+0xbe>
 8004ee8:	4b93      	ldr	r3, [pc, #588]	; (8005138 <UART_SetConfig+0x2cc>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d816      	bhi.n	8004f24 <UART_SetConfig+0xb8>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x90>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f19 	.word	0x08004f19
 8004f04:	08004f13 	.word	0x08004f13
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e150      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f12:	2302      	movs	r3, #2
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e14d      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e14a      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e147      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e144      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a83      	ldr	r2, [pc, #524]	; (800513c <UART_SetConfig+0x2d0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d132      	bne.n	8004f9a <UART_SetConfig+0x12e>
 8004f34:	4b80      	ldr	r3, [pc, #512]	; (8005138 <UART_SetConfig+0x2cc>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d828      	bhi.n	8004f94 <UART_SetConfig+0x128>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0xdc>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f95 	.word	0x08004f95
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004f95 	.word	0x08004f95
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004f83 	.word	0x08004f83
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004f8f 	.word	0x08004f8f
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e118      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f82:	2302      	movs	r3, #2
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e115      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e112      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e10f      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f94:	2310      	movs	r3, #16
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e10c      	b.n	80051b4 <UART_SetConfig+0x348>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a68      	ldr	r2, [pc, #416]	; (8005140 <UART_SetConfig+0x2d4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d120      	bne.n	8004fe6 <UART_SetConfig+0x17a>
 8004fa4:	4b64      	ldr	r3, [pc, #400]	; (8005138 <UART_SetConfig+0x2cc>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fae:	2b30      	cmp	r3, #48	; 0x30
 8004fb0:	d013      	beq.n	8004fda <UART_SetConfig+0x16e>
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d814      	bhi.n	8004fe0 <UART_SetConfig+0x174>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d009      	beq.n	8004fce <UART_SetConfig+0x162>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d810      	bhi.n	8004fe0 <UART_SetConfig+0x174>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <UART_SetConfig+0x15c>
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d006      	beq.n	8004fd4 <UART_SetConfig+0x168>
 8004fc6:	e00b      	b.n	8004fe0 <UART_SetConfig+0x174>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e0f2      	b.n	80051b4 <UART_SetConfig+0x348>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e0ef      	b.n	80051b4 <UART_SetConfig+0x348>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e0ec      	b.n	80051b4 <UART_SetConfig+0x348>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e0e9      	b.n	80051b4 <UART_SetConfig+0x348>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e0e6      	b.n	80051b4 <UART_SetConfig+0x348>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a56      	ldr	r2, [pc, #344]	; (8005144 <UART_SetConfig+0x2d8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d120      	bne.n	8005032 <UART_SetConfig+0x1c6>
 8004ff0:	4b51      	ldr	r3, [pc, #324]	; (8005138 <UART_SetConfig+0x2cc>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8004ffc:	d013      	beq.n	8005026 <UART_SetConfig+0x1ba>
 8004ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8005000:	d814      	bhi.n	800502c <UART_SetConfig+0x1c0>
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d009      	beq.n	800501a <UART_SetConfig+0x1ae>
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d810      	bhi.n	800502c <UART_SetConfig+0x1c0>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <UART_SetConfig+0x1a8>
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d006      	beq.n	8005020 <UART_SetConfig+0x1b4>
 8005012:	e00b      	b.n	800502c <UART_SetConfig+0x1c0>
 8005014:	2300      	movs	r3, #0
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e0cc      	b.n	80051b4 <UART_SetConfig+0x348>
 800501a:	2302      	movs	r3, #2
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e0c9      	b.n	80051b4 <UART_SetConfig+0x348>
 8005020:	2304      	movs	r3, #4
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e0c6      	b.n	80051b4 <UART_SetConfig+0x348>
 8005026:	2308      	movs	r3, #8
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e0c3      	b.n	80051b4 <UART_SetConfig+0x348>
 800502c:	2310      	movs	r3, #16
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e0c0      	b.n	80051b4 <UART_SetConfig+0x348>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a44      	ldr	r2, [pc, #272]	; (8005148 <UART_SetConfig+0x2dc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d125      	bne.n	8005088 <UART_SetConfig+0x21c>
 800503c:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <UART_SetConfig+0x2cc>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504a:	d017      	beq.n	800507c <UART_SetConfig+0x210>
 800504c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005050:	d817      	bhi.n	8005082 <UART_SetConfig+0x216>
 8005052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005056:	d00b      	beq.n	8005070 <UART_SetConfig+0x204>
 8005058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505c:	d811      	bhi.n	8005082 <UART_SetConfig+0x216>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <UART_SetConfig+0x1fe>
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d006      	beq.n	8005076 <UART_SetConfig+0x20a>
 8005068:	e00b      	b.n	8005082 <UART_SetConfig+0x216>
 800506a:	2300      	movs	r3, #0
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e0a1      	b.n	80051b4 <UART_SetConfig+0x348>
 8005070:	2302      	movs	r3, #2
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e09e      	b.n	80051b4 <UART_SetConfig+0x348>
 8005076:	2304      	movs	r3, #4
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e09b      	b.n	80051b4 <UART_SetConfig+0x348>
 800507c:	2308      	movs	r3, #8
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e098      	b.n	80051b4 <UART_SetConfig+0x348>
 8005082:	2310      	movs	r3, #16
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e095      	b.n	80051b4 <UART_SetConfig+0x348>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2f      	ldr	r2, [pc, #188]	; (800514c <UART_SetConfig+0x2e0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d125      	bne.n	80050de <UART_SetConfig+0x272>
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <UART_SetConfig+0x2cc>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800509c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a0:	d017      	beq.n	80050d2 <UART_SetConfig+0x266>
 80050a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a6:	d817      	bhi.n	80050d8 <UART_SetConfig+0x26c>
 80050a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ac:	d00b      	beq.n	80050c6 <UART_SetConfig+0x25a>
 80050ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b2:	d811      	bhi.n	80050d8 <UART_SetConfig+0x26c>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <UART_SetConfig+0x254>
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d006      	beq.n	80050cc <UART_SetConfig+0x260>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x26c>
 80050c0:	2301      	movs	r3, #1
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e076      	b.n	80051b4 <UART_SetConfig+0x348>
 80050c6:	2302      	movs	r3, #2
 80050c8:	77fb      	strb	r3, [r7, #31]
 80050ca:	e073      	b.n	80051b4 <UART_SetConfig+0x348>
 80050cc:	2304      	movs	r3, #4
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e070      	b.n	80051b4 <UART_SetConfig+0x348>
 80050d2:	2308      	movs	r3, #8
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e06d      	b.n	80051b4 <UART_SetConfig+0x348>
 80050d8:	2310      	movs	r3, #16
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e06a      	b.n	80051b4 <UART_SetConfig+0x348>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <UART_SetConfig+0x2e4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d138      	bne.n	800515a <UART_SetConfig+0x2ee>
 80050e8:	4b13      	ldr	r3, [pc, #76]	; (8005138 <UART_SetConfig+0x2cc>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050f6:	d017      	beq.n	8005128 <UART_SetConfig+0x2bc>
 80050f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050fc:	d82a      	bhi.n	8005154 <UART_SetConfig+0x2e8>
 80050fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005102:	d00b      	beq.n	800511c <UART_SetConfig+0x2b0>
 8005104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005108:	d824      	bhi.n	8005154 <UART_SetConfig+0x2e8>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <UART_SetConfig+0x2aa>
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005112:	d006      	beq.n	8005122 <UART_SetConfig+0x2b6>
 8005114:	e01e      	b.n	8005154 <UART_SetConfig+0x2e8>
 8005116:	2300      	movs	r3, #0
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e04b      	b.n	80051b4 <UART_SetConfig+0x348>
 800511c:	2302      	movs	r3, #2
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e048      	b.n	80051b4 <UART_SetConfig+0x348>
 8005122:	2304      	movs	r3, #4
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e045      	b.n	80051b4 <UART_SetConfig+0x348>
 8005128:	2308      	movs	r3, #8
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e042      	b.n	80051b4 <UART_SetConfig+0x348>
 800512e:	bf00      	nop
 8005130:	efff69f3 	.word	0xefff69f3
 8005134:	40011000 	.word	0x40011000
 8005138:	40023800 	.word	0x40023800
 800513c:	40004400 	.word	0x40004400
 8005140:	40004800 	.word	0x40004800
 8005144:	40004c00 	.word	0x40004c00
 8005148:	40005000 	.word	0x40005000
 800514c:	40011400 	.word	0x40011400
 8005150:	40007800 	.word	0x40007800
 8005154:	2310      	movs	r3, #16
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e02c      	b.n	80051b4 <UART_SetConfig+0x348>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a72      	ldr	r2, [pc, #456]	; (8005328 <UART_SetConfig+0x4bc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d125      	bne.n	80051b0 <UART_SetConfig+0x344>
 8005164:	4b71      	ldr	r3, [pc, #452]	; (800532c <UART_SetConfig+0x4c0>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800516e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005172:	d017      	beq.n	80051a4 <UART_SetConfig+0x338>
 8005174:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005178:	d817      	bhi.n	80051aa <UART_SetConfig+0x33e>
 800517a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517e:	d00b      	beq.n	8005198 <UART_SetConfig+0x32c>
 8005180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005184:	d811      	bhi.n	80051aa <UART_SetConfig+0x33e>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <UART_SetConfig+0x326>
 800518a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518e:	d006      	beq.n	800519e <UART_SetConfig+0x332>
 8005190:	e00b      	b.n	80051aa <UART_SetConfig+0x33e>
 8005192:	2300      	movs	r3, #0
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e00d      	b.n	80051b4 <UART_SetConfig+0x348>
 8005198:	2302      	movs	r3, #2
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e00a      	b.n	80051b4 <UART_SetConfig+0x348>
 800519e:	2304      	movs	r3, #4
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e007      	b.n	80051b4 <UART_SetConfig+0x348>
 80051a4:	2308      	movs	r3, #8
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e004      	b.n	80051b4 <UART_SetConfig+0x348>
 80051aa:	2310      	movs	r3, #16
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e001      	b.n	80051b4 <UART_SetConfig+0x348>
 80051b0:	2310      	movs	r3, #16
 80051b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051bc:	d15b      	bne.n	8005276 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051be:	7ffb      	ldrb	r3, [r7, #31]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d828      	bhi.n	8005216 <UART_SetConfig+0x3aa>
 80051c4:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x360>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005217 	.word	0x08005217
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005217 	.word	0x08005217
 80051ec:	0800520f 	.word	0x0800520f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fd fdf2 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80051f4:	61b8      	str	r0, [r7, #24]
        break;
 80051f6:	e013      	b.n	8005220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fd fe02 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 80051fc:	61b8      	str	r0, [r7, #24]
        break;
 80051fe:	e00f      	b.n	8005220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <UART_SetConfig+0x4c4>)
 8005202:	61bb      	str	r3, [r7, #24]
        break;
 8005204:	e00c      	b.n	8005220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005206:	f7fd fd15 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 800520a:	61b8      	str	r0, [r7, #24]
        break;
 800520c:	e008      	b.n	8005220 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005212:	61bb      	str	r3, [r7, #24]
        break;
 8005214:	e004      	b.n	8005220 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	77bb      	strb	r3, [r7, #30]
        break;
 800521e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d074      	beq.n	8005310 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	005a      	lsls	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	fbb2 f3f3 	udiv	r3, r2, r3
 800523a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b0f      	cmp	r3, #15
 8005240:	d916      	bls.n	8005270 <UART_SetConfig+0x404>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d212      	bcs.n	8005270 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f023 030f 	bic.w	r3, r3, #15
 8005252:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	b29b      	uxth	r3, r3
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	b29a      	uxth	r2, r3
 8005260:	89fb      	ldrh	r3, [r7, #14]
 8005262:	4313      	orrs	r3, r2
 8005264:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	89fa      	ldrh	r2, [r7, #14]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e04f      	b.n	8005310 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	77bb      	strb	r3, [r7, #30]
 8005274:	e04c      	b.n	8005310 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005276:	7ffb      	ldrb	r3, [r7, #31]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d828      	bhi.n	80052ce <UART_SetConfig+0x462>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x418>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	080052cf 	.word	0x080052cf
 8005294:	080052bf 	.word	0x080052bf
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	080052c7 	.word	0x080052c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7fd fd96 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80052ac:	61b8      	str	r0, [r7, #24]
        break;
 80052ae:	e013      	b.n	80052d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7fd fda6 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 80052b4:	61b8      	str	r0, [r7, #24]
        break;
 80052b6:	e00f      	b.n	80052d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <UART_SetConfig+0x4c4>)
 80052ba:	61bb      	str	r3, [r7, #24]
        break;
 80052bc:	e00c      	b.n	80052d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052be:	f7fd fcb9 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 80052c2:	61b8      	str	r0, [r7, #24]
        break;
 80052c4:	e008      	b.n	80052d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	61bb      	str	r3, [r7, #24]
        break;
 80052cc:	e004      	b.n	80052d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	77bb      	strb	r3, [r7, #30]
        break;
 80052d6:	bf00      	nop
    }

    if (pclk != 0U)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d018      	beq.n	8005310 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	085a      	lsrs	r2, r3, #1
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d909      	bls.n	800530c <UART_SetConfig+0x4a0>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d205      	bcs.n	800530c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	b29a      	uxth	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e001      	b.n	8005310 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800531c:	7fbb      	ldrb	r3, [r7, #30]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40007c00 	.word	0x40007c00
 800532c:	40023800 	.word	0x40023800
 8005330:	00f42400 	.word	0x00f42400

08005334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d10a      	bne.n	800544a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005488:	f7fc fbde 	bl	8001c48 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d10e      	bne.n	80054ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f831 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e027      	b.n	800550a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d10e      	bne.n	80054e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f81b 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e011      	b.n	800550a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b09c      	sub	sp, #112	; 0x70
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005522:	e0a7      	b.n	8005674 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	f000 80a3 	beq.w	8005674 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7fc fb8b 	bl	8001c48 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <UART_WaitOnFlagUntilTimeout+0x32>
 800553e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005540:	2b00      	cmp	r3, #0
 8005542:	d13f      	bne.n	80055c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005558:	667b      	str	r3, [r7, #100]	; 0x64
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005564:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e6      	bne.n	8005544 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	663b      	str	r3, [r7, #96]	; 0x60
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005596:	64ba      	str	r2, [r7, #72]	; 0x48
 8005598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800559c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e068      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d050      	beq.n	8005674 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e0:	d148      	bne.n	8005674 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
 800560c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e6      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	613b      	str	r3, [r7, #16]
   return(result);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	66bb      	str	r3, [r7, #104]	; 0x68
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800563e:	623a      	str	r2, [r7, #32]
 8005640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	61bb      	str	r3, [r7, #24]
   return(result);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e5      	bne.n	800561e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e010      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4013      	ands	r3, r2
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	429a      	cmp	r2, r3
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	429a      	cmp	r2, r3
 8005690:	f43f af48 	beq.w	8005524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3770      	adds	r7, #112	; 0x70
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b097      	sub	sp, #92	; 0x5c
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d10e      	bne.n	80056f2 <UART_Start_Receive_IT+0x52>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <UART_Start_Receive_IT+0x48>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056e6:	e02d      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	22ff      	movs	r2, #255	; 0xff
 80056ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056f0:	e028      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10d      	bne.n	8005716 <UART_Start_Receive_IT+0x76>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <UART_Start_Receive_IT+0x6c>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800570a:	e01b      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	227f      	movs	r2, #127	; 0x7f
 8005710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005714:	e016      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800571e:	d10d      	bne.n	800573c <UART_Start_Receive_IT+0x9c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <UART_Start_Receive_IT+0x92>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	227f      	movs	r2, #127	; 0x7f
 800572c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005730:	e008      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	223f      	movs	r2, #63	; 0x3f
 8005736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800573a:	e003      	b.n	8005744 <UART_Start_Receive_IT+0xa4>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2222      	movs	r2, #34	; 0x22
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	657b      	str	r3, [r7, #84]	; 0x54
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005774:	64ba      	str	r2, [r7, #72]	; 0x48
 8005776:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800577a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e5      	bne.n	8005754 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d107      	bne.n	80057a2 <UART_Start_Receive_IT+0x102>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a21      	ldr	r2, [pc, #132]	; (8005824 <UART_Start_Receive_IT+0x184>)
 800579e:	669a      	str	r2, [r3, #104]	; 0x68
 80057a0:	e002      	b.n	80057a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a20      	ldr	r2, [pc, #128]	; (8005828 <UART_Start_Receive_IT+0x188>)
 80057a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d019      	beq.n	80057e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ce:	637b      	str	r3, [r7, #52]	; 0x34
 80057d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e6      	bne.n	80057b0 <UART_Start_Receive_IT+0x110>
 80057e2:	e018      	b.n	8005816 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	613b      	str	r3, [r7, #16]
   return(result);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f043 0320 	orr.w	r3, r3, #32
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	69f9      	ldr	r1, [r7, #28]
 8005808:	6a3a      	ldr	r2, [r7, #32]
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e6      	bne.n	80057e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	375c      	adds	r7, #92	; 0x5c
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	08005c51 	.word	0x08005c51
 8005828:	08005aeb 	.word	0x08005aeb

0800582c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b095      	sub	sp, #84	; 0x54
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
 8005854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	61fb      	str	r3, [r7, #28]
   return(result);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	64bb      	str	r3, [r7, #72]	; 0x48
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d118      	bne.n	80058d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f023 0310 	bic.w	r3, r3, #16
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6979      	ldr	r1, [r7, #20]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e6      	bne.n	80058a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058e8:	bf00      	nop
 80058ea:	3754      	adds	r7, #84	; 0x54
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff fa8a 	bl	8004e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b08f      	sub	sp, #60	; 0x3c
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592c:	2b21      	cmp	r3, #33	; 0x21
 800592e:	d14c      	bne.n	80059ca <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d132      	bne.n	80059a2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	61fb      	str	r3, [r7, #28]
   return(result);
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800595c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e6      	bne.n	800593c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	60bb      	str	r3, [r7, #8]
   return(result);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6979      	ldr	r1, [r7, #20]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	613b      	str	r3, [r7, #16]
   return(result);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e6      	bne.n	800596e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80059a0:	e013      	b.n	80059ca <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a6:	781a      	ldrb	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80059ca:	bf00      	nop
 80059cc:	373c      	adds	r7, #60	; 0x3c
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b091      	sub	sp, #68	; 0x44
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e2:	2b21      	cmp	r3, #33	; 0x21
 80059e4:	d151      	bne.n	8005a8a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d132      	bne.n	8005a58 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
 8005a12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e6      	bne.n	8005a24 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a56:	e018      	b.n	8005a8a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a8a:	bf00      	nop
 8005a8c:	3744      	adds	r7, #68	; 0x44
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b088      	sub	sp, #32
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6979      	ldr	r1, [r7, #20]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7fb fdf1 	bl	80016c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae2:	bf00      	nop
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b096      	sub	sp, #88	; 0x58
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005af8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b02:	2b22      	cmp	r3, #34	; 0x22
 8005b04:	f040 8098 	bne.w	8005c38 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b12:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005b16:	b2d9      	uxtb	r1, r3
 8005b18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	400a      	ands	r2, r1
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d17b      	bne.n	8005c48 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b64:	653b      	str	r3, [r7, #80]	; 0x50
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e6      	bne.n	8005b50 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	623b      	str	r3, [r7, #32]
   return(result);
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e5      	bne.n	8005b82 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d12e      	bne.n	8005c30 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f023 0310 	bic.w	r3, r3, #16
 8005bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	69b9      	ldr	r1, [r7, #24]
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	617b      	str	r3, [r7, #20]
   return(result);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e6      	bne.n	8005bd8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d103      	bne.n	8005c20 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff f909 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c2e:	e00b      	b.n	8005c48 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7fb fd1b 	bl	800166c <HAL_UART_RxCpltCallback>
}
 8005c36:	e007      	b.n	8005c48 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0208 	orr.w	r2, r2, #8
 8005c46:	619a      	str	r2, [r3, #24]
}
 8005c48:	bf00      	nop
 8005c4a:	3758      	adds	r7, #88	; 0x58
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b096      	sub	sp, #88	; 0x58
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c68:	2b22      	cmp	r3, #34	; 0x22
 8005c6a:	f040 8098 	bne.w	8005d9e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c7e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005c82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c86:	4013      	ands	r3, r2
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d17b      	bne.n	8005dae <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d12e      	bne.n	8005d96 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0310 	bic.w	r3, r3, #16
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6979      	ldr	r1, [r7, #20]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d103      	bne.n	8005d86 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2210      	movs	r2, #16
 8005d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff f856 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d94:	e00b      	b.n	8005dae <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb fc68 	bl	800166c <HAL_UART_RxCpltCallback>
}
 8005d9c:	e007      	b.n	8005dae <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	619a      	str	r2, [r3, #24]
}
 8005dae:	bf00      	nop
 8005db0:	3758      	adds	r7, #88	; 0x58
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <atoi>:
 8005db6:	220a      	movs	r2, #10
 8005db8:	2100      	movs	r1, #0
 8005dba:	f000 b8d7 	b.w	8005f6c <strtol>
	...

08005dc0 <__errno>:
 8005dc0:	4b01      	ldr	r3, [pc, #4]	; (8005dc8 <__errno+0x8>)
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	2000000c 	.word	0x2000000c

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x38>)
 8005dd0:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd2:	1b64      	subs	r4, r4, r5
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	4d0b      	ldr	r5, [pc, #44]	; (8005e0c <__libc_init_array+0x40>)
 8005dde:	4c0c      	ldr	r4, [pc, #48]	; (8005e10 <__libc_init_array+0x44>)
 8005de0:	f000 fdb6 	bl	8006950 <_init>
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	2600      	movs	r6, #0
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	08006b58 	.word	0x08006b58
 8005e08:	08006b58 	.word	0x08006b58
 8005e0c:	08006b58 	.word	0x08006b58
 8005e10:	08006b5c 	.word	0x08006b5c

08005e14 <memset>:
 8005e14:	4402      	add	r2, r0
 8005e16:	4603      	mov	r3, r0
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d100      	bne.n	8005e1e <memset+0xa>
 8005e1c:	4770      	bx	lr
 8005e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e22:	e7f9      	b.n	8005e18 <memset+0x4>

08005e24 <strchr>:
 8005e24:	b2c9      	uxtb	r1, r1
 8005e26:	4603      	mov	r3, r0
 8005e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e2c:	b11a      	cbz	r2, 8005e36 <strchr+0x12>
 8005e2e:	428a      	cmp	r2, r1
 8005e30:	d1f9      	bne.n	8005e26 <strchr+0x2>
 8005e32:	4618      	mov	r0, r3
 8005e34:	4770      	bx	lr
 8005e36:	2900      	cmp	r1, #0
 8005e38:	bf18      	it	ne
 8005e3a:	2300      	movne	r3, #0
 8005e3c:	e7f9      	b.n	8005e32 <strchr+0xe>

08005e3e <strncmp>:
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	b17a      	cbz	r2, 8005e62 <strncmp+0x24>
 8005e42:	4603      	mov	r3, r0
 8005e44:	3901      	subs	r1, #1
 8005e46:	1884      	adds	r4, r0, r2
 8005e48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e50:	4290      	cmp	r0, r2
 8005e52:	d101      	bne.n	8005e58 <strncmp+0x1a>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d101      	bne.n	8005e5c <strncmp+0x1e>
 8005e58:	1a80      	subs	r0, r0, r2
 8005e5a:	bd10      	pop	{r4, pc}
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d1f3      	bne.n	8005e48 <strncmp+0xa>
 8005e60:	e7fa      	b.n	8005e58 <strncmp+0x1a>
 8005e62:	4610      	mov	r0, r2
 8005e64:	e7f9      	b.n	8005e5a <strncmp+0x1c>
	...

08005e68 <_strtol_l.constprop.0>:
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6e:	d001      	beq.n	8005e74 <_strtol_l.constprop.0+0xc>
 8005e70:	2b24      	cmp	r3, #36	; 0x24
 8005e72:	d906      	bls.n	8005e82 <_strtol_l.constprop.0+0x1a>
 8005e74:	f7ff ffa4 	bl	8005dc0 <__errno>
 8005e78:	2316      	movs	r3, #22
 8005e7a:	6003      	str	r3, [r0, #0]
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005f68 <_strtol_l.constprop.0+0x100>
 8005e86:	460d      	mov	r5, r1
 8005e88:	462e      	mov	r6, r5
 8005e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005e92:	f017 0708 	ands.w	r7, r7, #8
 8005e96:	d1f7      	bne.n	8005e88 <_strtol_l.constprop.0+0x20>
 8005e98:	2c2d      	cmp	r4, #45	; 0x2d
 8005e9a:	d132      	bne.n	8005f02 <_strtol_l.constprop.0+0x9a>
 8005e9c:	782c      	ldrb	r4, [r5, #0]
 8005e9e:	2701      	movs	r7, #1
 8005ea0:	1cb5      	adds	r5, r6, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d05b      	beq.n	8005f5e <_strtol_l.constprop.0+0xf6>
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d109      	bne.n	8005ebe <_strtol_l.constprop.0+0x56>
 8005eaa:	2c30      	cmp	r4, #48	; 0x30
 8005eac:	d107      	bne.n	8005ebe <_strtol_l.constprop.0+0x56>
 8005eae:	782c      	ldrb	r4, [r5, #0]
 8005eb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005eb4:	2c58      	cmp	r4, #88	; 0x58
 8005eb6:	d14d      	bne.n	8005f54 <_strtol_l.constprop.0+0xec>
 8005eb8:	786c      	ldrb	r4, [r5, #1]
 8005eba:	2310      	movs	r3, #16
 8005ebc:	3502      	adds	r5, #2
 8005ebe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005ec2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ec6:	f04f 0c00 	mov.w	ip, #0
 8005eca:	fbb8 f9f3 	udiv	r9, r8, r3
 8005ece:	4666      	mov	r6, ip
 8005ed0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ed4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005ed8:	f1be 0f09 	cmp.w	lr, #9
 8005edc:	d816      	bhi.n	8005f0c <_strtol_l.constprop.0+0xa4>
 8005ede:	4674      	mov	r4, lr
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	dd24      	ble.n	8005f2e <_strtol_l.constprop.0+0xc6>
 8005ee4:	f1bc 0f00 	cmp.w	ip, #0
 8005ee8:	db1e      	blt.n	8005f28 <_strtol_l.constprop.0+0xc0>
 8005eea:	45b1      	cmp	r9, r6
 8005eec:	d31c      	bcc.n	8005f28 <_strtol_l.constprop.0+0xc0>
 8005eee:	d101      	bne.n	8005ef4 <_strtol_l.constprop.0+0x8c>
 8005ef0:	45a2      	cmp	sl, r4
 8005ef2:	db19      	blt.n	8005f28 <_strtol_l.constprop.0+0xc0>
 8005ef4:	fb06 4603 	mla	r6, r6, r3, r4
 8005ef8:	f04f 0c01 	mov.w	ip, #1
 8005efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f00:	e7e8      	b.n	8005ed4 <_strtol_l.constprop.0+0x6c>
 8005f02:	2c2b      	cmp	r4, #43	; 0x2b
 8005f04:	bf04      	itt	eq
 8005f06:	782c      	ldrbeq	r4, [r5, #0]
 8005f08:	1cb5      	addeq	r5, r6, #2
 8005f0a:	e7ca      	b.n	8005ea2 <_strtol_l.constprop.0+0x3a>
 8005f0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f10:	f1be 0f19 	cmp.w	lr, #25
 8005f14:	d801      	bhi.n	8005f1a <_strtol_l.constprop.0+0xb2>
 8005f16:	3c37      	subs	r4, #55	; 0x37
 8005f18:	e7e2      	b.n	8005ee0 <_strtol_l.constprop.0+0x78>
 8005f1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005f1e:	f1be 0f19 	cmp.w	lr, #25
 8005f22:	d804      	bhi.n	8005f2e <_strtol_l.constprop.0+0xc6>
 8005f24:	3c57      	subs	r4, #87	; 0x57
 8005f26:	e7db      	b.n	8005ee0 <_strtol_l.constprop.0+0x78>
 8005f28:	f04f 3cff 	mov.w	ip, #4294967295
 8005f2c:	e7e6      	b.n	8005efc <_strtol_l.constprop.0+0x94>
 8005f2e:	f1bc 0f00 	cmp.w	ip, #0
 8005f32:	da05      	bge.n	8005f40 <_strtol_l.constprop.0+0xd8>
 8005f34:	2322      	movs	r3, #34	; 0x22
 8005f36:	6003      	str	r3, [r0, #0]
 8005f38:	4646      	mov	r6, r8
 8005f3a:	b942      	cbnz	r2, 8005f4e <_strtol_l.constprop.0+0xe6>
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	e79e      	b.n	8005e7e <_strtol_l.constprop.0+0x16>
 8005f40:	b107      	cbz	r7, 8005f44 <_strtol_l.constprop.0+0xdc>
 8005f42:	4276      	negs	r6, r6
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	d0f9      	beq.n	8005f3c <_strtol_l.constprop.0+0xd4>
 8005f48:	f1bc 0f00 	cmp.w	ip, #0
 8005f4c:	d000      	beq.n	8005f50 <_strtol_l.constprop.0+0xe8>
 8005f4e:	1e69      	subs	r1, r5, #1
 8005f50:	6011      	str	r1, [r2, #0]
 8005f52:	e7f3      	b.n	8005f3c <_strtol_l.constprop.0+0xd4>
 8005f54:	2430      	movs	r4, #48	; 0x30
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1b1      	bne.n	8005ebe <_strtol_l.constprop.0+0x56>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	e7af      	b.n	8005ebe <_strtol_l.constprop.0+0x56>
 8005f5e:	2c30      	cmp	r4, #48	; 0x30
 8005f60:	d0a5      	beq.n	8005eae <_strtol_l.constprop.0+0x46>
 8005f62:	230a      	movs	r3, #10
 8005f64:	e7ab      	b.n	8005ebe <_strtol_l.constprop.0+0x56>
 8005f66:	bf00      	nop
 8005f68:	08006a1d 	.word	0x08006a1d

08005f6c <strtol>:
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	460a      	mov	r2, r1
 8005f70:	4601      	mov	r1, r0
 8005f72:	4802      	ldr	r0, [pc, #8]	; (8005f7c <strtol+0x10>)
 8005f74:	6800      	ldr	r0, [r0, #0]
 8005f76:	f7ff bf77 	b.w	8005e68 <_strtol_l.constprop.0>
 8005f7a:	bf00      	nop
 8005f7c:	2000000c 	.word	0x2000000c

08005f80 <_vsiprintf_r>:
 8005f80:	b500      	push	{lr}
 8005f82:	b09b      	sub	sp, #108	; 0x6c
 8005f84:	9100      	str	r1, [sp, #0]
 8005f86:	9104      	str	r1, [sp, #16]
 8005f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f8c:	9105      	str	r1, [sp, #20]
 8005f8e:	9102      	str	r1, [sp, #8]
 8005f90:	4905      	ldr	r1, [pc, #20]	; (8005fa8 <_vsiprintf_r+0x28>)
 8005f92:	9103      	str	r1, [sp, #12]
 8005f94:	4669      	mov	r1, sp
 8005f96:	f000 f86f 	bl	8006078 <_svfiprintf_r>
 8005f9a:	9b00      	ldr	r3, [sp, #0]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	b01b      	add	sp, #108	; 0x6c
 8005fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fa6:	bf00      	nop
 8005fa8:	ffff0208 	.word	0xffff0208

08005fac <vsiprintf>:
 8005fac:	4613      	mov	r3, r2
 8005fae:	460a      	mov	r2, r1
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	4802      	ldr	r0, [pc, #8]	; (8005fbc <vsiprintf+0x10>)
 8005fb4:	6800      	ldr	r0, [r0, #0]
 8005fb6:	f7ff bfe3 	b.w	8005f80 <_vsiprintf_r>
 8005fba:	bf00      	nop
 8005fbc:	2000000c 	.word	0x2000000c

08005fc0 <__ssputs_r>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	688e      	ldr	r6, [r1, #8]
 8005fc6:	429e      	cmp	r6, r3
 8005fc8:	4682      	mov	sl, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	4690      	mov	r8, r2
 8005fce:	461f      	mov	r7, r3
 8005fd0:	d838      	bhi.n	8006044 <__ssputs_r+0x84>
 8005fd2:	898a      	ldrh	r2, [r1, #12]
 8005fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fd8:	d032      	beq.n	8006040 <__ssputs_r+0x80>
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	6909      	ldr	r1, [r1, #16]
 8005fde:	eba5 0901 	sub.w	r9, r5, r1
 8005fe2:	6965      	ldr	r5, [r4, #20]
 8005fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fec:	3301      	adds	r3, #1
 8005fee:	444b      	add	r3, r9
 8005ff0:	106d      	asrs	r5, r5, #1
 8005ff2:	429d      	cmp	r5, r3
 8005ff4:	bf38      	it	cc
 8005ff6:	461d      	movcc	r5, r3
 8005ff8:	0553      	lsls	r3, r2, #21
 8005ffa:	d531      	bpl.n	8006060 <__ssputs_r+0xa0>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f000 fb63 	bl	80066c8 <_malloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	b950      	cbnz	r0, 800601c <__ssputs_r+0x5c>
 8006006:	230c      	movs	r3, #12
 8006008:	f8ca 3000 	str.w	r3, [sl]
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601c:	6921      	ldr	r1, [r4, #16]
 800601e:	464a      	mov	r2, r9
 8006020:	f000 fabe 	bl	80065a0 <memcpy>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	6126      	str	r6, [r4, #16]
 8006032:	6165      	str	r5, [r4, #20]
 8006034:	444e      	add	r6, r9
 8006036:	eba5 0509 	sub.w	r5, r5, r9
 800603a:	6026      	str	r6, [r4, #0]
 800603c:	60a5      	str	r5, [r4, #8]
 800603e:	463e      	mov	r6, r7
 8006040:	42be      	cmp	r6, r7
 8006042:	d900      	bls.n	8006046 <__ssputs_r+0x86>
 8006044:	463e      	mov	r6, r7
 8006046:	6820      	ldr	r0, [r4, #0]
 8006048:	4632      	mov	r2, r6
 800604a:	4641      	mov	r1, r8
 800604c:	f000 fab6 	bl	80065bc <memmove>
 8006050:	68a3      	ldr	r3, [r4, #8]
 8006052:	1b9b      	subs	r3, r3, r6
 8006054:	60a3      	str	r3, [r4, #8]
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	4433      	add	r3, r6
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	2000      	movs	r0, #0
 800605e:	e7db      	b.n	8006018 <__ssputs_r+0x58>
 8006060:	462a      	mov	r2, r5
 8006062:	f000 fba5 	bl	80067b0 <_realloc_r>
 8006066:	4606      	mov	r6, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	d1e1      	bne.n	8006030 <__ssputs_r+0x70>
 800606c:	6921      	ldr	r1, [r4, #16]
 800606e:	4650      	mov	r0, sl
 8006070:	f000 fabe 	bl	80065f0 <_free_r>
 8006074:	e7c7      	b.n	8006006 <__ssputs_r+0x46>
	...

08006078 <_svfiprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	4698      	mov	r8, r3
 800607e:	898b      	ldrh	r3, [r1, #12]
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	b09d      	sub	sp, #116	; 0x74
 8006084:	4607      	mov	r7, r0
 8006086:	460d      	mov	r5, r1
 8006088:	4614      	mov	r4, r2
 800608a:	d50e      	bpl.n	80060aa <_svfiprintf_r+0x32>
 800608c:	690b      	ldr	r3, [r1, #16]
 800608e:	b963      	cbnz	r3, 80060aa <_svfiprintf_r+0x32>
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	f000 fb19 	bl	80066c8 <_malloc_r>
 8006096:	6028      	str	r0, [r5, #0]
 8006098:	6128      	str	r0, [r5, #16]
 800609a:	b920      	cbnz	r0, 80060a6 <_svfiprintf_r+0x2e>
 800609c:	230c      	movs	r3, #12
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e0d1      	b.n	800624a <_svfiprintf_r+0x1d2>
 80060a6:	2340      	movs	r3, #64	; 0x40
 80060a8:	616b      	str	r3, [r5, #20]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9309      	str	r3, [sp, #36]	; 0x24
 80060ae:	2320      	movs	r3, #32
 80060b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b8:	2330      	movs	r3, #48	; 0x30
 80060ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006264 <_svfiprintf_r+0x1ec>
 80060be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c2:	f04f 0901 	mov.w	r9, #1
 80060c6:	4623      	mov	r3, r4
 80060c8:	469a      	mov	sl, r3
 80060ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ce:	b10a      	cbz	r2, 80060d4 <_svfiprintf_r+0x5c>
 80060d0:	2a25      	cmp	r2, #37	; 0x25
 80060d2:	d1f9      	bne.n	80060c8 <_svfiprintf_r+0x50>
 80060d4:	ebba 0b04 	subs.w	fp, sl, r4
 80060d8:	d00b      	beq.n	80060f2 <_svfiprintf_r+0x7a>
 80060da:	465b      	mov	r3, fp
 80060dc:	4622      	mov	r2, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	4638      	mov	r0, r7
 80060e2:	f7ff ff6d 	bl	8005fc0 <__ssputs_r>
 80060e6:	3001      	adds	r0, #1
 80060e8:	f000 80aa 	beq.w	8006240 <_svfiprintf_r+0x1c8>
 80060ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ee:	445a      	add	r2, fp
 80060f0:	9209      	str	r2, [sp, #36]	; 0x24
 80060f2:	f89a 3000 	ldrb.w	r3, [sl]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80a2 	beq.w	8006240 <_svfiprintf_r+0x1c8>
 80060fc:	2300      	movs	r3, #0
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006106:	f10a 0a01 	add.w	sl, sl, #1
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	9307      	str	r3, [sp, #28]
 800610e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006112:	931a      	str	r3, [sp, #104]	; 0x68
 8006114:	4654      	mov	r4, sl
 8006116:	2205      	movs	r2, #5
 8006118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800611c:	4851      	ldr	r0, [pc, #324]	; (8006264 <_svfiprintf_r+0x1ec>)
 800611e:	f7fa f897 	bl	8000250 <memchr>
 8006122:	9a04      	ldr	r2, [sp, #16]
 8006124:	b9d8      	cbnz	r0, 800615e <_svfiprintf_r+0xe6>
 8006126:	06d0      	lsls	r0, r2, #27
 8006128:	bf44      	itt	mi
 800612a:	2320      	movmi	r3, #32
 800612c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006130:	0711      	lsls	r1, r2, #28
 8006132:	bf44      	itt	mi
 8006134:	232b      	movmi	r3, #43	; 0x2b
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613a:	f89a 3000 	ldrb.w	r3, [sl]
 800613e:	2b2a      	cmp	r3, #42	; 0x2a
 8006140:	d015      	beq.n	800616e <_svfiprintf_r+0xf6>
 8006142:	9a07      	ldr	r2, [sp, #28]
 8006144:	4654      	mov	r4, sl
 8006146:	2000      	movs	r0, #0
 8006148:	f04f 0c0a 	mov.w	ip, #10
 800614c:	4621      	mov	r1, r4
 800614e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006152:	3b30      	subs	r3, #48	; 0x30
 8006154:	2b09      	cmp	r3, #9
 8006156:	d94e      	bls.n	80061f6 <_svfiprintf_r+0x17e>
 8006158:	b1b0      	cbz	r0, 8006188 <_svfiprintf_r+0x110>
 800615a:	9207      	str	r2, [sp, #28]
 800615c:	e014      	b.n	8006188 <_svfiprintf_r+0x110>
 800615e:	eba0 0308 	sub.w	r3, r0, r8
 8006162:	fa09 f303 	lsl.w	r3, r9, r3
 8006166:	4313      	orrs	r3, r2
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	46a2      	mov	sl, r4
 800616c:	e7d2      	b.n	8006114 <_svfiprintf_r+0x9c>
 800616e:	9b03      	ldr	r3, [sp, #12]
 8006170:	1d19      	adds	r1, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	9103      	str	r1, [sp, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	bfbb      	ittet	lt
 800617a:	425b      	neglt	r3, r3
 800617c:	f042 0202 	orrlt.w	r2, r2, #2
 8006180:	9307      	strge	r3, [sp, #28]
 8006182:	9307      	strlt	r3, [sp, #28]
 8006184:	bfb8      	it	lt
 8006186:	9204      	strlt	r2, [sp, #16]
 8006188:	7823      	ldrb	r3, [r4, #0]
 800618a:	2b2e      	cmp	r3, #46	; 0x2e
 800618c:	d10c      	bne.n	80061a8 <_svfiprintf_r+0x130>
 800618e:	7863      	ldrb	r3, [r4, #1]
 8006190:	2b2a      	cmp	r3, #42	; 0x2a
 8006192:	d135      	bne.n	8006200 <_svfiprintf_r+0x188>
 8006194:	9b03      	ldr	r3, [sp, #12]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	9203      	str	r2, [sp, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	bfb8      	it	lt
 80061a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061a4:	3402      	adds	r4, #2
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006274 <_svfiprintf_r+0x1fc>
 80061ac:	7821      	ldrb	r1, [r4, #0]
 80061ae:	2203      	movs	r2, #3
 80061b0:	4650      	mov	r0, sl
 80061b2:	f7fa f84d 	bl	8000250 <memchr>
 80061b6:	b140      	cbz	r0, 80061ca <_svfiprintf_r+0x152>
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	eba0 000a 	sub.w	r0, r0, sl
 80061be:	fa03 f000 	lsl.w	r0, r3, r0
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	4303      	orrs	r3, r0
 80061c6:	3401      	adds	r4, #1
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ce:	4826      	ldr	r0, [pc, #152]	; (8006268 <_svfiprintf_r+0x1f0>)
 80061d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061d4:	2206      	movs	r2, #6
 80061d6:	f7fa f83b 	bl	8000250 <memchr>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d038      	beq.n	8006250 <_svfiprintf_r+0x1d8>
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <_svfiprintf_r+0x1f4>)
 80061e0:	bb1b      	cbnz	r3, 800622a <_svfiprintf_r+0x1b2>
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	3307      	adds	r3, #7
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	3308      	adds	r3, #8
 80061ec:	9303      	str	r3, [sp, #12]
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	4433      	add	r3, r6
 80061f2:	9309      	str	r3, [sp, #36]	; 0x24
 80061f4:	e767      	b.n	80060c6 <_svfiprintf_r+0x4e>
 80061f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80061fa:	460c      	mov	r4, r1
 80061fc:	2001      	movs	r0, #1
 80061fe:	e7a5      	b.n	800614c <_svfiprintf_r+0xd4>
 8006200:	2300      	movs	r3, #0
 8006202:	3401      	adds	r4, #1
 8006204:	9305      	str	r3, [sp, #20]
 8006206:	4619      	mov	r1, r3
 8006208:	f04f 0c0a 	mov.w	ip, #10
 800620c:	4620      	mov	r0, r4
 800620e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006212:	3a30      	subs	r2, #48	; 0x30
 8006214:	2a09      	cmp	r2, #9
 8006216:	d903      	bls.n	8006220 <_svfiprintf_r+0x1a8>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0c5      	beq.n	80061a8 <_svfiprintf_r+0x130>
 800621c:	9105      	str	r1, [sp, #20]
 800621e:	e7c3      	b.n	80061a8 <_svfiprintf_r+0x130>
 8006220:	fb0c 2101 	mla	r1, ip, r1, r2
 8006224:	4604      	mov	r4, r0
 8006226:	2301      	movs	r3, #1
 8006228:	e7f0      	b.n	800620c <_svfiprintf_r+0x194>
 800622a:	ab03      	add	r3, sp, #12
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	462a      	mov	r2, r5
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <_svfiprintf_r+0x1f8>)
 8006232:	a904      	add	r1, sp, #16
 8006234:	4638      	mov	r0, r7
 8006236:	f3af 8000 	nop.w
 800623a:	1c42      	adds	r2, r0, #1
 800623c:	4606      	mov	r6, r0
 800623e:	d1d6      	bne.n	80061ee <_svfiprintf_r+0x176>
 8006240:	89ab      	ldrh	r3, [r5, #12]
 8006242:	065b      	lsls	r3, r3, #25
 8006244:	f53f af2c 	bmi.w	80060a0 <_svfiprintf_r+0x28>
 8006248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800624a:	b01d      	add	sp, #116	; 0x74
 800624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006250:	ab03      	add	r3, sp, #12
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	462a      	mov	r2, r5
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <_svfiprintf_r+0x1f8>)
 8006258:	a904      	add	r1, sp, #16
 800625a:	4638      	mov	r0, r7
 800625c:	f000 f87a 	bl	8006354 <_printf_i>
 8006260:	e7eb      	b.n	800623a <_svfiprintf_r+0x1c2>
 8006262:	bf00      	nop
 8006264:	08006b1d 	.word	0x08006b1d
 8006268:	08006b27 	.word	0x08006b27
 800626c:	00000000 	.word	0x00000000
 8006270:	08005fc1 	.word	0x08005fc1
 8006274:	08006b23 	.word	0x08006b23

08006278 <_printf_common>:
 8006278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800627c:	4616      	mov	r6, r2
 800627e:	4699      	mov	r9, r3
 8006280:	688a      	ldr	r2, [r1, #8]
 8006282:	690b      	ldr	r3, [r1, #16]
 8006284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006288:	4293      	cmp	r3, r2
 800628a:	bfb8      	it	lt
 800628c:	4613      	movlt	r3, r2
 800628e:	6033      	str	r3, [r6, #0]
 8006290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006294:	4607      	mov	r7, r0
 8006296:	460c      	mov	r4, r1
 8006298:	b10a      	cbz	r2, 800629e <_printf_common+0x26>
 800629a:	3301      	adds	r3, #1
 800629c:	6033      	str	r3, [r6, #0]
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	0699      	lsls	r1, r3, #26
 80062a2:	bf42      	ittt	mi
 80062a4:	6833      	ldrmi	r3, [r6, #0]
 80062a6:	3302      	addmi	r3, #2
 80062a8:	6033      	strmi	r3, [r6, #0]
 80062aa:	6825      	ldr	r5, [r4, #0]
 80062ac:	f015 0506 	ands.w	r5, r5, #6
 80062b0:	d106      	bne.n	80062c0 <_printf_common+0x48>
 80062b2:	f104 0a19 	add.w	sl, r4, #25
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	6832      	ldr	r2, [r6, #0]
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	42ab      	cmp	r3, r5
 80062be:	dc26      	bgt.n	800630e <_printf_common+0x96>
 80062c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062c4:	1e13      	subs	r3, r2, #0
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	bf18      	it	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	0692      	lsls	r2, r2, #26
 80062ce:	d42b      	bmi.n	8006328 <_printf_common+0xb0>
 80062d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062d4:	4649      	mov	r1, r9
 80062d6:	4638      	mov	r0, r7
 80062d8:	47c0      	blx	r8
 80062da:	3001      	adds	r0, #1
 80062dc:	d01e      	beq.n	800631c <_printf_common+0xa4>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	68e5      	ldr	r5, [r4, #12]
 80062e2:	6832      	ldr	r2, [r6, #0]
 80062e4:	f003 0306 	and.w	r3, r3, #6
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	bf08      	it	eq
 80062ec:	1aad      	subeq	r5, r5, r2
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	6922      	ldr	r2, [r4, #16]
 80062f2:	bf0c      	ite	eq
 80062f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f8:	2500      	movne	r5, #0
 80062fa:	4293      	cmp	r3, r2
 80062fc:	bfc4      	itt	gt
 80062fe:	1a9b      	subgt	r3, r3, r2
 8006300:	18ed      	addgt	r5, r5, r3
 8006302:	2600      	movs	r6, #0
 8006304:	341a      	adds	r4, #26
 8006306:	42b5      	cmp	r5, r6
 8006308:	d11a      	bne.n	8006340 <_printf_common+0xc8>
 800630a:	2000      	movs	r0, #0
 800630c:	e008      	b.n	8006320 <_printf_common+0xa8>
 800630e:	2301      	movs	r3, #1
 8006310:	4652      	mov	r2, sl
 8006312:	4649      	mov	r1, r9
 8006314:	4638      	mov	r0, r7
 8006316:	47c0      	blx	r8
 8006318:	3001      	adds	r0, #1
 800631a:	d103      	bne.n	8006324 <_printf_common+0xac>
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006324:	3501      	adds	r5, #1
 8006326:	e7c6      	b.n	80062b6 <_printf_common+0x3e>
 8006328:	18e1      	adds	r1, r4, r3
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	2030      	movs	r0, #48	; 0x30
 800632e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006332:	4422      	add	r2, r4
 8006334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800633c:	3302      	adds	r3, #2
 800633e:	e7c7      	b.n	80062d0 <_printf_common+0x58>
 8006340:	2301      	movs	r3, #1
 8006342:	4622      	mov	r2, r4
 8006344:	4649      	mov	r1, r9
 8006346:	4638      	mov	r0, r7
 8006348:	47c0      	blx	r8
 800634a:	3001      	adds	r0, #1
 800634c:	d0e6      	beq.n	800631c <_printf_common+0xa4>
 800634e:	3601      	adds	r6, #1
 8006350:	e7d9      	b.n	8006306 <_printf_common+0x8e>
	...

08006354 <_printf_i>:
 8006354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	7e0f      	ldrb	r7, [r1, #24]
 800635a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800635c:	2f78      	cmp	r7, #120	; 0x78
 800635e:	4691      	mov	r9, r2
 8006360:	4680      	mov	r8, r0
 8006362:	460c      	mov	r4, r1
 8006364:	469a      	mov	sl, r3
 8006366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800636a:	d807      	bhi.n	800637c <_printf_i+0x28>
 800636c:	2f62      	cmp	r7, #98	; 0x62
 800636e:	d80a      	bhi.n	8006386 <_printf_i+0x32>
 8006370:	2f00      	cmp	r7, #0
 8006372:	f000 80d8 	beq.w	8006526 <_printf_i+0x1d2>
 8006376:	2f58      	cmp	r7, #88	; 0x58
 8006378:	f000 80a3 	beq.w	80064c2 <_printf_i+0x16e>
 800637c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006384:	e03a      	b.n	80063fc <_printf_i+0xa8>
 8006386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800638a:	2b15      	cmp	r3, #21
 800638c:	d8f6      	bhi.n	800637c <_printf_i+0x28>
 800638e:	a101      	add	r1, pc, #4	; (adr r1, 8006394 <_printf_i+0x40>)
 8006390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006394:	080063ed 	.word	0x080063ed
 8006398:	08006401 	.word	0x08006401
 800639c:	0800637d 	.word	0x0800637d
 80063a0:	0800637d 	.word	0x0800637d
 80063a4:	0800637d 	.word	0x0800637d
 80063a8:	0800637d 	.word	0x0800637d
 80063ac:	08006401 	.word	0x08006401
 80063b0:	0800637d 	.word	0x0800637d
 80063b4:	0800637d 	.word	0x0800637d
 80063b8:	0800637d 	.word	0x0800637d
 80063bc:	0800637d 	.word	0x0800637d
 80063c0:	0800650d 	.word	0x0800650d
 80063c4:	08006431 	.word	0x08006431
 80063c8:	080064ef 	.word	0x080064ef
 80063cc:	0800637d 	.word	0x0800637d
 80063d0:	0800637d 	.word	0x0800637d
 80063d4:	0800652f 	.word	0x0800652f
 80063d8:	0800637d 	.word	0x0800637d
 80063dc:	08006431 	.word	0x08006431
 80063e0:	0800637d 	.word	0x0800637d
 80063e4:	0800637d 	.word	0x0800637d
 80063e8:	080064f7 	.word	0x080064f7
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	602a      	str	r2, [r5, #0]
 80063f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0a3      	b.n	8006548 <_printf_i+0x1f4>
 8006400:	6820      	ldr	r0, [r4, #0]
 8006402:	6829      	ldr	r1, [r5, #0]
 8006404:	0606      	lsls	r6, r0, #24
 8006406:	f101 0304 	add.w	r3, r1, #4
 800640a:	d50a      	bpl.n	8006422 <_printf_i+0xce>
 800640c:	680e      	ldr	r6, [r1, #0]
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	2e00      	cmp	r6, #0
 8006412:	da03      	bge.n	800641c <_printf_i+0xc8>
 8006414:	232d      	movs	r3, #45	; 0x2d
 8006416:	4276      	negs	r6, r6
 8006418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641c:	485e      	ldr	r0, [pc, #376]	; (8006598 <_printf_i+0x244>)
 800641e:	230a      	movs	r3, #10
 8006420:	e019      	b.n	8006456 <_printf_i+0x102>
 8006422:	680e      	ldr	r6, [r1, #0]
 8006424:	602b      	str	r3, [r5, #0]
 8006426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800642a:	bf18      	it	ne
 800642c:	b236      	sxthne	r6, r6
 800642e:	e7ef      	b.n	8006410 <_printf_i+0xbc>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	6820      	ldr	r0, [r4, #0]
 8006434:	1d19      	adds	r1, r3, #4
 8006436:	6029      	str	r1, [r5, #0]
 8006438:	0601      	lsls	r1, r0, #24
 800643a:	d501      	bpl.n	8006440 <_printf_i+0xec>
 800643c:	681e      	ldr	r6, [r3, #0]
 800643e:	e002      	b.n	8006446 <_printf_i+0xf2>
 8006440:	0646      	lsls	r6, r0, #25
 8006442:	d5fb      	bpl.n	800643c <_printf_i+0xe8>
 8006444:	881e      	ldrh	r6, [r3, #0]
 8006446:	4854      	ldr	r0, [pc, #336]	; (8006598 <_printf_i+0x244>)
 8006448:	2f6f      	cmp	r7, #111	; 0x6f
 800644a:	bf0c      	ite	eq
 800644c:	2308      	moveq	r3, #8
 800644e:	230a      	movne	r3, #10
 8006450:	2100      	movs	r1, #0
 8006452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006456:	6865      	ldr	r5, [r4, #4]
 8006458:	60a5      	str	r5, [r4, #8]
 800645a:	2d00      	cmp	r5, #0
 800645c:	bfa2      	ittt	ge
 800645e:	6821      	ldrge	r1, [r4, #0]
 8006460:	f021 0104 	bicge.w	r1, r1, #4
 8006464:	6021      	strge	r1, [r4, #0]
 8006466:	b90e      	cbnz	r6, 800646c <_printf_i+0x118>
 8006468:	2d00      	cmp	r5, #0
 800646a:	d04d      	beq.n	8006508 <_printf_i+0x1b4>
 800646c:	4615      	mov	r5, r2
 800646e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006472:	fb03 6711 	mls	r7, r3, r1, r6
 8006476:	5dc7      	ldrb	r7, [r0, r7]
 8006478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800647c:	4637      	mov	r7, r6
 800647e:	42bb      	cmp	r3, r7
 8006480:	460e      	mov	r6, r1
 8006482:	d9f4      	bls.n	800646e <_printf_i+0x11a>
 8006484:	2b08      	cmp	r3, #8
 8006486:	d10b      	bne.n	80064a0 <_printf_i+0x14c>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	07de      	lsls	r6, r3, #31
 800648c:	d508      	bpl.n	80064a0 <_printf_i+0x14c>
 800648e:	6923      	ldr	r3, [r4, #16]
 8006490:	6861      	ldr	r1, [r4, #4]
 8006492:	4299      	cmp	r1, r3
 8006494:	bfde      	ittt	le
 8006496:	2330      	movle	r3, #48	; 0x30
 8006498:	f805 3c01 	strble.w	r3, [r5, #-1]
 800649c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064a0:	1b52      	subs	r2, r2, r5
 80064a2:	6122      	str	r2, [r4, #16]
 80064a4:	f8cd a000 	str.w	sl, [sp]
 80064a8:	464b      	mov	r3, r9
 80064aa:	aa03      	add	r2, sp, #12
 80064ac:	4621      	mov	r1, r4
 80064ae:	4640      	mov	r0, r8
 80064b0:	f7ff fee2 	bl	8006278 <_printf_common>
 80064b4:	3001      	adds	r0, #1
 80064b6:	d14c      	bne.n	8006552 <_printf_i+0x1fe>
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	b004      	add	sp, #16
 80064be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c2:	4835      	ldr	r0, [pc, #212]	; (8006598 <_printf_i+0x244>)
 80064c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064c8:	6829      	ldr	r1, [r5, #0]
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80064d0:	6029      	str	r1, [r5, #0]
 80064d2:	061d      	lsls	r5, r3, #24
 80064d4:	d514      	bpl.n	8006500 <_printf_i+0x1ac>
 80064d6:	07df      	lsls	r7, r3, #31
 80064d8:	bf44      	itt	mi
 80064da:	f043 0320 	orrmi.w	r3, r3, #32
 80064de:	6023      	strmi	r3, [r4, #0]
 80064e0:	b91e      	cbnz	r6, 80064ea <_printf_i+0x196>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	f023 0320 	bic.w	r3, r3, #32
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	2310      	movs	r3, #16
 80064ec:	e7b0      	b.n	8006450 <_printf_i+0xfc>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	f043 0320 	orr.w	r3, r3, #32
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	2378      	movs	r3, #120	; 0x78
 80064f8:	4828      	ldr	r0, [pc, #160]	; (800659c <_printf_i+0x248>)
 80064fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064fe:	e7e3      	b.n	80064c8 <_printf_i+0x174>
 8006500:	0659      	lsls	r1, r3, #25
 8006502:	bf48      	it	mi
 8006504:	b2b6      	uxthmi	r6, r6
 8006506:	e7e6      	b.n	80064d6 <_printf_i+0x182>
 8006508:	4615      	mov	r5, r2
 800650a:	e7bb      	b.n	8006484 <_printf_i+0x130>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	6826      	ldr	r6, [r4, #0]
 8006510:	6961      	ldr	r1, [r4, #20]
 8006512:	1d18      	adds	r0, r3, #4
 8006514:	6028      	str	r0, [r5, #0]
 8006516:	0635      	lsls	r5, r6, #24
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	d501      	bpl.n	8006520 <_printf_i+0x1cc>
 800651c:	6019      	str	r1, [r3, #0]
 800651e:	e002      	b.n	8006526 <_printf_i+0x1d2>
 8006520:	0670      	lsls	r0, r6, #25
 8006522:	d5fb      	bpl.n	800651c <_printf_i+0x1c8>
 8006524:	8019      	strh	r1, [r3, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	4615      	mov	r5, r2
 800652c:	e7ba      	b.n	80064a4 <_printf_i+0x150>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	1d1a      	adds	r2, r3, #4
 8006532:	602a      	str	r2, [r5, #0]
 8006534:	681d      	ldr	r5, [r3, #0]
 8006536:	6862      	ldr	r2, [r4, #4]
 8006538:	2100      	movs	r1, #0
 800653a:	4628      	mov	r0, r5
 800653c:	f7f9 fe88 	bl	8000250 <memchr>
 8006540:	b108      	cbz	r0, 8006546 <_printf_i+0x1f2>
 8006542:	1b40      	subs	r0, r0, r5
 8006544:	6060      	str	r0, [r4, #4]
 8006546:	6863      	ldr	r3, [r4, #4]
 8006548:	6123      	str	r3, [r4, #16]
 800654a:	2300      	movs	r3, #0
 800654c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006550:	e7a8      	b.n	80064a4 <_printf_i+0x150>
 8006552:	6923      	ldr	r3, [r4, #16]
 8006554:	462a      	mov	r2, r5
 8006556:	4649      	mov	r1, r9
 8006558:	4640      	mov	r0, r8
 800655a:	47d0      	blx	sl
 800655c:	3001      	adds	r0, #1
 800655e:	d0ab      	beq.n	80064b8 <_printf_i+0x164>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	079b      	lsls	r3, r3, #30
 8006564:	d413      	bmi.n	800658e <_printf_i+0x23a>
 8006566:	68e0      	ldr	r0, [r4, #12]
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	4298      	cmp	r0, r3
 800656c:	bfb8      	it	lt
 800656e:	4618      	movlt	r0, r3
 8006570:	e7a4      	b.n	80064bc <_printf_i+0x168>
 8006572:	2301      	movs	r3, #1
 8006574:	4632      	mov	r2, r6
 8006576:	4649      	mov	r1, r9
 8006578:	4640      	mov	r0, r8
 800657a:	47d0      	blx	sl
 800657c:	3001      	adds	r0, #1
 800657e:	d09b      	beq.n	80064b8 <_printf_i+0x164>
 8006580:	3501      	adds	r5, #1
 8006582:	68e3      	ldr	r3, [r4, #12]
 8006584:	9903      	ldr	r1, [sp, #12]
 8006586:	1a5b      	subs	r3, r3, r1
 8006588:	42ab      	cmp	r3, r5
 800658a:	dcf2      	bgt.n	8006572 <_printf_i+0x21e>
 800658c:	e7eb      	b.n	8006566 <_printf_i+0x212>
 800658e:	2500      	movs	r5, #0
 8006590:	f104 0619 	add.w	r6, r4, #25
 8006594:	e7f5      	b.n	8006582 <_printf_i+0x22e>
 8006596:	bf00      	nop
 8006598:	08006b2e 	.word	0x08006b2e
 800659c:	08006b3f 	.word	0x08006b3f

080065a0 <memcpy>:
 80065a0:	440a      	add	r2, r1
 80065a2:	4291      	cmp	r1, r2
 80065a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a8:	d100      	bne.n	80065ac <memcpy+0xc>
 80065aa:	4770      	bx	lr
 80065ac:	b510      	push	{r4, lr}
 80065ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b6:	4291      	cmp	r1, r2
 80065b8:	d1f9      	bne.n	80065ae <memcpy+0xe>
 80065ba:	bd10      	pop	{r4, pc}

080065bc <memmove>:
 80065bc:	4288      	cmp	r0, r1
 80065be:	b510      	push	{r4, lr}
 80065c0:	eb01 0402 	add.w	r4, r1, r2
 80065c4:	d902      	bls.n	80065cc <memmove+0x10>
 80065c6:	4284      	cmp	r4, r0
 80065c8:	4623      	mov	r3, r4
 80065ca:	d807      	bhi.n	80065dc <memmove+0x20>
 80065cc:	1e43      	subs	r3, r0, #1
 80065ce:	42a1      	cmp	r1, r4
 80065d0:	d008      	beq.n	80065e4 <memmove+0x28>
 80065d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065da:	e7f8      	b.n	80065ce <memmove+0x12>
 80065dc:	4402      	add	r2, r0
 80065de:	4601      	mov	r1, r0
 80065e0:	428a      	cmp	r2, r1
 80065e2:	d100      	bne.n	80065e6 <memmove+0x2a>
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ee:	e7f7      	b.n	80065e0 <memmove+0x24>

080065f0 <_free_r>:
 80065f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065f2:	2900      	cmp	r1, #0
 80065f4:	d044      	beq.n	8006680 <_free_r+0x90>
 80065f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065fa:	9001      	str	r0, [sp, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006602:	bfb8      	it	lt
 8006604:	18e4      	addlt	r4, r4, r3
 8006606:	f000 f913 	bl	8006830 <__malloc_lock>
 800660a:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <_free_r+0x94>)
 800660c:	9801      	ldr	r0, [sp, #4]
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	b933      	cbnz	r3, 8006620 <_free_r+0x30>
 8006612:	6063      	str	r3, [r4, #4]
 8006614:	6014      	str	r4, [r2, #0]
 8006616:	b003      	add	sp, #12
 8006618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800661c:	f000 b90e 	b.w	800683c <__malloc_unlock>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d908      	bls.n	8006636 <_free_r+0x46>
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	1961      	adds	r1, r4, r5
 8006628:	428b      	cmp	r3, r1
 800662a:	bf01      	itttt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	1949      	addeq	r1, r1, r5
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	e7ed      	b.n	8006612 <_free_r+0x22>
 8006636:	461a      	mov	r2, r3
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b10b      	cbz	r3, 8006640 <_free_r+0x50>
 800663c:	42a3      	cmp	r3, r4
 800663e:	d9fa      	bls.n	8006636 <_free_r+0x46>
 8006640:	6811      	ldr	r1, [r2, #0]
 8006642:	1855      	adds	r5, r2, r1
 8006644:	42a5      	cmp	r5, r4
 8006646:	d10b      	bne.n	8006660 <_free_r+0x70>
 8006648:	6824      	ldr	r4, [r4, #0]
 800664a:	4421      	add	r1, r4
 800664c:	1854      	adds	r4, r2, r1
 800664e:	42a3      	cmp	r3, r4
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	d1e0      	bne.n	8006616 <_free_r+0x26>
 8006654:	681c      	ldr	r4, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	6053      	str	r3, [r2, #4]
 800665a:	4421      	add	r1, r4
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	e7da      	b.n	8006616 <_free_r+0x26>
 8006660:	d902      	bls.n	8006668 <_free_r+0x78>
 8006662:	230c      	movs	r3, #12
 8006664:	6003      	str	r3, [r0, #0]
 8006666:	e7d6      	b.n	8006616 <_free_r+0x26>
 8006668:	6825      	ldr	r5, [r4, #0]
 800666a:	1961      	adds	r1, r4, r5
 800666c:	428b      	cmp	r3, r1
 800666e:	bf04      	itt	eq
 8006670:	6819      	ldreq	r1, [r3, #0]
 8006672:	685b      	ldreq	r3, [r3, #4]
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	bf04      	itt	eq
 8006678:	1949      	addeq	r1, r1, r5
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	6054      	str	r4, [r2, #4]
 800667e:	e7ca      	b.n	8006616 <_free_r+0x26>
 8006680:	b003      	add	sp, #12
 8006682:	bd30      	pop	{r4, r5, pc}
 8006684:	200002bc 	.word	0x200002bc

08006688 <sbrk_aligned>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4e0e      	ldr	r6, [pc, #56]	; (80066c4 <sbrk_aligned+0x3c>)
 800668c:	460c      	mov	r4, r1
 800668e:	6831      	ldr	r1, [r6, #0]
 8006690:	4605      	mov	r5, r0
 8006692:	b911      	cbnz	r1, 800669a <sbrk_aligned+0x12>
 8006694:	f000 f8bc 	bl	8006810 <_sbrk_r>
 8006698:	6030      	str	r0, [r6, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f000 f8b7 	bl	8006810 <_sbrk_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d00a      	beq.n	80066bc <sbrk_aligned+0x34>
 80066a6:	1cc4      	adds	r4, r0, #3
 80066a8:	f024 0403 	bic.w	r4, r4, #3
 80066ac:	42a0      	cmp	r0, r4
 80066ae:	d007      	beq.n	80066c0 <sbrk_aligned+0x38>
 80066b0:	1a21      	subs	r1, r4, r0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f8ac 	bl	8006810 <_sbrk_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d101      	bne.n	80066c0 <sbrk_aligned+0x38>
 80066bc:	f04f 34ff 	mov.w	r4, #4294967295
 80066c0:	4620      	mov	r0, r4
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	200002c0 	.word	0x200002c0

080066c8 <_malloc_r>:
 80066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066cc:	1ccd      	adds	r5, r1, #3
 80066ce:	f025 0503 	bic.w	r5, r5, #3
 80066d2:	3508      	adds	r5, #8
 80066d4:	2d0c      	cmp	r5, #12
 80066d6:	bf38      	it	cc
 80066d8:	250c      	movcc	r5, #12
 80066da:	2d00      	cmp	r5, #0
 80066dc:	4607      	mov	r7, r0
 80066de:	db01      	blt.n	80066e4 <_malloc_r+0x1c>
 80066e0:	42a9      	cmp	r1, r5
 80066e2:	d905      	bls.n	80066f0 <_malloc_r+0x28>
 80066e4:	230c      	movs	r3, #12
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	2600      	movs	r6, #0
 80066ea:	4630      	mov	r0, r6
 80066ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f0:	4e2e      	ldr	r6, [pc, #184]	; (80067ac <_malloc_r+0xe4>)
 80066f2:	f000 f89d 	bl	8006830 <__malloc_lock>
 80066f6:	6833      	ldr	r3, [r6, #0]
 80066f8:	461c      	mov	r4, r3
 80066fa:	bb34      	cbnz	r4, 800674a <_malloc_r+0x82>
 80066fc:	4629      	mov	r1, r5
 80066fe:	4638      	mov	r0, r7
 8006700:	f7ff ffc2 	bl	8006688 <sbrk_aligned>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	4604      	mov	r4, r0
 8006708:	d14d      	bne.n	80067a6 <_malloc_r+0xde>
 800670a:	6834      	ldr	r4, [r6, #0]
 800670c:	4626      	mov	r6, r4
 800670e:	2e00      	cmp	r6, #0
 8006710:	d140      	bne.n	8006794 <_malloc_r+0xcc>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	4631      	mov	r1, r6
 8006716:	4638      	mov	r0, r7
 8006718:	eb04 0803 	add.w	r8, r4, r3
 800671c:	f000 f878 	bl	8006810 <_sbrk_r>
 8006720:	4580      	cmp	r8, r0
 8006722:	d13a      	bne.n	800679a <_malloc_r+0xd2>
 8006724:	6821      	ldr	r1, [r4, #0]
 8006726:	3503      	adds	r5, #3
 8006728:	1a6d      	subs	r5, r5, r1
 800672a:	f025 0503 	bic.w	r5, r5, #3
 800672e:	3508      	adds	r5, #8
 8006730:	2d0c      	cmp	r5, #12
 8006732:	bf38      	it	cc
 8006734:	250c      	movcc	r5, #12
 8006736:	4629      	mov	r1, r5
 8006738:	4638      	mov	r0, r7
 800673a:	f7ff ffa5 	bl	8006688 <sbrk_aligned>
 800673e:	3001      	adds	r0, #1
 8006740:	d02b      	beq.n	800679a <_malloc_r+0xd2>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	442b      	add	r3, r5
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	e00e      	b.n	8006768 <_malloc_r+0xa0>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	1b52      	subs	r2, r2, r5
 800674e:	d41e      	bmi.n	800678e <_malloc_r+0xc6>
 8006750:	2a0b      	cmp	r2, #11
 8006752:	d916      	bls.n	8006782 <_malloc_r+0xba>
 8006754:	1961      	adds	r1, r4, r5
 8006756:	42a3      	cmp	r3, r4
 8006758:	6025      	str	r5, [r4, #0]
 800675a:	bf18      	it	ne
 800675c:	6059      	strne	r1, [r3, #4]
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	bf08      	it	eq
 8006762:	6031      	streq	r1, [r6, #0]
 8006764:	5162      	str	r2, [r4, r5]
 8006766:	604b      	str	r3, [r1, #4]
 8006768:	4638      	mov	r0, r7
 800676a:	f104 060b 	add.w	r6, r4, #11
 800676e:	f000 f865 	bl	800683c <__malloc_unlock>
 8006772:	f026 0607 	bic.w	r6, r6, #7
 8006776:	1d23      	adds	r3, r4, #4
 8006778:	1af2      	subs	r2, r6, r3
 800677a:	d0b6      	beq.n	80066ea <_malloc_r+0x22>
 800677c:	1b9b      	subs	r3, r3, r6
 800677e:	50a3      	str	r3, [r4, r2]
 8006780:	e7b3      	b.n	80066ea <_malloc_r+0x22>
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	42a3      	cmp	r3, r4
 8006786:	bf0c      	ite	eq
 8006788:	6032      	streq	r2, [r6, #0]
 800678a:	605a      	strne	r2, [r3, #4]
 800678c:	e7ec      	b.n	8006768 <_malloc_r+0xa0>
 800678e:	4623      	mov	r3, r4
 8006790:	6864      	ldr	r4, [r4, #4]
 8006792:	e7b2      	b.n	80066fa <_malloc_r+0x32>
 8006794:	4634      	mov	r4, r6
 8006796:	6876      	ldr	r6, [r6, #4]
 8006798:	e7b9      	b.n	800670e <_malloc_r+0x46>
 800679a:	230c      	movs	r3, #12
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4638      	mov	r0, r7
 80067a0:	f000 f84c 	bl	800683c <__malloc_unlock>
 80067a4:	e7a1      	b.n	80066ea <_malloc_r+0x22>
 80067a6:	6025      	str	r5, [r4, #0]
 80067a8:	e7de      	b.n	8006768 <_malloc_r+0xa0>
 80067aa:	bf00      	nop
 80067ac:	200002bc 	.word	0x200002bc

080067b0 <_realloc_r>:
 80067b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b4:	4680      	mov	r8, r0
 80067b6:	4614      	mov	r4, r2
 80067b8:	460e      	mov	r6, r1
 80067ba:	b921      	cbnz	r1, 80067c6 <_realloc_r+0x16>
 80067bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c0:	4611      	mov	r1, r2
 80067c2:	f7ff bf81 	b.w	80066c8 <_malloc_r>
 80067c6:	b92a      	cbnz	r2, 80067d4 <_realloc_r+0x24>
 80067c8:	f7ff ff12 	bl	80065f0 <_free_r>
 80067cc:	4625      	mov	r5, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d4:	f000 f838 	bl	8006848 <_malloc_usable_size_r>
 80067d8:	4284      	cmp	r4, r0
 80067da:	4607      	mov	r7, r0
 80067dc:	d802      	bhi.n	80067e4 <_realloc_r+0x34>
 80067de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067e2:	d812      	bhi.n	800680a <_realloc_r+0x5a>
 80067e4:	4621      	mov	r1, r4
 80067e6:	4640      	mov	r0, r8
 80067e8:	f7ff ff6e 	bl	80066c8 <_malloc_r>
 80067ec:	4605      	mov	r5, r0
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d0ed      	beq.n	80067ce <_realloc_r+0x1e>
 80067f2:	42bc      	cmp	r4, r7
 80067f4:	4622      	mov	r2, r4
 80067f6:	4631      	mov	r1, r6
 80067f8:	bf28      	it	cs
 80067fa:	463a      	movcs	r2, r7
 80067fc:	f7ff fed0 	bl	80065a0 <memcpy>
 8006800:	4631      	mov	r1, r6
 8006802:	4640      	mov	r0, r8
 8006804:	f7ff fef4 	bl	80065f0 <_free_r>
 8006808:	e7e1      	b.n	80067ce <_realloc_r+0x1e>
 800680a:	4635      	mov	r5, r6
 800680c:	e7df      	b.n	80067ce <_realloc_r+0x1e>
	...

08006810 <_sbrk_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d06      	ldr	r5, [pc, #24]	; (800682c <_sbrk_r+0x1c>)
 8006814:	2300      	movs	r3, #0
 8006816:	4604      	mov	r4, r0
 8006818:	4608      	mov	r0, r1
 800681a:	602b      	str	r3, [r5, #0]
 800681c:	f7fb f81e 	bl	800185c <_sbrk>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_sbrk_r+0x1a>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_sbrk_r+0x1a>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200002c4 	.word	0x200002c4

08006830 <__malloc_lock>:
 8006830:	4801      	ldr	r0, [pc, #4]	; (8006838 <__malloc_lock+0x8>)
 8006832:	f000 b811 	b.w	8006858 <__retarget_lock_acquire_recursive>
 8006836:	bf00      	nop
 8006838:	200002c8 	.word	0x200002c8

0800683c <__malloc_unlock>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__malloc_unlock+0x8>)
 800683e:	f000 b80c 	b.w	800685a <__retarget_lock_release_recursive>
 8006842:	bf00      	nop
 8006844:	200002c8 	.word	0x200002c8

08006848 <_malloc_usable_size_r>:
 8006848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684c:	1f18      	subs	r0, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfbc      	itt	lt
 8006852:	580b      	ldrlt	r3, [r1, r0]
 8006854:	18c0      	addlt	r0, r0, r3
 8006856:	4770      	bx	lr

08006858 <__retarget_lock_acquire_recursive>:
 8006858:	4770      	bx	lr

0800685a <__retarget_lock_release_recursive>:
 800685a:	4770      	bx	lr
 800685c:	0000      	movs	r0, r0
	...

08006860 <ceil>:
 8006860:	ee10 1a90 	vmov	r1, s1
 8006864:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006868:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800686c:	2b13      	cmp	r3, #19
 800686e:	b530      	push	{r4, r5, lr}
 8006870:	ee10 0a10 	vmov	r0, s0
 8006874:	ee10 5a10 	vmov	r5, s0
 8006878:	dc2f      	bgt.n	80068da <ceil+0x7a>
 800687a:	2b00      	cmp	r3, #0
 800687c:	da13      	bge.n	80068a6 <ceil+0x46>
 800687e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006940 <ceil+0xe0>
 8006882:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006886:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800688a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688e:	dd05      	ble.n	800689c <ceil+0x3c>
 8006890:	2900      	cmp	r1, #0
 8006892:	db4c      	blt.n	800692e <ceil+0xce>
 8006894:	4301      	orrs	r1, r0
 8006896:	d04e      	beq.n	8006936 <ceil+0xd6>
 8006898:	492b      	ldr	r1, [pc, #172]	; (8006948 <ceil+0xe8>)
 800689a:	2000      	movs	r0, #0
 800689c:	460b      	mov	r3, r1
 800689e:	4602      	mov	r2, r0
 80068a0:	ec43 2b10 	vmov	d0, r2, r3
 80068a4:	e020      	b.n	80068e8 <ceil+0x88>
 80068a6:	4a29      	ldr	r2, [pc, #164]	; (800694c <ceil+0xec>)
 80068a8:	411a      	asrs	r2, r3
 80068aa:	ea01 0402 	and.w	r4, r1, r2
 80068ae:	4304      	orrs	r4, r0
 80068b0:	d01a      	beq.n	80068e8 <ceil+0x88>
 80068b2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8006940 <ceil+0xe0>
 80068b6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80068ba:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80068be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c2:	ddeb      	ble.n	800689c <ceil+0x3c>
 80068c4:	2900      	cmp	r1, #0
 80068c6:	bfc2      	ittt	gt
 80068c8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 80068cc:	fa40 f303 	asrgt.w	r3, r0, r3
 80068d0:	18c9      	addgt	r1, r1, r3
 80068d2:	ea21 0102 	bic.w	r1, r1, r2
 80068d6:	2000      	movs	r0, #0
 80068d8:	e7e0      	b.n	800689c <ceil+0x3c>
 80068da:	2b33      	cmp	r3, #51	; 0x33
 80068dc:	dd05      	ble.n	80068ea <ceil+0x8a>
 80068de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e2:	d101      	bne.n	80068e8 <ceil+0x88>
 80068e4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80068e8:	bd30      	pop	{r4, r5, pc}
 80068ea:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80068ee:	f04f 32ff 	mov.w	r2, #4294967295
 80068f2:	40e2      	lsrs	r2, r4
 80068f4:	4202      	tst	r2, r0
 80068f6:	d0f7      	beq.n	80068e8 <ceil+0x88>
 80068f8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8006940 <ceil+0xe0>
 80068fc:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006900:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	ddc8      	ble.n	800689c <ceil+0x3c>
 800690a:	2900      	cmp	r1, #0
 800690c:	dd02      	ble.n	8006914 <ceil+0xb4>
 800690e:	2b14      	cmp	r3, #20
 8006910:	d103      	bne.n	800691a <ceil+0xba>
 8006912:	3101      	adds	r1, #1
 8006914:	ea20 0002 	bic.w	r0, r0, r2
 8006918:	e7c0      	b.n	800689c <ceil+0x3c>
 800691a:	2401      	movs	r4, #1
 800691c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006920:	fa04 f303 	lsl.w	r3, r4, r3
 8006924:	4418      	add	r0, r3
 8006926:	42a8      	cmp	r0, r5
 8006928:	bf38      	it	cc
 800692a:	1909      	addcc	r1, r1, r4
 800692c:	e7f2      	b.n	8006914 <ceil+0xb4>
 800692e:	2000      	movs	r0, #0
 8006930:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006934:	e7b2      	b.n	800689c <ceil+0x3c>
 8006936:	4608      	mov	r0, r1
 8006938:	e7b0      	b.n	800689c <ceil+0x3c>
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w
 8006940:	8800759c 	.word	0x8800759c
 8006944:	7e37e43c 	.word	0x7e37e43c
 8006948:	3ff00000 	.word	0x3ff00000
 800694c:	000fffff 	.word	0x000fffff

08006950 <_init>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr

0800695c <_fini>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr
