
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac0  08004ac0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08004b38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004b38  00020214  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b44f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001945  00000000  00000000  0002b4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002ce38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cad  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a738  00000000  00000000  000549dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1ba1  00000000  00000000  0005f115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150cb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ffc  00000000  00000000  00150d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	080048f8 	.word	0x080048f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	080048f8 	.word	0x080048f8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <char_is_endmessage+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d101      	bne.n	800065a <char_is_endmessage+0x1a>
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <char_is_endmessage+0x1c>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <rx_has_data>:

uint8_t rx_has_data()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <rx_has_data+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <rx_has_data+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	d101      	bne.n	8000680 <rx_has_data+0x18>
	{
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <rx_has_data+0x1a>
	}
	else return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000014a 	.word	0x2000014a
 8000690:	2000014b 	.word	0x2000014b

08000694 <increase_rx_empty>:

void increase_rx_empty()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	rx_empty++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <increase_rx_empty+0x2c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b31      	cmp	r3, #49	; 0x31
 80006ae:	d902      	bls.n	80006b6 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <increase_rx_empty+0x2c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	2000014a 	.word	0x2000014a

080006c4 <increase_rx_busy>:

void increase_rx_busy()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	rx_busy++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <increase_rx_busy+0x2c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b31      	cmp	r3, #49	; 0x31
 80006de:	d902      	bls.n	80006e6 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <increase_rx_busy+0x2c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	2000014b 	.word	0x2000014b

080006f4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <get_char+0x24>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <get_char+0x28>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000708:	f7ff ffdc 	bl	80006c4 <increase_rx_busy>
	return tmp;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000014b 	.word	0x2000014b
 800071c:	20000118 	.word	0x20000118

08000720 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800072c:	e041      	b.n	80007b2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <get_message+0xa8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461c      	mov	r4, r3
 8000734:	f7ff ffde 	bl	80006f4 <get_char>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <get_message+0xac>)
 800073e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <get_message+0xa8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <get_message+0xac>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <char_is_endmessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d021      	beq.n	800079a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <get_message+0xa8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <get_message+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <get_message+0xac>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <get_message+0xa8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <get_message+0x48>
			}

			message_length = idx;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <get_message+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <get_message+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	e011      	b.n	80007be <get_message+0x9e>
		}
		else
		{
			idx++;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <get_message+0xa8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <get_message+0xa8>)
 80007a4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <get_message+0xa8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b32      	cmp	r3, #50	; 0x32
 80007ac:	d901      	bls.n	80007b2 <get_message+0x92>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e005      	b.n	80007be <get_message+0x9e>
	while(rx_has_data() == 1)
 80007b2:	f7ff ff59 	bl	8000668 <rx_has_data>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0b8      	beq.n	800072e <get_message+0xe>
		}
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001da 	.word	0x200001da
 80007cc:	200001dc 	.word	0x200001dc

080007d0 <turn_on_led>:

void turn_on_led()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <turn_on_led+0x14>)
 80007da:	f001 fbb1 	bl	8001f40 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400

080007e8 <turn_off_led>:

void turn_off_led()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <turn_off_led+0x14>)
 80007f2:	f001 fba5 	bl	8001f40 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <calculate_delay+0x58>)
 800080c:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000818:	edd7 6a03 	vldr	s13, [r7, #12]
 800081c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000820:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000824:	edd7 7a03 	vldr	s15, [r7, #12]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f003 ffea 	bl	8004808 <ceil>
 8000834:	eeb0 7b40 	vmov.f64	d7, d0
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000840:	edd7 7a03 	vldr	s15, [r7, #12]
 8000844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 800084e:	897b      	ldrh	r3, [r7, #10]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	447a0000 	.word	0x447a0000

0800085c <display_error>:

void display_error(char *error_info, size_t error_length)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	for (uint8_t i=0; i<error_length-1; i++)
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e009      	b.n	8000880 <display_error+0x24>
		uart_print(error_info[i]);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fecb 	bl	8000610 <uart_print>
	for (uint8_t i=0; i<error_length-1; i++)
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	3301      	adds	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	429a      	cmp	r2, r3
 8000888:	d3f0      	bcc.n	800086c <display_error+0x10>
	error_found = 0;
 800088a:	4b03      	ldr	r3, [pc, #12]	; (8000898 <display_error+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000019c 	.word	0x2000019c

0800089c <validate_command>:

uint8_t validate_command(char *single_command_message)
{
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b092      	sub	sp, #72	; 0x48
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t command_valid = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Command template arrays
	char led_on[] = "LED[ON]";
 80008aa:	4a46      	ldr	r2, [pc, #280]	; (80009c4 <validate_command+0x128>)
 80008ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
	char led_off[] = "LED[OFF]";
 80008b8:	4a43      	ldr	r2, [pc, #268]	; (80009c8 <validate_command+0x12c>)
 80008ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008be:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c0:	c303      	stmia	r3!, {r0, r1}
 80008c2:	701a      	strb	r2, [r3, #0]
	char led_blink[] = "LED[BLINK,X]";
 80008c4:	4b41      	ldr	r3, [pc, #260]	; (80009cc <validate_command+0x130>)
 80008c6:	f107 0420 	add.w	r4, r7, #32
 80008ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008cc:	c407      	stmia	r4!, {r0, r1, r2}
 80008ce:	7023      	strb	r3, [r4, #0]
	char insert_delay[] = "INSERT[DELAY,XXXX]";
 80008d0:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <validate_command+0x134>)
 80008d2:	f107 040c 	add.w	r4, r7, #12
 80008d6:	461d      	mov	r5, r3
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	682b      	ldr	r3, [r5, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	8022      	strh	r2, [r4, #0]
 80008e2:	3402      	adds	r4, #2
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	7023      	strb	r3, [r4, #0]

	// Compare command with templates
	if (strncmp(single_command_message, led_on, sizeof(led_on)) == 0)
 80008e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008ec:	2208      	movs	r2, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f003 fee6 	bl	80046c2 <strncmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <validate_command+0x68>
	{
		command_valid = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000902:	e059      	b.n	80009b8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_off, sizeof(led_off)) == 0)
 8000904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000908:	2209      	movs	r2, #9
 800090a:	4619      	mov	r1, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f003 fed8 	bl	80046c2 <strncmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <validate_command+0x84>
	{
		command_valid = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800091e:	e04b      	b.n	80009b8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_blink, sizeof(led_blink)-3) == 0)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	220a      	movs	r2, #10
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f003 feca 	bl	80046c2 <strncmp>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d111      	bne.n	8000958 <validate_command+0xbc>
	{
		if ((single_command_message[10] >= 0x30 && single_command_message[10] <= 0x39) && single_command[11] == ']')
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	330a      	adds	r3, #10
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b2f      	cmp	r3, #47	; 0x2f
 800093c:	d93c      	bls.n	80009b8 <validate_command+0x11c>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	330a      	adds	r3, #10
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b39      	cmp	r3, #57	; 0x39
 8000946:	d837      	bhi.n	80009b8 <validate_command+0x11c>
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <validate_command+0x138>)
 800094a:	7adb      	ldrb	r3, [r3, #11]
 800094c:	2b5d      	cmp	r3, #93	; 0x5d
 800094e:	d133      	bne.n	80009b8 <validate_command+0x11c>
			command_valid = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000956:	e02f      	b.n	80009b8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, insert_delay, sizeof(insert_delay)-6) == 0)
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	220d      	movs	r2, #13
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f003 feae 	bl	80046c2 <strncmp>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d125      	bne.n	80009b8 <validate_command+0x11c>
	{
		for (uint8_t y=0; y<4; y++)
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000972:	e01d      	b.n	80009b0 <validate_command+0x114>
			if ((single_command_message[12+y] >= 0x30 && single_command_message[12+y] <= 0x39) && single_command[17] == ']')
 8000974:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000978:	330c      	adds	r3, #12
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b2f      	cmp	r3, #47	; 0x2f
 8000984:	d90f      	bls.n	80009a6 <validate_command+0x10a>
 8000986:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800098a:	330c      	adds	r3, #12
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b39      	cmp	r3, #57	; 0x39
 8000996:	d806      	bhi.n	80009a6 <validate_command+0x10a>
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <validate_command+0x138>)
 800099a:	7c5b      	ldrb	r3, [r3, #17]
 800099c:	2b5d      	cmp	r3, #93	; 0x5d
 800099e:	d102      	bne.n	80009a6 <validate_command+0x10a>
				command_valid = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for (uint8_t y=0; y<4; y++)
 80009a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009aa:	3301      	adds	r3, #1
 80009ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80009b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d9dd      	bls.n	8000974 <validate_command+0xd8>
	}

	return command_valid;
 80009b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3748      	adds	r7, #72	; 0x48
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bdb0      	pop	{r4, r5, r7, pc}
 80009c4:	08004910 	.word	0x08004910
 80009c8:	08004918 	.word	0x08004918
 80009cc:	08004924 	.word	0x08004924
 80009d0:	08004934 	.word	0x08004934
 80009d4:	200001a0 	.word	0x200001a0

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b0a8      	sub	sp, #160	; 0xa0
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009de:	f000 fd35 	bl	800144c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80009e2:	f7ff fdab 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80009e6:	f7ff fdcf 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ea:	f000 fe5c 	bl	80016a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ee:	f000 fc2b 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f000 fcb5 	bl	8001360 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009f6:	f000 fc83 	bl	8001300 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	49a5      	ldr	r1, [pc, #660]	; (8000c94 <main+0x2bc>)
 80009fe:	48a6      	ldr	r0, [pc, #664]	; (8000c98 <main+0x2c0>)
 8000a00:	f002 fbdc 	bl	80031bc <HAL_UART_Receive_IT>
  // Temporary command array
//  uint8_t command[BUFFER_LENGTH];

  // LED command parameters
//  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000a04:	4aa5      	ldr	r2, [pc, #660]	; (8000c9c <main+0x2c4>)
 8000a06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	8019      	strh	r1, [r3, #0]
 8000a10:	3302      	adds	r3, #2
 8000a12:	0c12      	lsrs	r2, r2, #16
 8000a14:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 8000a16:	4ba2      	ldr	r3, [pc, #648]	; (8000ca0 <main+0x2c8>)
 8000a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  char blink_cmd[] = "BLINK,";
 8000a1c:	4aa1      	ldr	r2, [pc, #644]	; (8000ca4 <main+0x2cc>)
 8000a1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a26:	6018      	str	r0, [r3, #0]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	8019      	strh	r1, [r3, #0]
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	0c0a      	lsrs	r2, r1, #16
 8000a30:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 8000a32:	4a9d      	ldr	r2, [pc, #628]	; (8000ca8 <main+0x2d0>)
 8000a34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a3c:	6018      	str	r0, [r3, #0]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	8019      	strh	r1, [r3, #0]
 8000a42:	3302      	adds	r3, #2
 8000a44:	0c0a      	lsrs	r2, r1, #16
 8000a46:	701a      	strb	r2, [r3, #0]

  // Error messages
  char invalid_command[] = "Error: Command not found\r\n";
 8000a48:	4b98      	ldr	r3, [pc, #608]	; (8000cac <main+0x2d4>)
 8000a4a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000a4e:	461d      	mov	r5, r3
 8000a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a58:	c403      	stmia	r4!, {r0, r1}
 8000a5a:	8022      	strh	r2, [r4, #0]
 8000a5c:	3402      	adds	r4, #2
 8000a5e:	0c13      	lsrs	r3, r2, #16
 8000a60:	7023      	strb	r3, [r4, #0]
  char missing_separator[] = "Error: No command separator found\r\n";
 8000a62:	4b93      	ldr	r3, [pc, #588]	; (8000cb0 <main+0x2d8>)
 8000a64:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a68:	461d      	mov	r5, r3
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a72:	682b      	ldr	r3, [r5, #0]
 8000a74:	6023      	str	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000a76:	4b87      	ldr	r3, [pc, #540]	; (8000c94 <main+0x2bc>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b0a      	cmp	r3, #10
 8000a7c:	d003      	beq.n	8000a86 <main+0xae>
 8000a7e:	4b85      	ldr	r3, [pc, #532]	; (8000c94 <main+0x2bc>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b0d      	cmp	r3, #13
 8000a84:	d106      	bne.n	8000a94 <main+0xbc>
	{
		message_length = get_message(message);
 8000a86:	488b      	ldr	r0, [pc, #556]	; (8000cb4 <main+0x2dc>)
 8000a88:	f7ff fe4a 	bl	8000720 <get_message>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b89      	ldr	r3, [pc, #548]	; (8000cb8 <main+0x2e0>)
 8000a92:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000a94:	4b88      	ldr	r3, [pc, #544]	; (8000cb8 <main+0x2e0>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8394 	beq.w	80011c8 <main+0x7f0>
	{
		for (uint8_t i=0; i<message_length; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8000aa6:	e387      	b.n	80011b8 <main+0x7e0>
		{
			// Check for command separator character
			command_separator = strchr(message, ';');
 8000aa8:	213b      	movs	r1, #59	; 0x3b
 8000aaa:	4882      	ldr	r0, [pc, #520]	; (8000cb4 <main+0x2dc>)
 8000aac:	f003 fdfc 	bl	80046a8 <strchr>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a82      	ldr	r2, [pc, #520]	; (8000cbc <main+0x2e4>)
 8000ab4:	6013      	str	r3, [r2, #0]

			// If separator char was not found
			if (command_separator == NULL)
 8000ab6:	4b81      	ldr	r3, [pc, #516]	; (8000cbc <main+0x2e4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d112      	bne.n	8000ae4 <main+0x10c>
			{
				while (i < message_length)
 8000abe:	e004      	b.n	8000aca <main+0xf2>
					i++;
 8000ac0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				while (i < message_length)
 8000aca:	4b7b      	ldr	r3, [pc, #492]	; (8000cb8 <main+0x2e0>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3f3      	bcc.n	8000ac0 <main+0xe8>
				display_error(missing_separator, sizeof(missing_separator));
 8000ad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000adc:	2124      	movs	r1, #36	; 0x24
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff febc 	bl	800085c <display_error>
			}

			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000ae4:	4b76      	ldr	r3, [pc, #472]	; (8000cc0 <main+0x2e8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d105      	bne.n	8000afa <main+0x122>
 8000aee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000af2:	4a70      	ldr	r2, [pc, #448]	; (8000cb4 <main+0x2dc>)
 8000af4:	5cd3      	ldrb	r3, [r2, r3]
 8000af6:	2b4c      	cmp	r3, #76	; 0x4c
 8000af8:	d00a      	beq.n	8000b10 <main+0x138>
 8000afa:	4b71      	ldr	r3, [pc, #452]	; (8000cc0 <main+0x2e8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d109      	bne.n	8000b18 <main+0x140>
 8000b04:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b08:	4a6a      	ldr	r2, [pc, #424]	; (8000cb4 <main+0x2dc>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	2b49      	cmp	r3, #73	; 0x49
 8000b0e:	d103      	bne.n	8000b18 <main+0x140>
				sw_state = 1;
 8000b10:	4b6b      	ldr	r3, [pc, #428]	; (8000cc0 <main+0x2e8>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e019      	b.n	8000b4c <main+0x174>
			else if (sw_state == 0 && (message[i] != ';' && message[i] != '#' && message[i] != ','))
 8000b18:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <main+0x2e8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d114      	bne.n	8000b4c <main+0x174>
 8000b22:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b26:	4a63      	ldr	r2, [pc, #396]	; (8000cb4 <main+0x2dc>)
 8000b28:	5cd3      	ldrb	r3, [r2, r3]
 8000b2a:	2b3b      	cmp	r3, #59	; 0x3b
 8000b2c:	d00e      	beq.n	8000b4c <main+0x174>
 8000b2e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b32:	4a60      	ldr	r2, [pc, #384]	; (8000cb4 <main+0x2dc>)
 8000b34:	5cd3      	ldrb	r3, [r2, r3]
 8000b36:	2b23      	cmp	r3, #35	; 0x23
 8000b38:	d008      	beq.n	8000b4c <main+0x174>
 8000b3a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b3e:	4a5d      	ldr	r2, [pc, #372]	; (8000cb4 <main+0x2dc>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	2b2c      	cmp	r3, #44	; 0x2c
 8000b44:	d002      	beq.n	8000b4c <main+0x174>
				error_found = 1;
 8000b46:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <main+0x2ec>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000b4c:	4b5c      	ldr	r3, [pc, #368]	; (8000cc0 <main+0x2e8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	f200 82c7 	bhi.w	80010e8 <main+0x710>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <main+0x188>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000c0b 	.word	0x08000c0b
 8000b68:	08000c4f 	.word	0x08000c4f
 8000b6c:	08000cd9 	.word	0x08000cd9
 8000b70:	08000d69 	.word	0x08000d69
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000b74:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a4e      	ldr	r2, [pc, #312]	; (8000cb4 <main+0x2dc>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	2b45      	cmp	r3, #69	; 0x45
 8000b80:	d10f      	bne.n	8000ba2 <main+0x1ca>
 8000b82:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b86:	3302      	adds	r3, #2
 8000b88:	4a4a      	ldr	r2, [pc, #296]	; (8000cb4 <main+0x2dc>)
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	2b44      	cmp	r3, #68	; 0x44
 8000b8e:	d108      	bne.n	8000ba2 <main+0x1ca>
				{
					i = i+2;
 8000b90:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000b94:	3302      	adds	r3, #2
 8000b96:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					sw_state = 2;
 8000b9a:	4b49      	ldr	r3, [pc, #292]	; (8000cc0 <main+0x2e8>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e032      	b.n	8000c08 <main+0x230>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 8000ba2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a42      	ldr	r2, [pc, #264]	; (8000cb4 <main+0x2dc>)
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	2b4e      	cmp	r3, #78	; 0x4e
 8000bae:	d124      	bne.n	8000bfa <main+0x222>
 8000bb0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	4a3f      	ldr	r2, [pc, #252]	; (8000cb4 <main+0x2dc>)
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	2b53      	cmp	r3, #83	; 0x53
 8000bbc:	d11d      	bne.n	8000bfa <main+0x222>
 8000bbe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000bc2:	3303      	adds	r3, #3
 8000bc4:	4a3b      	ldr	r2, [pc, #236]	; (8000cb4 <main+0x2dc>)
 8000bc6:	5cd3      	ldrb	r3, [r2, r3]
 8000bc8:	2b45      	cmp	r3, #69	; 0x45
 8000bca:	d116      	bne.n	8000bfa <main+0x222>
 8000bcc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <main+0x2dc>)
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	2b52      	cmp	r3, #82	; 0x52
 8000bd8:	d10f      	bne.n	8000bfa <main+0x222>
 8000bda:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000bde:	3305      	adds	r3, #5
 8000be0:	4a34      	ldr	r2, [pc, #208]	; (8000cb4 <main+0x2dc>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	2b54      	cmp	r3, #84	; 0x54
 8000be6:	d108      	bne.n	8000bfa <main+0x222>
				{
					i = i+5;
 8000be8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000bec:	3305      	adds	r3, #5
 8000bee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					sw_state = 2;
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <main+0x2e8>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e006      	b.n	8000c08 <main+0x230>
				}
				else
				{
					error_found = 1;
 8000bfa:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <main+0x2ec>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <main+0x2e8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000c06:	e26f      	b.n	80010e8 <main+0x710>
 8000c08:	e26e      	b.n	80010e8 <main+0x710>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000c0a:	215b      	movs	r1, #91	; 0x5b
 8000c0c:	4829      	ldr	r0, [pc, #164]	; (8000cb4 <main+0x2dc>)
 8000c0e:	f003 fd4b 	bl	80046a8 <strchr>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a2c      	ldr	r2, [pc, #176]	; (8000cc8 <main+0x2f0>)
 8000c16:	6013      	str	r3, [r2, #0]

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <main+0x2f0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10b      	bne.n	8000c38 <main+0x260>
				{
					i = i+1;
 8000c20:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000c24:	3301      	adds	r3, #1
 8000c26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					error_found = 1;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <main+0x2ec>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <main+0x2e8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000c36:	e257      	b.n	80010e8 <main+0x710>
					open_idx = (uint16_t)(open_bracket - message);
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <main+0x2f0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <main+0x2dc>)
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <main+0x2f4>)
 8000c44:	801a      	strh	r2, [r3, #0]
					sw_state = 3;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <main+0x2e8>)
 8000c48:	2203      	movs	r2, #3
 8000c4a:	701a      	strb	r2, [r3, #0]
				break;
 8000c4c:	e24c      	b.n	80010e8 <main+0x710>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000c4e:	215d      	movs	r1, #93	; 0x5d
 8000c50:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <main+0x2dc>)
 8000c52:	f003 fd29 	bl	80046a8 <strchr>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <main+0x2f8>)
 8000c5a:	6013      	str	r3, [r2, #0]

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <main+0x2f8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10b      	bne.n	8000c7c <main+0x2a4>
				{
					i = i+1;
 8000c64:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					error_found = 1;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <main+0x2ec>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <main+0x2e8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000c7a:	e235      	b.n	80010e8 <main+0x710>
					close_idx = (uint16_t)(close_bracket - message);
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <main+0x2f8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <main+0x2dc>)
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <main+0x2fc>)
 8000c88:	801a      	strh	r2, [r3, #0]
					sw_state = 4;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <main+0x2e8>)
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	701a      	strb	r2, [r3, #0]
				break;
 8000c90:	e22a      	b.n	80010e8 <main+0x710>
 8000c92:	bf00      	nop
 8000c94:	20000114 	.word	0x20000114
 8000c98:	2000008c 	.word	0x2000008c
 8000c9c:	08004948 	.word	0x08004948
 8000ca0:	0046464f 	.word	0x0046464f
 8000ca4:	0800494c 	.word	0x0800494c
 8000ca8:	08004954 	.word	0x08004954
 8000cac:	0800495c 	.word	0x0800495c
 8000cb0:	08004978 	.word	0x08004978
 8000cb4:	2000014c 	.word	0x2000014c
 8000cb8:	2000017e 	.word	0x2000017e
 8000cbc:	200001d4 	.word	0x200001d4
 8000cc0:	2000017f 	.word	0x2000017f
 8000cc4:	2000019c 	.word	0x2000019c
 8000cc8:	2000018c 	.word	0x2000018c
 8000ccc:	20000190 	.word	0x20000190
 8000cd0:	20000194 	.word	0x20000194
 8000cd4:	20000198 	.word	0x20000198

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000cd8:	4bb2      	ldr	r3, [pc, #712]	; (8000fa4 <main+0x5cc>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4bb2      	ldr	r3, [pc, #712]	; (8000fa8 <main+0x5d0>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4baf      	ldr	r3, [pc, #700]	; (8000fac <main+0x5d4>)
 8000cee:	801a      	strh	r2, [r3, #0]

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8000cf0:	4baf      	ldr	r3, [pc, #700]	; (8000fb0 <main+0x5d8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000cfc:	4baa      	ldr	r3, [pc, #680]	; (8000fa8 <main+0x5d0>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8000d08:	e018      	b.n	8000d3c <main+0x364>
				{
					command[j] = message[y];
 8000d0a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8000d0e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8000d12:	49a8      	ldr	r1, [pc, #672]	; (8000fb4 <main+0x5dc>)
 8000d14:	5c8a      	ldrb	r2, [r1, r2]
 8000d16:	33a0      	adds	r3, #160	; 0xa0
 8000d18:	443b      	add	r3, r7
 8000d1a:	f803 2c9c 	strb.w	r2, [r3, #-156]
					j++;
 8000d1e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8000d22:	3301      	adds	r3, #1
 8000d24:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
					command_length = j;
 8000d28:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4ba0      	ldr	r3, [pc, #640]	; (8000fb0 <main+0x5d8>)
 8000d30:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000d32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8000d36:	3301      	adds	r3, #1
 8000d38:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8000d3c:	4b99      	ldr	r3, [pc, #612]	; (8000fa4 <main+0x5cc>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3df      	bcc.n	8000d0a <main+0x332>
				}

				if (command_length == param_length)
 8000d4a:	4b99      	ldr	r3, [pc, #612]	; (8000fb0 <main+0x5d8>)
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	4b97      	ldr	r3, [pc, #604]	; (8000fac <main+0x5d4>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d103      	bne.n	8000d60 <main+0x388>
					sw_state = 5;
 8000d58:	4b97      	ldr	r3, [pc, #604]	; (8000fb8 <main+0x5e0>)
 8000d5a:	2205      	movs	r2, #5
 8000d5c:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 8000d5e:	e1c3      	b.n	80010e8 <main+0x710>
					sw_state = 0;
 8000d60:	4b95      	ldr	r3, [pc, #596]	; (8000fb8 <main+0x5e0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
				break;
 8000d66:	e1bf      	b.n	80010e8 <main+0x710>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 8000d68:	4b8e      	ldr	r3, [pc, #568]	; (8000fa4 <main+0x5cc>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a90      	ldr	r2, [pc, #576]	; (8000fb4 <main+0x5dc>)
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	2b3b      	cmp	r3, #59	; 0x3b
 8000d76:	d009      	beq.n	8000d8c <main+0x3b4>
				{
					display_error(missing_separator, sizeof(missing_separator));
 8000d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d7c:	2124      	movs	r1, #36	; 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fd6c 	bl	800085c <display_error>
					sw_state = 0;
 8000d84:	4b8c      	ldr	r3, [pc, #560]	; (8000fb8 <main+0x5e0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
					break;
 8000d8a:	e1ad      	b.n	80010e8 <main+0x710>
				}

				// Test CRC validation
				for (uint8_t y=0; y<param_length; y++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000d92:	e00d      	b.n	8000db0 <main+0x3d8>
					uart_print(command[y]);
 8000d94:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000d98:	33a0      	adds	r3, #160	; 0xa0
 8000d9a:	443b      	add	r3, r7
 8000d9c:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fc35 	bl	8000610 <uart_print>
				for (uint8_t y=0; y<param_length; y++)
 8000da6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000daa:	3301      	adds	r3, #1
 8000dac:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000db0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b7d      	ldr	r3, [pc, #500]	; (8000fac <main+0x5d4>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d3e9      	bcc.n	8000d94 <main+0x3bc>
				uart_print('\r');
 8000dc0:	200d      	movs	r0, #13
 8000dc2:	f7ff fc25 	bl	8000610 <uart_print>
				uart_print('\n');
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f7ff fc22 	bl	8000610 <uart_print>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 8000dcc:	4b77      	ldr	r3, [pc, #476]	; (8000fac <main+0x5d4>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 8000dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dd6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fc70 	bl	80046c2 <strncmp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d13b      	bne.n	8000e60 <main+0x488>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<7; y++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8000dee:	e011      	b.n	8000e14 <main+0x43c>
						single_command[y] = message[close_idx-6+y];
 8000df0:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <main+0x5cc>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	1f9a      	subs	r2, r3, #6
 8000df8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8000dfc:	441a      	add	r2, r3
 8000dfe:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8000e02:	496c      	ldr	r1, [pc, #432]	; (8000fb4 <main+0x5dc>)
 8000e04:	5c89      	ldrb	r1, [r1, r2]
 8000e06:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <main+0x5e4>)
 8000e08:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<7; y++)
 8000e0a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8000e0e:	3301      	adds	r3, #1
 8000e10:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8000e14:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8000e18:	2b06      	cmp	r3, #6
 8000e1a:	d9e9      	bls.n	8000df0 <main+0x418>

					// Validate last command
					temp_check = validate_command(single_command);
 8000e1c:	4867      	ldr	r0, [pc, #412]	; (8000fbc <main+0x5e4>)
 8000e1e:	f7ff fd3d 	bl	800089c <validate_command>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b66      	ldr	r3, [pc, #408]	; (8000fc0 <main+0x5e8>)
 8000e28:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8000e2a:	4b65      	ldr	r3, [pc, #404]	; (8000fc0 <main+0x5e8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d10f      	bne.n	8000e52 <main+0x47a>
					{
						i = i+param_length;
 8000e32:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <main+0x5d4>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000e3e:	4413      	add	r3, r2
 8000e40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						error_found = 0;
 8000e44:	4b5f      	ldr	r3, [pc, #380]	; (8000fc4 <main+0x5ec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]

						// Turn on LED
						led_action = 1;
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <main+0x5f0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e126      	b.n	80010a0 <main+0x6c8>
					}
					else
					{
						error_found = 1;
 8000e52:	4b5c      	ldr	r3, [pc, #368]	; (8000fc4 <main+0x5ec>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8000e58:	4b57      	ldr	r3, [pc, #348]	; (8000fb8 <main+0x5e0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e11f      	b.n	80010a0 <main+0x6c8>
					}
				}
				else if (strncmp(command, off_cmd, len) == 0)
 8000e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e62:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fc2a 	bl	80046c2 <strncmp>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d13b      	bne.n	8000eec <main+0x514>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<8; y++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8000e7a:	e011      	b.n	8000ea0 <main+0x4c8>
						single_command[y] = message[close_idx-7+y];
 8000e7c:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <main+0x5cc>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	1fda      	subs	r2, r3, #7
 8000e84:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8000e88:	441a      	add	r2, r3
 8000e8a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8000e8e:	4949      	ldr	r1, [pc, #292]	; (8000fb4 <main+0x5dc>)
 8000e90:	5c89      	ldrb	r1, [r1, r2]
 8000e92:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <main+0x5e4>)
 8000e94:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<8; y++)
 8000e96:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8000ea0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d9e9      	bls.n	8000e7c <main+0x4a4>

					// Validate last command
					temp_check = validate_command(single_command);
 8000ea8:	4844      	ldr	r0, [pc, #272]	; (8000fbc <main+0x5e4>)
 8000eaa:	f7ff fcf7 	bl	800089c <validate_command>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <main+0x5e8>)
 8000eb4:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <main+0x5e8>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10f      	bne.n	8000ede <main+0x506>
					{
						i = i+param_length;
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <main+0x5d4>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000eca:	4413      	add	r3, r2
 8000ecc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						error_found = 0;
 8000ed0:	4b3c      	ldr	r3, [pc, #240]	; (8000fc4 <main+0x5ec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]

						// Turn off LED
						led_action = 0;
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <main+0x5f0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e0e0      	b.n	80010a0 <main+0x6c8>
					}
					else
					{
						error_found = 1;
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <main+0x5ec>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <main+0x5e0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	e0d9      	b.n	80010a0 <main+0x6c8>
					}
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 8000eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eee:	1e5a      	subs	r2, r3, #1
 8000ef0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fbe3 	bl	80046c2 <strncmp>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d13f      	bne.n	8000f82 <main+0x5aa>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<12; y++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8000f08:	e012      	b.n	8000f30 <main+0x558>
						single_command[y] = message[close_idx-11+y];
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <main+0x5cc>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f1a3 020b 	sub.w	r2, r3, #11
 8000f14:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000f18:	441a      	add	r2, r3
 8000f1a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000f1e:	4925      	ldr	r1, [pc, #148]	; (8000fb4 <main+0x5dc>)
 8000f20:	5c89      	ldrb	r1, [r1, r2]
 8000f22:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <main+0x5e4>)
 8000f24:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<12; y++)
 8000f26:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8000f30:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8000f34:	2b0b      	cmp	r3, #11
 8000f36:	d9e8      	bls.n	8000f0a <main+0x532>

					// Validate last command
					temp_check = validate_command(single_command);
 8000f38:	4820      	ldr	r0, [pc, #128]	; (8000fbc <main+0x5e4>)
 8000f3a:	f7ff fcaf 	bl	800089c <validate_command>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <main+0x5e8>)
 8000f44:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <main+0x5e8>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d112      	bne.n	8000f74 <main+0x59c>
					{
						i = i+param_length;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <main+0x5d4>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						error_found = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <main+0x5ec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]

						// Enable LED blink
						blink_setup = 1;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <main+0x5f4>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <main+0x5f0>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e095      	b.n	80010a0 <main+0x6c8>
					}
					else
					{
						error_found = 1;
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <main+0x5ec>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <main+0x5e0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e08e      	b.n	80010a0 <main+0x6c8>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 8000f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f84:	1f1a      	subs	r2, r3, #4
 8000f86:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 fb98 	bl	80046c2 <strncmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f040 8083 	bne.w	80010a0 <main+0x6c8>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000fa0:	e03e      	b.n	8001020 <main+0x648>
 8000fa2:	bf00      	nop
 8000fa4:	20000198 	.word	0x20000198
 8000fa8:	20000190 	.word	0x20000190
 8000fac:	2000019a 	.word	0x2000019a
 8000fb0:	2000020e 	.word	0x2000020e
 8000fb4:	2000014c 	.word	0x2000014c
 8000fb8:	2000017f 	.word	0x2000017f
 8000fbc:	200001a0 	.word	0x200001a0
 8000fc0:	200001d8 	.word	0x200001d8
 8000fc4:	2000019c 	.word	0x2000019c
 8000fc8:	20000180 	.word	0x20000180
 8000fcc:	20000181 	.word	0x20000181
						if (message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39)
 8000fd0:	4b8d      	ldr	r3, [pc, #564]	; (8001208 <main+0x830>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	1f1a      	subs	r2, r3, #4
 8000fd8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a8b      	ldr	r2, [pc, #556]	; (800120c <main+0x834>)
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fe4:	d920      	bls.n	8001028 <main+0x650>
 8000fe6:	4b88      	ldr	r3, [pc, #544]	; (8001208 <main+0x830>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	1f1a      	subs	r2, r3, #4
 8000fee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a85      	ldr	r2, [pc, #532]	; (800120c <main+0x834>)
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	2b39      	cmp	r3, #57	; 0x39
 8000ffa:	d815      	bhi.n	8001028 <main+0x650>
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 8000ffc:	4b82      	ldr	r3, [pc, #520]	; (8001208 <main+0x830>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	1f1a      	subs	r2, r3, #4
 8001004:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001008:	441a      	add	r2, r3
 800100a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800100e:	497f      	ldr	r1, [pc, #508]	; (800120c <main+0x834>)
 8001010:	5c89      	ldrb	r1, [r1, r2]
 8001012:	4a7f      	ldr	r2, [pc, #508]	; (8001210 <main+0x838>)
 8001014:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<4; y++)
 8001016:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800101a:	3301      	adds	r3, #1
 800101c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001020:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001024:	2b03      	cmp	r3, #3
 8001026:	d9d3      	bls.n	8000fd0 <main+0x5f8>
						else
							break;

					// Store last command in a separate array
					for (uint8_t y=0; y<18; y++)
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800102e:	e012      	b.n	8001056 <main+0x67e>
						single_command[y] = message[close_idx-17+y];
 8001030:	4b75      	ldr	r3, [pc, #468]	; (8001208 <main+0x830>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f1a3 0211 	sub.w	r2, r3, #17
 800103a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800103e:	441a      	add	r2, r3
 8001040:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001044:	4971      	ldr	r1, [pc, #452]	; (800120c <main+0x834>)
 8001046:	5c89      	ldrb	r1, [r1, r2]
 8001048:	4a72      	ldr	r2, [pc, #456]	; (8001214 <main+0x83c>)
 800104a:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<18; y++)
 800104c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001050:	3301      	adds	r3, #1
 8001052:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001056:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800105a:	2b11      	cmp	r3, #17
 800105c:	d9e8      	bls.n	8001030 <main+0x658>

					// Validate last command
					temp_check = validate_command(single_command);
 800105e:	486d      	ldr	r0, [pc, #436]	; (8001214 <main+0x83c>)
 8001060:	f7ff fc1c 	bl	800089c <validate_command>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <main+0x840>)
 800106a:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <main+0x840>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10f      	bne.n	8001094 <main+0x6bc>
					{
						i = i+param_length;
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <main+0x844>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001080:	4413      	add	r3, r2
 8001082:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						error_found = 0;
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <main+0x848>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

						// Enable the delay
						led_action = 3;
 800108c:	4b65      	ldr	r3, [pc, #404]	; (8001224 <main+0x84c>)
 800108e:	2203      	movs	r2, #3
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e005      	b.n	80010a0 <main+0x6c8>
					}
					else
					{
						error_found = 1;
 8001094:	4b62      	ldr	r3, [pc, #392]	; (8001220 <main+0x848>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 800109a:	4b63      	ldr	r3, [pc, #396]	; (8001228 <main+0x850>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
					}
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 80010a0:	4b62      	ldr	r3, [pc, #392]	; (800122c <main+0x854>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <main+0x834>)
 80010aa:	2123      	movs	r1, #35	; 0x23
 80010ac:	5499      	strb	r1, [r3, r2]
				message[close_idx] = '#';
 80010ae:	4b56      	ldr	r3, [pc, #344]	; (8001208 <main+0x830>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <main+0x834>)
 80010b8:	2123      	movs	r1, #35	; 0x23
 80010ba:	5499      	strb	r1, [r3, r2]

				// Clear the single_command array
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80010c2:	e009      	b.n	80010d8 <main+0x700>
					single_command[y] = '\0';
 80010c4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <main+0x83c>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 80010ce:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80010d2:	3301      	adds	r3, #1
 80010d4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80010d8:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80010dc:	2b31      	cmp	r3, #49	; 0x31
 80010de:	d9f1      	bls.n	80010c4 <main+0x6ec>

				// Reset sw_state
				sw_state = 0;
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <main+0x850>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
				break;
 80010e6:	bf00      	nop
			} /* sw_state switch end */

			// Display error alert
			if (error_found == 1)
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <main+0x848>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d117      	bne.n	8001122 <main+0x74a>
			{
				while (message[i] != ';')
 80010f2:	e004      	b.n	80010fe <main+0x726>
					i++;
 80010f4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80010f8:	3301      	adds	r3, #1
 80010fa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				while (message[i] != ';')
 80010fe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001102:	4a42      	ldr	r2, [pc, #264]	; (800120c <main+0x834>)
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	2b3b      	cmp	r3, #59	; 0x3b
 8001108:	d1f4      	bne.n	80010f4 <main+0x71c>
				if (message[i] == ';')
 800110a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800110e:	4a3f      	ldr	r2, [pc, #252]	; (800120c <main+0x834>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	2b3b      	cmp	r3, #59	; 0x3b
 8001114:	d105      	bne.n	8001122 <main+0x74a>
					display_error(invalid_command, sizeof(invalid_command));
 8001116:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800111a:	211b      	movs	r1, #27
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fb9d 	bl	800085c <display_error>
			}

			// Diode control switch
			switch (led_action)
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <main+0x84c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d840      	bhi.n	80011ae <main+0x7d6>
 800112c:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <main+0x75c>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001145 	.word	0x08001145
 8001138:	0800114b 	.word	0x0800114b
 800113c:	08001151 	.word	0x08001151
 8001140:	0800119d 	.word	0x0800119d
			{
			case 0:
				// Turn off LED
				turn_off_led();
 8001144:	f7ff fb50 	bl	80007e8 <turn_off_led>
				break;
 8001148:	e031      	b.n	80011ae <main+0x7d6>

			case 1:
				// Turn on LED
				turn_on_led();
 800114a:	f7ff fb41 	bl	80007d0 <turn_on_led>
				break;
 800114e:	e02e      	b.n	80011ae <main+0x7d6>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <main+0x858>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d128      	bne.n	80011ac <main+0x7d4>
				{
					delay = message[close_idx-1] - '0';
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <main+0x830>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	3b01      	subs	r3, #1
 8001162:	4a2a      	ldr	r2, [pc, #168]	; (800120c <main+0x834>)
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	3b30      	subs	r3, #48	; 0x30
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <main+0x85c>)
 800116c:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <main+0x85c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <main+0x7a8>
						blink_ms = 0;
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <main+0x860>)
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
 800117e:	e009      	b.n	8001194 <main+0x7bc>
					else
						blink_ms = calculate_delay(delay);
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <main+0x85c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fb3a 	bl	8000800 <calculate_delay>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <main+0x860>)
 8001192:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <main+0x858>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
				}
				break;
 800119a:	e007      	b.n	80011ac <main+0x7d4>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 800119c:	481c      	ldr	r0, [pc, #112]	; (8001210 <main+0x838>)
 800119e:	f003 fa4d 	bl	800463c <atoi>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <main+0x864>)
 80011a8:	801a      	strh	r2, [r3, #0]
				break;
 80011aa:	e000      	b.n	80011ae <main+0x7d6>
				break;
 80011ac:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 80011ae:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80011b2:	3301      	adds	r3, #1
 80011b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <main+0x868>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80011c2:	429a      	cmp	r2, r3
 80011c4:	f4ff ac70 	bcc.w	8000aa8 <main+0xd0>
		} /* for loop end */
	} /* if statement end */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (blink_ms != 0 && (led_action == 2 || led_action == 3))
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <main+0x860>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d013      	beq.n	80011fa <main+0x822>
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <main+0x84c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d004      	beq.n	80011e6 <main+0x80e>
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <main+0x84c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d109      	bne.n	80011fa <main+0x822>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <main+0x86c>)
 80011ea:	f000 fec2 	bl	8001f72 <HAL_GPIO_TogglePin>
		HAL_Delay(blink_ms);
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <main+0x860>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fab3 	bl	8001760 <HAL_Delay>
	}

	// Start the delay
	HAL_Delay(loop_delay);
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <main+0x864>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 faae 	bl	8001760 <HAL_Delay>
	if (character == '\n' || character == '\r')
 8001204:	e437      	b.n	8000a76 <main+0x9e>
 8001206:	bf00      	nop
 8001208:	20000198 	.word	0x20000198
 800120c:	2000014c 	.word	0x2000014c
 8001210:	20000188 	.word	0x20000188
 8001214:	200001a0 	.word	0x200001a0
 8001218:	200001d8 	.word	0x200001d8
 800121c:	2000019a 	.word	0x2000019a
 8001220:	2000019c 	.word	0x2000019c
 8001224:	20000180 	.word	0x20000180
 8001228:	2000017f 	.word	0x2000017f
 800122c:	20000190 	.word	0x20000190
 8001230:	20000181 	.word	0x20000181
 8001234:	20000182 	.word	0x20000182
 8001238:	20000184 	.word	0x20000184
 800123c:	20000186 	.word	0x20000186
 8001240:	2000017e 	.word	0x2000017e
 8001244:	40020400 	.word	0x40020400

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2234      	movs	r2, #52	; 0x34
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fa1e 	bl	8004698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <SystemClock_Config+0xb0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <SystemClock_Config+0xb0>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <SystemClock_Config+0xb0>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <SystemClock_Config+0xb4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <SystemClock_Config+0xb4>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <SystemClock_Config+0xb4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2310      	movs	r3, #16
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fe77 	bl	8001fa8 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80012c0:	f000 f8f0 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 f910 	bl	8002504 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ea:	f000 f8db 	bl	80014a4 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART3_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <MX_USART3_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART3_UART_Init+0x58>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART3_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_USART3_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART3_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART3_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART3_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART3_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART3_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART3_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART3_UART_Init+0x58>)
 8001344:	f001 feec 	bl	8003120 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f000 f8a9 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000008c 	.word	0x2000008c
 800135c:	40004800 	.word	0x40004800

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <MX_GPIO_Init+0x8c>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_GPIO_Init+0x8c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013c4:	f000 fdbc 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013e0:	f000 fc02 	bl	8001be8 <HAL_GPIO_Init>

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400

080013f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_UART_RxCpltCallback+0x44>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f905 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_UART_RxCpltCallback+0x48>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d10e      	bne.n	800142e <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_UART_RxCpltCallback+0x4c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_UART_RxCpltCallback+0x44>)
 800141a:	7819      	ldrb	r1, [r3, #0]
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_UART_RxCpltCallback+0x50>)
 800141e:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8001420:	f7ff f938 	bl	8000694 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8001424:	2201      	movs	r2, #1
 8001426:	4904      	ldr	r1, [pc, #16]	; (8001438 <HAL_UART_RxCpltCallback+0x44>)
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <HAL_UART_RxCpltCallback+0x54>)
 800142a:	f001 fec7 	bl	80031bc <HAL_UART_Receive_IT>
	}
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000114 	.word	0x20000114
 800143c:	40004800 	.word	0x40004800
 8001440:	2000014a 	.word	0x2000014a
 8001444:	20000118 	.word	0x20000118
 8001448:	2000008c 	.word	0x2000008c

0800144c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800145e:	f000 fab5 	bl	80019cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001462:	2301      	movs	r3, #1
 8001464:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001466:	2300      	movs	r3, #0
 8001468:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800146e:	231f      	movs	r3, #31
 8001470:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001472:	2387      	movs	r3, #135	; 0x87
 8001474:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001476:	2300      	movs	r3, #0
 8001478:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800147a:	2300      	movs	r3, #0
 800147c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800147e:	2301      	movs	r3, #1
 8001480:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001482:	2301      	movs	r3, #1
 8001484:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800148e:	463b      	mov	r3, r7
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fad3 	bl	8001a3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001496:	2004      	movs	r0, #4
 8001498:	f000 fab0 	bl	80019fc <HAL_MPU_Enable>

}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_MspInit+0x44>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_MspInit+0x44>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_MspInit+0x44>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_MspInit+0x44>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_MspInit+0x44>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_MspInit+0x44>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0ae      	sub	sp, #184	; 0xb8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2290      	movs	r2, #144	; 0x90
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f003 f8bd 	bl	8004698 <memset>
  if(huart->Instance==USART3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_UART_MspInit+0xc4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d144      	bne.n	80015b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800152e:	2300      	movs	r3, #0
 8001530:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4618      	mov	r0, r3
 8001538:	f001 f9ca 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001542:	f7ff ffaf 	bl	80014a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_UART_MspInit+0xc8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001590:	2307      	movs	r3, #7
 8001592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800159a:	4619      	mov	r1, r3
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <HAL_UART_MspInit+0xcc>)
 800159e:	f000 fb23 	bl	8001be8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2027      	movs	r0, #39	; 0x27
 80015a8:	f000 f9d9 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015ac:	2027      	movs	r0, #39	; 0x27
 80015ae:	f000 f9f2 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	37b8      	adds	r7, #184	; 0xb8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40004800 	.word	0x40004800
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f884 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART3_IRQHandler+0x10>)
 8001622:	f001 fe0f 	bl	8003244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000008c 	.word	0x2000008c

08001630 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff ffd7 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f002 ffe5 	bl	8004650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff f9a7 	bl	80009d8 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001698:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 800169c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016a0:	20000214 	.word	0x20000214

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>

080016a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 f94c 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b0:	200f      	movs	r0, #15
 80016b2:	f000 f805 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b6:	f7ff fefb 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f967 	bl	80019b2 <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f92f 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000000 	.word	0x20000000
 8001718:	20000008 	.word	0x20000008
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20000210 	.word	0x20000210

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000210 	.word	0x20000210

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	05fa0000 	.word	0x05fa0000

080017f0 <__NVIC_GetPriorityGrouping>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff3e 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff31 	bl	800180c <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019d0:	f3bf 8f5f 	dmb	sy
}
 80019d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_MPU_Disable+0x28>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_MPU_Disable+0x28>)
 80019dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_MPU_Disable+0x2c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00
 80019f8:	e000ed90 	.word	0xe000ed90

080019fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_MPU_Enable+0x38>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_MPU_Enable+0x3c>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_MPU_Enable+0x3c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a1a:	f3bf 8f4f 	dsb	sy
}
 8001a1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a20:	f3bf 8f6f 	isb	sy
}
 8001a24:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed90 	.word	0xe000ed90
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	785a      	ldrb	r2, [r3, #1]
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_MPU_ConfigRegion+0x84>)
 8001a4a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d029      	beq.n	8001aa8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_MPU_ConfigRegion+0x84>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7adb      	ldrb	r3, [r3, #11]
 8001a66:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7a9b      	ldrb	r3, [r3, #10]
 8001a6e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7b5b      	ldrb	r3, [r3, #13]
 8001a76:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7b9b      	ldrb	r3, [r3, #14]
 8001a7e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7bdb      	ldrb	r3, [r3, #15]
 8001a86:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7a5b      	ldrb	r3, [r3, #9]
 8001a8e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7a1b      	ldrb	r3, [r3, #8]
 8001a96:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a98:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aa2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001aa6:	e005      	b.n	8001ab4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_MPU_ConfigRegion+0x84>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_MPU_ConfigRegion+0x84>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed90 	.word	0xe000ed90

08001ac4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ad2:	f7ff fe39 	bl	8001748 <HAL_GetTick>
 8001ad6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d008      	beq.n	8001af6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e052      	b.n	8001b9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0216 	bic.w	r2, r2, #22
 8001b04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_DMA_Abort+0x62>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0208 	bic.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b46:	e013      	b.n	8001b70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b48:	f7ff fdfe 	bl	8001748 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d90c      	bls.n	8001b70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2203      	movs	r2, #3
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e015      	b.n	8001b9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e4      	bne.n	8001b48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	223f      	movs	r2, #63	; 0x3f
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d004      	beq.n	8001bc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00c      	b.n	8001bdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e175      	b.n	8001ef4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 8164 	bne.w	8001eee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d005      	beq.n	8001c3e <HAL_GPIO_Init+0x56>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d130      	bne.n	8001ca0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d017      	beq.n	8001cdc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d123      	bne.n	8001d30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	69b9      	ldr	r1, [r7, #24]
 8001d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80be 	beq.w	8001eee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <HAL_GPIO_Init+0x324>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a65      	ldr	r2, [pc, #404]	; (8001f0c <HAL_GPIO_Init+0x324>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_GPIO_Init+0x324>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d8a:	4a61      	ldr	r2, [pc, #388]	; (8001f10 <HAL_GPIO_Init+0x328>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_GPIO_Init+0x32c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d037      	beq.n	8001e26 <HAL_GPIO_Init+0x23e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_GPIO_Init+0x23a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d02b      	beq.n	8001e1e <HAL_GPIO_Init+0x236>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <HAL_GPIO_Init+0x338>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x232>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a54      	ldr	r2, [pc, #336]	; (8001f24 <HAL_GPIO_Init+0x33c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x22e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a53      	ldr	r2, [pc, #332]	; (8001f28 <HAL_GPIO_Init+0x340>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x22a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_GPIO_Init+0x344>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x348>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x222>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a50      	ldr	r2, [pc, #320]	; (8001f34 <HAL_GPIO_Init+0x34c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x21e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x21a>
 8001dfe:	2309      	movs	r3, #9
 8001e00:	e012      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e02:	230a      	movs	r3, #10
 8001e04:	e010      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e06:	2308      	movs	r3, #8
 8001e08:	e00e      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00c      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e0e:	2306      	movs	r3, #6
 8001e10:	e00a      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e12:	2305      	movs	r3, #5
 8001e14:	e008      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x240>
 8001e26:	2300      	movs	r3, #0
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e38:	4935      	ldr	r1, [pc, #212]	; (8001f10 <HAL_GPIO_Init+0x328>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6a:	4a34      	ldr	r2, [pc, #208]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e94:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_GPIO_Init+0x354>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f67f ae86 	bls.w	8001c08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021400 	.word	0x40021400
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40021c00 	.word	0x40021c00
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40022400 	.word	0x40022400
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b085      	sub	sp, #20
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	041a      	lsls	r2, r3, #16
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	400b      	ands	r3, r1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e29b      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	4b96      	ldr	r3, [pc, #600]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd8:	4b93      	ldr	r3, [pc, #588]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d112      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
 8001fe4:	4b90      	ldr	r3, [pc, #576]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff0:	d10b      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x130>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d168      	bne.n	80020d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e275      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x7a>
 8002014:	4b84      	ldr	r3, [pc, #528]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a83      	ldr	r2, [pc, #524]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e02e      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x9c>
 800202a:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7e      	ldr	r2, [pc, #504]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7b      	ldr	r2, [pc, #492]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e01d      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0xc0>
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a75      	ldr	r2, [pc, #468]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b73      	ldr	r3, [pc, #460]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a72      	ldr	r2, [pc, #456]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002068:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6b      	ldr	r2, [pc, #428]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fb5e 	bl	8001748 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fb5a 	bl	8001748 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e229      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xe8>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fb4a 	bl	8001748 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fb46 	bl	8001748 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e215      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	4b57      	ldr	r3, [pc, #348]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x110>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d069      	beq.n	80021ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e6:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d11c      	bne.n	8002138 <HAL_RCC_OscConfig+0x190>
 80020fe:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x17a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1e9      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	493d      	ldr	r1, [pc, #244]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	e040      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a38      	ldr	r2, [pc, #224]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fafc 	bl	8001748 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff faf8 	bl	8001748 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1c7      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4929      	ldr	r1, [pc, #164]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
 8002186:	e018      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fad8 	bl	8001748 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff fad4 	bl	8001748 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1a3      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d038      	beq.n	8002238 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d019      	beq.n	8002202 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fab5 	bl	8001748 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7ff fab1 	bl	8001748 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e180      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 80021f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x23a>
 8002200:	e01a      	b.n	8002238 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_RCC_OscConfig+0x280>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7ff fa9b 	bl	8001748 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7ff fa97 	bl	8001748 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d903      	bls.n	800222c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e166      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
 8002228:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b92      	ldr	r3, [pc, #584]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800222e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a4 	beq.w	800238e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a88      	ldr	r2, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b86      	ldr	r3, [pc, #536]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b83      	ldr	r3, [pc, #524]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800227a:	4b80      	ldr	r3, [pc, #512]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7f      	ldr	r2, [pc, #508]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7ff fa5f 	bl	8001748 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7ff fa5b 	bl	8001748 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e12a      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x4d4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x31a>
 80022b4:	4b70      	ldr	r3, [pc, #448]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a6f      	ldr	r2, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
 80022c0:	e02d      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x33c>
 80022ca:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	4b68      	ldr	r3, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	4a67      	ldr	r2, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	; 0x70
 80022e2:	e01c      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d10c      	bne.n	8002306 <HAL_RCC_OscConfig+0x35e>
 80022ec:	4b62      	ldr	r3, [pc, #392]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a61      	ldr	r2, [pc, #388]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
 8002304:	e00b      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
 8002312:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d015      	beq.n	8002352 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7ff fa0f 	bl	8001748 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff fa0b 	bl	8001748 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0d8      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ee      	beq.n	800232e <HAL_RCC_OscConfig+0x386>
 8002350:	e014      	b.n	800237c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff f9f9 	bl	8001748 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff f9f5 	bl	8001748 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0c2      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80ae 	beq.w	80024f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002398:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d06d      	beq.n	8002480 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d14b      	bne.n	8002444 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff f9c6 	bl	8001748 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff f9c2 	bl	8001748 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e091      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	071b      	lsls	r3, r3, #28
 800240a:	491b      	ldr	r1, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a18      	ldr	r2, [pc, #96]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff f994 	bl	8001748 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7ff f990 	bl	8001748 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e05f      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x47c>
 8002442:	e057      	b.n	80024f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800244a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff f97a 	bl	8001748 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f976 	bl	8001748 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e045      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x4b0>
 8002476:	e03d      	b.n	80024f4 <HAL_RCC_OscConfig+0x54c>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_RCC_OscConfig+0x558>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d030      	beq.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d129      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d122      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d119      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	3b01      	subs	r3, #1
 80024ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d10f      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d0      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 020f 	bic.w	r2, r3, #15
 8002532:	4965      	ldr	r1, [pc, #404]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002586:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d040      	beq.n	8002628 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4936      	ldr	r1, [pc, #216]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7ff f8a6 	bl	8001748 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff f8a2 	bl	8001748 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e053      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d210      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 020f 	bic.w	r2, r3, #15
 800263e:	4922      	ldr	r1, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1c8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1cc>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1d0>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1d4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f802 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	0800499c 	.word	0x0800499c
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e0:	b090      	sub	sp, #64	; 0x40
 80026e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
 80026e8:	2300      	movs	r3, #0
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d00d      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x40>
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 80a1 	bhi.w	8002848 <HAL_RCC_GetSysClockFreq+0x16c>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 800270a:	2b04      	cmp	r3, #4
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x3a>
 800270e:	e09b      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_GetSysClockFreq+0x184>)
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002714:	e09b      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002716:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCC_GetSysClockFreq+0x188>)
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800271a:	e098      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002726:	4b4d      	ldr	r3, [pc, #308]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d028      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	627a      	str	r2, [r7, #36]	; 0x24
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002744:	2100      	movs	r1, #0
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <HAL_RCC_GetSysClockFreq+0x188>)
 8002748:	fb03 f201 	mul.w	r2, r3, r1
 800274c:	2300      	movs	r3, #0
 800274e:	fb00 f303 	mul.w	r3, r0, r3
 8002752:	4413      	add	r3, r2
 8002754:	4a43      	ldr	r2, [pc, #268]	; (8002864 <HAL_RCC_GetSysClockFreq+0x188>)
 8002756:	fba0 1202 	umull	r1, r2, r0, r2
 800275a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800275c:	460a      	mov	r2, r1
 800275e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	4413      	add	r3, r2
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	2200      	movs	r2, #0
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	61fa      	str	r2, [r7, #28]
 800276e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002772:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002776:	f7fd fd5f 	bl	8000238 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4613      	mov	r3, r2
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002782:	e053      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	2200      	movs	r2, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	617a      	str	r2, [r7, #20]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002796:	f04f 0b00 	mov.w	fp, #0
 800279a:	4652      	mov	r2, sl
 800279c:	465b      	mov	r3, fp
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	0159      	lsls	r1, r3, #5
 80027a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ac:	0150      	lsls	r0, r2, #5
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	ebb2 080a 	subs.w	r8, r2, sl
 80027b6:	eb63 090b 	sbc.w	r9, r3, fp
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ce:	ebb2 0408 	subs.w	r4, r2, r8
 80027d2:	eb63 0509 	sbc.w	r5, r3, r9
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	00eb      	lsls	r3, r5, #3
 80027e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e4:	00e2      	lsls	r2, r4, #3
 80027e6:	4614      	mov	r4, r2
 80027e8:	461d      	mov	r5, r3
 80027ea:	eb14 030a 	adds.w	r3, r4, sl
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	eb45 030b 	adc.w	r3, r5, fp
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002802:	4629      	mov	r1, r5
 8002804:	028b      	lsls	r3, r1, #10
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800280c:	4621      	mov	r1, r4
 800280e:	028a      	lsls	r2, r1, #10
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	2200      	movs	r2, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	60fa      	str	r2, [r7, #12]
 800281c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002820:	f7fd fd0a 	bl	8000238 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_GetSysClockFreq+0x180>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	3301      	adds	r3, #1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800283c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002846:	e002      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetSysClockFreq+0x184>)
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800284c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002850:	4618      	mov	r0, r3
 8002852:	3740      	adds	r7, #64	; 0x40
 8002854:	46bd      	mov	sp, r7
 8002856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	00f42400 	.word	0x00f42400
 8002864:	017d7840 	.word	0x017d7840

08002868 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_RCC_GetHCLKFreq+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002884:	f7ff fff0 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0a9b      	lsrs	r3, r3, #10
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4903      	ldr	r1, [pc, #12]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	080049ac 	.word	0x080049ac

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ac:	f7ff ffdc 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0b5b      	lsrs	r3, r3, #13
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	080049ac 	.word	0x080049ac

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028f8:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a68      	ldr	r2, [pc, #416]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002902:	6093      	str	r3, [r2, #8]
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	4964      	ldr	r1, [pc, #400]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	4959      	ldr	r1, [pc, #356]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d017      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002966:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	494a      	ldr	r1, [pc, #296]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002984:	d101      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002992:	2301      	movs	r3, #1
 8002994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 808b 	beq.w	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a39      	ldr	r2, [pc, #228]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe feb6 	bl	8001748 <HAL_GetTick>
 80029dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e0:	f7fe feb2 	bl	8001748 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e38f      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d035      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d02e      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a3e:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d114      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fe7a 	bl	8001748 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fe76 	bl	8001748 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e351      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ee      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a86:	d111      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a96:	400b      	ands	r3, r1
 8002a98:	4901      	ldr	r1, [pc, #4]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	0ffffcff 	.word	0x0ffffcff
 8002aac:	4bac      	ldr	r3, [pc, #688]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4aab      	ldr	r2, [pc, #684]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ab6:	6093      	str	r3, [r2, #8]
 8002ab8:	4ba9      	ldr	r3, [pc, #676]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	49a6      	ldr	r1, [pc, #664]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ad6:	4ba2      	ldr	r3, [pc, #648]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	4aa0      	ldr	r2, [pc, #640]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ae6:	4b9e      	ldr	r3, [pc, #632]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	499b      	ldr	r1, [pc, #620]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b04:	4b96      	ldr	r3, [pc, #600]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b12:	4993      	ldr	r1, [pc, #588]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b26:	4b8e      	ldr	r3, [pc, #568]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b34:	498a      	ldr	r1, [pc, #552]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b48:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	4982      	ldr	r1, [pc, #520]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b6a:	4b7d      	ldr	r3, [pc, #500]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4979      	ldr	r1, [pc, #484]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b8c:	4b74      	ldr	r3, [pc, #464]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	4971      	ldr	r1, [pc, #452]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bae:	4b6c      	ldr	r3, [pc, #432]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f023 020c 	bic.w	r2, r3, #12
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	4968      	ldr	r1, [pc, #416]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bd0:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	4960      	ldr	r1, [pc, #384]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c00:	4957      	ldr	r1, [pc, #348]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c14:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	494f      	ldr	r1, [pc, #316]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c36:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	4946      	ldr	r1, [pc, #280]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c58:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	493e      	ldr	r1, [pc, #248]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c88:	4935      	ldr	r1, [pc, #212]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002caa:	492d      	ldr	r1, [pc, #180]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d011      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ccc:	4924      	ldr	r1, [pc, #144]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0c:	4914      	ldr	r1, [pc, #80]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d30:	490b      	ldr	r1, [pc, #44]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00f      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d54:	4902      	ldr	r1, [pc, #8]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d5c:	e002      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d70:	4b8a      	ldr	r3, [pc, #552]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	4986      	ldr	r1, [pc, #536]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d94:	4b81      	ldr	r3, [pc, #516]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da4:	497d      	ldr	r1, [pc, #500]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d006      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80d6 	beq.w	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dc0:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fcbc 	bl	8001748 <HAL_GetTick>
 8002dd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dd4:	f7fe fcb8 	bl	8001748 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e195      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d021      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11d      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e06:	4b65      	ldr	r3, [pc, #404]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e14:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1a:	0e1b      	lsrs	r3, r3, #24
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	019a      	lsls	r2, r3, #6
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	4958      	ldr	r1, [pc, #352]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02e      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6c:	d129      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e7c:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e82:	0f1b      	lsrs	r3, r3, #28
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	019a      	lsls	r2, r3, #6
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	041b      	lsls	r3, r3, #16
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	061b      	lsls	r3, r3, #24
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	071b      	lsls	r3, r3, #28
 8002ea2:	493e      	ldr	r1, [pc, #248]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb0:	f023 021f 	bic.w	r2, r3, #31
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	4938      	ldr	r1, [pc, #224]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01d      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ece:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed4:	0e1b      	lsrs	r3, r3, #24
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002edc:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee2:	0f1b      	lsrs	r3, r3, #28
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	019a      	lsls	r2, r3, #6
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	431a      	orrs	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	071b      	lsls	r3, r3, #28
 8002f02:	4926      	ldr	r1, [pc, #152]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d011      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	019a      	lsls	r2, r3, #6
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	491a      	ldr	r1, [pc, #104]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f46:	f7fe fbff 	bl	8001748 <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f4e:	f7fe fbfb 	bl	8001748 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	; 0x64
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0d8      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f040 80ce 	bne.w	8003110 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f80:	f7fe fbe2 	bl	8001748 <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f88:	f7fe fbde 	bl	8001748 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d904      	bls.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0bb      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa0:	4b5e      	ldr	r3, [pc, #376]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fac:	d0ec      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d02e      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d12a      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	0f1b      	lsrs	r3, r3, #28
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	019a      	lsls	r2, r3, #6
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	041b      	lsls	r3, r3, #16
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	4944      	ldr	r1, [pc, #272]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003012:	4b42      	ldr	r3, [pc, #264]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	493d      	ldr	r1, [pc, #244]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003040:	d11d      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003042:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	0e1b      	lsrs	r3, r3, #24
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	0f1b      	lsrs	r3, r3, #28
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	019a      	lsls	r2, r3, #6
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	071b      	lsls	r3, r3, #28
 8003076:	4929      	ldr	r1, [pc, #164]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d028      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	0e1b      	lsrs	r3, r3, #24
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	019a      	lsls	r2, r3, #6
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	431a      	orrs	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	071b      	lsls	r3, r3, #28
 80030be:	4917      	ldr	r1, [pc, #92]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4911      	ldr	r1, [pc, #68]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe fb2e 	bl	8001748 <HAL_GetTick>
 80030ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030f0:	f7fe fb2a 	bl	8001748 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e007      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800310a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310e:	d1ef      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800

08003120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e040      	b.n	80031b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe f9d8 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb82 	bl	8003868 <UART_SetConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e022      	b.n	80031b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fdda 	bl	8003d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fe61 	bl	8003e74 <UART_CheckIdleState>
 80031b2:	4603      	mov	r3, r0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d132      	bne.n	800323a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_UART_Receive_IT+0x24>
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e02b      	b.n	800323c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d018      	beq.n	800322a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	613b      	str	r3, [r7, #16]
   return(result);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321a:	69f9      	ldr	r1, [r7, #28]
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	61bb      	str	r3, [r7, #24]
   return(result);
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e6      	bne.n	80031f8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	461a      	mov	r2, r3
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 ff33 	bl	800409c <UART_Start_Receive_IT>
 8003236:	4603      	mov	r3, r0
 8003238:	e000      	b.n	800323c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b0ba      	sub	sp, #232	; 0xe8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800326a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800326e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003272:	4013      	ands	r3, r2
 8003274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d115      	bne.n	80032ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00f      	beq.n	80032ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800328c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 82ac 	beq.w	80037fa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
      }
      return;
 80032aa:	e2a6      	b.n	80037fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8117 	beq.w	80034e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_UART_IRQHandler+0x298>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 810a 	beq.w	80034e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d011      	beq.n	8003300 <HAL_UART_IRQHandler+0xbc>
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d011      	beq.n	8003330 <HAL_UART_IRQHandler+0xec>
 800330c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2202      	movs	r2, #2
 800331e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d011      	beq.n	8003360 <HAL_UART_IRQHandler+0x11c>
 800333c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2204      	movs	r2, #4
 800334e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d017      	beq.n	800339c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800336c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2208      	movs	r2, #8
 800338a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003392:	f043 0208 	orr.w	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800339c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <HAL_UART_IRQHandler+0x18a>
 80033a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00c      	beq.n	80033ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8212 	beq.w	80037fe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003408:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d005      	beq.n	8003426 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800341a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800341e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d04f      	beq.n	80034c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fefe 	bl	8004228 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d141      	bne.n	80034be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3308      	adds	r3, #8
 8003440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003466:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800346a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800347e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1d9      	bne.n	800343a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	2b00      	cmp	r3, #0
 800348c:	d013      	beq.n	80034b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <HAL_UART_IRQHandler+0x29c>)
 8003494:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fb82 	bl	8001ba4 <HAL_DMA_Abort_IT>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d017      	beq.n	80034d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034b0:	4610      	mov	r0, r2
 80034b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b4:	e00f      	b.n	80034d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9b6 	bl	8003828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	e00b      	b.n	80034d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9b2 	bl	8003828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	e007      	b.n	80034d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9ae 	bl	8003828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80034d4:	e193      	b.n	80037fe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d6:	bf00      	nop
    return;
 80034d8:	e191      	b.n	80037fe <HAL_UART_IRQHandler+0x5ba>
 80034da:	bf00      	nop
 80034dc:	04000120 	.word	0x04000120
 80034e0:	080042f1 	.word	0x080042f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	f040 814c 	bne.w	8003786 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8145 	beq.w	8003786 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 813e 	beq.w	8003786 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2210      	movs	r2, #16
 8003510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	f040 80b6 	bne.w	800368e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800352e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8165 	beq.w	8003802 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800353e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003542:	429a      	cmp	r2, r3
 8003544:	f080 815d 	bcs.w	8003802 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800354e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	f000 8086 	beq.w	800366c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800357c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800358a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800358e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003596:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1da      	bne.n	8003560 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3308      	adds	r3, #8
 80035b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e1      	bne.n	80035aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3308      	adds	r3, #8
 80035ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800360a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800360c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e3      	bne.n	80035e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800363a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800364e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003650:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800365c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e4      	bne.n	800362c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fa2c 	bl	8001ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800367e:	b29b      	uxth	r3, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8d8 	bl	800383c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800368c:	e0b9      	b.n	8003802 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800369a:	b29b      	uxth	r3, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80ab 	beq.w	8003806 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80036b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a6 	beq.w	8003806 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036dc:	647b      	str	r3, [r7, #68]	; 0x44
 80036de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e4      	bne.n	80036ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3308      	adds	r3, #8
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3308      	adds	r3, #8
 8003710:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003714:	633a      	str	r2, [r7, #48]	; 0x30
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e3      	bne.n	80036f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	60fb      	str	r3, [r7, #12]
   return(result);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f023 0310 	bic.w	r3, r3, #16
 8003750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	617b      	str	r3, [r7, #20]
   return(result);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e4      	bne.n	800373c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f85c 	bl	800383c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003784:	e03f      	b.n	8003806 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00e      	beq.n	80037b0 <HAL_UART_IRQHandler+0x56c>
 8003792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f853 	bl	8003854 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037ae:	e02d      	b.n	800380c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01c      	beq.n	800380a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
    }
    return;
 80037d8:	e017      	b.n	800380a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <HAL_UART_IRQHandler+0x5c8>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fd92 	bl	800431c <UART_EndTransmit_IT>
    return;
 80037f8:	e008      	b.n	800380c <HAL_UART_IRQHandler+0x5c8>
      return;
 80037fa:	bf00      	nop
 80037fc:	e006      	b.n	800380c <HAL_UART_IRQHandler+0x5c8>
    return;
 80037fe:	bf00      	nop
 8003800:	e004      	b.n	800380c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <HAL_UART_IRQHandler+0x5c8>
    return;
 800380a:	bf00      	nop
  }

}
 800380c:	37e8      	adds	r7, #232	; 0xe8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop

08003814 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4ba6      	ldr	r3, [pc, #664]	; (8003b2c <UART_SetConfig+0x2c4>)
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	430b      	orrs	r3, r1
 800389e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a94      	ldr	r2, [pc, #592]	; (8003b30 <UART_SetConfig+0x2c8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d120      	bne.n	8003926 <UART_SetConfig+0xbe>
 80038e4:	4b93      	ldr	r3, [pc, #588]	; (8003b34 <UART_SetConfig+0x2cc>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d816      	bhi.n	8003920 <UART_SetConfig+0xb8>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <UART_SetConfig+0x90>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	08003909 	.word	0x08003909
 80038fc:	08003915 	.word	0x08003915
 8003900:	0800390f 	.word	0x0800390f
 8003904:	0800391b 	.word	0x0800391b
 8003908:	2301      	movs	r3, #1
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e150      	b.n	8003bb0 <UART_SetConfig+0x348>
 800390e:	2302      	movs	r3, #2
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e14d      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003914:	2304      	movs	r3, #4
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e14a      	b.n	8003bb0 <UART_SetConfig+0x348>
 800391a:	2308      	movs	r3, #8
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e147      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e144      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a83      	ldr	r2, [pc, #524]	; (8003b38 <UART_SetConfig+0x2d0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d132      	bne.n	8003996 <UART_SetConfig+0x12e>
 8003930:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d828      	bhi.n	8003990 <UART_SetConfig+0x128>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0xdc>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003979 	.word	0x08003979
 8003948:	08003991 	.word	0x08003991
 800394c:	08003991 	.word	0x08003991
 8003950:	08003991 	.word	0x08003991
 8003954:	08003985 	.word	0x08003985
 8003958:	08003991 	.word	0x08003991
 800395c:	08003991 	.word	0x08003991
 8003960:	08003991 	.word	0x08003991
 8003964:	0800397f 	.word	0x0800397f
 8003968:	08003991 	.word	0x08003991
 800396c:	08003991 	.word	0x08003991
 8003970:	08003991 	.word	0x08003991
 8003974:	0800398b 	.word	0x0800398b
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e118      	b.n	8003bb0 <UART_SetConfig+0x348>
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e115      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003984:	2304      	movs	r3, #4
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e112      	b.n	8003bb0 <UART_SetConfig+0x348>
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e10f      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e10c      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a68      	ldr	r2, [pc, #416]	; (8003b3c <UART_SetConfig+0x2d4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d120      	bne.n	80039e2 <UART_SetConfig+0x17a>
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <UART_SetConfig+0x2cc>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039aa:	2b30      	cmp	r3, #48	; 0x30
 80039ac:	d013      	beq.n	80039d6 <UART_SetConfig+0x16e>
 80039ae:	2b30      	cmp	r3, #48	; 0x30
 80039b0:	d814      	bhi.n	80039dc <UART_SetConfig+0x174>
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d009      	beq.n	80039ca <UART_SetConfig+0x162>
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d810      	bhi.n	80039dc <UART_SetConfig+0x174>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <UART_SetConfig+0x15c>
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d006      	beq.n	80039d0 <UART_SetConfig+0x168>
 80039c2:	e00b      	b.n	80039dc <UART_SetConfig+0x174>
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e0f2      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039ca:	2302      	movs	r3, #2
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e0ef      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039d0:	2304      	movs	r3, #4
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e0ec      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039d6:	2308      	movs	r3, #8
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e0e9      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039dc:	2310      	movs	r3, #16
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e0e6      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a56      	ldr	r2, [pc, #344]	; (8003b40 <UART_SetConfig+0x2d8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d120      	bne.n	8003a2e <UART_SetConfig+0x1c6>
 80039ec:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <UART_SetConfig+0x2cc>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039f6:	2bc0      	cmp	r3, #192	; 0xc0
 80039f8:	d013      	beq.n	8003a22 <UART_SetConfig+0x1ba>
 80039fa:	2bc0      	cmp	r3, #192	; 0xc0
 80039fc:	d814      	bhi.n	8003a28 <UART_SetConfig+0x1c0>
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	d009      	beq.n	8003a16 <UART_SetConfig+0x1ae>
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d810      	bhi.n	8003a28 <UART_SetConfig+0x1c0>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <UART_SetConfig+0x1a8>
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d006      	beq.n	8003a1c <UART_SetConfig+0x1b4>
 8003a0e:	e00b      	b.n	8003a28 <UART_SetConfig+0x1c0>
 8003a10:	2300      	movs	r3, #0
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e0cc      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a16:	2302      	movs	r3, #2
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e0c9      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e0c6      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a22:	2308      	movs	r3, #8
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e0c3      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e0c0      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a44      	ldr	r2, [pc, #272]	; (8003b44 <UART_SetConfig+0x2dc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d125      	bne.n	8003a84 <UART_SetConfig+0x21c>
 8003a38:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a46:	d017      	beq.n	8003a78 <UART_SetConfig+0x210>
 8003a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4c:	d817      	bhi.n	8003a7e <UART_SetConfig+0x216>
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a52:	d00b      	beq.n	8003a6c <UART_SetConfig+0x204>
 8003a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a58:	d811      	bhi.n	8003a7e <UART_SetConfig+0x216>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <UART_SetConfig+0x1fe>
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d006      	beq.n	8003a72 <UART_SetConfig+0x20a>
 8003a64:	e00b      	b.n	8003a7e <UART_SetConfig+0x216>
 8003a66:	2300      	movs	r3, #0
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e0a1      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e09e      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a72:	2304      	movs	r3, #4
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e09b      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e098      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a7e:	2310      	movs	r3, #16
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e095      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <UART_SetConfig+0x2e0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d125      	bne.n	8003ada <UART_SetConfig+0x272>
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9c:	d017      	beq.n	8003ace <UART_SetConfig+0x266>
 8003a9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa2:	d817      	bhi.n	8003ad4 <UART_SetConfig+0x26c>
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d00b      	beq.n	8003ac2 <UART_SetConfig+0x25a>
 8003aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aae:	d811      	bhi.n	8003ad4 <UART_SetConfig+0x26c>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <UART_SetConfig+0x254>
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab8:	d006      	beq.n	8003ac8 <UART_SetConfig+0x260>
 8003aba:	e00b      	b.n	8003ad4 <UART_SetConfig+0x26c>
 8003abc:	2301      	movs	r3, #1
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e076      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e073      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e070      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e06d      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e06a      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <UART_SetConfig+0x2e4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d138      	bne.n	8003b56 <UART_SetConfig+0x2ee>
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003aee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af2:	d017      	beq.n	8003b24 <UART_SetConfig+0x2bc>
 8003af4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af8:	d82a      	bhi.n	8003b50 <UART_SetConfig+0x2e8>
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	d00b      	beq.n	8003b18 <UART_SetConfig+0x2b0>
 8003b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b04:	d824      	bhi.n	8003b50 <UART_SetConfig+0x2e8>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <UART_SetConfig+0x2aa>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	d006      	beq.n	8003b1e <UART_SetConfig+0x2b6>
 8003b10:	e01e      	b.n	8003b50 <UART_SetConfig+0x2e8>
 8003b12:	2300      	movs	r3, #0
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e04b      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e048      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e045      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b24:	2308      	movs	r3, #8
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e042      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b2a:	bf00      	nop
 8003b2c:	efff69f3 	.word	0xefff69f3
 8003b30:	40011000 	.word	0x40011000
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40004400 	.word	0x40004400
 8003b3c:	40004800 	.word	0x40004800
 8003b40:	40004c00 	.word	0x40004c00
 8003b44:	40005000 	.word	0x40005000
 8003b48:	40011400 	.word	0x40011400
 8003b4c:	40007800 	.word	0x40007800
 8003b50:	2310      	movs	r3, #16
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e02c      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <UART_SetConfig+0x4bc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d125      	bne.n	8003bac <UART_SetConfig+0x344>
 8003b60:	4b71      	ldr	r3, [pc, #452]	; (8003d28 <UART_SetConfig+0x4c0>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b6e:	d017      	beq.n	8003ba0 <UART_SetConfig+0x338>
 8003b70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b74:	d817      	bhi.n	8003ba6 <UART_SetConfig+0x33e>
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d00b      	beq.n	8003b94 <UART_SetConfig+0x32c>
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b80:	d811      	bhi.n	8003ba6 <UART_SetConfig+0x33e>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <UART_SetConfig+0x326>
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d006      	beq.n	8003b9a <UART_SetConfig+0x332>
 8003b8c:	e00b      	b.n	8003ba6 <UART_SetConfig+0x33e>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e00d      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b94:	2302      	movs	r3, #2
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e00a      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e007      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e004      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e001      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003bac:	2310      	movs	r3, #16
 8003bae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d15b      	bne.n	8003c72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003bba:	7ffb      	ldrb	r3, [r7, #31]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d828      	bhi.n	8003c12 <UART_SetConfig+0x3aa>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x360>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003c13 	.word	0x08003c13
 8003bd8:	08003c03 	.word	0x08003c03
 8003bdc:	08003c13 	.word	0x08003c13
 8003be0:	08003c13 	.word	0x08003c13
 8003be4:	08003c13 	.word	0x08003c13
 8003be8:	08003c0b 	.word	0x08003c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe fe48 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	61b8      	str	r0, [r7, #24]
        break;
 8003bf2:	e013      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fe fe58 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003bf8:	61b8      	str	r0, [r7, #24]
        break;
 8003bfa:	e00f      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <UART_SetConfig+0x4c4>)
 8003bfe:	61bb      	str	r3, [r7, #24]
        break;
 8003c00:	e00c      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c02:	f7fe fd6b 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003c06:	61b8      	str	r0, [r7, #24]
        break;
 8003c08:	e008      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	61bb      	str	r3, [r7, #24]
        break;
 8003c10:	e004      	b.n	8003c1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	77bb      	strb	r3, [r7, #30]
        break;
 8003c1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d074      	beq.n	8003d0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	005a      	lsls	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	d916      	bls.n	8003c6c <UART_SetConfig+0x404>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d212      	bcs.n	8003c6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f023 030f 	bic.w	r3, r3, #15
 8003c4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	89fb      	ldrh	r3, [r7, #14]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	89fa      	ldrh	r2, [r7, #14]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e04f      	b.n	8003d0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77bb      	strb	r3, [r7, #30]
 8003c70:	e04c      	b.n	8003d0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d828      	bhi.n	8003cca <UART_SetConfig+0x462>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x418>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cb5 	.word	0x08003cb5
 8003c8c:	08003ccb 	.word	0x08003ccb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003ccb 	.word	0x08003ccb
 8003c98:	08003ccb 	.word	0x08003ccb
 8003c9c:	08003ccb 	.word	0x08003ccb
 8003ca0:	08003cc3 	.word	0x08003cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe fdec 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	61b8      	str	r0, [r7, #24]
        break;
 8003caa:	e013      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7fe fdfc 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003cb0:	61b8      	str	r0, [r7, #24]
        break;
 8003cb2:	e00f      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <UART_SetConfig+0x4c4>)
 8003cb6:	61bb      	str	r3, [r7, #24]
        break;
 8003cb8:	e00c      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cba:	f7fe fd0f 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8003cbe:	61b8      	str	r0, [r7, #24]
        break;
 8003cc0:	e008      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc6:	61bb      	str	r3, [r7, #24]
        break;
 8003cc8:	e004      	b.n	8003cd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8003cd2:	bf00      	nop
    }

    if (pclk != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	085a      	lsrs	r2, r3, #1
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	441a      	add	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d909      	bls.n	8003d08 <UART_SetConfig+0x4a0>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfa:	d205      	bcs.n	8003d08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	e001      	b.n	8003d0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d18:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40007c00 	.word	0x40007c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2e:	d10a      	bne.n	8003e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e84:	f7fd fc60 	bl	8001748 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d10e      	bne.n	8003eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f831 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e027      	b.n	8003f06 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d10e      	bne.n	8003ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f81b 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e011      	b.n	8003f06 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b09c      	sub	sp, #112	; 0x70
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e0a7      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	f000 80a3 	beq.w	8004070 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fd fc0d 	bl	8001748 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d13f      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f54:	667b      	str	r3, [r7, #100]	; 0x64
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e6      	bne.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	663b      	str	r3, [r7, #96]	; 0x60
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e068      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d050      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d148      	bne.n	8004070 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
 8004008:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800400c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e6      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	613b      	str	r3, [r7, #16]
   return(result);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	66bb      	str	r3, [r7, #104]	; 0x68
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3308      	adds	r3, #8
 8004038:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800403a:	623a      	str	r2, [r7, #32]
 800403c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	69f9      	ldr	r1, [r7, #28]
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	61bb      	str	r3, [r7, #24]
   return(result);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e010      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	429a      	cmp	r2, r3
 800408c:	f43f af48 	beq.w	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3770      	adds	r7, #112	; 0x70
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800409c:	b480      	push	{r7}
 800409e:	b097      	sub	sp, #92	; 0x5c
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	d10e      	bne.n	80040ee <UART_Start_Receive_IT+0x52>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <UART_Start_Receive_IT+0x48>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e2:	e02d      	b.n	8004140 <UART_Start_Receive_IT+0xa4>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	22ff      	movs	r2, #255	; 0xff
 80040e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ec:	e028      	b.n	8004140 <UART_Start_Receive_IT+0xa4>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10d      	bne.n	8004112 <UART_Start_Receive_IT+0x76>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <UART_Start_Receive_IT+0x6c>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004106:	e01b      	b.n	8004140 <UART_Start_Receive_IT+0xa4>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	227f      	movs	r2, #127	; 0x7f
 800410c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004110:	e016      	b.n	8004140 <UART_Start_Receive_IT+0xa4>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411a:	d10d      	bne.n	8004138 <UART_Start_Receive_IT+0x9c>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <UART_Start_Receive_IT+0x92>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	227f      	movs	r2, #127	; 0x7f
 8004128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800412c:	e008      	b.n	8004140 <UART_Start_Receive_IT+0xa4>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	223f      	movs	r2, #63	; 0x3f
 8004132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004136:	e003      	b.n	8004140 <UART_Start_Receive_IT+0xa4>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2222      	movs	r2, #34	; 0x22
 800414c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3308      	adds	r3, #8
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	657b      	str	r3, [r7, #84]	; 0x54
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004170:	64ba      	str	r2, [r7, #72]	; 0x48
 8004172:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800417e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418c:	d107      	bne.n	800419e <UART_Start_Receive_IT+0x102>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <UART_Start_Receive_IT+0x184>)
 800419a:	669a      	str	r2, [r3, #104]	; 0x68
 800419c:	e002      	b.n	80041a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <UART_Start_Receive_IT+0x188>)
 80041a2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d019      	beq.n	80041e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
 80041cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e6      	bne.n	80041ac <UART_Start_Receive_IT+0x110>
 80041de:	e018      	b.n	8004212 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	613b      	str	r3, [r7, #16]
   return(result);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f043 0320 	orr.w	r3, r3, #32
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fe:	623b      	str	r3, [r7, #32]
 8004200:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	69f9      	ldr	r1, [r7, #28]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	61bb      	str	r3, [r7, #24]
   return(result);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e6      	bne.n	80041e0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	375c      	adds	r7, #92	; 0x5c
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	080044d7 	.word	0x080044d7
 8004224:	08004371 	.word	0x08004371

08004228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b095      	sub	sp, #84	; 0x54
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	643b      	str	r3, [r7, #64]	; 0x40
 8004250:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e6      	bne.n	8004230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3308      	adds	r3, #8
 8004268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	61fb      	str	r3, [r7, #28]
   return(result);
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	2b01      	cmp	r3, #1
 800429c:	d118      	bne.n	80042d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0310 	bic.w	r3, r3, #16
 80042b2:	647b      	str	r3, [r7, #68]	; 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6979      	ldr	r1, [r7, #20]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e6      	bne.n	800429e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042e4:	bf00      	nop
 80042e6:	3754      	adds	r7, #84	; 0x54
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff fa8a 	bl	8003828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	60bb      	str	r3, [r7, #8]
   return(result);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6979      	ldr	r1, [r7, #20]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	613b      	str	r3, [r7, #16]
   return(result);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e6      	bne.n	8004324 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fa56 	bl	8003814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004368:	bf00      	nop
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b096      	sub	sp, #88	; 0x58
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800437e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004388:	2b22      	cmp	r3, #34	; 0x22
 800438a:	f040 8098 	bne.w	80044be <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004398:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800439c:	b2d9      	uxtb	r1, r3
 800439e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	400a      	ands	r2, r1
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d17b      	bne.n	80044ce <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ea:	653b      	str	r3, [r7, #80]	; 0x50
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f4:	647b      	str	r3, [r7, #68]	; 0x44
 80043f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	623b      	str	r3, [r7, #32]
   return(result);
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004428:	633a      	str	r2, [r7, #48]	; 0x30
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800442e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004454:	2b01      	cmp	r3, #1
 8004456:	d12e      	bne.n	80044b6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	617b      	str	r3, [r7, #20]
   return(result);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e6      	bne.n	800445e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b10      	cmp	r3, #16
 800449c:	d103      	bne.n	80044a6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2210      	movs	r2, #16
 80044a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff f9c4 	bl	800383c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044b4:	e00b      	b.n	80044ce <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc ff9c 	bl	80013f4 <HAL_UART_RxCpltCallback>
}
 80044bc:	e007      	b.n	80044ce <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699a      	ldr	r2, [r3, #24]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0208 	orr.w	r2, r2, #8
 80044cc:	619a      	str	r2, [r3, #24]
}
 80044ce:	bf00      	nop
 80044d0:	3758      	adds	r7, #88	; 0x58
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b096      	sub	sp, #88	; 0x58
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ee:	2b22      	cmp	r3, #34	; 0x22
 80044f0:	f040 8098 	bne.w	8004624 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004504:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004508:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800450c:	4013      	ands	r3, r2
 800450e:	b29a      	uxth	r2, r3
 8004510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004512:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	1c9a      	adds	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d17b      	bne.n	8004634 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	643b      	str	r3, [r7, #64]	; 0x40
 800455c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	61fb      	str	r3, [r7, #28]
   return(result);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	64bb      	str	r3, [r7, #72]	; 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d12e      	bne.n	800461c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f023 0310 	bic.w	r3, r3, #16
 80045d8:	647b      	str	r3, [r7, #68]	; 0x44
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	613b      	str	r3, [r7, #16]
   return(result);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e6      	bne.n	80045c4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b10      	cmp	r3, #16
 8004602:	d103      	bne.n	800460c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2210      	movs	r2, #16
 800460a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004612:	4619      	mov	r1, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff f911 	bl	800383c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800461a:	e00b      	b.n	8004634 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fc fee9 	bl	80013f4 <HAL_UART_RxCpltCallback>
}
 8004622:	e007      	b.n	8004634 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0208 	orr.w	r2, r2, #8
 8004632:	619a      	str	r2, [r3, #24]
}
 8004634:	bf00      	nop
 8004636:	3758      	adds	r7, #88	; 0x58
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <atoi>:
 800463c:	220a      	movs	r2, #10
 800463e:	2100      	movs	r1, #0
 8004640:	f000 b8d6 	b.w	80047f0 <strtol>

08004644 <__errno>:
 8004644:	4b01      	ldr	r3, [pc, #4]	; (800464c <__errno+0x8>)
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	2000000c 	.word	0x2000000c

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4d0d      	ldr	r5, [pc, #52]	; (8004688 <__libc_init_array+0x38>)
 8004654:	4c0d      	ldr	r4, [pc, #52]	; (800468c <__libc_init_array+0x3c>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	2600      	movs	r6, #0
 800465c:	42a6      	cmp	r6, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	4d0b      	ldr	r5, [pc, #44]	; (8004690 <__libc_init_array+0x40>)
 8004662:	4c0c      	ldr	r4, [pc, #48]	; (8004694 <__libc_init_array+0x44>)
 8004664:	f000 f948 	bl	80048f8 <_init>
 8004668:	1b64      	subs	r4, r4, r5
 800466a:	10a4      	asrs	r4, r4, #2
 800466c:	2600      	movs	r6, #0
 800466e:	42a6      	cmp	r6, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f855 3b04 	ldr.w	r3, [r5], #4
 8004678:	4798      	blx	r3
 800467a:	3601      	adds	r6, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004682:	4798      	blx	r3
 8004684:	3601      	adds	r6, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	08004ac0 	.word	0x08004ac0
 800468c:	08004ac0 	.word	0x08004ac0
 8004690:	08004ac0 	.word	0x08004ac0
 8004694:	08004ac4 	.word	0x08004ac4

08004698 <memset>:
 8004698:	4402      	add	r2, r0
 800469a:	4603      	mov	r3, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	d100      	bne.n	80046a2 <memset+0xa>
 80046a0:	4770      	bx	lr
 80046a2:	f803 1b01 	strb.w	r1, [r3], #1
 80046a6:	e7f9      	b.n	800469c <memset+0x4>

080046a8 <strchr>:
 80046a8:	b2c9      	uxtb	r1, r1
 80046aa:	4603      	mov	r3, r0
 80046ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b0:	b11a      	cbz	r2, 80046ba <strchr+0x12>
 80046b2:	428a      	cmp	r2, r1
 80046b4:	d1f9      	bne.n	80046aa <strchr+0x2>
 80046b6:	4618      	mov	r0, r3
 80046b8:	4770      	bx	lr
 80046ba:	2900      	cmp	r1, #0
 80046bc:	bf18      	it	ne
 80046be:	2300      	movne	r3, #0
 80046c0:	e7f9      	b.n	80046b6 <strchr+0xe>

080046c2 <strncmp>:
 80046c2:	b510      	push	{r4, lr}
 80046c4:	b17a      	cbz	r2, 80046e6 <strncmp+0x24>
 80046c6:	4603      	mov	r3, r0
 80046c8:	3901      	subs	r1, #1
 80046ca:	1884      	adds	r4, r0, r2
 80046cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80046d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80046d4:	4290      	cmp	r0, r2
 80046d6:	d101      	bne.n	80046dc <strncmp+0x1a>
 80046d8:	42a3      	cmp	r3, r4
 80046da:	d101      	bne.n	80046e0 <strncmp+0x1e>
 80046dc:	1a80      	subs	r0, r0, r2
 80046de:	bd10      	pop	{r4, pc}
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d1f3      	bne.n	80046cc <strncmp+0xa>
 80046e4:	e7fa      	b.n	80046dc <strncmp+0x1a>
 80046e6:	4610      	mov	r0, r2
 80046e8:	e7f9      	b.n	80046de <strncmp+0x1c>
	...

080046ec <_strtol_l.constprop.0>:
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f2:	d001      	beq.n	80046f8 <_strtol_l.constprop.0+0xc>
 80046f4:	2b24      	cmp	r3, #36	; 0x24
 80046f6:	d906      	bls.n	8004706 <_strtol_l.constprop.0+0x1a>
 80046f8:	f7ff ffa4 	bl	8004644 <__errno>
 80046fc:	2316      	movs	r3, #22
 80046fe:	6003      	str	r3, [r0, #0]
 8004700:	2000      	movs	r0, #0
 8004702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004706:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80047ec <_strtol_l.constprop.0+0x100>
 800470a:	460d      	mov	r5, r1
 800470c:	462e      	mov	r6, r5
 800470e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004712:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004716:	f017 0708 	ands.w	r7, r7, #8
 800471a:	d1f7      	bne.n	800470c <_strtol_l.constprop.0+0x20>
 800471c:	2c2d      	cmp	r4, #45	; 0x2d
 800471e:	d132      	bne.n	8004786 <_strtol_l.constprop.0+0x9a>
 8004720:	782c      	ldrb	r4, [r5, #0]
 8004722:	2701      	movs	r7, #1
 8004724:	1cb5      	adds	r5, r6, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05b      	beq.n	80047e2 <_strtol_l.constprop.0+0xf6>
 800472a:	2b10      	cmp	r3, #16
 800472c:	d109      	bne.n	8004742 <_strtol_l.constprop.0+0x56>
 800472e:	2c30      	cmp	r4, #48	; 0x30
 8004730:	d107      	bne.n	8004742 <_strtol_l.constprop.0+0x56>
 8004732:	782c      	ldrb	r4, [r5, #0]
 8004734:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004738:	2c58      	cmp	r4, #88	; 0x58
 800473a:	d14d      	bne.n	80047d8 <_strtol_l.constprop.0+0xec>
 800473c:	786c      	ldrb	r4, [r5, #1]
 800473e:	2310      	movs	r3, #16
 8004740:	3502      	adds	r5, #2
 8004742:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004746:	f108 38ff 	add.w	r8, r8, #4294967295
 800474a:	f04f 0c00 	mov.w	ip, #0
 800474e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004752:	4666      	mov	r6, ip
 8004754:	fb03 8a19 	mls	sl, r3, r9, r8
 8004758:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800475c:	f1be 0f09 	cmp.w	lr, #9
 8004760:	d816      	bhi.n	8004790 <_strtol_l.constprop.0+0xa4>
 8004762:	4674      	mov	r4, lr
 8004764:	42a3      	cmp	r3, r4
 8004766:	dd24      	ble.n	80047b2 <_strtol_l.constprop.0+0xc6>
 8004768:	f1bc 0f00 	cmp.w	ip, #0
 800476c:	db1e      	blt.n	80047ac <_strtol_l.constprop.0+0xc0>
 800476e:	45b1      	cmp	r9, r6
 8004770:	d31c      	bcc.n	80047ac <_strtol_l.constprop.0+0xc0>
 8004772:	d101      	bne.n	8004778 <_strtol_l.constprop.0+0x8c>
 8004774:	45a2      	cmp	sl, r4
 8004776:	db19      	blt.n	80047ac <_strtol_l.constprop.0+0xc0>
 8004778:	fb06 4603 	mla	r6, r6, r3, r4
 800477c:	f04f 0c01 	mov.w	ip, #1
 8004780:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004784:	e7e8      	b.n	8004758 <_strtol_l.constprop.0+0x6c>
 8004786:	2c2b      	cmp	r4, #43	; 0x2b
 8004788:	bf04      	itt	eq
 800478a:	782c      	ldrbeq	r4, [r5, #0]
 800478c:	1cb5      	addeq	r5, r6, #2
 800478e:	e7ca      	b.n	8004726 <_strtol_l.constprop.0+0x3a>
 8004790:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004794:	f1be 0f19 	cmp.w	lr, #25
 8004798:	d801      	bhi.n	800479e <_strtol_l.constprop.0+0xb2>
 800479a:	3c37      	subs	r4, #55	; 0x37
 800479c:	e7e2      	b.n	8004764 <_strtol_l.constprop.0+0x78>
 800479e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80047a2:	f1be 0f19 	cmp.w	lr, #25
 80047a6:	d804      	bhi.n	80047b2 <_strtol_l.constprop.0+0xc6>
 80047a8:	3c57      	subs	r4, #87	; 0x57
 80047aa:	e7db      	b.n	8004764 <_strtol_l.constprop.0+0x78>
 80047ac:	f04f 3cff 	mov.w	ip, #4294967295
 80047b0:	e7e6      	b.n	8004780 <_strtol_l.constprop.0+0x94>
 80047b2:	f1bc 0f00 	cmp.w	ip, #0
 80047b6:	da05      	bge.n	80047c4 <_strtol_l.constprop.0+0xd8>
 80047b8:	2322      	movs	r3, #34	; 0x22
 80047ba:	6003      	str	r3, [r0, #0]
 80047bc:	4646      	mov	r6, r8
 80047be:	b942      	cbnz	r2, 80047d2 <_strtol_l.constprop.0+0xe6>
 80047c0:	4630      	mov	r0, r6
 80047c2:	e79e      	b.n	8004702 <_strtol_l.constprop.0+0x16>
 80047c4:	b107      	cbz	r7, 80047c8 <_strtol_l.constprop.0+0xdc>
 80047c6:	4276      	negs	r6, r6
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	d0f9      	beq.n	80047c0 <_strtol_l.constprop.0+0xd4>
 80047cc:	f1bc 0f00 	cmp.w	ip, #0
 80047d0:	d000      	beq.n	80047d4 <_strtol_l.constprop.0+0xe8>
 80047d2:	1e69      	subs	r1, r5, #1
 80047d4:	6011      	str	r1, [r2, #0]
 80047d6:	e7f3      	b.n	80047c0 <_strtol_l.constprop.0+0xd4>
 80047d8:	2430      	movs	r4, #48	; 0x30
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1b1      	bne.n	8004742 <_strtol_l.constprop.0+0x56>
 80047de:	2308      	movs	r3, #8
 80047e0:	e7af      	b.n	8004742 <_strtol_l.constprop.0+0x56>
 80047e2:	2c30      	cmp	r4, #48	; 0x30
 80047e4:	d0a5      	beq.n	8004732 <_strtol_l.constprop.0+0x46>
 80047e6:	230a      	movs	r3, #10
 80047e8:	e7ab      	b.n	8004742 <_strtol_l.constprop.0+0x56>
 80047ea:	bf00      	nop
 80047ec:	080049b5 	.word	0x080049b5

080047f0 <strtol>:
 80047f0:	4613      	mov	r3, r2
 80047f2:	460a      	mov	r2, r1
 80047f4:	4601      	mov	r1, r0
 80047f6:	4802      	ldr	r0, [pc, #8]	; (8004800 <strtol+0x10>)
 80047f8:	6800      	ldr	r0, [r0, #0]
 80047fa:	f7ff bf77 	b.w	80046ec <_strtol_l.constprop.0>
 80047fe:	bf00      	nop
 8004800:	2000000c 	.word	0x2000000c
 8004804:	00000000 	.word	0x00000000

08004808 <ceil>:
 8004808:	ee10 1a90 	vmov	r1, s1
 800480c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004810:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8004814:	2b13      	cmp	r3, #19
 8004816:	b530      	push	{r4, r5, lr}
 8004818:	ee10 0a10 	vmov	r0, s0
 800481c:	ee10 5a10 	vmov	r5, s0
 8004820:	dc2f      	bgt.n	8004882 <ceil+0x7a>
 8004822:	2b00      	cmp	r3, #0
 8004824:	da13      	bge.n	800484e <ceil+0x46>
 8004826:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80048e8 <ceil+0xe0>
 800482a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800482e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	dd05      	ble.n	8004844 <ceil+0x3c>
 8004838:	2900      	cmp	r1, #0
 800483a:	db4c      	blt.n	80048d6 <ceil+0xce>
 800483c:	4301      	orrs	r1, r0
 800483e:	d04e      	beq.n	80048de <ceil+0xd6>
 8004840:	492b      	ldr	r1, [pc, #172]	; (80048f0 <ceil+0xe8>)
 8004842:	2000      	movs	r0, #0
 8004844:	460b      	mov	r3, r1
 8004846:	4602      	mov	r2, r0
 8004848:	ec43 2b10 	vmov	d0, r2, r3
 800484c:	e020      	b.n	8004890 <ceil+0x88>
 800484e:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <ceil+0xec>)
 8004850:	411a      	asrs	r2, r3
 8004852:	ea01 0402 	and.w	r4, r1, r2
 8004856:	4304      	orrs	r4, r0
 8004858:	d01a      	beq.n	8004890 <ceil+0x88>
 800485a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80048e8 <ceil+0xe0>
 800485e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004862:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486a:	ddeb      	ble.n	8004844 <ceil+0x3c>
 800486c:	2900      	cmp	r1, #0
 800486e:	bfc2      	ittt	gt
 8004870:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8004874:	fa40 f303 	asrgt.w	r3, r0, r3
 8004878:	18c9      	addgt	r1, r1, r3
 800487a:	ea21 0102 	bic.w	r1, r1, r2
 800487e:	2000      	movs	r0, #0
 8004880:	e7e0      	b.n	8004844 <ceil+0x3c>
 8004882:	2b33      	cmp	r3, #51	; 0x33
 8004884:	dd05      	ble.n	8004892 <ceil+0x8a>
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488a:	d101      	bne.n	8004890 <ceil+0x88>
 800488c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004890:	bd30      	pop	{r4, r5, pc}
 8004892:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8004896:	f04f 32ff 	mov.w	r2, #4294967295
 800489a:	40e2      	lsrs	r2, r4
 800489c:	4202      	tst	r2, r0
 800489e:	d0f7      	beq.n	8004890 <ceil+0x88>
 80048a0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80048e8 <ceil+0xe0>
 80048a4:	ee30 0b07 	vadd.f64	d0, d0, d7
 80048a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	ddc8      	ble.n	8004844 <ceil+0x3c>
 80048b2:	2900      	cmp	r1, #0
 80048b4:	dd02      	ble.n	80048bc <ceil+0xb4>
 80048b6:	2b14      	cmp	r3, #20
 80048b8:	d103      	bne.n	80048c2 <ceil+0xba>
 80048ba:	3101      	adds	r1, #1
 80048bc:	ea20 0002 	bic.w	r0, r0, r2
 80048c0:	e7c0      	b.n	8004844 <ceil+0x3c>
 80048c2:	2401      	movs	r4, #1
 80048c4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80048c8:	fa04 f303 	lsl.w	r3, r4, r3
 80048cc:	4418      	add	r0, r3
 80048ce:	42a8      	cmp	r0, r5
 80048d0:	bf38      	it	cc
 80048d2:	1909      	addcc	r1, r1, r4
 80048d4:	e7f2      	b.n	80048bc <ceil+0xb4>
 80048d6:	2000      	movs	r0, #0
 80048d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80048dc:	e7b2      	b.n	8004844 <ceil+0x3c>
 80048de:	4608      	mov	r0, r1
 80048e0:	e7b0      	b.n	8004844 <ceil+0x3c>
 80048e2:	bf00      	nop
 80048e4:	f3af 8000 	nop.w
 80048e8:	8800759c 	.word	0x8800759c
 80048ec:	7e37e43c 	.word	0x7e37e43c
 80048f0:	3ff00000 	.word	0x3ff00000
 80048f4:	000fffff 	.word	0x000fffff

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
