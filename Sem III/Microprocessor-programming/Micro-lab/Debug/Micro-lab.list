
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a70  08004a70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08004ae8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004ae8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b431  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001914  00000000  00000000  0002b4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cad  00000000  00000000  0002dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a71b  00000000  00000000  0005498d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1ba1  00000000  00000000  0005f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ffc  00000000  00000000  00150c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	080048a8 	.word	0x080048a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	080048a8 	.word	0x080048a8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <char_is_endmessage+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d101      	bne.n	800065a <char_is_endmessage+0x1a>
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <char_is_endmessage+0x1c>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <rx_has_data>:

uint8_t rx_has_data()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <rx_has_data+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <rx_has_data+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	d101      	bne.n	8000680 <rx_has_data+0x18>
	{
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <rx_has_data+0x1a>
	}
	else return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000014a 	.word	0x2000014a
 8000690:	2000014b 	.word	0x2000014b

08000694 <increase_rx_empty>:

void increase_rx_empty()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	rx_empty++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <increase_rx_empty+0x2c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b31      	cmp	r3, #49	; 0x31
 80006ae:	d902      	bls.n	80006b6 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <increase_rx_empty+0x2c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	2000014a 	.word	0x2000014a

080006c4 <increase_rx_busy>:

void increase_rx_busy()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	rx_busy++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <increase_rx_busy+0x2c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b31      	cmp	r3, #49	; 0x31
 80006de:	d902      	bls.n	80006e6 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <increase_rx_busy+0x2c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	2000014b 	.word	0x2000014b

080006f4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <get_char+0x24>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <get_char+0x28>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000708:	f7ff ffdc 	bl	80006c4 <increase_rx_busy>
	return tmp;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000014b 	.word	0x2000014b
 800071c:	20000118 	.word	0x20000118

08000720 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800072c:	e041      	b.n	80007b2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <get_message+0xa8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461c      	mov	r4, r3
 8000734:	f7ff ffde 	bl	80006f4 <get_char>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <get_message+0xac>)
 800073e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <get_message+0xa8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <get_message+0xac>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <char_is_endmessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d021      	beq.n	800079a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <get_message+0xa8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <get_message+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <get_message+0xac>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <get_message+0xa8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <get_message+0x48>
			}

			message_length = idx;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <get_message+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <get_message+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	e011      	b.n	80007be <get_message+0x9e>
		}
		else
		{
			idx++;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <get_message+0xa8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <get_message+0xa8>)
 80007a4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <get_message+0xa8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b32      	cmp	r3, #50	; 0x32
 80007ac:	d901      	bls.n	80007b2 <get_message+0x92>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e005      	b.n	80007be <get_message+0x9e>
	while(rx_has_data() == 1)
 80007b2:	f7ff ff59 	bl	8000668 <rx_has_data>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0b8      	beq.n	800072e <get_message+0xe>
		}
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001c6 	.word	0x200001c6
 80007cc:	200001c8 	.word	0x200001c8

080007d0 <turn_on_led>:

void turn_on_led()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <turn_on_led+0x14>)
 80007da:	f001 fb89 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400

080007e8 <turn_off_led>:

void turn_off_led()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <turn_off_led+0x14>)
 80007f2:	f001 fb7d 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <calculate_delay+0x58>)
 800080c:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000818:	edd7 6a03 	vldr	s13, [r7, #12]
 800081c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000820:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000824:	edd7 7a03 	vldr	s15, [r7, #12]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f003 ffc2 	bl	80047b8 <ceil>
 8000834:	eeb0 7b40 	vmov.f64	d7, d0
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000840:	edd7 7a03 	vldr	s15, [r7, #12]
 8000844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 800084e:	897b      	ldrh	r3, [r7, #10]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	447a0000 	.word	0x447a0000

0800085c <display_error>:

void display_error(char *error_info, size_t error_length)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	for (uint8_t i=0; i<error_length-1; i++)
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e009      	b.n	8000880 <display_error+0x24>
		uart_print(error_info[i]);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fecb 	bl	8000610 <uart_print>
	for (uint8_t i=0; i<error_length-1; i++)
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	3301      	adds	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	429a      	cmp	r2, r3
 8000888:	d3f0      	bcc.n	800086c <display_error+0x10>
	error_found = 0;
 800088a:	4b03      	ldr	r3, [pc, #12]	; (8000898 <display_error+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001c4 	.word	0x200001c4

0800089c <validate_command>:

uint8_t validate_command(char *single_command_message)
{
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b092      	sub	sp, #72	; 0x48
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t command_valid = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Command template arrays
	char led_on[] = "LED[ON]";
 80008aa:	4a46      	ldr	r2, [pc, #280]	; (80009c4 <validate_command+0x128>)
 80008ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
	char led_off[] = "LED[OFF]";
 80008b8:	4a43      	ldr	r2, [pc, #268]	; (80009c8 <validate_command+0x12c>)
 80008ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008be:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c0:	c303      	stmia	r3!, {r0, r1}
 80008c2:	701a      	strb	r2, [r3, #0]
	char led_blink[] = "LED[BLINK,X]";
 80008c4:	4b41      	ldr	r3, [pc, #260]	; (80009cc <validate_command+0x130>)
 80008c6:	f107 0420 	add.w	r4, r7, #32
 80008ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008cc:	c407      	stmia	r4!, {r0, r1, r2}
 80008ce:	7023      	strb	r3, [r4, #0]
	char insert_delay[] = "INSERT[DELAY,XXXX]";
 80008d0:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <validate_command+0x134>)
 80008d2:	f107 040c 	add.w	r4, r7, #12
 80008d6:	461d      	mov	r5, r3
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	682b      	ldr	r3, [r5, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	8022      	strh	r2, [r4, #0]
 80008e2:	3402      	adds	r4, #2
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	7023      	strb	r3, [r4, #0]

	// Compare command with templates
	if (strncmp(single_command_message, led_on, sizeof(led_on)) == 0)
 80008e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008ec:	2208      	movs	r2, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f003 febe 	bl	8004672 <strncmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <validate_command+0x68>
	{
		command_valid = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000902:	e059      	b.n	80009b8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_off, sizeof(led_off)) == 0)
 8000904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000908:	2209      	movs	r2, #9
 800090a:	4619      	mov	r1, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f003 feb0 	bl	8004672 <strncmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <validate_command+0x84>
	{
		command_valid = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800091e:	e04b      	b.n	80009b8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_blink, sizeof(led_blink)-3) == 0)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	220a      	movs	r2, #10
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f003 fea2 	bl	8004672 <strncmp>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d111      	bne.n	8000958 <validate_command+0xbc>
	{
		if ((single_command_message[10] >= 0x30 && single_command_message[10] <= 0x39) && single_command[11] == ']')
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	330a      	adds	r3, #10
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b2f      	cmp	r3, #47	; 0x2f
 800093c:	d93c      	bls.n	80009b8 <validate_command+0x11c>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	330a      	adds	r3, #10
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b39      	cmp	r3, #57	; 0x39
 8000946:	d837      	bhi.n	80009b8 <validate_command+0x11c>
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <validate_command+0x138>)
 800094a:	7adb      	ldrb	r3, [r3, #11]
 800094c:	2b5d      	cmp	r3, #93	; 0x5d
 800094e:	d133      	bne.n	80009b8 <validate_command+0x11c>
			command_valid = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000956:	e02f      	b.n	80009b8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, insert_delay, sizeof(insert_delay)-6) == 0)
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	220d      	movs	r2, #13
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f003 fe86 	bl	8004672 <strncmp>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d125      	bne.n	80009b8 <validate_command+0x11c>
	{
		for (uint8_t y=0; y<4; y++)
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000972:	e01d      	b.n	80009b0 <validate_command+0x114>
			if ((single_command_message[12+y] >= 0x30 && single_command_message[12+y] <= 0x39) && single_command[17] == ']')
 8000974:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000978:	330c      	adds	r3, #12
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b2f      	cmp	r3, #47	; 0x2f
 8000984:	d90f      	bls.n	80009a6 <validate_command+0x10a>
 8000986:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800098a:	330c      	adds	r3, #12
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b39      	cmp	r3, #57	; 0x39
 8000996:	d806      	bhi.n	80009a6 <validate_command+0x10a>
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <validate_command+0x138>)
 800099a:	7c5b      	ldrb	r3, [r3, #17]
 800099c:	2b5d      	cmp	r3, #93	; 0x5d
 800099e:	d102      	bne.n	80009a6 <validate_command+0x10a>
				command_valid = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for (uint8_t y=0; y<4; y++)
 80009a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009aa:	3301      	adds	r3, #1
 80009ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80009b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d9dd      	bls.n	8000974 <validate_command+0xd8>
	}

	return command_valid;
 80009b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3748      	adds	r7, #72	; 0x48
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bdb0      	pop	{r4, r5, r7, pc}
 80009c4:	080048c0 	.word	0x080048c0
 80009c8:	080048c8 	.word	0x080048c8
 80009cc:	080048d4 	.word	0x080048d4
 80009d0:	080048e4 	.word	0x080048e4
 80009d4:	2000018c 	.word	0x2000018c

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b0ac      	sub	sp, #176	; 0xb0
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009de:	f000 fd0d 	bl	80013fc <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80009e2:	f7ff fdab 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80009e6:	f7ff fdcf 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ea:	f000 fe34 	bl	8001656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ee:	f000 fc03 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f000 fc8d 	bl	8001310 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009f6:	f000 fc5b 	bl	80012b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	49ae      	ldr	r1, [pc, #696]	; (8000cb8 <main+0x2e0>)
 80009fe:	48af      	ldr	r0, [pc, #700]	; (8000cbc <main+0x2e4>)
 8000a00:	f002 fbb4 	bl	800316c <HAL_UART_Receive_IT>
  __IO uint16_t param_length;
  static uint16_t command_length;

  // LED command parameters
  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000a04:	4aae      	ldr	r2, [pc, #696]	; (8000cc0 <main+0x2e8>)
 8000a06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	8019      	strh	r1, [r3, #0]
 8000a10:	3302      	adds	r3, #2
 8000a12:	0c12      	lsrs	r2, r2, #16
 8000a14:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 8000a16:	4bab      	ldr	r3, [pc, #684]	; (8000cc4 <main+0x2ec>)
 8000a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  char blink_cmd[] = "BLINK,";
 8000a1c:	4aaa      	ldr	r2, [pc, #680]	; (8000cc8 <main+0x2f0>)
 8000a1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a26:	6018      	str	r0, [r3, #0]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	8019      	strh	r1, [r3, #0]
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	0c0a      	lsrs	r2, r1, #16
 8000a30:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 8000a32:	4aa6      	ldr	r2, [pc, #664]	; (8000ccc <main+0x2f4>)
 8000a34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a3c:	6018      	str	r0, [r3, #0]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	8019      	strh	r1, [r3, #0]
 8000a42:	3302      	adds	r3, #2
 8000a44:	0c0a      	lsrs	r2, r1, #16
 8000a46:	701a      	strb	r2, [r3, #0]

  // Error messages
  char invalid_command[] = "Error: Command not found\r\n";
 8000a48:	4ba1      	ldr	r3, [pc, #644]	; (8000cd0 <main+0x2f8>)
 8000a4a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000a4e:	461d      	mov	r5, r3
 8000a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a58:	c403      	stmia	r4!, {r0, r1}
 8000a5a:	8022      	strh	r2, [r4, #0]
 8000a5c:	3402      	adds	r4, #2
 8000a5e:	0c13      	lsrs	r3, r2, #16
 8000a60:	7023      	strb	r3, [r4, #0]
  char missing_separator[] = "Error: No command separator found\r\n";
 8000a62:	4b9c      	ldr	r3, [pc, #624]	; (8000cd4 <main+0x2fc>)
 8000a64:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a68:	461d      	mov	r5, r3
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a72:	682b      	ldr	r3, [r5, #0]
 8000a74:	6023      	str	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000a76:	4b90      	ldr	r3, [pc, #576]	; (8000cb8 <main+0x2e0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b0a      	cmp	r3, #10
 8000a7c:	d003      	beq.n	8000a86 <main+0xae>
 8000a7e:	4b8e      	ldr	r3, [pc, #568]	; (8000cb8 <main+0x2e0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b0d      	cmp	r3, #13
 8000a84:	d106      	bne.n	8000a94 <main+0xbc>
	{
		message_length = get_message(message);
 8000a86:	4894      	ldr	r0, [pc, #592]	; (8000cd8 <main+0x300>)
 8000a88:	f7ff fe4a 	bl	8000720 <get_message>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b92      	ldr	r3, [pc, #584]	; (8000cdc <main+0x304>)
 8000a92:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000a94:	4b91      	ldr	r3, [pc, #580]	; (8000cdc <main+0x304>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8375 	beq.w	800118a <main+0x7b2>
	{
		for (uint8_t i=0; i<message_length; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000aa6:	e368      	b.n	800117a <main+0x7a2>
		{
			// Check for command separator character
			command_separator = strchr(message, ';');
 8000aa8:	213b      	movs	r1, #59	; 0x3b
 8000aaa:	488b      	ldr	r0, [pc, #556]	; (8000cd8 <main+0x300>)
 8000aac:	f003 fdd4 	bl	8004658 <strchr>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a8b      	ldr	r2, [pc, #556]	; (8000ce0 <main+0x308>)
 8000ab4:	6013      	str	r3, [r2, #0]

			// If separator char was not found
			if (command_separator == NULL)
 8000ab6:	4b8a      	ldr	r3, [pc, #552]	; (8000ce0 <main+0x308>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d112      	bne.n	8000ae4 <main+0x10c>
			{
				while (i < message_length)
 8000abe:	e004      	b.n	8000aca <main+0xf2>
					i++;
 8000ac0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
				while (i < message_length)
 8000aca:	4b84      	ldr	r3, [pc, #528]	; (8000cdc <main+0x304>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3f3      	bcc.n	8000ac0 <main+0xe8>
				display_error(missing_separator, sizeof(missing_separator));
 8000ad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000adc:	2124      	movs	r1, #36	; 0x24
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff febc 	bl	800085c <display_error>
			}

			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000ae4:	4b7f      	ldr	r3, [pc, #508]	; (8000ce4 <main+0x30c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d105      	bne.n	8000afa <main+0x122>
 8000aee:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000af2:	4a79      	ldr	r2, [pc, #484]	; (8000cd8 <main+0x300>)
 8000af4:	5cd3      	ldrb	r3, [r2, r3]
 8000af6:	2b4c      	cmp	r3, #76	; 0x4c
 8000af8:	d00a      	beq.n	8000b10 <main+0x138>
 8000afa:	4b7a      	ldr	r3, [pc, #488]	; (8000ce4 <main+0x30c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d109      	bne.n	8000b18 <main+0x140>
 8000b04:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b08:	4a73      	ldr	r2, [pc, #460]	; (8000cd8 <main+0x300>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	2b49      	cmp	r3, #73	; 0x49
 8000b0e:	d103      	bne.n	8000b18 <main+0x140>
				sw_state = 1;
 8000b10:	4b74      	ldr	r3, [pc, #464]	; (8000ce4 <main+0x30c>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e019      	b.n	8000b4c <main+0x174>
			else if (sw_state == 0 && (message[i] != ';' && message[i] != '#' && message[i] != ','))
 8000b18:	4b72      	ldr	r3, [pc, #456]	; (8000ce4 <main+0x30c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d114      	bne.n	8000b4c <main+0x174>
 8000b22:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b26:	4a6c      	ldr	r2, [pc, #432]	; (8000cd8 <main+0x300>)
 8000b28:	5cd3      	ldrb	r3, [r2, r3]
 8000b2a:	2b3b      	cmp	r3, #59	; 0x3b
 8000b2c:	d00e      	beq.n	8000b4c <main+0x174>
 8000b2e:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b32:	4a69      	ldr	r2, [pc, #420]	; (8000cd8 <main+0x300>)
 8000b34:	5cd3      	ldrb	r3, [r2, r3]
 8000b36:	2b23      	cmp	r3, #35	; 0x23
 8000b38:	d008      	beq.n	8000b4c <main+0x174>
 8000b3a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b3e:	4a66      	ldr	r2, [pc, #408]	; (8000cd8 <main+0x300>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	2b2c      	cmp	r3, #44	; 0x2c
 8000b44:	d002      	beq.n	8000b4c <main+0x174>
				error_found = 1;
 8000b46:	4b68      	ldr	r3, [pc, #416]	; (8000ce8 <main+0x310>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000b4c:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <main+0x30c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	f200 82a9 	bhi.w	80010ac <main+0x6d4>
 8000b5a:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <main+0x188>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000c0b 	.word	0x08000c0b
 8000b68:	08000c4b 	.word	0x08000c4b
 8000b6c:	08000c8b 	.word	0x08000c8b
 8000b70:	08000d4d 	.word	0x08000d4d
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000b74:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b78:	3301      	adds	r3, #1
 8000b7a:	4a57      	ldr	r2, [pc, #348]	; (8000cd8 <main+0x300>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	2b45      	cmp	r3, #69	; 0x45
 8000b80:	d10f      	bne.n	8000ba2 <main+0x1ca>
 8000b82:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b86:	3302      	adds	r3, #2
 8000b88:	4a53      	ldr	r2, [pc, #332]	; (8000cd8 <main+0x300>)
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	2b44      	cmp	r3, #68	; 0x44
 8000b8e:	d108      	bne.n	8000ba2 <main+0x1ca>
				{
					i = i+2;
 8000b90:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b94:	3302      	adds	r3, #2
 8000b96:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
					sw_state = 2;
 8000b9a:	4b52      	ldr	r3, [pc, #328]	; (8000ce4 <main+0x30c>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e032      	b.n	8000c08 <main+0x230>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 8000ba2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a4b      	ldr	r2, [pc, #300]	; (8000cd8 <main+0x300>)
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	2b4e      	cmp	r3, #78	; 0x4e
 8000bae:	d124      	bne.n	8000bfa <main+0x222>
 8000bb0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <main+0x300>)
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	2b53      	cmp	r3, #83	; 0x53
 8000bbc:	d11d      	bne.n	8000bfa <main+0x222>
 8000bbe:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000bc2:	3303      	adds	r3, #3
 8000bc4:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <main+0x300>)
 8000bc6:	5cd3      	ldrb	r3, [r2, r3]
 8000bc8:	2b45      	cmp	r3, #69	; 0x45
 8000bca:	d116      	bne.n	8000bfa <main+0x222>
 8000bcc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <main+0x300>)
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	2b52      	cmp	r3, #82	; 0x52
 8000bd8:	d10f      	bne.n	8000bfa <main+0x222>
 8000bda:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000bde:	3305      	adds	r3, #5
 8000be0:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <main+0x300>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	2b54      	cmp	r3, #84	; 0x54
 8000be6:	d108      	bne.n	8000bfa <main+0x222>
				{
					i = i+5;
 8000be8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000bec:	3305      	adds	r3, #5
 8000bee:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
					sw_state = 2;
 8000bf2:	4b3c      	ldr	r3, [pc, #240]	; (8000ce4 <main+0x30c>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e006      	b.n	8000c08 <main+0x230>
				}
				else
				{
					error_found = 1;
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <main+0x310>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000c00:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <main+0x30c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000c06:	e251      	b.n	80010ac <main+0x6d4>
 8000c08:	e250      	b.n	80010ac <main+0x6d4>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000c0a:	215b      	movs	r1, #91	; 0x5b
 8000c0c:	4832      	ldr	r0, [pc, #200]	; (8000cd8 <main+0x300>)
 8000c0e:	f003 fd23 	bl	8004658 <strchr>
 8000c12:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000c16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10b      	bne.n	8000c36 <main+0x25e>
				{
					i = i+1;
 8000c1e:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000c22:	3301      	adds	r3, #1
 8000c24:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
					error_found = 1;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <main+0x310>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <main+0x30c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000c34:	e23a      	b.n	80010ac <main+0x6d4>
					open_idx = (uint16_t)(open_bracket - message);
 8000c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c3a:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <main+0x300>)
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
					sw_state = 3;
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <main+0x30c>)
 8000c44:	2203      	movs	r2, #3
 8000c46:	701a      	strb	r2, [r3, #0]
				break;
 8000c48:	e230      	b.n	80010ac <main+0x6d4>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000c4a:	215d      	movs	r1, #93	; 0x5d
 8000c4c:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <main+0x300>)
 8000c4e:	f003 fd03 	bl	8004658 <strchr>
 8000c52:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10b      	bne.n	8000c76 <main+0x29e>
				{
					i = i+1;
 8000c5e:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000c62:	3301      	adds	r3, #1
 8000c64:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
					error_found = 1;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <main+0x310>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <main+0x30c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000c74:	e21a      	b.n	80010ac <main+0x6d4>
					close_idx = (uint16_t)(close_bracket - message);
 8000c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <main+0x300>)
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					sw_state = 4;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <main+0x30c>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	701a      	strb	r2, [r3, #0]
				break;
 8000c88:	e210      	b.n	80010ac <main+0x6d4>

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000c8a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000c8e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3b01      	subs	r3, #1
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <main+0x314>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000caa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8000cb4:	e035      	b.n	8000d22 <main+0x34a>
 8000cb6:	bf00      	nop
 8000cb8:	20000114 	.word	0x20000114
 8000cbc:	2000008c 	.word	0x2000008c
 8000cc0:	080048f8 	.word	0x080048f8
 8000cc4:	0046464f 	.word	0x0046464f
 8000cc8:	080048fc 	.word	0x080048fc
 8000ccc:	08004904 	.word	0x08004904
 8000cd0:	0800490c 	.word	0x0800490c
 8000cd4:	08004928 	.word	0x08004928
 8000cd8:	2000014c 	.word	0x2000014c
 8000cdc:	2000017e 	.word	0x2000017e
 8000ce0:	200001c0 	.word	0x200001c0
 8000ce4:	2000017f 	.word	0x2000017f
 8000ce8:	200001c4 	.word	0x200001c4
 8000cec:	200001fa 	.word	0x200001fa
				{
					command[j] = message[y];
 8000cf0:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8000cf4:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8000cf8:	49b8      	ldr	r1, [pc, #736]	; (8000fdc <main+0x604>)
 8000cfa:	5c8a      	ldrb	r2, [r1, r2]
 8000cfc:	33b0      	adds	r3, #176	; 0xb0
 8000cfe:	443b      	add	r3, r7
 8000d00:	f803 2cac 	strb.w	r2, [r3, #-172]
					j++;
 8000d04:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8000d08:	3301      	adds	r3, #1
 8000d0a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
					command_length = j;
 8000d0e:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4bb2      	ldr	r3, [pc, #712]	; (8000fe0 <main+0x608>)
 8000d16:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000d18:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8000d22:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8000d26:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3e0      	bcc.n	8000cf0 <main+0x318>
				}

				if (command_length == param_length)
 8000d2e:	4bac      	ldr	r3, [pc, #688]	; (8000fe0 <main+0x608>)
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d103      	bne.n	8000d44 <main+0x36c>
					sw_state = 5;
 8000d3c:	4ba9      	ldr	r3, [pc, #676]	; (8000fe4 <main+0x60c>)
 8000d3e:	2205      	movs	r2, #5
 8000d40:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 8000d42:	e1b3      	b.n	80010ac <main+0x6d4>
					sw_state = 0;
 8000d44:	4ba7      	ldr	r3, [pc, #668]	; (8000fe4 <main+0x60c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
				break;
 8000d4a:	e1af      	b.n	80010ac <main+0x6d4>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 8000d4c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000d50:	3301      	adds	r3, #1
 8000d52:	4aa2      	ldr	r2, [pc, #648]	; (8000fdc <main+0x604>)
 8000d54:	5cd3      	ldrb	r3, [r2, r3]
 8000d56:	2b3b      	cmp	r3, #59	; 0x3b
 8000d58:	d009      	beq.n	8000d6e <main+0x396>
				{
					display_error(missing_separator, sizeof(missing_separator));
 8000d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d5e:	2124      	movs	r1, #36	; 0x24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fd7b 	bl	800085c <display_error>
					sw_state = 0;
 8000d66:	4b9f      	ldr	r3, [pc, #636]	; (8000fe4 <main+0x60c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
					break;
 8000d6c:	e19e      	b.n	80010ac <main+0x6d4>
				}

				// Test CRC validation
				for (uint8_t y=0; y<param_length; y++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000d74:	e00d      	b.n	8000d92 <main+0x3ba>
					uart_print(command[y]);
 8000d76:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000d7a:	33b0      	adds	r3, #176	; 0xb0
 8000d7c:	443b      	add	r3, r7
 8000d7e:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fc44 	bl	8000610 <uart_print>
				for (uint8_t y=0; y<param_length; y++)
 8000d88:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000d92:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3e9      	bcc.n	8000d76 <main+0x39e>
				uart_print('\r');
 8000da2:	200d      	movs	r0, #13
 8000da4:	f7ff fc34 	bl	8000610 <uart_print>
				uart_print('\n');
 8000da8:	200a      	movs	r0, #10
 8000daa:	f7ff fc31 	bl	8000610 <uart_print>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 8000dae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 8000db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000db8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fc57 	bl	8004672 <strncmp>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d13b      	bne.n	8000e42 <main+0x46a>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<7; y++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8000dd0:	e010      	b.n	8000df4 <main+0x41c>
						single_command[y] = message[close_idx-6+y];
 8000dd2:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000dd6:	1f9a      	subs	r2, r3, #6
 8000dd8:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000ddc:	441a      	add	r2, r3
 8000dde:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000de2:	497e      	ldr	r1, [pc, #504]	; (8000fdc <main+0x604>)
 8000de4:	5c89      	ldrb	r1, [r1, r2]
 8000de6:	4a80      	ldr	r2, [pc, #512]	; (8000fe8 <main+0x610>)
 8000de8:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<7; y++)
 8000dea:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000dee:	3301      	adds	r3, #1
 8000df0:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8000df4:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000df8:	2b06      	cmp	r3, #6
 8000dfa:	d9ea      	bls.n	8000dd2 <main+0x3fa>

					// Validate last command
					temp_check = validate_command(single_command);
 8000dfc:	487a      	ldr	r0, [pc, #488]	; (8000fe8 <main+0x610>)
 8000dfe:	f7ff fd4d 	bl	800089c <validate_command>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b79      	ldr	r3, [pc, #484]	; (8000fec <main+0x614>)
 8000e08:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8000e0a:	4b78      	ldr	r3, [pc, #480]	; (8000fec <main+0x614>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10f      	bne.n	8000e34 <main+0x45c>
					{
						i = i+param_length;
 8000e14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000e20:	4413      	add	r3, r2
 8000e22:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						error_found = 0;
 8000e26:	4b72      	ldr	r3, [pc, #456]	; (8000ff0 <main+0x618>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]

						// Turn on LED
						led_action = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000e32:	e11b      	b.n	800106c <main+0x694>
					}
					else
					{
						error_found = 1;
 8000e34:	4b6e      	ldr	r3, [pc, #440]	; (8000ff0 <main+0x618>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8000e3a:	4b6a      	ldr	r3, [pc, #424]	; (8000fe4 <main+0x60c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e114      	b.n	800106c <main+0x694>
					}
				}
				else if (strncmp(command, off_cmd, len) == 0)
 8000e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e44:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fc11 	bl	8004672 <strncmp>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d13b      	bne.n	8000ece <main+0x4f6>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<8; y++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8000e5c:	e010      	b.n	8000e80 <main+0x4a8>
						single_command[y] = message[close_idx-7+y];
 8000e5e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000e62:	1fda      	subs	r2, r3, #7
 8000e64:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8000e68:	441a      	add	r2, r3
 8000e6a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8000e6e:	495b      	ldr	r1, [pc, #364]	; (8000fdc <main+0x604>)
 8000e70:	5c89      	ldrb	r1, [r1, r2]
 8000e72:	4a5d      	ldr	r2, [pc, #372]	; (8000fe8 <main+0x610>)
 8000e74:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<8; y++)
 8000e76:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8000e80:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	d9ea      	bls.n	8000e5e <main+0x486>

					// Validate last command
					temp_check = validate_command(single_command);
 8000e88:	4857      	ldr	r0, [pc, #348]	; (8000fe8 <main+0x610>)
 8000e8a:	f7ff fd07 	bl	800089c <validate_command>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b56      	ldr	r3, [pc, #344]	; (8000fec <main+0x614>)
 8000e94:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8000e96:	4b55      	ldr	r3, [pc, #340]	; (8000fec <main+0x614>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10f      	bne.n	8000ec0 <main+0x4e8>
					{
						i = i+param_length;
 8000ea0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000eac:	4413      	add	r3, r2
 8000eae:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						error_found = 0;
 8000eb2:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <main+0x618>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]

						// Turn off LED
						led_action = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000ebe:	e0d5      	b.n	800106c <main+0x694>
					}
					else
					{
						error_found = 1;
 8000ec0:	4b4b      	ldr	r3, [pc, #300]	; (8000ff0 <main+0x618>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8000ec6:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <main+0x60c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	e0ce      	b.n	800106c <main+0x694>
					}
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 8000ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fbca 	bl	8004672 <strncmp>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d13f      	bne.n	8000f64 <main+0x58c>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<12; y++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8000eea:	e011      	b.n	8000f10 <main+0x538>
						single_command[y] = message[close_idx-11+y];
 8000eec:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000ef0:	f1a3 020b 	sub.w	r2, r3, #11
 8000ef4:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8000ef8:	441a      	add	r2, r3
 8000efa:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8000efe:	4937      	ldr	r1, [pc, #220]	; (8000fdc <main+0x604>)
 8000f00:	5c89      	ldrb	r1, [r1, r2]
 8000f02:	4a39      	ldr	r2, [pc, #228]	; (8000fe8 <main+0x610>)
 8000f04:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<12; y++)
 8000f06:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8000f10:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8000f14:	2b0b      	cmp	r3, #11
 8000f16:	d9e9      	bls.n	8000eec <main+0x514>

					// Validate last command
					temp_check = validate_command(single_command);
 8000f18:	4833      	ldr	r0, [pc, #204]	; (8000fe8 <main+0x610>)
 8000f1a:	f7ff fcbf 	bl	800089c <validate_command>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <main+0x614>)
 8000f24:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <main+0x614>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d112      	bne.n	8000f56 <main+0x57e>
					{
						i = i+param_length;
 8000f30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						error_found = 0;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <main+0x618>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]

						// Enable LED blink
						blink_setup = 1;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <main+0x61c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000f54:	e08a      	b.n	800106c <main+0x694>
					}
					else
					{
						error_found = 1;
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <main+0x618>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <main+0x60c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e083      	b.n	800106c <main+0x694>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 8000f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f66:	1f1a      	subs	r2, r3, #4
 8000f68:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fb7f 	bl	8004672 <strncmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d178      	bne.n	800106c <main+0x694>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8000f80:	e024      	b.n	8000fcc <main+0x5f4>
						if (message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39)
 8000f82:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000f86:	1f1a      	subs	r2, r3, #4
 8000f88:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <main+0x604>)
 8000f90:	5cd3      	ldrb	r3, [r2, r3]
 8000f92:	2b2f      	cmp	r3, #47	; 0x2f
 8000f94:	d91e      	bls.n	8000fd4 <main+0x5fc>
 8000f96:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000f9a:	1f1a      	subs	r2, r3, #4
 8000f9c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <main+0x604>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	2b39      	cmp	r3, #57	; 0x39
 8000fa8:	d814      	bhi.n	8000fd4 <main+0x5fc>
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 8000faa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000fae:	1f1a      	subs	r2, r3, #4
 8000fb0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000fb4:	441a      	add	r2, r3
 8000fb6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <main+0x604>)
 8000fbc:	5c89      	ldrb	r1, [r1, r2]
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <main+0x620>)
 8000fc0:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<4; y++)
 8000fc2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8000fcc:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d9d6      	bls.n	8000f82 <main+0x5aa>
						else
							break;

					// Store last command in a separate array
					for (uint8_t y=0; y<18; y++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8000fda:	e021      	b.n	8001020 <main+0x648>
 8000fdc:	2000014c 	.word	0x2000014c
 8000fe0:	200001fa 	.word	0x200001fa
 8000fe4:	2000017f 	.word	0x2000017f
 8000fe8:	2000018c 	.word	0x2000018c
 8000fec:	200001c5 	.word	0x200001c5
 8000ff0:	200001c4 	.word	0x200001c4
 8000ff4:	20000180 	.word	0x20000180
 8000ff8:	20000188 	.word	0x20000188
						single_command[y] = message[close_idx-17+y];
 8000ffc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001000:	f1a3 0211 	sub.w	r2, r3, #17
 8001004:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001008:	441a      	add	r2, r3
 800100a:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800100e:	496e      	ldr	r1, [pc, #440]	; (80011c8 <main+0x7f0>)
 8001010:	5c89      	ldrb	r1, [r1, r2]
 8001012:	4a6e      	ldr	r2, [pc, #440]	; (80011cc <main+0x7f4>)
 8001014:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<18; y++)
 8001016:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800101a:	3301      	adds	r3, #1
 800101c:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8001020:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001024:	2b11      	cmp	r3, #17
 8001026:	d9e9      	bls.n	8000ffc <main+0x624>

					// Validate last command
					temp_check = validate_command(single_command);
 8001028:	4868      	ldr	r0, [pc, #416]	; (80011cc <main+0x7f4>)
 800102a:	f7ff fc37 	bl	800089c <validate_command>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <main+0x7f8>)
 8001034:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001036:	4b66      	ldr	r3, [pc, #408]	; (80011d0 <main+0x7f8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10f      	bne.n	8001060 <main+0x688>
					{
						i = i+param_length;
 8001040:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001044:	b29b      	uxth	r3, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800104c:	4413      	add	r3, r2
 800104e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
						error_found = 0;
 8001052:	4b60      	ldr	r3, [pc, #384]	; (80011d4 <main+0x7fc>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

						// Enable the delay
						led_action = 3;
 8001058:	2303      	movs	r3, #3
 800105a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800105e:	e005      	b.n	800106c <main+0x694>
					}
					else
					{
						error_found = 1;
 8001060:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <main+0x7fc>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001066:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <main+0x800>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
					}
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 800106c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001070:	4a55      	ldr	r2, [pc, #340]	; (80011c8 <main+0x7f0>)
 8001072:	2123      	movs	r1, #35	; 0x23
 8001074:	54d1      	strb	r1, [r2, r3]
				message[close_idx] = '#';
 8001076:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800107a:	4a53      	ldr	r2, [pc, #332]	; (80011c8 <main+0x7f0>)
 800107c:	2123      	movs	r1, #35	; 0x23
 800107e:	54d1      	strb	r1, [r2, r3]

				// Clear the single_command array
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 8001080:	2300      	movs	r3, #0
 8001082:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8001086:	e009      	b.n	800109c <main+0x6c4>
					single_command[y] = '\0';
 8001088:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800108c:	4a4f      	ldr	r2, [pc, #316]	; (80011cc <main+0x7f4>)
 800108e:	2100      	movs	r1, #0
 8001090:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 8001092:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001096:	3301      	adds	r3, #1
 8001098:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800109c:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80010a0:	2b31      	cmp	r3, #49	; 0x31
 80010a2:	d9f1      	bls.n	8001088 <main+0x6b0>

				// Reset sw_state
				sw_state = 0;
 80010a4:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <main+0x800>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
				break;
 80010aa:	bf00      	nop
			} /* sw_state switch end */

			// Display error alert
			if (error_found == 1)
 80010ac:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <main+0x7fc>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d117      	bne.n	80010e6 <main+0x70e>
			{
				while (message[i] != ';')
 80010b6:	e004      	b.n	80010c2 <main+0x6ea>
					i++;
 80010b8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80010bc:	3301      	adds	r3, #1
 80010be:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
				while (message[i] != ';')
 80010c2:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <main+0x7f0>)
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	2b3b      	cmp	r3, #59	; 0x3b
 80010cc:	d1f4      	bne.n	80010b8 <main+0x6e0>
				if (message[i] == ';')
 80010ce:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80010d2:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <main+0x7f0>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	2b3b      	cmp	r3, #59	; 0x3b
 80010d8:	d105      	bne.n	80010e6 <main+0x70e>
					display_error(invalid_command, sizeof(invalid_command));
 80010da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010de:	211b      	movs	r1, #27
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fbbb 	bl	800085c <display_error>
			}

			// Diode control switch
			switch (led_action)
 80010e6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d83f      	bhi.n	8001170 <main+0x798>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <main+0x720>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001109 	.word	0x08001109
 80010fc:	0800110f 	.word	0x0800110f
 8001100:	08001115 	.word	0x08001115
 8001104:	0800115f 	.word	0x0800115f
			{
			case 0:
				// Turn off LED
				turn_off_led();
 8001108:	f7ff fb6e 	bl	80007e8 <turn_off_led>
				break;
 800110c:	e030      	b.n	8001170 <main+0x798>

			case 1:
				// Turn on LED
				turn_on_led();
 800110e:	f7ff fb5f 	bl	80007d0 <turn_on_led>
				break;
 8001112:	e02d      	b.n	8001170 <main+0x798>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <main+0x804>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d127      	bne.n	800116e <main+0x796>
				{
					delay = message[close_idx-1] - '0';
 800111e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001122:	3b01      	subs	r3, #1
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <main+0x7f0>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	3b30      	subs	r3, #48	; 0x30
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <main+0x808>)
 800112e:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <main+0x808>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <main+0x76a>
						blink_ms = 0;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <main+0x80c>)
 800113c:	2200      	movs	r2, #0
 800113e:	801a      	strh	r2, [r3, #0]
 8001140:	e009      	b.n	8001156 <main+0x77e>
					else
						blink_ms = calculate_delay(delay);
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <main+0x808>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fb59 	bl	8000800 <calculate_delay>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <main+0x80c>)
 8001154:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <main+0x804>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800115c:	e007      	b.n	800116e <main+0x796>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 800115e:	4822      	ldr	r0, [pc, #136]	; (80011e8 <main+0x810>)
 8001160:	f003 fa44 	bl	80045ec <atoi>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <main+0x814>)
 800116a:	801a      	strh	r2, [r3, #0]
				break;
 800116c:	e000      	b.n	8001170 <main+0x798>
				break;
 800116e:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8001170:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001174:	3301      	adds	r3, #1
 8001176:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <main+0x818>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8001184:	429a      	cmp	r2, r3
 8001186:	f4ff ac8f 	bcc.w	8000aa8 <main+0xd0>
		} /* for loop end */
	} /* if statement end */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (blink_ms != 0 && (led_action == 2 || led_action == 3))
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <main+0x80c>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d013      	beq.n	80011bc <main+0x7e4>
 8001194:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d004      	beq.n	80011a8 <main+0x7d0>
 800119e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d109      	bne.n	80011bc <main+0x7e4>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <main+0x81c>)
 80011ac:	f000 feb9 	bl	8001f22 <HAL_GPIO_TogglePin>
		HAL_Delay(blink_ms);
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <main+0x80c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 faaa 	bl	8001710 <HAL_Delay>
	}

	// Start the delay
	HAL_Delay(loop_delay);
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <main+0x814>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 faa5 	bl	8001710 <HAL_Delay>
	if (character == '\n' || character == '\r')
 80011c6:	e456      	b.n	8000a76 <main+0x9e>
 80011c8:	2000014c 	.word	0x2000014c
 80011cc:	2000018c 	.word	0x2000018c
 80011d0:	200001c5 	.word	0x200001c5
 80011d4:	200001c4 	.word	0x200001c4
 80011d8:	2000017f 	.word	0x2000017f
 80011dc:	20000180 	.word	0x20000180
 80011e0:	20000181 	.word	0x20000181
 80011e4:	20000182 	.word	0x20000182
 80011e8:	20000188 	.word	0x20000188
 80011ec:	20000184 	.word	0x20000184
 80011f0:	2000017e 	.word	0x2000017e
 80011f4:	40020400 	.word	0x40020400

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2234      	movs	r2, #52	; 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fa1e 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <SystemClock_Config+0xb0>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <SystemClock_Config+0xb0>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <SystemClock_Config+0xb0>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <SystemClock_Config+0xb4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <SystemClock_Config+0xb4>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <SystemClock_Config+0xb4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2310      	movs	r3, #16
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fe77 	bl	8001f58 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001270:	f000 f8f0 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f001 f910 	bl	80024b4 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800129a:	f000 f8db 	bl	8001454 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <MX_USART3_UART_Init+0x5c>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART3_UART_Init+0x58>)
 80012f4:	f001 feec 	bl	80030d0 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f8a9 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000008c 	.word	0x2000008c
 800130c:	40004800 	.word	0x40004800

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_GPIO_Init+0x8c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_GPIO_Init+0x8c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_GPIO_Init+0x8c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_GPIO_Init+0x8c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <MX_GPIO_Init+0x8c>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_GPIO_Init+0x8c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_GPIO_Init+0x8c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a10      	ldr	r2, [pc, #64]	; (800139c <MX_GPIO_Init+0x8c>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_GPIO_Init+0x8c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <MX_GPIO_Init+0x90>)
 8001374:	f000 fdbc 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_GPIO_Init+0x90>)
 8001390:	f000 fc02 	bl	8001b98 <HAL_GPIO_Init>

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_RxCpltCallback+0x44>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f92d 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_UART_RxCpltCallback+0x48>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d10e      	bne.n	80013de <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_UART_RxCpltCallback+0x4c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_UART_RxCpltCallback+0x44>)
 80013ca:	7819      	ldrb	r1, [r3, #0]
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_UART_RxCpltCallback+0x50>)
 80013ce:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 80013d0:	f7ff f960 	bl	8000694 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	4904      	ldr	r1, [pc, #16]	; (80013e8 <HAL_UART_RxCpltCallback+0x44>)
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <HAL_UART_RxCpltCallback+0x54>)
 80013da:	f001 fec7 	bl	800316c <HAL_UART_Receive_IT>
	}
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000114 	.word	0x20000114
 80013ec:	40004800 	.word	0x40004800
 80013f0:	2000014a 	.word	0x2000014a
 80013f4:	20000118 	.word	0x20000118
 80013f8:	2000008c 	.word	0x2000008c

080013fc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800140e:	f000 fab5 	bl	800197c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001412:	2301      	movs	r3, #1
 8001414:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001416:	2300      	movs	r3, #0
 8001418:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800141e:	231f      	movs	r3, #31
 8001420:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001422:	2387      	movs	r3, #135	; 0x87
 8001424:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001426:	2300      	movs	r3, #0
 8001428:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800142a:	2300      	movs	r3, #0
 800142c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001432:	2301      	movs	r3, #1
 8001434:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fad3 	bl	80019ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001446:	2004      	movs	r0, #4
 8001448:	f000 fab0 	bl	80019ac <HAL_MPU_Enable>

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x44>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_MspInit+0x44>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_MspInit+0x44>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_MspInit+0x44>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_MspInit+0x44>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_MspInit+0x44>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0ae      	sub	sp, #184	; 0xb8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2290      	movs	r2, #144	; 0x90
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 f8bd 	bl	8004648 <memset>
  if(huart->Instance==USART3)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_UART_MspInit+0xc4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d144      	bne.n	8001562 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014de:	2300      	movs	r3, #0
 80014e0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f9ca 	bl	8002880 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014f2:	f7ff ffaf 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_UART_MspInit+0xc8>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_UART_MspInit+0xc8>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_UART_MspInit+0xc8>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_UART_MspInit+0xc8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_UART_MspInit+0xc8>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_UART_MspInit+0xc8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001526:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001540:	2307      	movs	r3, #7
 8001542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001546:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800154a:	4619      	mov	r1, r3
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <HAL_UART_MspInit+0xcc>)
 800154e:	f000 fb23 	bl	8001b98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2027      	movs	r0, #39	; 0x27
 8001558:	f000 f9d9 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800155c:	2027      	movs	r0, #39	; 0x27
 800155e:	f000 f9f2 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	37b8      	adds	r7, #184	; 0xb8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40004800 	.word	0x40004800
 8001570:	40023800 	.word	0x40023800
 8001574:	40020c00 	.word	0x40020c00

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f000 f884 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <USART3_IRQHandler+0x10>)
 80015d2:	f001 fe0f 	bl	80031f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000008c 	.word	0x2000008c

080015e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162e:	f7ff ffd7 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f002 ffe5 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff f9cf 	bl	80009d8 <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001648:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 800164c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001650:	20000200 	.word	0x20000200

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>

08001656 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f94c 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001660:	200f      	movs	r0, #15
 8001662:	f000 f805 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001666:	f7ff fefb 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f967 	bl	8001962 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f92f 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	200001fc 	.word	0x200001fc

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200001fc 	.word	0x200001fc

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <__NVIC_SetPriorityGrouping+0x40>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	4313      	orrs	r3, r2
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x40>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	05fa0000 	.word	0x05fa0000

080017a0 <__NVIC_GetPriorityGrouping>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001980:	f3bf 8f5f 	dmb	sy
}
 8001984:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_MPU_Disable+0x28>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_MPU_Disable+0x28>)
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_MPU_Disable+0x2c>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	e000ed90 	.word	0xe000ed90

080019ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_MPU_Enable+0x38>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_MPU_Enable+0x3c>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_MPU_Enable+0x3c>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019ca:	f3bf 8f4f 	dsb	sy
}
 80019ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d0:	f3bf 8f6f 	isb	sy
}
 80019d4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed90 	.word	0xe000ed90
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	785a      	ldrb	r2, [r3, #1]
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_MPU_ConfigRegion+0x84>)
 80019fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d029      	beq.n	8001a58 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_MPU_ConfigRegion+0x84>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7b1b      	ldrb	r3, [r3, #12]
 8001a10:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7adb      	ldrb	r3, [r3, #11]
 8001a16:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7a9b      	ldrb	r3, [r3, #10]
 8001a1e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7b5b      	ldrb	r3, [r3, #13]
 8001a26:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7b9b      	ldrb	r3, [r3, #14]
 8001a2e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7bdb      	ldrb	r3, [r3, #15]
 8001a36:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7a5b      	ldrb	r3, [r3, #9]
 8001a3e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7a1b      	ldrb	r3, [r3, #8]
 8001a46:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a48:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a52:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a54:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a56:	e005      	b.n	8001a64 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_MPU_ConfigRegion+0x84>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_MPU_ConfigRegion+0x84>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed90 	.word	0xe000ed90

08001a74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7ff fe39 	bl	80016f8 <HAL_GetTick>
 8001a86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d008      	beq.n	8001aa6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e052      	b.n	8001b4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0216 	bic.w	r2, r2, #22
 8001ab4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_DMA_Abort+0x62>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0208 	bic.w	r2, r2, #8
 8001ae4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af6:	e013      	b.n	8001b20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af8:	f7ff fdfe 	bl	80016f8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d90c      	bls.n	8001b20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e015      	b.n	8001b4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1e4      	bne.n	8001af8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	223f      	movs	r2, #63	; 0x3f
 8001b34:	409a      	lsls	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d004      	beq.n	8001b72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00c      	b.n	8001b8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2205      	movs	r2, #5
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e175      	b.n	8001ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8164 	bne.w	8001e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d005      	beq.n	8001bee <HAL_GPIO_Init+0x56>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d130      	bne.n	8001c50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d017      	beq.n	8001c8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80be 	beq.w	8001e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a65      	ldr	r2, [pc, #404]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d3a:	4a61      	ldr	r2, [pc, #388]	; (8001ec0 <HAL_GPIO_Init+0x328>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_GPIO_Init+0x32c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d037      	beq.n	8001dd6 <HAL_GPIO_Init+0x23e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a57      	ldr	r2, [pc, #348]	; (8001ec8 <HAL_GPIO_Init+0x330>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d031      	beq.n	8001dd2 <HAL_GPIO_Init+0x23a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a56      	ldr	r2, [pc, #344]	; (8001ecc <HAL_GPIO_Init+0x334>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02b      	beq.n	8001dce <HAL_GPIO_Init+0x236>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a55      	ldr	r2, [pc, #340]	; (8001ed0 <HAL_GPIO_Init+0x338>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d025      	beq.n	8001dca <HAL_GPIO_Init+0x232>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a54      	ldr	r2, [pc, #336]	; (8001ed4 <HAL_GPIO_Init+0x33c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01f      	beq.n	8001dc6 <HAL_GPIO_Init+0x22e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a53      	ldr	r2, [pc, #332]	; (8001ed8 <HAL_GPIO_Init+0x340>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x22a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x344>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <HAL_GPIO_Init+0x348>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a50      	ldr	r2, [pc, #320]	; (8001ee4 <HAL_GPIO_Init+0x34c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x21a>
 8001dae:	2309      	movs	r3, #9
 8001db0:	e012      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001db2:	230a      	movs	r3, #10
 8001db4:	e010      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001db6:	2308      	movs	r3, #8
 8001db8:	e00e      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001de8:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_GPIO_Init+0x328>)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1a:	4a34      	ldr	r2, [pc, #208]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e44:	4a29      	ldr	r2, [pc, #164]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_GPIO_Init+0x354>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	f67f ae86 	bls.w	8001bb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	40021c00 	.word	0x40021c00
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40022400 	.word	0x40022400
 8001eec:	40013c00 	.word	0x40013c00

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f0c:	e003      	b.n	8001f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	619a      	str	r2, [r3, #24]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f34:	887a      	ldrh	r2, [r7, #2]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	041a      	lsls	r2, r3, #16
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	400b      	ands	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	619a      	str	r2, [r3, #24]
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e29b      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7c:	4b96      	ldr	r3, [pc, #600]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f88:	4b93      	ldr	r3, [pc, #588]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d112      	bne.n	8001fba <HAL_RCC_OscConfig+0x62>
 8001f94:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06c      	beq.n	8002088 <HAL_RCC_OscConfig+0x130>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d168      	bne.n	8002088 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e275      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x7a>
 8001fc4:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a83      	ldr	r2, [pc, #524]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0xd8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x9c>
 8001fda:	4b7f      	ldr	r3, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7e      	ldr	r2, [pc, #504]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7b      	ldr	r2, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0xd8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0xc0>
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a72      	ldr	r2, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0xd8>
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b6c      	ldr	r3, [pc, #432]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6b      	ldr	r2, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fb5e 	bl	80016f8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fb5a 	bl	80016f8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e229      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0xe8>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fb4a 	bl	80016f8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fb46 	bl	80016f8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e215      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x110>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d069      	beq.n	800216a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002096:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a2:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d11c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x190>
 80020ae:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e1e9      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	493d      	ldr	r1, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	e040      	b.n	800216a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d023      	beq.n	8002138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f0:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a38      	ldr	r2, [pc, #224]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff fafc 	bl	80016f8 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7ff faf8 	bl	80016f8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1c7      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4929      	ldr	r1, [pc, #164]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
 8002136:	e018      	b.n	800216a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff fad8 	bl	80016f8 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7ff fad4 	bl	80016f8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1a3      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d038      	beq.n	80021e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d019      	beq.n	80021b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7ff fab5 	bl	80016f8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002192:	f7ff fab1 	bl	80016f8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e180      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80021a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x23a>
 80021b0:	e01a      	b.n	80021e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80021b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_RCC_OscConfig+0x280>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7ff fa9b 	bl	80016f8 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c6:	f7ff fa97 	bl	80016f8 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d903      	bls.n	80021dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e166      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
 80021d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80021de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ee      	bne.n	80021c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a4 	beq.w	800233e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10d      	bne.n	800221e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a88      	ldr	r2, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b86      	ldr	r3, [pc, #536]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221e:	4b83      	ldr	r3, [pc, #524]	; (800242c <HAL_RCC_OscConfig+0x4d4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d118      	bne.n	800225c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800222a:	4b80      	ldr	r3, [pc, #512]	; (800242c <HAL_RCC_OscConfig+0x4d4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7f      	ldr	r2, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x4d4>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7ff fa5f 	bl	80016f8 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7ff fa5b 	bl	80016f8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b64      	cmp	r3, #100	; 0x64
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e12a      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002250:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x4d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x31a>
 8002264:	4b70      	ldr	r3, [pc, #448]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a6f      	ldr	r2, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	e02d      	b.n	80022ce <HAL_RCC_OscConfig+0x376>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x33c>
 800227a:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	e01c      	b.n	80022ce <HAL_RCC_OscConfig+0x376>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x35e>
 800229c:	4b62      	ldr	r3, [pc, #392]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a61      	ldr	r2, [pc, #388]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0x376>
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	4b59      	ldr	r3, [pc, #356]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	4a58      	ldr	r2, [pc, #352]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d015      	beq.n	8002302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7ff fa0f 	bl	80016f8 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7ff fa0b 	bl	80016f8 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0d8      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ee      	beq.n	80022de <HAL_RCC_OscConfig+0x386>
 8002300:	e014      	b.n	800232c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7ff f9f9 	bl	80016f8 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7ff f9f5 	bl	80016f8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0c2      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a3c      	ldr	r2, [pc, #240]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80ae 	beq.w	80024a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d06d      	beq.n	8002430 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d14b      	bne.n	80023f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a31      	ldr	r2, [pc, #196]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff f9c6 	bl	80016f8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff f9c2 	bl	80016f8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e091      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	071b      	lsls	r3, r3, #28
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff f994 	bl	80016f8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7ff f990 	bl	80016f8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e05f      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x47c>
 80023f2:	e057      	b.n	80024a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7ff f97a 	bl	80016f8 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f976 	bl	80016f8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e045      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_RCC_OscConfig+0x4d0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x4b0>
 8002426:	e03d      	b.n	80024a4 <HAL_RCC_OscConfig+0x54c>
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <HAL_RCC_OscConfig+0x558>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d030      	beq.n	80024a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d129      	bne.n	80024a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d122      	bne.n	80024a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002460:	4013      	ands	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002468:	4293      	cmp	r3, r2
 800246a:	d119      	bne.n	80024a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	3b01      	subs	r3, #1
 800247a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d10f      	bne.n	80024a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0d0      	b.n	800266e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d910      	bls.n	80024fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 020f 	bic.w	r2, r3, #15
 80024e2:	4965      	ldr	r1, [pc, #404]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0b8      	b.n	800266e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	494d      	ldr	r1, [pc, #308]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d040      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d115      	bne.n	8002596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e07f      	b.n	800266e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e073      	b.n	800266e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06b      	b.n	800266e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4936      	ldr	r1, [pc, #216]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7ff f8a6 	bl	80016f8 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7ff f8a2 	bl	80016f8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e053      	b.n	800266e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d210      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 020f 	bic.w	r2, r3, #15
 80025ee:	4922      	ldr	r1, [pc, #136]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e032      	b.n	800266e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4916      	ldr	r1, [pc, #88]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	490e      	ldr	r1, [pc, #56]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002646:	f000 f821 	bl	800268c <HAL_RCC_GetSysClockFreq>
 800264a:	4602      	mov	r2, r0
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x1cc>)
 8002658:	5ccb      	ldrb	r3, [r1, r3]
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1d0>)
 8002660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1d4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff f802 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023c00 	.word	0x40023c00
 800267c:	40023800 	.word	0x40023800
 8002680:	0800494c 	.word	0x0800494c
 8002684:	20000000 	.word	0x20000000
 8002688:	20000004 	.word	0x20000004

0800268c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800268c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002690:	b090      	sub	sp, #64	; 0x40
 8002692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
 8002698:	2300      	movs	r3, #0
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_GetSysClockFreq+0x180>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d00d      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x40>
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	f200 80a1 	bhi.w	80027f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d003      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026be:	e09b      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_GetSysClockFreq+0x184>)
 80026c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026c4:	e09b      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_GetSysClockFreq+0x188>)
 80026c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ca:	e098      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <HAL_RCC_GetSysClockFreq+0x180>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026d6:	4b4d      	ldr	r3, [pc, #308]	; (800280c <HAL_RCC_GetSysClockFreq+0x180>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d028      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e2:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_RCC_GetSysClockFreq+0x180>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	2200      	movs	r2, #0
 80026ea:	623b      	str	r3, [r7, #32]
 80026ec:	627a      	str	r2, [r7, #36]	; 0x24
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026f4:	2100      	movs	r1, #0
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCC_GetSysClockFreq+0x188>)
 80026f8:	fb03 f201 	mul.w	r2, r3, r1
 80026fc:	2300      	movs	r3, #0
 80026fe:	fb00 f303 	mul.w	r3, r0, r3
 8002702:	4413      	add	r3, r2
 8002704:	4a43      	ldr	r2, [pc, #268]	; (8002814 <HAL_RCC_GetSysClockFreq+0x188>)
 8002706:	fba0 1202 	umull	r1, r2, r0, r2
 800270a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800270c:	460a      	mov	r2, r1
 800270e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002712:	4413      	add	r3, r2
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	2200      	movs	r2, #0
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	61fa      	str	r2, [r7, #28]
 800271e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002722:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002726:	f7fd fd87 	bl	8000238 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4613      	mov	r3, r2
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002732:	e053      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002734:	4b35      	ldr	r3, [pc, #212]	; (800280c <HAL_RCC_GetSysClockFreq+0x180>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	2200      	movs	r2, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	617a      	str	r2, [r7, #20]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002746:	f04f 0b00 	mov.w	fp, #0
 800274a:	4652      	mov	r2, sl
 800274c:	465b      	mov	r3, fp
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0159      	lsls	r1, r3, #5
 8002758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275c:	0150      	lsls	r0, r2, #5
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ebb2 080a 	subs.w	r8, r2, sl
 8002766:	eb63 090b 	sbc.w	r9, r3, fp
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002776:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800277a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800277e:	ebb2 0408 	subs.w	r4, r2, r8
 8002782:	eb63 0509 	sbc.w	r5, r3, r9
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	00eb      	lsls	r3, r5, #3
 8002790:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002794:	00e2      	lsls	r2, r4, #3
 8002796:	4614      	mov	r4, r2
 8002798:	461d      	mov	r5, r3
 800279a:	eb14 030a 	adds.w	r3, r4, sl
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	eb45 030b 	adc.w	r3, r5, fp
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b2:	4629      	mov	r1, r5
 80027b4:	028b      	lsls	r3, r1, #10
 80027b6:	4621      	mov	r1, r4
 80027b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027bc:	4621      	mov	r1, r4
 80027be:	028a      	lsls	r2, r1, #10
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	2200      	movs	r2, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	60fa      	str	r2, [r7, #12]
 80027cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d0:	f7fd fd32 	bl	8000238 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4613      	mov	r3, r2
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_GetSysClockFreq+0x180>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	3301      	adds	r3, #1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80027ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetSysClockFreq+0x184>)
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002800:	4618      	mov	r0, r3
 8002802:	3740      	adds	r7, #64	; 0x40
 8002804:	46bd      	mov	sp, r7
 8002806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400
 8002814:	017d7840 	.word	0x017d7840

08002818 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0a9b      	lsrs	r3, r3, #10
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4903      	ldr	r1, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	0800495c 	.word	0x0800495c

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800285c:	f7ff ffdc 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0b5b      	lsrs	r3, r3, #13
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	0800495c 	.word	0x0800495c

08002880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a8:	4b69      	ldr	r3, [pc, #420]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a68      	ldr	r2, [pc, #416]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	4964      	ldr	r1, [pc, #400]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	4959      	ldr	r1, [pc, #356]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002916:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	494a      	ldr	r1, [pc, #296]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 808b 	beq.w	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800297c:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002988:	f7fe feb6 	bl	80016f8 <HAL_GetTick>
 800298c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002990:	f7fe feb2 	bl	80016f8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e38f      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ae:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d035      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d02e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d114      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fe7a 	bl	80016f8 <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe fe76 	bl	80016f8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e351      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a36:	d111      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a46:	400b      	ands	r3, r1
 8002a48:	4901      	ldr	r1, [pc, #4]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
 8002a58:	0ffffcff 	.word	0x0ffffcff
 8002a5c:	4bac      	ldr	r3, [pc, #688]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4aab      	ldr	r2, [pc, #684]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	4ba9      	ldr	r3, [pc, #676]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	49a6      	ldr	r1, [pc, #664]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a86:	4ba2      	ldr	r3, [pc, #648]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	4aa0      	ldr	r2, [pc, #640]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a96:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	499b      	ldr	r1, [pc, #620]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab4:	4b96      	ldr	r3, [pc, #600]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac2:	4993      	ldr	r1, [pc, #588]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ad6:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae4:	498a      	ldr	r1, [pc, #552]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af8:	4b85      	ldr	r3, [pc, #532]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	4982      	ldr	r1, [pc, #520]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b1a:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4979      	ldr	r1, [pc, #484]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3c:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4971      	ldr	r1, [pc, #452]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f023 020c 	bic.w	r2, r3, #12
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6c:	4968      	ldr	r1, [pc, #416]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4960      	ldr	r1, [pc, #384]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	4957      	ldr	r1, [pc, #348]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc4:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	494f      	ldr	r1, [pc, #316]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	4946      	ldr	r1, [pc, #280]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	493e      	ldr	r1, [pc, #248]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c2a:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	4935      	ldr	r1, [pc, #212]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5a:	492d      	ldr	r1, [pc, #180]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7c:	4924      	ldr	r1, [pc, #144]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbc:	4914      	ldr	r1, [pc, #80]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce0:	490b      	ldr	r1, [pc, #44]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00f      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d04:	4902      	ldr	r1, [pc, #8]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d20:	4b8a      	ldr	r3, [pc, #552]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	4986      	ldr	r1, [pc, #536]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d44:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d54:	497d      	ldr	r1, [pc, #500]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d006      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80d6 	beq.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d70:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a75      	ldr	r2, [pc, #468]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fcbc 	bl	80016f8 <HAL_GetTick>
 8002d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d84:	f7fe fcb8 	bl	80016f8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e195      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d96:	4b6d      	ldr	r3, [pc, #436]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d021      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc4:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dca:	0e1b      	lsrs	r3, r3, #24
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	019a      	lsls	r2, r3, #6
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	4958      	ldr	r1, [pc, #352]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1c:	d129      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e2c:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e32:	0f1b      	lsrs	r3, r3, #28
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	019a      	lsls	r2, r3, #6
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	071b      	lsls	r3, r3, #28
 8002e52:	493e      	ldr	r1, [pc, #248]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e60:	f023 021f 	bic.w	r2, r3, #31
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	4938      	ldr	r1, [pc, #224]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01d      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e7e:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e84:	0e1b      	lsrs	r3, r3, #24
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	0f1b      	lsrs	r3, r3, #28
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	019a      	lsls	r2, r3, #6
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	4926      	ldr	r1, [pc, #152]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	019a      	lsls	r2, r3, #6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	491a      	ldr	r1, [pc, #104]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef6:	f7fe fbff 	bl	80016f8 <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002efe:	f7fe fbfb 	bl	80016f8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	f040 80ce 	bne.w	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe fbe2 	bl	80016f8 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f36:	e00b      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f38:	f7fe fbde 	bl	80016f8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d904      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0bb      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f50:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f5c:	d0ec      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02e      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d12a      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f94:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	4944      	ldr	r1, [pc, #272]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fc2:	4b42      	ldr	r3, [pc, #264]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	493d      	ldr	r1, [pc, #244]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d022      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff0:	d11d      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	0e1b      	lsrs	r3, r3, #24
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	0f1b      	lsrs	r3, r3, #28
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4929      	ldr	r1, [pc, #164]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d028      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	0e1b      	lsrs	r3, r3, #24
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	019a      	lsls	r2, r3, #6
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	4917      	ldr	r1, [pc, #92]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	4911      	ldr	r1, [pc, #68]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003098:	f7fe fb2e 	bl	80016f8 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030a0:	f7fe fb2a 	bl	80016f8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e007      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030be:	d1ef      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e040      	b.n	8003164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe f9d8 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fb82 	bl	8003818 <UART_SetConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fdda 	bl	8003ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800314a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fe61 	bl	8003e24 <UART_CheckIdleState>
 8003162:	4603      	mov	r3, r0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003180:	2b20      	cmp	r3, #32
 8003182:	d132      	bne.n	80031ea <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_UART_Receive_IT+0x24>
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02b      	b.n	80031ec <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d018      	beq.n	80031da <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	613b      	str	r3, [r7, #16]
   return(result);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	69f9      	ldr	r1, [r7, #28]
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e6      	bne.n	80031a8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	461a      	mov	r2, r3
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 ff33 	bl	800404c <UART_Start_Receive_IT>
 80031e6:	4603      	mov	r3, r0
 80031e8:	e000      	b.n	80031ec <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3728      	adds	r7, #40	; 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b0ba      	sub	sp, #232	; 0xe8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800321a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800321e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003222:	4013      	ands	r3, r2
 8003224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d115      	bne.n	800325c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00f      	beq.n	800325c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 82ac 	beq.w	80037aa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
      }
      return;
 800325a:	e2a6      	b.n	80037aa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800325c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8117 	beq.w	8003494 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003276:	4b85      	ldr	r3, [pc, #532]	; (800348c <HAL_UART_IRQHandler+0x298>)
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 810a 	beq.w	8003494 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d011      	beq.n	80032b0 <HAL_UART_IRQHandler+0xbc>
 800328c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2201      	movs	r2, #1
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d011      	beq.n	80032e0 <HAL_UART_IRQHandler+0xec>
 80032bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00b      	beq.n	80032e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2202      	movs	r2, #2
 80032ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	f043 0204 	orr.w	r2, r3, #4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d011      	beq.n	8003310 <HAL_UART_IRQHandler+0x11c>
 80032ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2204      	movs	r2, #4
 80032fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003306:	f043 0202 	orr.w	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d017      	beq.n	800334c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800332c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2208      	movs	r2, #8
 800333a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	f043 0208 	orr.w	r2, r3, #8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800334c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <HAL_UART_IRQHandler+0x18a>
 8003358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00c      	beq.n	800337e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8212 	beq.w	80037ae <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d005      	beq.n	80033d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d04f      	beq.n	8003476 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fefe 	bl	80041d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d141      	bne.n	800346e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3308      	adds	r3, #8
 80033f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3308      	adds	r3, #8
 8003412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800341a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800342e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1d9      	bne.n	80033ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	2b00      	cmp	r3, #0
 800343c:	d013      	beq.n	8003466 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003442:	4a13      	ldr	r2, [pc, #76]	; (8003490 <HAL_UART_IRQHandler+0x29c>)
 8003444:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fb82 	bl	8001b54 <HAL_DMA_Abort_IT>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d017      	beq.n	8003486 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003460:	4610      	mov	r0, r2
 8003462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	e00f      	b.n	8003486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f9b6 	bl	80037d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	e00b      	b.n	8003486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f9b2 	bl	80037d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	e007      	b.n	8003486 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9ae 	bl	80037d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003484:	e193      	b.n	80037ae <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003486:	bf00      	nop
    return;
 8003488:	e191      	b.n	80037ae <HAL_UART_IRQHandler+0x5ba>
 800348a:	bf00      	nop
 800348c:	04000120 	.word	0x04000120
 8003490:	080042a1 	.word	0x080042a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	2b01      	cmp	r3, #1
 800349a:	f040 814c 	bne.w	8003736 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8145 	beq.w	8003736 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 813e 	beq.w	8003736 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2210      	movs	r2, #16
 80034c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	f040 80b6 	bne.w	800363e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8165 	beq.w	80037b2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034f2:	429a      	cmp	r2, r3
 80034f4:	f080 815d 	bcs.w	80037b2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350c:	f000 8086 	beq.w	800361c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800352c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800353a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800353e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003546:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1da      	bne.n	8003510 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3308      	adds	r3, #8
 8003560:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800356a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800357e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003582:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003586:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e1      	bne.n	800355a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3308      	adds	r3, #8
 800359c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3308      	adds	r3, #8
 80035b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e3      	bne.n	8003596 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ec:	f023 0310 	bic.w	r3, r3, #16
 80035f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003600:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800360c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e4      	bne.n	80035dc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fa2c 	bl	8001a74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800362e:	b29b      	uxth	r3, r3
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	b29b      	uxth	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8d8 	bl	80037ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800363c:	e0b9      	b.n	80037b2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800364a:	b29b      	uxth	r3, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80ab 	beq.w	80037b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a6 	beq.w	80037b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800367e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800368c:	647b      	str	r3, [r7, #68]	; 0x44
 800368e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800369a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e4      	bne.n	800366a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	623b      	str	r3, [r7, #32]
   return(result);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3308      	adds	r3, #8
 80036c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036c4:	633a      	str	r2, [r7, #48]	; 0x30
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e3      	bne.n	80036a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f023 0310 	bic.w	r3, r3, #16
 8003700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	617b      	str	r3, [r7, #20]
   return(result);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e4      	bne.n	80036ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f85c 	bl	80037ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003734:	e03f      	b.n	80037b6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00e      	beq.n	8003760 <HAL_UART_IRQHandler+0x56c>
 8003742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f853 	bl	8003804 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800375e:	e02d      	b.n	80037bc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01c      	beq.n	80037ba <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	4798      	blx	r3
    }
    return;
 8003788:	e017      	b.n	80037ba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d012      	beq.n	80037bc <HAL_UART_IRQHandler+0x5c8>
 8003796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fd92 	bl	80042cc <UART_EndTransmit_IT>
    return;
 80037a8:	e008      	b.n	80037bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80037aa:	bf00      	nop
 80037ac:	e006      	b.n	80037bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80037ae:	bf00      	nop
 80037b0:	e004      	b.n	80037bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <HAL_UART_IRQHandler+0x5c8>
      return;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_UART_IRQHandler+0x5c8>
    return;
 80037ba:	bf00      	nop
  }

}
 80037bc:	37e8      	adds	r7, #232	; 0xe8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop

080037c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4ba6      	ldr	r3, [pc, #664]	; (8003adc <UART_SetConfig+0x2c4>)
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	430b      	orrs	r3, r1
 800384e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	430a      	orrs	r2, r1
 8003888:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a94      	ldr	r2, [pc, #592]	; (8003ae0 <UART_SetConfig+0x2c8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d120      	bne.n	80038d6 <UART_SetConfig+0xbe>
 8003894:	4b93      	ldr	r3, [pc, #588]	; (8003ae4 <UART_SetConfig+0x2cc>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d816      	bhi.n	80038d0 <UART_SetConfig+0xb8>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <UART_SetConfig+0x90>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038c5 	.word	0x080038c5
 80038b0:	080038bf 	.word	0x080038bf
 80038b4:	080038cb 	.word	0x080038cb
 80038b8:	2301      	movs	r3, #1
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e150      	b.n	8003b60 <UART_SetConfig+0x348>
 80038be:	2302      	movs	r3, #2
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e14d      	b.n	8003b60 <UART_SetConfig+0x348>
 80038c4:	2304      	movs	r3, #4
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e14a      	b.n	8003b60 <UART_SetConfig+0x348>
 80038ca:	2308      	movs	r3, #8
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e147      	b.n	8003b60 <UART_SetConfig+0x348>
 80038d0:	2310      	movs	r3, #16
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e144      	b.n	8003b60 <UART_SetConfig+0x348>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a83      	ldr	r2, [pc, #524]	; (8003ae8 <UART_SetConfig+0x2d0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d132      	bne.n	8003946 <UART_SetConfig+0x12e>
 80038e0:	4b80      	ldr	r3, [pc, #512]	; (8003ae4 <UART_SetConfig+0x2cc>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d828      	bhi.n	8003940 <UART_SetConfig+0x128>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <UART_SetConfig+0xdc>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003929 	.word	0x08003929
 80038f8:	08003941 	.word	0x08003941
 80038fc:	08003941 	.word	0x08003941
 8003900:	08003941 	.word	0x08003941
 8003904:	08003935 	.word	0x08003935
 8003908:	08003941 	.word	0x08003941
 800390c:	08003941 	.word	0x08003941
 8003910:	08003941 	.word	0x08003941
 8003914:	0800392f 	.word	0x0800392f
 8003918:	08003941 	.word	0x08003941
 800391c:	08003941 	.word	0x08003941
 8003920:	08003941 	.word	0x08003941
 8003924:	0800393b 	.word	0x0800393b
 8003928:	2300      	movs	r3, #0
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e118      	b.n	8003b60 <UART_SetConfig+0x348>
 800392e:	2302      	movs	r3, #2
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e115      	b.n	8003b60 <UART_SetConfig+0x348>
 8003934:	2304      	movs	r3, #4
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e112      	b.n	8003b60 <UART_SetConfig+0x348>
 800393a:	2308      	movs	r3, #8
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e10f      	b.n	8003b60 <UART_SetConfig+0x348>
 8003940:	2310      	movs	r3, #16
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e10c      	b.n	8003b60 <UART_SetConfig+0x348>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a68      	ldr	r2, [pc, #416]	; (8003aec <UART_SetConfig+0x2d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d120      	bne.n	8003992 <UART_SetConfig+0x17a>
 8003950:	4b64      	ldr	r3, [pc, #400]	; (8003ae4 <UART_SetConfig+0x2cc>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800395a:	2b30      	cmp	r3, #48	; 0x30
 800395c:	d013      	beq.n	8003986 <UART_SetConfig+0x16e>
 800395e:	2b30      	cmp	r3, #48	; 0x30
 8003960:	d814      	bhi.n	800398c <UART_SetConfig+0x174>
 8003962:	2b20      	cmp	r3, #32
 8003964:	d009      	beq.n	800397a <UART_SetConfig+0x162>
 8003966:	2b20      	cmp	r3, #32
 8003968:	d810      	bhi.n	800398c <UART_SetConfig+0x174>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <UART_SetConfig+0x15c>
 800396e:	2b10      	cmp	r3, #16
 8003970:	d006      	beq.n	8003980 <UART_SetConfig+0x168>
 8003972:	e00b      	b.n	800398c <UART_SetConfig+0x174>
 8003974:	2300      	movs	r3, #0
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e0f2      	b.n	8003b60 <UART_SetConfig+0x348>
 800397a:	2302      	movs	r3, #2
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e0ef      	b.n	8003b60 <UART_SetConfig+0x348>
 8003980:	2304      	movs	r3, #4
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e0ec      	b.n	8003b60 <UART_SetConfig+0x348>
 8003986:	2308      	movs	r3, #8
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e0e9      	b.n	8003b60 <UART_SetConfig+0x348>
 800398c:	2310      	movs	r3, #16
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e0e6      	b.n	8003b60 <UART_SetConfig+0x348>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a56      	ldr	r2, [pc, #344]	; (8003af0 <UART_SetConfig+0x2d8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d120      	bne.n	80039de <UART_SetConfig+0x1c6>
 800399c:	4b51      	ldr	r3, [pc, #324]	; (8003ae4 <UART_SetConfig+0x2cc>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039a6:	2bc0      	cmp	r3, #192	; 0xc0
 80039a8:	d013      	beq.n	80039d2 <UART_SetConfig+0x1ba>
 80039aa:	2bc0      	cmp	r3, #192	; 0xc0
 80039ac:	d814      	bhi.n	80039d8 <UART_SetConfig+0x1c0>
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d009      	beq.n	80039c6 <UART_SetConfig+0x1ae>
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d810      	bhi.n	80039d8 <UART_SetConfig+0x1c0>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <UART_SetConfig+0x1a8>
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d006      	beq.n	80039cc <UART_SetConfig+0x1b4>
 80039be:	e00b      	b.n	80039d8 <UART_SetConfig+0x1c0>
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e0cc      	b.n	8003b60 <UART_SetConfig+0x348>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e0c9      	b.n	8003b60 <UART_SetConfig+0x348>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0c6      	b.n	8003b60 <UART_SetConfig+0x348>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e0c3      	b.n	8003b60 <UART_SetConfig+0x348>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e0c0      	b.n	8003b60 <UART_SetConfig+0x348>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a44      	ldr	r2, [pc, #272]	; (8003af4 <UART_SetConfig+0x2dc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d125      	bne.n	8003a34 <UART_SetConfig+0x21c>
 80039e8:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <UART_SetConfig+0x2cc>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f6:	d017      	beq.n	8003a28 <UART_SetConfig+0x210>
 80039f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fc:	d817      	bhi.n	8003a2e <UART_SetConfig+0x216>
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d00b      	beq.n	8003a1c <UART_SetConfig+0x204>
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d811      	bhi.n	8003a2e <UART_SetConfig+0x216>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <UART_SetConfig+0x1fe>
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d006      	beq.n	8003a22 <UART_SetConfig+0x20a>
 8003a14:	e00b      	b.n	8003a2e <UART_SetConfig+0x216>
 8003a16:	2300      	movs	r3, #0
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e0a1      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e09e      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a22:	2304      	movs	r3, #4
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e09b      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a28:	2308      	movs	r3, #8
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e098      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a2e:	2310      	movs	r3, #16
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e095      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2f      	ldr	r2, [pc, #188]	; (8003af8 <UART_SetConfig+0x2e0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d125      	bne.n	8003a8a <UART_SetConfig+0x272>
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <UART_SetConfig+0x2cc>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a4c:	d017      	beq.n	8003a7e <UART_SetConfig+0x266>
 8003a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a52:	d817      	bhi.n	8003a84 <UART_SetConfig+0x26c>
 8003a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a58:	d00b      	beq.n	8003a72 <UART_SetConfig+0x25a>
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	d811      	bhi.n	8003a84 <UART_SetConfig+0x26c>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <UART_SetConfig+0x254>
 8003a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a68:	d006      	beq.n	8003a78 <UART_SetConfig+0x260>
 8003a6a:	e00b      	b.n	8003a84 <UART_SetConfig+0x26c>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e076      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a72:	2302      	movs	r3, #2
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e073      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e070      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e06d      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a84:	2310      	movs	r3, #16
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e06a      	b.n	8003b60 <UART_SetConfig+0x348>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <UART_SetConfig+0x2e4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d138      	bne.n	8003b06 <UART_SetConfig+0x2ee>
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <UART_SetConfig+0x2cc>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aa2:	d017      	beq.n	8003ad4 <UART_SetConfig+0x2bc>
 8003aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aa8:	d82a      	bhi.n	8003b00 <UART_SetConfig+0x2e8>
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d00b      	beq.n	8003ac8 <UART_SetConfig+0x2b0>
 8003ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab4:	d824      	bhi.n	8003b00 <UART_SetConfig+0x2e8>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <UART_SetConfig+0x2aa>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d006      	beq.n	8003ace <UART_SetConfig+0x2b6>
 8003ac0:	e01e      	b.n	8003b00 <UART_SetConfig+0x2e8>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e04b      	b.n	8003b60 <UART_SetConfig+0x348>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e048      	b.n	8003b60 <UART_SetConfig+0x348>
 8003ace:	2304      	movs	r3, #4
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e045      	b.n	8003b60 <UART_SetConfig+0x348>
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e042      	b.n	8003b60 <UART_SetConfig+0x348>
 8003ada:	bf00      	nop
 8003adc:	efff69f3 	.word	0xefff69f3
 8003ae0:	40011000 	.word	0x40011000
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40004400 	.word	0x40004400
 8003aec:	40004800 	.word	0x40004800
 8003af0:	40004c00 	.word	0x40004c00
 8003af4:	40005000 	.word	0x40005000
 8003af8:	40011400 	.word	0x40011400
 8003afc:	40007800 	.word	0x40007800
 8003b00:	2310      	movs	r3, #16
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e02c      	b.n	8003b60 <UART_SetConfig+0x348>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a72      	ldr	r2, [pc, #456]	; (8003cd4 <UART_SetConfig+0x4bc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d125      	bne.n	8003b5c <UART_SetConfig+0x344>
 8003b10:	4b71      	ldr	r3, [pc, #452]	; (8003cd8 <UART_SetConfig+0x4c0>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b1e:	d017      	beq.n	8003b50 <UART_SetConfig+0x338>
 8003b20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b24:	d817      	bhi.n	8003b56 <UART_SetConfig+0x33e>
 8003b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2a:	d00b      	beq.n	8003b44 <UART_SetConfig+0x32c>
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b30:	d811      	bhi.n	8003b56 <UART_SetConfig+0x33e>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <UART_SetConfig+0x326>
 8003b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b3a:	d006      	beq.n	8003b4a <UART_SetConfig+0x332>
 8003b3c:	e00b      	b.n	8003b56 <UART_SetConfig+0x33e>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e00d      	b.n	8003b60 <UART_SetConfig+0x348>
 8003b44:	2302      	movs	r3, #2
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e00a      	b.n	8003b60 <UART_SetConfig+0x348>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e007      	b.n	8003b60 <UART_SetConfig+0x348>
 8003b50:	2308      	movs	r3, #8
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e004      	b.n	8003b60 <UART_SetConfig+0x348>
 8003b56:	2310      	movs	r3, #16
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e001      	b.n	8003b60 <UART_SetConfig+0x348>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	d15b      	bne.n	8003c22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d828      	bhi.n	8003bc2 <UART_SetConfig+0x3aa>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <UART_SetConfig+0x360>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003ba5 	.word	0x08003ba5
 8003b80:	08003bad 	.word	0x08003bad
 8003b84:	08003bc3 	.word	0x08003bc3
 8003b88:	08003bb3 	.word	0x08003bb3
 8003b8c:	08003bc3 	.word	0x08003bc3
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bc3 	.word	0x08003bc3
 8003b98:	08003bbb 	.word	0x08003bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe fe48 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	61b8      	str	r0, [r7, #24]
        break;
 8003ba2:	e013      	b.n	8003bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7fe fe58 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003ba8:	61b8      	str	r0, [r7, #24]
        break;
 8003baa:	e00f      	b.n	8003bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <UART_SetConfig+0x4c4>)
 8003bae:	61bb      	str	r3, [r7, #24]
        break;
 8003bb0:	e00c      	b.n	8003bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7fe fd6b 	bl	800268c <HAL_RCC_GetSysClockFreq>
 8003bb6:	61b8      	str	r0, [r7, #24]
        break;
 8003bb8:	e008      	b.n	8003bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e004      	b.n	8003bcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d074      	beq.n	8003cbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	005a      	lsls	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	d916      	bls.n	8003c1c <UART_SetConfig+0x404>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d212      	bcs.n	8003c1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f023 030f 	bic.w	r3, r3, #15
 8003bfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	89fb      	ldrh	r3, [r7, #14]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	89fa      	ldrh	r2, [r7, #14]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	e04f      	b.n	8003cbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	77bb      	strb	r3, [r7, #30]
 8003c20:	e04c      	b.n	8003cbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d828      	bhi.n	8003c7a <UART_SetConfig+0x462>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <UART_SetConfig+0x418>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c5d 	.word	0x08003c5d
 8003c38:	08003c65 	.word	0x08003c65
 8003c3c:	08003c7b 	.word	0x08003c7b
 8003c40:	08003c6b 	.word	0x08003c6b
 8003c44:	08003c7b 	.word	0x08003c7b
 8003c48:	08003c7b 	.word	0x08003c7b
 8003c4c:	08003c7b 	.word	0x08003c7b
 8003c50:	08003c73 	.word	0x08003c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c54:	f7fe fdec 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003c58:	61b8      	str	r0, [r7, #24]
        break;
 8003c5a:	e013      	b.n	8003c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c5c:	f7fe fdfc 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003c60:	61b8      	str	r0, [r7, #24]
        break;
 8003c62:	e00f      	b.n	8003c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <UART_SetConfig+0x4c4>)
 8003c66:	61bb      	str	r3, [r7, #24]
        break;
 8003c68:	e00c      	b.n	8003c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6a:	f7fe fd0f 	bl	800268c <HAL_RCC_GetSysClockFreq>
 8003c6e:	61b8      	str	r0, [r7, #24]
        break;
 8003c70:	e008      	b.n	8003c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c76:	61bb      	str	r3, [r7, #24]
        break;
 8003c78:	e004      	b.n	8003c84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	77bb      	strb	r3, [r7, #30]
        break;
 8003c82:	bf00      	nop
    }

    if (pclk != 0U)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d018      	beq.n	8003cbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	085a      	lsrs	r2, r3, #1
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	441a      	add	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b0f      	cmp	r3, #15
 8003ca2:	d909      	bls.n	8003cb8 <UART_SetConfig+0x4a0>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003caa:	d205      	bcs.n	8003cb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	e001      	b.n	8003cbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40007c00 	.word	0x40007c00
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	00f42400 	.word	0x00f42400

08003ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01a      	beq.n	8003df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dde:	d10a      	bne.n	8003df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e34:	f7fd fc60 	bl	80016f8 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d10e      	bne.n	8003e66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f831 	bl	8003ebe <UART_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e027      	b.n	8003eb6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d10e      	bne.n	8003e92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f81b 	bl	8003ebe <UART_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e011      	b.n	8003eb6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b09c      	sub	sp, #112	; 0x70
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	e0a7      	b.n	8004020 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	f000 80a3 	beq.w	8004020 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fd fc0d 	bl	80016f8 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13f      	bne.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f04:	667b      	str	r3, [r7, #100]	; 0x64
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e6      	bne.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	663b      	str	r3, [r7, #96]	; 0x60
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f42:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e068      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d050      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8c:	d148      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e6      	bne.n	8003f98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fea:	623a      	str	r2, [r7, #32]
 8003fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	69f9      	ldr	r1, [r7, #28]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e5      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e010      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	429a      	cmp	r2, r3
 800403c:	f43f af48 	beq.w	8003ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3770      	adds	r7, #112	; 0x70
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b097      	sub	sp, #92	; 0x5c
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d10e      	bne.n	800409e <UART_Start_Receive_IT+0x52>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <UART_Start_Receive_IT+0x48>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800408e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004092:	e02d      	b.n	80040f0 <UART_Start_Receive_IT+0xa4>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800409c:	e028      	b.n	80040f0 <UART_Start_Receive_IT+0xa4>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10d      	bne.n	80040c2 <UART_Start_Receive_IT+0x76>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <UART_Start_Receive_IT+0x6c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	22ff      	movs	r2, #255	; 0xff
 80040b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040b6:	e01b      	b.n	80040f0 <UART_Start_Receive_IT+0xa4>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	227f      	movs	r2, #127	; 0x7f
 80040bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c0:	e016      	b.n	80040f0 <UART_Start_Receive_IT+0xa4>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ca:	d10d      	bne.n	80040e8 <UART_Start_Receive_IT+0x9c>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <UART_Start_Receive_IT+0x92>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	227f      	movs	r2, #127	; 0x7f
 80040d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040dc:	e008      	b.n	80040f0 <UART_Start_Receive_IT+0xa4>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	223f      	movs	r2, #63	; 0x3f
 80040e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e6:	e003      	b.n	80040f0 <UART_Start_Receive_IT+0xa4>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2222      	movs	r2, #34	; 0x22
 80040fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	657b      	str	r3, [r7, #84]	; 0x54
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004120:	64ba      	str	r2, [r7, #72]	; 0x48
 8004122:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413c:	d107      	bne.n	800414e <UART_Start_Receive_IT+0x102>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <UART_Start_Receive_IT+0x184>)
 800414a:	669a      	str	r2, [r3, #104]	; 0x68
 800414c:	e002      	b.n	8004154 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <UART_Start_Receive_IT+0x188>)
 8004152:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d019      	beq.n	8004190 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004170:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
 800417c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e6      	bne.n	800415c <UART_Start_Receive_IT+0x110>
 800418e:	e018      	b.n	80041c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	613b      	str	r3, [r7, #16]
   return(result);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f043 0320 	orr.w	r3, r3, #32
 80041a4:	653b      	str	r3, [r7, #80]	; 0x50
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	69f9      	ldr	r1, [r7, #28]
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e6      	bne.n	8004190 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	375c      	adds	r7, #92	; 0x5c
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	08004487 	.word	0x08004487
 80041d4:	08004321 	.word	0x08004321

080041d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b095      	sub	sp, #84	; 0x54
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004200:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e6      	bne.n	80041e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	61fb      	str	r3, [r7, #28]
   return(result);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3308      	adds	r3, #8
 8004230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e5      	bne.n	8004212 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424a:	2b01      	cmp	r3, #1
 800424c:	d118      	bne.n	8004280 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	60bb      	str	r3, [r7, #8]
   return(result);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f023 0310 	bic.w	r3, r3, #16
 8004262:	647b      	str	r3, [r7, #68]	; 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6979      	ldr	r1, [r7, #20]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	613b      	str	r3, [r7, #16]
   return(result);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e6      	bne.n	800424e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004294:	bf00      	nop
 8004296:	3754      	adds	r7, #84	; 0x54
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff fa8a 	bl	80037d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6979      	ldr	r1, [r7, #20]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e6      	bne.n	80042d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fa56 	bl	80037c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004318:	bf00      	nop
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b096      	sub	sp, #88	; 0x58
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800432e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004338:	2b22      	cmp	r3, #34	; 0x22
 800433a:	f040 8098 	bne.w	800446e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004348:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800434c:	b2d9      	uxtb	r1, r3
 800434e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004352:	b2da      	uxtb	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	400a      	ands	r2, r1
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d17b      	bne.n	800447e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004396:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800439a:	653b      	str	r3, [r7, #80]	; 0x50
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
 80043a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e6      	bne.n	8004386 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	623b      	str	r3, [r7, #32]
   return(result);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043d8:	633a      	str	r2, [r7, #48]	; 0x30
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004404:	2b01      	cmp	r3, #1
 8004406:	d12e      	bne.n	8004466 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	60fb      	str	r3, [r7, #12]
   return(result);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	617b      	str	r3, [r7, #20]
   return(result);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d103      	bne.n	8004456 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2210      	movs	r2, #16
 8004454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff f9c4 	bl	80037ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004464:	e00b      	b.n	800447e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc ff9c 	bl	80013a4 <HAL_UART_RxCpltCallback>
}
 800446c:	e007      	b.n	800447e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0208 	orr.w	r2, r2, #8
 800447c:	619a      	str	r2, [r3, #24]
}
 800447e:	bf00      	nop
 8004480:	3758      	adds	r7, #88	; 0x58
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b096      	sub	sp, #88	; 0x58
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004494:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449e:	2b22      	cmp	r3, #34	; 0x22
 80044a0:	f040 8098 	bne.w	80045d4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80044b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80044b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044bc:	4013      	ands	r3, r2
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d17b      	bne.n	80045e4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
 800450c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e6      	bne.n	80044ec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	61fb      	str	r3, [r7, #28]
   return(result);
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	64bb      	str	r3, [r7, #72]	; 0x48
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800453e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	2b01      	cmp	r3, #1
 800456c:	d12e      	bne.n	80045cc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	60bb      	str	r3, [r7, #8]
   return(result);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f023 0310 	bic.w	r3, r3, #16
 8004588:	647b      	str	r3, [r7, #68]	; 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6979      	ldr	r1, [r7, #20]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	613b      	str	r3, [r7, #16]
   return(result);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e6      	bne.n	8004574 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d103      	bne.n	80045bc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2210      	movs	r2, #16
 80045ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff f911 	bl	80037ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045ca:	e00b      	b.n	80045e4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fc fee9 	bl	80013a4 <HAL_UART_RxCpltCallback>
}
 80045d2:	e007      	b.n	80045e4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	619a      	str	r2, [r3, #24]
}
 80045e4:	bf00      	nop
 80045e6:	3758      	adds	r7, #88	; 0x58
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <atoi>:
 80045ec:	220a      	movs	r2, #10
 80045ee:	2100      	movs	r1, #0
 80045f0:	f000 b8d6 	b.w	80047a0 <strtol>

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	2000000c 	.word	0x2000000c

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f000 f948 	bl	80048a8 <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08004a70 	.word	0x08004a70
 800463c:	08004a70 	.word	0x08004a70
 8004640:	08004a70 	.word	0x08004a70
 8004644:	08004a74 	.word	0x08004a74

08004648 <memset>:
 8004648:	4402      	add	r2, r0
 800464a:	4603      	mov	r3, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <strchr>:
 8004658:	b2c9      	uxtb	r1, r1
 800465a:	4603      	mov	r3, r0
 800465c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004660:	b11a      	cbz	r2, 800466a <strchr+0x12>
 8004662:	428a      	cmp	r2, r1
 8004664:	d1f9      	bne.n	800465a <strchr+0x2>
 8004666:	4618      	mov	r0, r3
 8004668:	4770      	bx	lr
 800466a:	2900      	cmp	r1, #0
 800466c:	bf18      	it	ne
 800466e:	2300      	movne	r3, #0
 8004670:	e7f9      	b.n	8004666 <strchr+0xe>

08004672 <strncmp>:
 8004672:	b510      	push	{r4, lr}
 8004674:	b17a      	cbz	r2, 8004696 <strncmp+0x24>
 8004676:	4603      	mov	r3, r0
 8004678:	3901      	subs	r1, #1
 800467a:	1884      	adds	r4, r0, r2
 800467c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004680:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004684:	4290      	cmp	r0, r2
 8004686:	d101      	bne.n	800468c <strncmp+0x1a>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d101      	bne.n	8004690 <strncmp+0x1e>
 800468c:	1a80      	subs	r0, r0, r2
 800468e:	bd10      	pop	{r4, pc}
 8004690:	2800      	cmp	r0, #0
 8004692:	d1f3      	bne.n	800467c <strncmp+0xa>
 8004694:	e7fa      	b.n	800468c <strncmp+0x1a>
 8004696:	4610      	mov	r0, r2
 8004698:	e7f9      	b.n	800468e <strncmp+0x1c>
	...

0800469c <_strtol_l.constprop.0>:
 800469c:	2b01      	cmp	r3, #1
 800469e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a2:	d001      	beq.n	80046a8 <_strtol_l.constprop.0+0xc>
 80046a4:	2b24      	cmp	r3, #36	; 0x24
 80046a6:	d906      	bls.n	80046b6 <_strtol_l.constprop.0+0x1a>
 80046a8:	f7ff ffa4 	bl	80045f4 <__errno>
 80046ac:	2316      	movs	r3, #22
 80046ae:	6003      	str	r3, [r0, #0]
 80046b0:	2000      	movs	r0, #0
 80046b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800479c <_strtol_l.constprop.0+0x100>
 80046ba:	460d      	mov	r5, r1
 80046bc:	462e      	mov	r6, r5
 80046be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80046c6:	f017 0708 	ands.w	r7, r7, #8
 80046ca:	d1f7      	bne.n	80046bc <_strtol_l.constprop.0+0x20>
 80046cc:	2c2d      	cmp	r4, #45	; 0x2d
 80046ce:	d132      	bne.n	8004736 <_strtol_l.constprop.0+0x9a>
 80046d0:	782c      	ldrb	r4, [r5, #0]
 80046d2:	2701      	movs	r7, #1
 80046d4:	1cb5      	adds	r5, r6, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d05b      	beq.n	8004792 <_strtol_l.constprop.0+0xf6>
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d109      	bne.n	80046f2 <_strtol_l.constprop.0+0x56>
 80046de:	2c30      	cmp	r4, #48	; 0x30
 80046e0:	d107      	bne.n	80046f2 <_strtol_l.constprop.0+0x56>
 80046e2:	782c      	ldrb	r4, [r5, #0]
 80046e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80046e8:	2c58      	cmp	r4, #88	; 0x58
 80046ea:	d14d      	bne.n	8004788 <_strtol_l.constprop.0+0xec>
 80046ec:	786c      	ldrb	r4, [r5, #1]
 80046ee:	2310      	movs	r3, #16
 80046f0:	3502      	adds	r5, #2
 80046f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80046f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80046fa:	f04f 0c00 	mov.w	ip, #0
 80046fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8004702:	4666      	mov	r6, ip
 8004704:	fb03 8a19 	mls	sl, r3, r9, r8
 8004708:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800470c:	f1be 0f09 	cmp.w	lr, #9
 8004710:	d816      	bhi.n	8004740 <_strtol_l.constprop.0+0xa4>
 8004712:	4674      	mov	r4, lr
 8004714:	42a3      	cmp	r3, r4
 8004716:	dd24      	ble.n	8004762 <_strtol_l.constprop.0+0xc6>
 8004718:	f1bc 0f00 	cmp.w	ip, #0
 800471c:	db1e      	blt.n	800475c <_strtol_l.constprop.0+0xc0>
 800471e:	45b1      	cmp	r9, r6
 8004720:	d31c      	bcc.n	800475c <_strtol_l.constprop.0+0xc0>
 8004722:	d101      	bne.n	8004728 <_strtol_l.constprop.0+0x8c>
 8004724:	45a2      	cmp	sl, r4
 8004726:	db19      	blt.n	800475c <_strtol_l.constprop.0+0xc0>
 8004728:	fb06 4603 	mla	r6, r6, r3, r4
 800472c:	f04f 0c01 	mov.w	ip, #1
 8004730:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004734:	e7e8      	b.n	8004708 <_strtol_l.constprop.0+0x6c>
 8004736:	2c2b      	cmp	r4, #43	; 0x2b
 8004738:	bf04      	itt	eq
 800473a:	782c      	ldrbeq	r4, [r5, #0]
 800473c:	1cb5      	addeq	r5, r6, #2
 800473e:	e7ca      	b.n	80046d6 <_strtol_l.constprop.0+0x3a>
 8004740:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004744:	f1be 0f19 	cmp.w	lr, #25
 8004748:	d801      	bhi.n	800474e <_strtol_l.constprop.0+0xb2>
 800474a:	3c37      	subs	r4, #55	; 0x37
 800474c:	e7e2      	b.n	8004714 <_strtol_l.constprop.0+0x78>
 800474e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004752:	f1be 0f19 	cmp.w	lr, #25
 8004756:	d804      	bhi.n	8004762 <_strtol_l.constprop.0+0xc6>
 8004758:	3c57      	subs	r4, #87	; 0x57
 800475a:	e7db      	b.n	8004714 <_strtol_l.constprop.0+0x78>
 800475c:	f04f 3cff 	mov.w	ip, #4294967295
 8004760:	e7e6      	b.n	8004730 <_strtol_l.constprop.0+0x94>
 8004762:	f1bc 0f00 	cmp.w	ip, #0
 8004766:	da05      	bge.n	8004774 <_strtol_l.constprop.0+0xd8>
 8004768:	2322      	movs	r3, #34	; 0x22
 800476a:	6003      	str	r3, [r0, #0]
 800476c:	4646      	mov	r6, r8
 800476e:	b942      	cbnz	r2, 8004782 <_strtol_l.constprop.0+0xe6>
 8004770:	4630      	mov	r0, r6
 8004772:	e79e      	b.n	80046b2 <_strtol_l.constprop.0+0x16>
 8004774:	b107      	cbz	r7, 8004778 <_strtol_l.constprop.0+0xdc>
 8004776:	4276      	negs	r6, r6
 8004778:	2a00      	cmp	r2, #0
 800477a:	d0f9      	beq.n	8004770 <_strtol_l.constprop.0+0xd4>
 800477c:	f1bc 0f00 	cmp.w	ip, #0
 8004780:	d000      	beq.n	8004784 <_strtol_l.constprop.0+0xe8>
 8004782:	1e69      	subs	r1, r5, #1
 8004784:	6011      	str	r1, [r2, #0]
 8004786:	e7f3      	b.n	8004770 <_strtol_l.constprop.0+0xd4>
 8004788:	2430      	movs	r4, #48	; 0x30
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1b1      	bne.n	80046f2 <_strtol_l.constprop.0+0x56>
 800478e:	2308      	movs	r3, #8
 8004790:	e7af      	b.n	80046f2 <_strtol_l.constprop.0+0x56>
 8004792:	2c30      	cmp	r4, #48	; 0x30
 8004794:	d0a5      	beq.n	80046e2 <_strtol_l.constprop.0+0x46>
 8004796:	230a      	movs	r3, #10
 8004798:	e7ab      	b.n	80046f2 <_strtol_l.constprop.0+0x56>
 800479a:	bf00      	nop
 800479c:	08004965 	.word	0x08004965

080047a0 <strtol>:
 80047a0:	4613      	mov	r3, r2
 80047a2:	460a      	mov	r2, r1
 80047a4:	4601      	mov	r1, r0
 80047a6:	4802      	ldr	r0, [pc, #8]	; (80047b0 <strtol+0x10>)
 80047a8:	6800      	ldr	r0, [r0, #0]
 80047aa:	f7ff bf77 	b.w	800469c <_strtol_l.constprop.0>
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	00000000 	.word	0x00000000

080047b8 <ceil>:
 80047b8:	ee10 1a90 	vmov	r1, s1
 80047bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80047c0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80047c4:	2b13      	cmp	r3, #19
 80047c6:	b530      	push	{r4, r5, lr}
 80047c8:	ee10 0a10 	vmov	r0, s0
 80047cc:	ee10 5a10 	vmov	r5, s0
 80047d0:	dc2f      	bgt.n	8004832 <ceil+0x7a>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da13      	bge.n	80047fe <ceil+0x46>
 80047d6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8004898 <ceil+0xe0>
 80047da:	ee30 0b07 	vadd.f64	d0, d0, d7
 80047de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80047e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e6:	dd05      	ble.n	80047f4 <ceil+0x3c>
 80047e8:	2900      	cmp	r1, #0
 80047ea:	db4c      	blt.n	8004886 <ceil+0xce>
 80047ec:	4301      	orrs	r1, r0
 80047ee:	d04e      	beq.n	800488e <ceil+0xd6>
 80047f0:	492b      	ldr	r1, [pc, #172]	; (80048a0 <ceil+0xe8>)
 80047f2:	2000      	movs	r0, #0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4602      	mov	r2, r0
 80047f8:	ec43 2b10 	vmov	d0, r2, r3
 80047fc:	e020      	b.n	8004840 <ceil+0x88>
 80047fe:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <ceil+0xec>)
 8004800:	411a      	asrs	r2, r3
 8004802:	ea01 0402 	and.w	r4, r1, r2
 8004806:	4304      	orrs	r4, r0
 8004808:	d01a      	beq.n	8004840 <ceil+0x88>
 800480a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8004898 <ceil+0xe0>
 800480e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004812:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	ddeb      	ble.n	80047f4 <ceil+0x3c>
 800481c:	2900      	cmp	r1, #0
 800481e:	bfc2      	ittt	gt
 8004820:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8004824:	fa40 f303 	asrgt.w	r3, r0, r3
 8004828:	18c9      	addgt	r1, r1, r3
 800482a:	ea21 0102 	bic.w	r1, r1, r2
 800482e:	2000      	movs	r0, #0
 8004830:	e7e0      	b.n	80047f4 <ceil+0x3c>
 8004832:	2b33      	cmp	r3, #51	; 0x33
 8004834:	dd05      	ble.n	8004842 <ceil+0x8a>
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483a:	d101      	bne.n	8004840 <ceil+0x88>
 800483c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004840:	bd30      	pop	{r4, r5, pc}
 8004842:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	40e2      	lsrs	r2, r4
 800484c:	4202      	tst	r2, r0
 800484e:	d0f7      	beq.n	8004840 <ceil+0x88>
 8004850:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8004898 <ceil+0xe0>
 8004854:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004858:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	ddc8      	ble.n	80047f4 <ceil+0x3c>
 8004862:	2900      	cmp	r1, #0
 8004864:	dd02      	ble.n	800486c <ceil+0xb4>
 8004866:	2b14      	cmp	r3, #20
 8004868:	d103      	bne.n	8004872 <ceil+0xba>
 800486a:	3101      	adds	r1, #1
 800486c:	ea20 0002 	bic.w	r0, r0, r2
 8004870:	e7c0      	b.n	80047f4 <ceil+0x3c>
 8004872:	2401      	movs	r4, #1
 8004874:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004878:	fa04 f303 	lsl.w	r3, r4, r3
 800487c:	4418      	add	r0, r3
 800487e:	42a8      	cmp	r0, r5
 8004880:	bf38      	it	cc
 8004882:	1909      	addcc	r1, r1, r4
 8004884:	e7f2      	b.n	800486c <ceil+0xb4>
 8004886:	2000      	movs	r0, #0
 8004888:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800488c:	e7b2      	b.n	80047f4 <ceil+0x3c>
 800488e:	4608      	mov	r0, r1
 8004890:	e7b0      	b.n	80047f4 <ceil+0x3c>
 8004892:	bf00      	nop
 8004894:	f3af 8000 	nop.w
 8004898:	8800759c 	.word	0x8800759c
 800489c:	7e37e43c 	.word	0x7e37e43c
 80048a0:	3ff00000 	.word	0x3ff00000
 80048a4:	000fffff 	.word	0x000fffff

080048a8 <_init>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr

080048b4 <_fini>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr
