
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004724  08004724  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800472c  0800472c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000074  080047a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080047a8  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1ca  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f5  00000000  00000000  0002b26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0002cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d44  00000000  00000000  0002d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a45d  00000000  00000000  00054724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f14c3  00000000  00000000  0005eb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000218c  00000000  00000000  00150094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800469c 	.word	0x0800469c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800469c 	.word	0x0800469c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006bc:	f000 f94e 	bl	800095c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006c0:	f7ff ff90 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c4:	f7ff ffb4 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 faa1 	bl	8000c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f816 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f8ac 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f87a 	bl	80007cc <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80006d8:	f000 f86c 	bl	80007b4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  character = 'e';
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <main+0x3c>)
 80006de:	2265      	movs	r2, #101	; 0x65
 80006e0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, character, 1);
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <main+0x3c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <main+0x40>)
 80006ec:	f002 f83a 	bl	8002764 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x38>
 80006f2:	bf00      	nop
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000090 	.word	0x20000090

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fb50 	bl	8003db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xb0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xb0>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xb0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <SystemClock_Config+0xb4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemClock_Config+0xb4>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <SystemClock_Config+0xb4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fe93 	bl	8001494 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000774:	f000 f91e 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f92c 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079e:	f000 f909 	bl	80009b4 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2026      	movs	r0, #38	; 0x26
 80007be:	f000 fb5e 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007c2:	2026      	movs	r0, #38	; 0x26
 80007c4:	f000 fb77 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007d2:	4a15      	ldr	r2, [pc, #84]	; (8000828 <MX_USART2_UART_Init+0x5c>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART2_UART_Init+0x58>)
 8000810:	f001 fefc 	bl	800260c <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800081a:	f000 f8cb 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000090 	.word	0x20000090
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_GPIO_Init+0x74>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x74>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_GPIO_Init+0x74>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_GPIO_Init+0x74>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_GPIO_Init+0x74>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_GPIO_Init+0x74>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0x78>)
 8000878:	f000 fdf2 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0x78>)
 8000894:	f000 fc38 	bl	8001108 <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400

080008a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a20      	ldr	r2, [pc, #128]	; (8000938 <HAL_UART_RxCpltCallback+0x90>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d139      	bne.n	800092e <HAL_UART_RxCpltCallback+0x86>
	{
		// Display character in terminal
		HAL_UART_Transmit_IT(&huart2, &character, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	491f      	ldr	r1, [pc, #124]	; (800093c <HAL_UART_RxCpltCallback+0x94>)
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <HAL_UART_RxCpltCallback+0x98>)
 80008c0:	f001 fef2 	bl	80026a8 <HAL_UART_Transmit_IT>
		if(character == 'e')
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_UART_RxCpltCallback+0x94>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b65      	cmp	r3, #101	; 0x65
 80008ca:	d10c      	bne.n	80008e6 <HAL_UART_RxCpltCallback+0x3e>
		{
			// Enable pin on 'e' as input
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	481c      	ldr	r0, [pc, #112]	; (8000944 <HAL_UART_RxCpltCallback+0x9c>)
 80008d2:	f000 fdc5 	bl	8001460 <HAL_GPIO_WritePin>
			sprintf(char_tab, "DIODE ON");
 80008d6:	491c      	ldr	r1, [pc, #112]	; (8000948 <HAL_UART_RxCpltCallback+0xa0>)
 80008d8:	481c      	ldr	r0, [pc, #112]	; (800094c <HAL_UART_RxCpltCallback+0xa4>)
 80008da:	f003 fa71 	bl	8003dc0 <siprintf>
			char_tab_len = 8;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <HAL_UART_RxCpltCallback+0xa8>)
 80008e0:	2208      	movs	r2, #8
 80008e2:	801a      	strh	r2, [r3, #0]
 80008e4:	e017      	b.n	8000916 <HAL_UART_RxCpltCallback+0x6e>
		}
		else if(character == 'd')
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_RxCpltCallback+0x94>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b64      	cmp	r3, #100	; 0x64
 80008ec:	d10c      	bne.n	8000908 <HAL_UART_RxCpltCallback+0x60>
		{
			// Disable pin on 'd' as input
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <HAL_UART_RxCpltCallback+0x9c>)
 80008f4:	f000 fdb4 	bl	8001460 <HAL_GPIO_WritePin>
			sprintf(char_tab, "DIODE OFF");
 80008f8:	4916      	ldr	r1, [pc, #88]	; (8000954 <HAL_UART_RxCpltCallback+0xac>)
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <HAL_UART_RxCpltCallback+0xa4>)
 80008fc:	f003 fa60 	bl	8003dc0 <siprintf>
			char_tab_len = 9;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_UART_RxCpltCallback+0xa8>)
 8000902:	2209      	movs	r2, #9
 8000904:	801a      	strh	r2, [r3, #0]
 8000906:	e006      	b.n	8000916 <HAL_UART_RxCpltCallback+0x6e>
		}
		else
		{
			sprintf(char_tab, "WRNG INPUT");
 8000908:	4913      	ldr	r1, [pc, #76]	; (8000958 <HAL_UART_RxCpltCallback+0xb0>)
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <HAL_UART_RxCpltCallback+0xa4>)
 800090c:	f003 fa58 	bl	8003dc0 <siprintf>
			char_tab_len = 10;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_UART_RxCpltCallback+0xa8>)
 8000912:	220a      	movs	r2, #10
 8000914:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, char_tab, char_tab_len);
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_UART_RxCpltCallback+0xa8>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	490b      	ldr	r1, [pc, #44]	; (800094c <HAL_UART_RxCpltCallback+0xa4>)
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <HAL_UART_RxCpltCallback+0x98>)
 8000920:	f001 fec2 	bl	80026a8 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &character, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	4905      	ldr	r1, [pc, #20]	; (800093c <HAL_UART_RxCpltCallback+0x94>)
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_UART_RxCpltCallback+0x98>)
 800092a:	f001 ff1b 	bl	8002764 <HAL_UART_Receive_IT>
	}
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40004400 	.word	0x40004400
 800093c:	20000000 	.word	0x20000000
 8000940:	20000090 	.word	0x20000090
 8000944:	40020400 	.word	0x40020400
 8000948:	080046b4 	.word	0x080046b4
 800094c:	20000118 	.word	0x20000118
 8000950:	2000012c 	.word	0x2000012c
 8000954:	080046c0 	.word	0x080046c0
 8000958:	080046cc 	.word	0x080046cc

0800095c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800096e:	f000 fabd 	bl	8000eec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000972:	2301      	movs	r3, #1
 8000974:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000976:	2300      	movs	r3, #0
 8000978:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800097e:	231f      	movs	r3, #31
 8000980:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000982:	2387      	movs	r3, #135	; 0x87
 8000984:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000986:	2300      	movs	r3, #0
 8000988:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800098a:	2300      	movs	r3, #0
 800098c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800098e:	2301      	movs	r3, #1
 8000990:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000992:	2301      	movs	r3, #1
 8000994:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800099e:	463b      	mov	r3, r7
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fadb 	bl	8000f5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009a6:	2004      	movs	r0, #4
 80009a8:	f000 fab8 	bl	8000f1c <HAL_MPU_Enable>

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0ae      	sub	sp, #184	; 0xb8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2290      	movs	r2, #144	; 0x90
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f9c1 	bl	8003db0 <memset>
  if(huart->Instance==USART2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <HAL_UART_MspInit+0xb0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d13a      	bne.n	8000aae <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f9b9 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a50:	f7ff ffb0 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_UART_MspInit+0xb4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <HAL_UART_MspInit+0xb4>)
 8000a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_UART_MspInit+0xb4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_UART_MspInit+0xb4>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	4a12      	ldr	r2, [pc, #72]	; (8000abc <HAL_UART_MspInit+0xb4>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6313      	str	r3, [r2, #48]	; 0x30
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_UART_MspInit+0xb4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a84:	230c      	movs	r3, #12
 8000a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_UART_MspInit+0xb8>)
 8000aaa:	f000 fb2d 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	37b8      	adds	r7, #184	; 0xb8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f8ba 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART2_IRQHandler+0x10>)
 8000b1e:	f001 fe65 	bl	80027ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000090 	.word	0x20000090

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f003 f8fe 	bl	8003d5c <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20080000 	.word	0x20080000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	20000130 	.word	0x20000130
 8000b94:	20000148 	.word	0x20000148

08000b98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f003 f8bd 	bl	8003d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd63 	bl	80006b8 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c00:	08004734 	.word	0x08004734
  ldr r2, =_sbss
 8000c04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c08:	20000148 	.word	0x20000148

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>

08000c0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 f928 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c18:	200f      	movs	r0, #15
 8000c1a:	f000 f805 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1e:	f7ff fecf 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f943 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f90b 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000134 	.word	0x20000134

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000134 	.word	0x20000134

08000cc8 <__NVIC_SetPriorityGrouping>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	05fa0000 	.word	0x05fa0000

08000d10 <__NVIC_GetPriorityGrouping>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff3e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff31 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ef0:	f3bf 8f5f 	dmb	sy
}
 8000ef4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_MPU_Disable+0x28>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_MPU_Disable+0x28>)
 8000efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f00:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_MPU_Disable+0x2c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00
 8000f18:	e000ed90 	.word	0xe000ed90

08000f1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_MPU_Enable+0x38>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_MPU_Enable+0x3c>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <HAL_MPU_Enable+0x3c>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
}
 8000f3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f40:	f3bf 8f6f 	isb	sy
}
 8000f44:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed90 	.word	0xe000ed90
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	785a      	ldrb	r2, [r3, #1]
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_MPU_ConfigRegion+0x84>)
 8000f6a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d029      	beq.n	8000fc8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000f74:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <HAL_MPU_ConfigRegion+0x84>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7b1b      	ldrb	r3, [r3, #12]
 8000f80:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7adb      	ldrb	r3, [r3, #11]
 8000f86:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7a9b      	ldrb	r3, [r3, #10]
 8000f8e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7b5b      	ldrb	r3, [r3, #13]
 8000f96:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7b9b      	ldrb	r3, [r3, #14]
 8000f9e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fa0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7bdb      	ldrb	r3, [r3, #15]
 8000fa6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fa8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7a5b      	ldrb	r3, [r3, #9]
 8000fae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7a1b      	ldrb	r3, [r3, #8]
 8000fb6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fb8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fc2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fc4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000fc6:	e005      	b.n	8000fd4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_MPU_ConfigRegion+0x84>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_MPU_ConfigRegion+0x84>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed90 	.word	0xe000ed90

08000fe4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ff2:	f7ff fe5d 	bl	8000cb0 <HAL_GetTick>
 8000ff6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d008      	beq.n	8001016 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e052      	b.n	80010bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0216 	bic.w	r2, r2, #22
 8001024:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001034:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d103      	bne.n	8001046 <HAL_DMA_Abort+0x62>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0208 	bic.w	r2, r2, #8
 8001054:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0201 	bic.w	r2, r2, #1
 8001064:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001066:	e013      	b.n	8001090 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001068:	f7ff fe22 	bl	8000cb0 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b05      	cmp	r3, #5
 8001074:	d90c      	bls.n	8001090 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e015      	b.n	80010bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1e4      	bne.n	8001068 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	223f      	movs	r2, #63	; 0x3f
 80010a4:	409a      	lsls	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d004      	beq.n	80010e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00c      	b.n	80010fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2205      	movs	r2, #5
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0201 	bic.w	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e175      	b.n	8001414 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8164 	bne.w	800140e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_GPIO_Init+0x56>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80be 	beq.w	800140e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b66      	ldr	r3, [pc, #408]	; (800142c <HAL_GPIO_Init+0x324>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a65      	ldr	r2, [pc, #404]	; (800142c <HAL_GPIO_Init+0x324>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_GPIO_Init+0x324>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012aa:	4a61      	ldr	r2, [pc, #388]	; (8001430 <HAL_GPIO_Init+0x328>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a58      	ldr	r2, [pc, #352]	; (8001434 <HAL_GPIO_Init+0x32c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d037      	beq.n	8001346 <HAL_GPIO_Init+0x23e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a57      	ldr	r2, [pc, #348]	; (8001438 <HAL_GPIO_Init+0x330>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d031      	beq.n	8001342 <HAL_GPIO_Init+0x23a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a56      	ldr	r2, [pc, #344]	; (800143c <HAL_GPIO_Init+0x334>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02b      	beq.n	800133e <HAL_GPIO_Init+0x236>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a55      	ldr	r2, [pc, #340]	; (8001440 <HAL_GPIO_Init+0x338>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x232>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x33c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x22e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a53      	ldr	r2, [pc, #332]	; (8001448 <HAL_GPIO_Init+0x340>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x22a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x344>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x348>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x34c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x350>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x21a>
 800131e:	2309      	movs	r3, #9
 8001320:	e012      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001322:	230a      	movs	r3, #10
 8001324:	e010      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001326:	2308      	movs	r3, #8
 8001328:	e00e      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800132a:	2307      	movs	r3, #7
 800132c:	e00c      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800132e:	2306      	movs	r3, #6
 8001330:	e00a      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001332:	2305      	movs	r3, #5
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001336:	2304      	movs	r3, #4
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x328>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_GPIO_Init+0x354>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a34      	ldr	r2, [pc, #208]	; (800145c <HAL_GPIO_Init+0x354>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <HAL_GPIO_Init+0x354>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_GPIO_Init+0x354>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_GPIO_Init+0x354>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_GPIO_Init+0x354>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_GPIO_Init+0x354>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <HAL_GPIO_Init+0x354>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f ae86 	bls.w	8001128 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40022000 	.word	0x40022000
 8001458:	40022400 	.word	0x40022400
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e29b      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8087 	beq.w	80015c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b8:	4b96      	ldr	r3, [pc, #600]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d00c      	beq.n	80014de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c4:	4b93      	ldr	r3, [pc, #588]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d112      	bne.n	80014f6 <HAL_RCC_OscConfig+0x62>
 80014d0:	4b90      	ldr	r3, [pc, #576]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014dc:	d10b      	bne.n	80014f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	4b8d      	ldr	r3, [pc, #564]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d06c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x130>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d168      	bne.n	80015c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e275      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x7a>
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a83      	ldr	r2, [pc, #524]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e02e      	b.n	800156c <HAL_RCC_OscConfig+0xd8>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x9c>
 8001516:	4b7f      	ldr	r3, [pc, #508]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a7e      	ldr	r2, [pc, #504]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b7c      	ldr	r3, [pc, #496]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7b      	ldr	r2, [pc, #492]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e01d      	b.n	800156c <HAL_RCC_OscConfig+0xd8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0xc0>
 800153a:	4b76      	ldr	r3, [pc, #472]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a75      	ldr	r2, [pc, #468]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b73      	ldr	r3, [pc, #460]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a72      	ldr	r2, [pc, #456]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xd8>
 8001554:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6b      	ldr	r2, [pc, #428]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fb9c 	bl	8000cb0 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fb98 	bl	8000cb0 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e229      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b61      	ldr	r3, [pc, #388]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0xe8>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fb88 	bl	8000cb0 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb84 	bl	8000cb0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e215      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x110>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d069      	beq.n	80016a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d2:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x190>
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x17a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e1e9      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	493d      	ldr	r1, [pc, #244]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	e040      	b.n	80016a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d023      	beq.n	8001674 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fb3a 	bl	8000cb0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fb36 	bl	8000cb0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1c7      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4929      	ldr	r1, [pc, #164]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
 8001672:	e018      	b.n	80016a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a26      	ldr	r2, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fb16 	bl	8000cb0 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fb12 	bl	8000cb0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1a3      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d038      	beq.n	8001724 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d019      	beq.n	80016ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80016bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016be:	4a15      	ldr	r2, [pc, #84]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff faf3 	bl	8000cb0 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff faef 	bl	8000cb0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e180      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80016e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x23a>
 80016ec:	e01a      	b.n	8001724 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RCC_OscConfig+0x280>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff fad9 	bl	8000cb0 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fad5 	bl	8000cb0 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d903      	bls.n	8001718 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e166      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
 8001714:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80a4 	beq.w	800187a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b89      	ldr	r3, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a88      	ldr	r2, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b86      	ldr	r3, [pc, #536]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175a:	4b83      	ldr	r3, [pc, #524]	; (8001968 <HAL_RCC_OscConfig+0x4d4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001766:	4b80      	ldr	r3, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x4d4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7f      	ldr	r2, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x4d4>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff fa9d 	bl	8000cb0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff fa99 	bl	8000cb0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e12a      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178c:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0x4d4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x31a>
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a4:	4a6f      	ldr	r2, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6713      	str	r3, [r2, #112]	; 0x70
 80017ac:	e02d      	b.n	800180a <HAL_RCC_OscConfig+0x376>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x33c>
 80017b6:	4b6b      	ldr	r3, [pc, #428]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a6a      	ldr	r2, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	4a67      	ldr	r2, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70
 80017ce:	e01c      	b.n	800180a <HAL_RCC_OscConfig+0x376>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x35e>
 80017d8:	4b62      	ldr	r3, [pc, #392]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a61      	ldr	r2, [pc, #388]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0x376>
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	4a5b      	ldr	r2, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6713      	str	r3, [r2, #112]	; 0x70
 80017fe:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001812:	f7ff fa4d 	bl	8000cb0 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fa49 	bl	8000cb0 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0d8      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ee      	beq.n	800181a <HAL_RCC_OscConfig+0x386>
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fa37 	bl	8000cb0 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff fa33 	bl	8000cb0 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0c2      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ee      	bne.n	8001846 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a3c      	ldr	r2, [pc, #240]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80ae 	beq.w	80019e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d06d      	beq.n	800196c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d14b      	bne.n	8001930 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a31      	ldr	r2, [pc, #196]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 800189e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fa04 	bl	8000cb0 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fa00 	bl	8000cb0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e091      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	3b01      	subs	r3, #1
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	071b      	lsls	r3, r3, #28
 80018f6:	491b      	ldr	r1, [pc, #108]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a18      	ldr	r2, [pc, #96]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f9d2 	bl	8000cb0 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f9ce 	bl	8000cb0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e05f      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x47c>
 800192e:	e057      	b.n	80019e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f9b8 	bl	8000cb0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f9b4 	bl	8000cb0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e045      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x4b0>
 8001962:	e03d      	b.n	80019e0 <HAL_RCC_OscConfig+0x54c>
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_RCC_OscConfig+0x558>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d030      	beq.n	80019dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d129      	bne.n	80019dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d122      	bne.n	80019dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d119      	bne.n	80019dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	3b01      	subs	r3, #1
 80019b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10f      	bne.n	80019dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0d0      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 020f 	bic.w	r2, r3, #15
 8001a1e:	4965      	ldr	r1, [pc, #404]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d040      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e073      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4936      	ldr	r1, [pc, #216]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f8e4 	bl	8000cb0 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff f8e0 	bl	8000cb0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e053      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d210      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 020f 	bic.w	r2, r3, #15
 8001b2a:	4922      	ldr	r1, [pc, #136]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f821 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1cc>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1d4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f840 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	080046d8 	.word	0x080046d8
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b090      	sub	sp, #64	; 0x40
 8001bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d00d      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x40>
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	f200 80a1 	bhi.w	8001d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x34>
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bfa:	e09b      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c00:	e09b      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c02:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c06:	e098      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c08:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c12:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d028      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	099b      	lsrs	r3, r3, #6
 8001c24:	2200      	movs	r2, #0
 8001c26:	623b      	str	r3, [r7, #32]
 8001c28:	627a      	str	r2, [r7, #36]	; 0x24
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c30:	2100      	movs	r1, #0
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c34:	fb03 f201 	mul.w	r2, r3, r1
 8001c38:	2300      	movs	r3, #0
 8001c3a:	fb00 f303 	mul.w	r3, r0, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a43      	ldr	r2, [pc, #268]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c42:	fba0 1202 	umull	r1, r2, r0, r2
 8001c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c48:	460a      	mov	r2, r1
 8001c4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4e:	4413      	add	r3, r2
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c54:	2200      	movs	r2, #0
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	61fa      	str	r2, [r7, #28]
 8001c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c62:	f7fe fb3d 	bl	80002e0 <__aeabi_uldivmod>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6e:	e053      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c70:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	2200      	movs	r2, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	617a      	str	r2, [r7, #20]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c82:	f04f 0b00 	mov.w	fp, #0
 8001c86:	4652      	mov	r2, sl
 8001c88:	465b      	mov	r3, fp
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	0159      	lsls	r1, r3, #5
 8001c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c98:	0150      	lsls	r0, r2, #5
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cba:	ebb2 0408 	subs.w	r4, r2, r8
 8001cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	00eb      	lsls	r3, r5, #3
 8001ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cd0:	00e2      	lsls	r2, r4, #3
 8001cd2:	4614      	mov	r4, r2
 8001cd4:	461d      	mov	r5, r3
 8001cd6:	eb14 030a 	adds.w	r3, r4, sl
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	eb45 030b 	adc.w	r3, r5, fp
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cee:	4629      	mov	r1, r5
 8001cf0:	028b      	lsls	r3, r1, #10
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	028a      	lsls	r2, r1, #10
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	2200      	movs	r2, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	60fa      	str	r2, [r7, #12]
 8001d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d0c:	f7fe fae8 	bl	80002e0 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4613      	mov	r3, r2
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	3301      	adds	r3, #1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3740      	adds	r7, #64	; 0x40
 8001d40:	46bd      	mov	sp, r7
 8001d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	017d7840 	.word	0x017d7840

08001d54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a9b      	lsrs	r3, r3, #10
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	080046e8 	.word	0x080046e8

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffdc 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0b5b      	lsrs	r3, r3, #13
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	080046e8 	.word	0x080046e8

08001dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001de4:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a68      	ldr	r2, [pc, #416]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dee:	6093      	str	r3, [r2, #8]
 8001df0:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	4964      	ldr	r1, [pc, #400]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d017      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	4959      	ldr	r1, [pc, #356]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e34:	d101      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d017      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e52:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	494a      	ldr	r1, [pc, #296]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e70:	d101      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 808b 	beq.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001eac:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001eb8:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fef4 	bl	8000cb0 <HAL_GetTick>
 8001ec8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7fe fef0 	bl	8000cb0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e38f      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d035      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d02e      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f08:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d114      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe feb8 	bl	8000cb0 <HAL_GetTick>
 8001f40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f44:	f7fe feb4 	bl	8000cb0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e351      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ee      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f72:	d111      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f82:	400b      	ands	r3, r1
 8001f84:	4901      	ldr	r1, [pc, #4]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000
 8001f94:	0ffffcff 	.word	0x0ffffcff
 8001f98:	4bac      	ldr	r3, [pc, #688]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4aab      	ldr	r2, [pc, #684]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fa2:	6093      	str	r3, [r2, #8]
 8001fa4:	4ba9      	ldr	r3, [pc, #676]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	49a6      	ldr	r1, [pc, #664]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fc2:	4ba2      	ldr	r3, [pc, #648]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc8:	4aa0      	ldr	r2, [pc, #640]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fd2:	4b9e      	ldr	r3, [pc, #632]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	499b      	ldr	r1, [pc, #620]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ff0:	4b96      	ldr	r3, [pc, #600]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffe:	4993      	ldr	r1, [pc, #588]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002012:	4b8e      	ldr	r3, [pc, #568]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002020:	498a      	ldr	r1, [pc, #552]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002034:	4b85      	ldr	r3, [pc, #532]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002042:	4982      	ldr	r1, [pc, #520]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002056:	4b7d      	ldr	r3, [pc, #500]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4979      	ldr	r1, [pc, #484]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002078:	4b74      	ldr	r3, [pc, #464]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4971      	ldr	r1, [pc, #452]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800209a:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f023 020c 	bic.w	r2, r3, #12
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	4968      	ldr	r1, [pc, #416]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020bc:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4960      	ldr	r1, [pc, #384]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020de:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ec:	4957      	ldr	r1, [pc, #348]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002100:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	494f      	ldr	r1, [pc, #316]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	4946      	ldr	r1, [pc, #280]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002144:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	493e      	ldr	r1, [pc, #248]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002174:	4935      	ldr	r1, [pc, #212]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002196:	492d      	ldr	r1, [pc, #180]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d011      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b8:	4924      	ldr	r1, [pc, #144]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c8:	d101      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f8:	4914      	ldr	r1, [pc, #80]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00b      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221c:	490b      	ldr	r1, [pc, #44]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00f      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002240:	4902      	ldr	r1, [pc, #8]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002248:	e002      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800225c:	4b8a      	ldr	r3, [pc, #552]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002262:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	4986      	ldr	r1, [pc, #536]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002280:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002286:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002290:	497d      	ldr	r1, [pc, #500]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d006      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80d6 	beq.w	8002458 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022ac:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a75      	ldr	r2, [pc, #468]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b8:	f7fe fcfa 	bl	8000cb0 <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022c0:	f7fe fcf6 	bl	8000cb0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e195      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d021      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11d      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002306:	0e1b      	lsrs	r3, r3, #24
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	019a      	lsls	r2, r3, #6
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	041b      	lsls	r3, r3, #16
 8002318:	431a      	orrs	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	071b      	lsls	r3, r3, #28
 8002326:	4958      	ldr	r1, [pc, #352]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02e      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002358:	d129      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800235a:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002368:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800236a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236e:	0f1b      	lsrs	r3, r3, #28
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	019a      	lsls	r2, r3, #6
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	041b      	lsls	r3, r3, #16
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	061b      	lsls	r3, r3, #24
 8002388:	431a      	orrs	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	071b      	lsls	r3, r3, #28
 800238e:	493e      	ldr	r1, [pc, #248]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002396:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800239c:	f023 021f 	bic.w	r2, r3, #31
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	3b01      	subs	r3, #1
 80023a6:	4938      	ldr	r1, [pc, #224]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01d      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ba:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ce:	0f1b      	lsrs	r3, r3, #28
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	4926      	ldr	r1, [pc, #152]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d011      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	019a      	lsls	r2, r3, #6
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	491a      	ldr	r1, [pc, #104]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002432:	f7fe fc3d 	bl	8000cb0 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800243a:	f7fe fc39 	bl	8000cb0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0d8      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 80ce 	bne.w	80025fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7fe fc20 	bl	8000cb0 <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002472:	e00b      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002474:	f7fe fc1c 	bl	8000cb0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d904      	bls.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0bb      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002498:	d0ec      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d02e      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d12a      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024d0:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	0f1b      	lsrs	r3, r3, #28
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	019a      	lsls	r2, r3, #6
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	071b      	lsls	r3, r3, #28
 80024f6:	4944      	ldr	r1, [pc, #272]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024fe:	4b42      	ldr	r3, [pc, #264]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002504:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	493d      	ldr	r1, [pc, #244]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d022      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252c:	d11d      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	0e1b      	lsrs	r3, r3, #24
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	0f1b      	lsrs	r3, r3, #28
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	019a      	lsls	r2, r3, #6
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	041b      	lsls	r3, r3, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	071b      	lsls	r3, r3, #28
 8002562:	4929      	ldr	r1, [pc, #164]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	0e1b      	lsrs	r3, r3, #24
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	019a      	lsls	r2, r3, #6
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	071b      	lsls	r3, r3, #28
 80025aa:	4917      	ldr	r1, [pc, #92]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	4911      	ldr	r1, [pc, #68]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fb6c 	bl	8000cb0 <HAL_GetTick>
 80025d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025dc:	f7fe fb68 	bl	8000cb0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e007      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025fa:	d1ef      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e040      	b.n	80026a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe f9ea 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fbe0 	bl	8002e10 <UART_SetConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e022      	b.n	80026a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fe38 	bl	80032d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 febf 	bl	800341c <UART_CheckIdleState>
 800269e:	4603      	mov	r3, r0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b08b      	sub	sp, #44	; 0x2c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	4613      	mov	r3, r2
 80026b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d147      	bne.n	800274e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_UART_Transmit_IT+0x22>
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e040      	b.n	8002750 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2221      	movs	r2, #33	; 0x21
 80026f6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002700:	d107      	bne.n	8002712 <HAL_UART_Transmit_IT+0x6a>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <HAL_UART_Transmit_IT+0xb4>)
 800270e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002710:	e002      	b.n	8002718 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_UART_Transmit_IT+0xb8>)
 8002716:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	e853 3f00 	ldrex	r3, [r3]
 8002724:	613b      	str	r3, [r7, #16]
   return(result);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273a:	69f9      	ldr	r1, [r7, #28]
 800273c:	6a3a      	ldr	r2, [r7, #32]
 800273e:	e841 2300 	strex	r3, r2, [r1]
 8002742:	61bb      	str	r3, [r7, #24]
   return(result);
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1e6      	bne.n	8002718 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800274e:	2302      	movs	r3, #2
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	372c      	adds	r7, #44	; 0x2c
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	0800397b 	.word	0x0800397b
 8002760:	080038c5 	.word	0x080038c5

08002764 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002778:	2b20      	cmp	r3, #32
 800277a:	d132      	bne.n	80027e2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_UART_Receive_IT+0x24>
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e02b      	b.n	80027e4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d018      	beq.n	80027d2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	613b      	str	r3, [r7, #16]
   return(result);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e6      	bne.n	80027a0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 ff33 	bl	8003644 <UART_Start_Receive_IT>
 80027de:	4603      	mov	r3, r0
 80027e0:	e000      	b.n	80027e4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b0ba      	sub	sp, #232	; 0xe8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002812:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002816:	f640 030f 	movw	r3, #2063	; 0x80f
 800281a:	4013      	ands	r3, r2
 800281c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d115      	bne.n	8002854 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00f      	beq.n	8002854 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 82ac 	beq.w	8002da2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
      }
      return;
 8002852:	e2a6      	b.n	8002da2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8117 	beq.w	8002a8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800285e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800286a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_UART_IRQHandler+0x298>)
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 810a 	beq.w	8002a8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d011      	beq.n	80028a8 <HAL_UART_IRQHandler+0xbc>
 8002884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2201      	movs	r2, #1
 8002896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d011      	beq.n	80028d8 <HAL_UART_IRQHandler+0xec>
 80028b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2202      	movs	r2, #2
 80028c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ce:	f043 0204 	orr.w	r2, r3, #4
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d011      	beq.n	8002908 <HAL_UART_IRQHandler+0x11c>
 80028e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00b      	beq.n	8002908 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2204      	movs	r2, #4
 80028f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fe:	f043 0202 	orr.w	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002924:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2208      	movs	r2, #8
 8002932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293a:	f043 0208 	orr.w	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <HAL_UART_IRQHandler+0x18a>
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8212 	beq.w	8002da6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800298e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d005      	beq.n	80029ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d04f      	beq.n	8002a6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fefe 	bl	80037d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d141      	bne.n	8002a66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3308      	adds	r3, #8
 80029e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f0:	e853 3f00 	ldrex	r3, [r3]
 80029f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3308      	adds	r3, #8
 8002a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1d9      	bne.n	80029e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d013      	beq.n	8002a5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_UART_IRQHandler+0x29c>)
 8002a3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fb3e 	bl	80010c4 <HAL_DMA_Abort_IT>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d017      	beq.n	8002a7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	e00f      	b.n	8002a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f9b6 	bl	8002dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	e00b      	b.n	8002a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9b2 	bl	8002dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	e007      	b.n	8002a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9ae 	bl	8002dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002a7c:	e193      	b.n	8002da6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7e:	bf00      	nop
    return;
 8002a80:	e191      	b.n	8002da6 <HAL_UART_IRQHandler+0x5ba>
 8002a82:	bf00      	nop
 8002a84:	04000120 	.word	0x04000120
 8002a88:	08003899 	.word	0x08003899

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 814c 	bne.w	8002d2e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8145 	beq.w	8002d2e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 813e 	beq.w	8002d2e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	f040 80b6 	bne.w	8002c36 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ad6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8165 	beq.w	8002daa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aea:	429a      	cmp	r2, r3
 8002aec:	f080 815d 	bcs.w	8002daa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002af6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b04:	f000 8086 	beq.w	8002c14 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1da      	bne.n	8002b08 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3308      	adds	r3, #8
 8002b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3308      	adds	r3, #8
 8002b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e1      	bne.n	8002b52 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3308      	adds	r3, #8
 8002b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b98:	e853 3f00 	ldrex	r3, [r3]
 8002b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3308      	adds	r3, #8
 8002bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e3      	bne.n	8002b8e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be4:	f023 0310 	bic.w	r3, r3, #16
 8002be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bf8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e4      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f9e8 	bl	8000fe4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8d8 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c34:	e0b9      	b.n	8002daa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80ab 	beq.w	8002dae <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a6 	beq.w	8002dae <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
 8002c86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c8c:	e841 2300 	strex	r3, r2, [r1]
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e4      	bne.n	8002c62 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cbc:	633a      	str	r2, [r7, #48]	; 0x30
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e3      	bne.n	8002c98 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f023 0310 	bic.w	r3, r3, #16
 8002cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	617b      	str	r3, [r7, #20]
   return(result);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e4      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f85c 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d2c:	e03f      	b.n	8002dae <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00e      	beq.n	8002d58 <HAL_UART_IRQHandler+0x56c>
 8002d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f853 	bl	8002dfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d56:	e02d      	b.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00e      	beq.n	8002d82 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    }
    return;
 8002d80:	e017      	b.n	8002db2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d012      	beq.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fe4d 	bl	8003a3a <UART_EndTransmit_IT>
    return;
 8002da0:	e008      	b.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002da2:	bf00      	nop
 8002da4:	e006      	b.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002da6:	bf00      	nop
 8002da8:	e004      	b.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002db2:	bf00      	nop
  }

}
 8002db4:	37e8      	adds	r7, #232	; 0xe8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop

08002dbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4ba6      	ldr	r3, [pc, #664]	; (80030d4 <UART_SetConfig+0x2c4>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	6979      	ldr	r1, [r7, #20]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a94      	ldr	r2, [pc, #592]	; (80030d8 <UART_SetConfig+0x2c8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d120      	bne.n	8002ece <UART_SetConfig+0xbe>
 8002e8c:	4b93      	ldr	r3, [pc, #588]	; (80030dc <UART_SetConfig+0x2cc>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d816      	bhi.n	8002ec8 <UART_SetConfig+0xb8>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0x90>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ebd 	.word	0x08002ebd
 8002ea8:	08002eb7 	.word	0x08002eb7
 8002eac:	08002ec3 	.word	0x08002ec3
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e150      	b.n	8003158 <UART_SetConfig+0x348>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e14d      	b.n	8003158 <UART_SetConfig+0x348>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	e14a      	b.n	8003158 <UART_SetConfig+0x348>
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	77fb      	strb	r3, [r7, #31]
 8002ec6:	e147      	b.n	8003158 <UART_SetConfig+0x348>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e144      	b.n	8003158 <UART_SetConfig+0x348>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a83      	ldr	r2, [pc, #524]	; (80030e0 <UART_SetConfig+0x2d0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d132      	bne.n	8002f3e <UART_SetConfig+0x12e>
 8002ed8:	4b80      	ldr	r3, [pc, #512]	; (80030dc <UART_SetConfig+0x2cc>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d828      	bhi.n	8002f38 <UART_SetConfig+0x128>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0xdc>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08002f39 	.word	0x08002f39
 8002ef4:	08002f39 	.word	0x08002f39
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f2d 	.word	0x08002f2d
 8002f00:	08002f39 	.word	0x08002f39
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f27 	.word	0x08002f27
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f39 	.word	0x08002f39
 8002f1c:	08002f33 	.word	0x08002f33
 8002f20:	2300      	movs	r3, #0
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e118      	b.n	8003158 <UART_SetConfig+0x348>
 8002f26:	2302      	movs	r3, #2
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e115      	b.n	8003158 <UART_SetConfig+0x348>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e112      	b.n	8003158 <UART_SetConfig+0x348>
 8002f32:	2308      	movs	r3, #8
 8002f34:	77fb      	strb	r3, [r7, #31]
 8002f36:	e10f      	b.n	8003158 <UART_SetConfig+0x348>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e10c      	b.n	8003158 <UART_SetConfig+0x348>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a68      	ldr	r2, [pc, #416]	; (80030e4 <UART_SetConfig+0x2d4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d120      	bne.n	8002f8a <UART_SetConfig+0x17a>
 8002f48:	4b64      	ldr	r3, [pc, #400]	; (80030dc <UART_SetConfig+0x2cc>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f52:	2b30      	cmp	r3, #48	; 0x30
 8002f54:	d013      	beq.n	8002f7e <UART_SetConfig+0x16e>
 8002f56:	2b30      	cmp	r3, #48	; 0x30
 8002f58:	d814      	bhi.n	8002f84 <UART_SetConfig+0x174>
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d009      	beq.n	8002f72 <UART_SetConfig+0x162>
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d810      	bhi.n	8002f84 <UART_SetConfig+0x174>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <UART_SetConfig+0x15c>
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d006      	beq.n	8002f78 <UART_SetConfig+0x168>
 8002f6a:	e00b      	b.n	8002f84 <UART_SetConfig+0x174>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e0f2      	b.n	8003158 <UART_SetConfig+0x348>
 8002f72:	2302      	movs	r3, #2
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e0ef      	b.n	8003158 <UART_SetConfig+0x348>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e0ec      	b.n	8003158 <UART_SetConfig+0x348>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e0e9      	b.n	8003158 <UART_SetConfig+0x348>
 8002f84:	2310      	movs	r3, #16
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e0e6      	b.n	8003158 <UART_SetConfig+0x348>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <UART_SetConfig+0x2d8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d120      	bne.n	8002fd6 <UART_SetConfig+0x1c6>
 8002f94:	4b51      	ldr	r3, [pc, #324]	; (80030dc <UART_SetConfig+0x2cc>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa0:	d013      	beq.n	8002fca <UART_SetConfig+0x1ba>
 8002fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa4:	d814      	bhi.n	8002fd0 <UART_SetConfig+0x1c0>
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d009      	beq.n	8002fbe <UART_SetConfig+0x1ae>
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d810      	bhi.n	8002fd0 <UART_SetConfig+0x1c0>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <UART_SetConfig+0x1a8>
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d006      	beq.n	8002fc4 <UART_SetConfig+0x1b4>
 8002fb6:	e00b      	b.n	8002fd0 <UART_SetConfig+0x1c0>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e0cc      	b.n	8003158 <UART_SetConfig+0x348>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	77fb      	strb	r3, [r7, #31]
 8002fc2:	e0c9      	b.n	8003158 <UART_SetConfig+0x348>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e0c6      	b.n	8003158 <UART_SetConfig+0x348>
 8002fca:	2308      	movs	r3, #8
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e0c3      	b.n	8003158 <UART_SetConfig+0x348>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e0c0      	b.n	8003158 <UART_SetConfig+0x348>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a44      	ldr	r2, [pc, #272]	; (80030ec <UART_SetConfig+0x2dc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d125      	bne.n	800302c <UART_SetConfig+0x21c>
 8002fe0:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <UART_SetConfig+0x2cc>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fee:	d017      	beq.n	8003020 <UART_SetConfig+0x210>
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d817      	bhi.n	8003026 <UART_SetConfig+0x216>
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffa:	d00b      	beq.n	8003014 <UART_SetConfig+0x204>
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d811      	bhi.n	8003026 <UART_SetConfig+0x216>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <UART_SetConfig+0x1fe>
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	d006      	beq.n	800301a <UART_SetConfig+0x20a>
 800300c:	e00b      	b.n	8003026 <UART_SetConfig+0x216>
 800300e:	2300      	movs	r3, #0
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e0a1      	b.n	8003158 <UART_SetConfig+0x348>
 8003014:	2302      	movs	r3, #2
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e09e      	b.n	8003158 <UART_SetConfig+0x348>
 800301a:	2304      	movs	r3, #4
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e09b      	b.n	8003158 <UART_SetConfig+0x348>
 8003020:	2308      	movs	r3, #8
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e098      	b.n	8003158 <UART_SetConfig+0x348>
 8003026:	2310      	movs	r3, #16
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e095      	b.n	8003158 <UART_SetConfig+0x348>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <UART_SetConfig+0x2e0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d125      	bne.n	8003082 <UART_SetConfig+0x272>
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <UART_SetConfig+0x2cc>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003044:	d017      	beq.n	8003076 <UART_SetConfig+0x266>
 8003046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800304a:	d817      	bhi.n	800307c <UART_SetConfig+0x26c>
 800304c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003050:	d00b      	beq.n	800306a <UART_SetConfig+0x25a>
 8003052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003056:	d811      	bhi.n	800307c <UART_SetConfig+0x26c>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <UART_SetConfig+0x254>
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d006      	beq.n	8003070 <UART_SetConfig+0x260>
 8003062:	e00b      	b.n	800307c <UART_SetConfig+0x26c>
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e076      	b.n	8003158 <UART_SetConfig+0x348>
 800306a:	2302      	movs	r3, #2
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e073      	b.n	8003158 <UART_SetConfig+0x348>
 8003070:	2304      	movs	r3, #4
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e070      	b.n	8003158 <UART_SetConfig+0x348>
 8003076:	2308      	movs	r3, #8
 8003078:	77fb      	strb	r3, [r7, #31]
 800307a:	e06d      	b.n	8003158 <UART_SetConfig+0x348>
 800307c:	2310      	movs	r3, #16
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e06a      	b.n	8003158 <UART_SetConfig+0x348>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <UART_SetConfig+0x2e4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d138      	bne.n	80030fe <UART_SetConfig+0x2ee>
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <UART_SetConfig+0x2cc>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800309a:	d017      	beq.n	80030cc <UART_SetConfig+0x2bc>
 800309c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030a0:	d82a      	bhi.n	80030f8 <UART_SetConfig+0x2e8>
 80030a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a6:	d00b      	beq.n	80030c0 <UART_SetConfig+0x2b0>
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ac:	d824      	bhi.n	80030f8 <UART_SetConfig+0x2e8>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <UART_SetConfig+0x2aa>
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b6:	d006      	beq.n	80030c6 <UART_SetConfig+0x2b6>
 80030b8:	e01e      	b.n	80030f8 <UART_SetConfig+0x2e8>
 80030ba:	2300      	movs	r3, #0
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e04b      	b.n	8003158 <UART_SetConfig+0x348>
 80030c0:	2302      	movs	r3, #2
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e048      	b.n	8003158 <UART_SetConfig+0x348>
 80030c6:	2304      	movs	r3, #4
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e045      	b.n	8003158 <UART_SetConfig+0x348>
 80030cc:	2308      	movs	r3, #8
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e042      	b.n	8003158 <UART_SetConfig+0x348>
 80030d2:	bf00      	nop
 80030d4:	efff69f3 	.word	0xefff69f3
 80030d8:	40011000 	.word	0x40011000
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40004400 	.word	0x40004400
 80030e4:	40004800 	.word	0x40004800
 80030e8:	40004c00 	.word	0x40004c00
 80030ec:	40005000 	.word	0x40005000
 80030f0:	40011400 	.word	0x40011400
 80030f4:	40007800 	.word	0x40007800
 80030f8:	2310      	movs	r3, #16
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e02c      	b.n	8003158 <UART_SetConfig+0x348>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a72      	ldr	r2, [pc, #456]	; (80032cc <UART_SetConfig+0x4bc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d125      	bne.n	8003154 <UART_SetConfig+0x344>
 8003108:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <UART_SetConfig+0x4c0>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003112:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003116:	d017      	beq.n	8003148 <UART_SetConfig+0x338>
 8003118:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800311c:	d817      	bhi.n	800314e <UART_SetConfig+0x33e>
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d00b      	beq.n	800313c <UART_SetConfig+0x32c>
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003128:	d811      	bhi.n	800314e <UART_SetConfig+0x33e>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <UART_SetConfig+0x326>
 800312e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003132:	d006      	beq.n	8003142 <UART_SetConfig+0x332>
 8003134:	e00b      	b.n	800314e <UART_SetConfig+0x33e>
 8003136:	2300      	movs	r3, #0
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e00d      	b.n	8003158 <UART_SetConfig+0x348>
 800313c:	2302      	movs	r3, #2
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e00a      	b.n	8003158 <UART_SetConfig+0x348>
 8003142:	2304      	movs	r3, #4
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e007      	b.n	8003158 <UART_SetConfig+0x348>
 8003148:	2308      	movs	r3, #8
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e004      	b.n	8003158 <UART_SetConfig+0x348>
 800314e:	2310      	movs	r3, #16
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e001      	b.n	8003158 <UART_SetConfig+0x348>
 8003154:	2310      	movs	r3, #16
 8003156:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003160:	d15b      	bne.n	800321a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003162:	7ffb      	ldrb	r3, [r7, #31]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d828      	bhi.n	80031ba <UART_SetConfig+0x3aa>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0x360>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003195 	.word	0x08003195
 8003174:	0800319d 	.word	0x0800319d
 8003178:	080031a5 	.word	0x080031a5
 800317c:	080031bb 	.word	0x080031bb
 8003180:	080031ab 	.word	0x080031ab
 8003184:	080031bb 	.word	0x080031bb
 8003188:	080031bb 	.word	0x080031bb
 800318c:	080031bb 	.word	0x080031bb
 8003190:	080031b3 	.word	0x080031b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003194:	f7fe fdea 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8003198:	61b8      	str	r0, [r7, #24]
        break;
 800319a:	e013      	b.n	80031c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800319c:	f7fe fdfa 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 80031a0:	61b8      	str	r0, [r7, #24]
        break;
 80031a2:	e00f      	b.n	80031c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <UART_SetConfig+0x4c4>)
 80031a6:	61bb      	str	r3, [r7, #24]
        break;
 80031a8:	e00c      	b.n	80031c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031aa:	f7fe fd0d 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 80031ae:	61b8      	str	r0, [r7, #24]
        break;
 80031b0:	e008      	b.n	80031c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b6:	61bb      	str	r3, [r7, #24]
        break;
 80031b8:	e004      	b.n	80031c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	77bb      	strb	r3, [r7, #30]
        break;
 80031c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d074      	beq.n	80032b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	005a      	lsls	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	d916      	bls.n	8003214 <UART_SetConfig+0x404>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d212      	bcs.n	8003214 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f023 030f 	bic.w	r3, r3, #15
 80031f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	b29a      	uxth	r2, r3
 8003204:	89fb      	ldrh	r3, [r7, #14]
 8003206:	4313      	orrs	r3, r2
 8003208:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	89fa      	ldrh	r2, [r7, #14]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e04f      	b.n	80032b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	77bb      	strb	r3, [r7, #30]
 8003218:	e04c      	b.n	80032b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800321a:	7ffb      	ldrb	r3, [r7, #31]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d828      	bhi.n	8003272 <UART_SetConfig+0x462>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_SetConfig+0x418>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800324d 	.word	0x0800324d
 800322c:	08003255 	.word	0x08003255
 8003230:	0800325d 	.word	0x0800325d
 8003234:	08003273 	.word	0x08003273
 8003238:	08003263 	.word	0x08003263
 800323c:	08003273 	.word	0x08003273
 8003240:	08003273 	.word	0x08003273
 8003244:	08003273 	.word	0x08003273
 8003248:	0800326b 	.word	0x0800326b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe fd8e 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8003250:	61b8      	str	r0, [r7, #24]
        break;
 8003252:	e013      	b.n	800327c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7fe fd9e 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 8003258:	61b8      	str	r0, [r7, #24]
        break;
 800325a:	e00f      	b.n	800327c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <UART_SetConfig+0x4c4>)
 800325e:	61bb      	str	r3, [r7, #24]
        break;
 8003260:	e00c      	b.n	800327c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003262:	f7fe fcb1 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8003266:	61b8      	str	r0, [r7, #24]
        break;
 8003268:	e008      	b.n	800327c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326e:	61bb      	str	r3, [r7, #24]
        break;
 8003270:	e004      	b.n	800327c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	77bb      	strb	r3, [r7, #30]
        break;
 800327a:	bf00      	nop
    }

    if (pclk != 0U)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	085a      	lsrs	r2, r3, #1
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	441a      	add	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b0f      	cmp	r3, #15
 800329a:	d909      	bls.n	80032b0 <UART_SetConfig+0x4a0>
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d205      	bcs.n	80032b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	e001      	b.n	80032b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40007c00 	.word	0x40007c00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400

080032d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01a      	beq.n	80033ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d6:	d10a      	bne.n	80033ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800342c:	f7fd fc40 	bl	8000cb0 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d10e      	bne.n	800345e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f831 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e027      	b.n	80034ae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d10e      	bne.n	800348a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800346c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f81b 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e011      	b.n	80034ae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b09c      	sub	sp, #112	; 0x70
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c6:	e0a7      	b.n	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	f000 80a3 	beq.w	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fd fbed 	bl	8000cb0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80034e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d13f      	bne.n	8003568 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003508:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800350c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e6      	bne.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3308      	adds	r3, #8
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	663b      	str	r3, [r7, #96]	; 0x60
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3308      	adds	r3, #8
 8003538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800353a:	64ba      	str	r2, [r7, #72]	; 0x48
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e068      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d050      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d148      	bne.n	8003618 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800358e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e6      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3308      	adds	r3, #8
 80035c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	613b      	str	r3, [r7, #16]
   return(result);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3308      	adds	r3, #8
 80035e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035e2:	623a      	str	r2, [r7, #32]
 80035e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	69f9      	ldr	r1, [r7, #28]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e5      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e010      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	f43f af48 	beq.w	80034c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3770      	adds	r7, #112	; 0x70
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003644:	b480      	push	{r7}
 8003646:	b097      	sub	sp, #92	; 0x5c
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003676:	d10e      	bne.n	8003696 <UART_Start_Receive_IT+0x52>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <UART_Start_Receive_IT+0x48>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800368a:	e02d      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003694:	e028      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <UART_Start_Receive_IT+0x76>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <UART_Start_Receive_IT+0x6c>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ae:	e01b      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	227f      	movs	r2, #127	; 0x7f
 80036b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b8:	e016      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c2:	d10d      	bne.n	80036e0 <UART_Start_Receive_IT+0x9c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <UART_Start_Receive_IT+0x92>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	227f      	movs	r2, #127	; 0x7f
 80036d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d4:	e008      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	223f      	movs	r2, #63	; 0x3f
 80036da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036de:	e003      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2222      	movs	r2, #34	; 0x22
 80036f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	657b      	str	r3, [r7, #84]	; 0x54
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003718:	64ba      	str	r2, [r7, #72]	; 0x48
 800371a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800371e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d107      	bne.n	8003746 <UART_Start_Receive_IT+0x102>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <UART_Start_Receive_IT+0x184>)
 8003742:	669a      	str	r2, [r3, #104]	; 0x68
 8003744:	e002      	b.n	800374c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a20      	ldr	r2, [pc, #128]	; (80037cc <UART_Start_Receive_IT+0x188>)
 800374a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d019      	beq.n	8003788 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	637b      	str	r3, [r7, #52]	; 0x34
 8003774:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e6      	bne.n	8003754 <UART_Start_Receive_IT+0x110>
 8003786:	e018      	b.n	80037ba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	613b      	str	r3, [r7, #16]
   return(result);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f043 0320 	orr.w	r3, r3, #32
 800379c:	653b      	str	r3, [r7, #80]	; 0x50
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	69f9      	ldr	r1, [r7, #28]
 80037ac:	6a3a      	ldr	r2, [r7, #32]
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	375c      	adds	r7, #92	; 0x5c
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	08003bf5 	.word	0x08003bf5
 80037cc:	08003a8f 	.word	0x08003a8f

080037d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b095      	sub	sp, #84	; 0x54
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
 80037f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e6      	bne.n	80037d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3308      	adds	r3, #8
 8003810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	61fb      	str	r3, [r7, #28]
   return(result);
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800382a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e5      	bne.n	800380a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	2b01      	cmp	r3, #1
 8003844:	d118      	bne.n	8003878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	60bb      	str	r3, [r7, #8]
   return(result);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f023 0310 	bic.w	r3, r3, #16
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6979      	ldr	r1, [r7, #20]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	613b      	str	r3, [r7, #16]
   return(result);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e6      	bne.n	8003846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800388c:	bf00      	nop
 800388e:	3754      	adds	r7, #84	; 0x54
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fa8a 	bl	8002dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b08f      	sub	sp, #60	; 0x3c
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d0:	2b21      	cmp	r3, #33	; 0x21
 80038d2:	d14c      	bne.n	800396e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d132      	bne.n	8003946 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003900:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e6      	bne.n	80038e0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6979      	ldr	r1, [r7, #20]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	613b      	str	r3, [r7, #16]
   return(result);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e6      	bne.n	8003912 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003944:	e013      	b.n	800396e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800396e:	bf00      	nop
 8003970:	373c      	adds	r7, #60	; 0x3c
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800397a:	b480      	push	{r7}
 800397c:	b091      	sub	sp, #68	; 0x44
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003986:	2b21      	cmp	r3, #33	; 0x21
 8003988:	d151      	bne.n	8003a2e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d132      	bne.n	80039fc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	623b      	str	r3, [r7, #32]
   return(result);
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
 80039b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e6      	bne.n	8003996 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	617b      	str	r3, [r7, #20]
   return(result);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e6      	bne.n	80039c8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80039fa:	e018      	b.n	8003a2e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	1c9a      	adds	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003a2e:	bf00      	nop
 8003a30:	3744      	adds	r7, #68	; 0x44
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b088      	sub	sp, #32
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6979      	ldr	r1, [r7, #20]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff f99b 	bl	8002dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a86:	bf00      	nop
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b096      	sub	sp, #88	; 0x58
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa6:	2b22      	cmp	r3, #34	; 0x22
 8003aa8:	f040 8098 	bne.w	8003bdc <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ab6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003aba:	b2d9      	uxtb	r1, r3
 8003abc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d17b      	bne.n	8003bec <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b08:	653b      	str	r3, [r7, #80]	; 0x50
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
 8003b14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e6      	bne.n	8003af4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	623b      	str	r3, [r7, #32]
   return(result);
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b46:	633a      	str	r2, [r7, #48]	; 0x30
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e5      	bne.n	8003b26 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d12e      	bne.n	8003bd4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f023 0310 	bic.w	r3, r3, #16
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	69b9      	ldr	r1, [r7, #24]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e6      	bne.n	8003b7c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d103      	bne.n	8003bc4 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff f909 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bd2:	e00b      	b.n	8003bec <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7fc fe67 	bl	80008a8 <HAL_UART_RxCpltCallback>
}
 8003bda:	e007      	b.n	8003bec <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	619a      	str	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	3758      	adds	r7, #88	; 0x58
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b096      	sub	sp, #88	; 0x58
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c02:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0c:	2b22      	cmp	r3, #34	; 0x22
 8003c0e:	f040 8098 	bne.w	8003d42 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c22:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003c26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	1c9a      	adds	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d17b      	bne.n	8003d52 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c78:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e6      	bne.n	8003c5a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e5      	bne.n	8003c8c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d12e      	bne.n	8003d3a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f023 0310 	bic.w	r3, r3, #16
 8003cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e6      	bne.n	8003ce2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d103      	bne.n	8003d2a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2210      	movs	r2, #16
 8003d28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff f856 	bl	8002de4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d38:	e00b      	b.n	8003d52 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc fdb4 	bl	80008a8 <HAL_UART_RxCpltCallback>
}
 8003d40:	e007      	b.n	8003d52 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0208 	orr.w	r2, r2, #8
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	bf00      	nop
 8003d54:	3758      	adds	r7, #88	; 0x58
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <__errno>:
 8003d5c:	4b01      	ldr	r3, [pc, #4]	; (8003d64 <__errno+0x8>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000010 	.word	0x20000010

08003d68 <__libc_init_array>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4d0d      	ldr	r5, [pc, #52]	; (8003da0 <__libc_init_array+0x38>)
 8003d6c:	4c0d      	ldr	r4, [pc, #52]	; (8003da4 <__libc_init_array+0x3c>)
 8003d6e:	1b64      	subs	r4, r4, r5
 8003d70:	10a4      	asrs	r4, r4, #2
 8003d72:	2600      	movs	r6, #0
 8003d74:	42a6      	cmp	r6, r4
 8003d76:	d109      	bne.n	8003d8c <__libc_init_array+0x24>
 8003d78:	4d0b      	ldr	r5, [pc, #44]	; (8003da8 <__libc_init_array+0x40>)
 8003d7a:	4c0c      	ldr	r4, [pc, #48]	; (8003dac <__libc_init_array+0x44>)
 8003d7c:	f000 fc8e 	bl	800469c <_init>
 8003d80:	1b64      	subs	r4, r4, r5
 8003d82:	10a4      	asrs	r4, r4, #2
 8003d84:	2600      	movs	r6, #0
 8003d86:	42a6      	cmp	r6, r4
 8003d88:	d105      	bne.n	8003d96 <__libc_init_array+0x2e>
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
 8003d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d90:	4798      	blx	r3
 8003d92:	3601      	adds	r6, #1
 8003d94:	e7ee      	b.n	8003d74 <__libc_init_array+0xc>
 8003d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9a:	4798      	blx	r3
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	e7f2      	b.n	8003d86 <__libc_init_array+0x1e>
 8003da0:	0800472c 	.word	0x0800472c
 8003da4:	0800472c 	.word	0x0800472c
 8003da8:	0800472c 	.word	0x0800472c
 8003dac:	08004730 	.word	0x08004730

08003db0 <memset>:
 8003db0:	4402      	add	r2, r0
 8003db2:	4603      	mov	r3, r0
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d100      	bne.n	8003dba <memset+0xa>
 8003db8:	4770      	bx	lr
 8003dba:	f803 1b01 	strb.w	r1, [r3], #1
 8003dbe:	e7f9      	b.n	8003db4 <memset+0x4>

08003dc0 <siprintf>:
 8003dc0:	b40e      	push	{r1, r2, r3}
 8003dc2:	b500      	push	{lr}
 8003dc4:	b09c      	sub	sp, #112	; 0x70
 8003dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003dc8:	9002      	str	r0, [sp, #8]
 8003dca:	9006      	str	r0, [sp, #24]
 8003dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dd0:	4809      	ldr	r0, [pc, #36]	; (8003df8 <siprintf+0x38>)
 8003dd2:	9107      	str	r1, [sp, #28]
 8003dd4:	9104      	str	r1, [sp, #16]
 8003dd6:	4909      	ldr	r1, [pc, #36]	; (8003dfc <siprintf+0x3c>)
 8003dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ddc:	9105      	str	r1, [sp, #20]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	a902      	add	r1, sp, #8
 8003de4:	f000 f868 	bl	8003eb8 <_svfiprintf_r>
 8003de8:	9b02      	ldr	r3, [sp, #8]
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	b01c      	add	sp, #112	; 0x70
 8003df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df4:	b003      	add	sp, #12
 8003df6:	4770      	bx	lr
 8003df8:	20000010 	.word	0x20000010
 8003dfc:	ffff0208 	.word	0xffff0208

08003e00 <__ssputs_r>:
 8003e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e04:	688e      	ldr	r6, [r1, #8]
 8003e06:	429e      	cmp	r6, r3
 8003e08:	4682      	mov	sl, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4690      	mov	r8, r2
 8003e0e:	461f      	mov	r7, r3
 8003e10:	d838      	bhi.n	8003e84 <__ssputs_r+0x84>
 8003e12:	898a      	ldrh	r2, [r1, #12]
 8003e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e18:	d032      	beq.n	8003e80 <__ssputs_r+0x80>
 8003e1a:	6825      	ldr	r5, [r4, #0]
 8003e1c:	6909      	ldr	r1, [r1, #16]
 8003e1e:	eba5 0901 	sub.w	r9, r5, r1
 8003e22:	6965      	ldr	r5, [r4, #20]
 8003e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	444b      	add	r3, r9
 8003e30:	106d      	asrs	r5, r5, #1
 8003e32:	429d      	cmp	r5, r3
 8003e34:	bf38      	it	cc
 8003e36:	461d      	movcc	r5, r3
 8003e38:	0553      	lsls	r3, r2, #21
 8003e3a:	d531      	bpl.n	8003ea0 <__ssputs_r+0xa0>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	f000 fb63 	bl	8004508 <_malloc_r>
 8003e42:	4606      	mov	r6, r0
 8003e44:	b950      	cbnz	r0, 8003e5c <__ssputs_r+0x5c>
 8003e46:	230c      	movs	r3, #12
 8003e48:	f8ca 3000 	str.w	r3, [sl]
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5c:	6921      	ldr	r1, [r4, #16]
 8003e5e:	464a      	mov	r2, r9
 8003e60:	f000 fabe 	bl	80043e0 <memcpy>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	6126      	str	r6, [r4, #16]
 8003e72:	6165      	str	r5, [r4, #20]
 8003e74:	444e      	add	r6, r9
 8003e76:	eba5 0509 	sub.w	r5, r5, r9
 8003e7a:	6026      	str	r6, [r4, #0]
 8003e7c:	60a5      	str	r5, [r4, #8]
 8003e7e:	463e      	mov	r6, r7
 8003e80:	42be      	cmp	r6, r7
 8003e82:	d900      	bls.n	8003e86 <__ssputs_r+0x86>
 8003e84:	463e      	mov	r6, r7
 8003e86:	6820      	ldr	r0, [r4, #0]
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	f000 fab6 	bl	80043fc <memmove>
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	1b9b      	subs	r3, r3, r6
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	4433      	add	r3, r6
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e7db      	b.n	8003e58 <__ssputs_r+0x58>
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	f000 fba5 	bl	80045f0 <_realloc_r>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d1e1      	bne.n	8003e70 <__ssputs_r+0x70>
 8003eac:	6921      	ldr	r1, [r4, #16]
 8003eae:	4650      	mov	r0, sl
 8003eb0:	f000 fabe 	bl	8004430 <_free_r>
 8003eb4:	e7c7      	b.n	8003e46 <__ssputs_r+0x46>
	...

08003eb8 <_svfiprintf_r>:
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ebc:	4698      	mov	r8, r3
 8003ebe:	898b      	ldrh	r3, [r1, #12]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	b09d      	sub	sp, #116	; 0x74
 8003ec4:	4607      	mov	r7, r0
 8003ec6:	460d      	mov	r5, r1
 8003ec8:	4614      	mov	r4, r2
 8003eca:	d50e      	bpl.n	8003eea <_svfiprintf_r+0x32>
 8003ecc:	690b      	ldr	r3, [r1, #16]
 8003ece:	b963      	cbnz	r3, 8003eea <_svfiprintf_r+0x32>
 8003ed0:	2140      	movs	r1, #64	; 0x40
 8003ed2:	f000 fb19 	bl	8004508 <_malloc_r>
 8003ed6:	6028      	str	r0, [r5, #0]
 8003ed8:	6128      	str	r0, [r5, #16]
 8003eda:	b920      	cbnz	r0, 8003ee6 <_svfiprintf_r+0x2e>
 8003edc:	230c      	movs	r3, #12
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	e0d1      	b.n	800408a <_svfiprintf_r+0x1d2>
 8003ee6:	2340      	movs	r3, #64	; 0x40
 8003ee8:	616b      	str	r3, [r5, #20]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9309      	str	r3, [sp, #36]	; 0x24
 8003eee:	2320      	movs	r3, #32
 8003ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ef8:	2330      	movs	r3, #48	; 0x30
 8003efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040a4 <_svfiprintf_r+0x1ec>
 8003efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f02:	f04f 0901 	mov.w	r9, #1
 8003f06:	4623      	mov	r3, r4
 8003f08:	469a      	mov	sl, r3
 8003f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f0e:	b10a      	cbz	r2, 8003f14 <_svfiprintf_r+0x5c>
 8003f10:	2a25      	cmp	r2, #37	; 0x25
 8003f12:	d1f9      	bne.n	8003f08 <_svfiprintf_r+0x50>
 8003f14:	ebba 0b04 	subs.w	fp, sl, r4
 8003f18:	d00b      	beq.n	8003f32 <_svfiprintf_r+0x7a>
 8003f1a:	465b      	mov	r3, fp
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4638      	mov	r0, r7
 8003f22:	f7ff ff6d 	bl	8003e00 <__ssputs_r>
 8003f26:	3001      	adds	r0, #1
 8003f28:	f000 80aa 	beq.w	8004080 <_svfiprintf_r+0x1c8>
 8003f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f2e:	445a      	add	r2, fp
 8003f30:	9209      	str	r2, [sp, #36]	; 0x24
 8003f32:	f89a 3000 	ldrb.w	r3, [sl]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80a2 	beq.w	8004080 <_svfiprintf_r+0x1c8>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f46:	f10a 0a01 	add.w	sl, sl, #1
 8003f4a:	9304      	str	r3, [sp, #16]
 8003f4c:	9307      	str	r3, [sp, #28]
 8003f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f52:	931a      	str	r3, [sp, #104]	; 0x68
 8003f54:	4654      	mov	r4, sl
 8003f56:	2205      	movs	r2, #5
 8003f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f5c:	4851      	ldr	r0, [pc, #324]	; (80040a4 <_svfiprintf_r+0x1ec>)
 8003f5e:	f7fc f96f 	bl	8000240 <memchr>
 8003f62:	9a04      	ldr	r2, [sp, #16]
 8003f64:	b9d8      	cbnz	r0, 8003f9e <_svfiprintf_r+0xe6>
 8003f66:	06d0      	lsls	r0, r2, #27
 8003f68:	bf44      	itt	mi
 8003f6a:	2320      	movmi	r3, #32
 8003f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f70:	0711      	lsls	r1, r2, #28
 8003f72:	bf44      	itt	mi
 8003f74:	232b      	movmi	r3, #43	; 0x2b
 8003f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f80:	d015      	beq.n	8003fae <_svfiprintf_r+0xf6>
 8003f82:	9a07      	ldr	r2, [sp, #28]
 8003f84:	4654      	mov	r4, sl
 8003f86:	2000      	movs	r0, #0
 8003f88:	f04f 0c0a 	mov.w	ip, #10
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f92:	3b30      	subs	r3, #48	; 0x30
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	d94e      	bls.n	8004036 <_svfiprintf_r+0x17e>
 8003f98:	b1b0      	cbz	r0, 8003fc8 <_svfiprintf_r+0x110>
 8003f9a:	9207      	str	r2, [sp, #28]
 8003f9c:	e014      	b.n	8003fc8 <_svfiprintf_r+0x110>
 8003f9e:	eba0 0308 	sub.w	r3, r0, r8
 8003fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	9304      	str	r3, [sp, #16]
 8003faa:	46a2      	mov	sl, r4
 8003fac:	e7d2      	b.n	8003f54 <_svfiprintf_r+0x9c>
 8003fae:	9b03      	ldr	r3, [sp, #12]
 8003fb0:	1d19      	adds	r1, r3, #4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	9103      	str	r1, [sp, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bfbb      	ittet	lt
 8003fba:	425b      	neglt	r3, r3
 8003fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8003fc0:	9307      	strge	r3, [sp, #28]
 8003fc2:	9307      	strlt	r3, [sp, #28]
 8003fc4:	bfb8      	it	lt
 8003fc6:	9204      	strlt	r2, [sp, #16]
 8003fc8:	7823      	ldrb	r3, [r4, #0]
 8003fca:	2b2e      	cmp	r3, #46	; 0x2e
 8003fcc:	d10c      	bne.n	8003fe8 <_svfiprintf_r+0x130>
 8003fce:	7863      	ldrb	r3, [r4, #1]
 8003fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd2:	d135      	bne.n	8004040 <_svfiprintf_r+0x188>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	1d1a      	adds	r2, r3, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	9203      	str	r2, [sp, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bfb8      	it	lt
 8003fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fe4:	3402      	adds	r4, #2
 8003fe6:	9305      	str	r3, [sp, #20]
 8003fe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040b4 <_svfiprintf_r+0x1fc>
 8003fec:	7821      	ldrb	r1, [r4, #0]
 8003fee:	2203      	movs	r2, #3
 8003ff0:	4650      	mov	r0, sl
 8003ff2:	f7fc f925 	bl	8000240 <memchr>
 8003ff6:	b140      	cbz	r0, 800400a <_svfiprintf_r+0x152>
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	eba0 000a 	sub.w	r0, r0, sl
 8003ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8004002:	9b04      	ldr	r3, [sp, #16]
 8004004:	4303      	orrs	r3, r0
 8004006:	3401      	adds	r4, #1
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800400e:	4826      	ldr	r0, [pc, #152]	; (80040a8 <_svfiprintf_r+0x1f0>)
 8004010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004014:	2206      	movs	r2, #6
 8004016:	f7fc f913 	bl	8000240 <memchr>
 800401a:	2800      	cmp	r0, #0
 800401c:	d038      	beq.n	8004090 <_svfiprintf_r+0x1d8>
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <_svfiprintf_r+0x1f4>)
 8004020:	bb1b      	cbnz	r3, 800406a <_svfiprintf_r+0x1b2>
 8004022:	9b03      	ldr	r3, [sp, #12]
 8004024:	3307      	adds	r3, #7
 8004026:	f023 0307 	bic.w	r3, r3, #7
 800402a:	3308      	adds	r3, #8
 800402c:	9303      	str	r3, [sp, #12]
 800402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004030:	4433      	add	r3, r6
 8004032:	9309      	str	r3, [sp, #36]	; 0x24
 8004034:	e767      	b.n	8003f06 <_svfiprintf_r+0x4e>
 8004036:	fb0c 3202 	mla	r2, ip, r2, r3
 800403a:	460c      	mov	r4, r1
 800403c:	2001      	movs	r0, #1
 800403e:	e7a5      	b.n	8003f8c <_svfiprintf_r+0xd4>
 8004040:	2300      	movs	r3, #0
 8004042:	3401      	adds	r4, #1
 8004044:	9305      	str	r3, [sp, #20]
 8004046:	4619      	mov	r1, r3
 8004048:	f04f 0c0a 	mov.w	ip, #10
 800404c:	4620      	mov	r0, r4
 800404e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004052:	3a30      	subs	r2, #48	; 0x30
 8004054:	2a09      	cmp	r2, #9
 8004056:	d903      	bls.n	8004060 <_svfiprintf_r+0x1a8>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0c5      	beq.n	8003fe8 <_svfiprintf_r+0x130>
 800405c:	9105      	str	r1, [sp, #20]
 800405e:	e7c3      	b.n	8003fe8 <_svfiprintf_r+0x130>
 8004060:	fb0c 2101 	mla	r1, ip, r1, r2
 8004064:	4604      	mov	r4, r0
 8004066:	2301      	movs	r3, #1
 8004068:	e7f0      	b.n	800404c <_svfiprintf_r+0x194>
 800406a:	ab03      	add	r3, sp, #12
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	462a      	mov	r2, r5
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <_svfiprintf_r+0x1f8>)
 8004072:	a904      	add	r1, sp, #16
 8004074:	4638      	mov	r0, r7
 8004076:	f3af 8000 	nop.w
 800407a:	1c42      	adds	r2, r0, #1
 800407c:	4606      	mov	r6, r0
 800407e:	d1d6      	bne.n	800402e <_svfiprintf_r+0x176>
 8004080:	89ab      	ldrh	r3, [r5, #12]
 8004082:	065b      	lsls	r3, r3, #25
 8004084:	f53f af2c 	bmi.w	8003ee0 <_svfiprintf_r+0x28>
 8004088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800408a:	b01d      	add	sp, #116	; 0x74
 800408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004090:	ab03      	add	r3, sp, #12
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	462a      	mov	r2, r5
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <_svfiprintf_r+0x1f8>)
 8004098:	a904      	add	r1, sp, #16
 800409a:	4638      	mov	r0, r7
 800409c:	f000 f87a 	bl	8004194 <_printf_i>
 80040a0:	e7eb      	b.n	800407a <_svfiprintf_r+0x1c2>
 80040a2:	bf00      	nop
 80040a4:	080046f0 	.word	0x080046f0
 80040a8:	080046fa 	.word	0x080046fa
 80040ac:	00000000 	.word	0x00000000
 80040b0:	08003e01 	.word	0x08003e01
 80040b4:	080046f6 	.word	0x080046f6

080040b8 <_printf_common>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	4616      	mov	r6, r2
 80040be:	4699      	mov	r9, r3
 80040c0:	688a      	ldr	r2, [r1, #8]
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	bfb8      	it	lt
 80040cc:	4613      	movlt	r3, r2
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d4:	4607      	mov	r7, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	b10a      	cbz	r2, 80040de <_printf_common+0x26>
 80040da:	3301      	adds	r3, #1
 80040dc:	6033      	str	r3, [r6, #0]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	0699      	lsls	r1, r3, #26
 80040e2:	bf42      	ittt	mi
 80040e4:	6833      	ldrmi	r3, [r6, #0]
 80040e6:	3302      	addmi	r3, #2
 80040e8:	6033      	strmi	r3, [r6, #0]
 80040ea:	6825      	ldr	r5, [r4, #0]
 80040ec:	f015 0506 	ands.w	r5, r5, #6
 80040f0:	d106      	bne.n	8004100 <_printf_common+0x48>
 80040f2:	f104 0a19 	add.w	sl, r4, #25
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	6832      	ldr	r2, [r6, #0]
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	42ab      	cmp	r3, r5
 80040fe:	dc26      	bgt.n	800414e <_printf_common+0x96>
 8004100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004104:	1e13      	subs	r3, r2, #0
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	bf18      	it	ne
 800410a:	2301      	movne	r3, #1
 800410c:	0692      	lsls	r2, r2, #26
 800410e:	d42b      	bmi.n	8004168 <_printf_common+0xb0>
 8004110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004114:	4649      	mov	r1, r9
 8004116:	4638      	mov	r0, r7
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d01e      	beq.n	800415c <_printf_common+0xa4>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	68e5      	ldr	r5, [r4, #12]
 8004122:	6832      	ldr	r2, [r6, #0]
 8004124:	f003 0306 	and.w	r3, r3, #6
 8004128:	2b04      	cmp	r3, #4
 800412a:	bf08      	it	eq
 800412c:	1aad      	subeq	r5, r5, r2
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	6922      	ldr	r2, [r4, #16]
 8004132:	bf0c      	ite	eq
 8004134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004138:	2500      	movne	r5, #0
 800413a:	4293      	cmp	r3, r2
 800413c:	bfc4      	itt	gt
 800413e:	1a9b      	subgt	r3, r3, r2
 8004140:	18ed      	addgt	r5, r5, r3
 8004142:	2600      	movs	r6, #0
 8004144:	341a      	adds	r4, #26
 8004146:	42b5      	cmp	r5, r6
 8004148:	d11a      	bne.n	8004180 <_printf_common+0xc8>
 800414a:	2000      	movs	r0, #0
 800414c:	e008      	b.n	8004160 <_printf_common+0xa8>
 800414e:	2301      	movs	r3, #1
 8004150:	4652      	mov	r2, sl
 8004152:	4649      	mov	r1, r9
 8004154:	4638      	mov	r0, r7
 8004156:	47c0      	blx	r8
 8004158:	3001      	adds	r0, #1
 800415a:	d103      	bne.n	8004164 <_printf_common+0xac>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	3501      	adds	r5, #1
 8004166:	e7c6      	b.n	80040f6 <_printf_common+0x3e>
 8004168:	18e1      	adds	r1, r4, r3
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	2030      	movs	r0, #48	; 0x30
 800416e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004172:	4422      	add	r2, r4
 8004174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800417c:	3302      	adds	r3, #2
 800417e:	e7c7      	b.n	8004110 <_printf_common+0x58>
 8004180:	2301      	movs	r3, #1
 8004182:	4622      	mov	r2, r4
 8004184:	4649      	mov	r1, r9
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d0e6      	beq.n	800415c <_printf_common+0xa4>
 800418e:	3601      	adds	r6, #1
 8004190:	e7d9      	b.n	8004146 <_printf_common+0x8e>
	...

08004194 <_printf_i>:
 8004194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	7e0f      	ldrb	r7, [r1, #24]
 800419a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800419c:	2f78      	cmp	r7, #120	; 0x78
 800419e:	4691      	mov	r9, r2
 80041a0:	4680      	mov	r8, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	469a      	mov	sl, r3
 80041a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041aa:	d807      	bhi.n	80041bc <_printf_i+0x28>
 80041ac:	2f62      	cmp	r7, #98	; 0x62
 80041ae:	d80a      	bhi.n	80041c6 <_printf_i+0x32>
 80041b0:	2f00      	cmp	r7, #0
 80041b2:	f000 80d8 	beq.w	8004366 <_printf_i+0x1d2>
 80041b6:	2f58      	cmp	r7, #88	; 0x58
 80041b8:	f000 80a3 	beq.w	8004302 <_printf_i+0x16e>
 80041bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c4:	e03a      	b.n	800423c <_printf_i+0xa8>
 80041c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ca:	2b15      	cmp	r3, #21
 80041cc:	d8f6      	bhi.n	80041bc <_printf_i+0x28>
 80041ce:	a101      	add	r1, pc, #4	; (adr r1, 80041d4 <_printf_i+0x40>)
 80041d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	08004241 	.word	0x08004241
 80041dc:	080041bd 	.word	0x080041bd
 80041e0:	080041bd 	.word	0x080041bd
 80041e4:	080041bd 	.word	0x080041bd
 80041e8:	080041bd 	.word	0x080041bd
 80041ec:	08004241 	.word	0x08004241
 80041f0:	080041bd 	.word	0x080041bd
 80041f4:	080041bd 	.word	0x080041bd
 80041f8:	080041bd 	.word	0x080041bd
 80041fc:	080041bd 	.word	0x080041bd
 8004200:	0800434d 	.word	0x0800434d
 8004204:	08004271 	.word	0x08004271
 8004208:	0800432f 	.word	0x0800432f
 800420c:	080041bd 	.word	0x080041bd
 8004210:	080041bd 	.word	0x080041bd
 8004214:	0800436f 	.word	0x0800436f
 8004218:	080041bd 	.word	0x080041bd
 800421c:	08004271 	.word	0x08004271
 8004220:	080041bd 	.word	0x080041bd
 8004224:	080041bd 	.word	0x080041bd
 8004228:	08004337 	.word	0x08004337
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	602a      	str	r2, [r5, #0]
 8004234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423c:	2301      	movs	r3, #1
 800423e:	e0a3      	b.n	8004388 <_printf_i+0x1f4>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	6829      	ldr	r1, [r5, #0]
 8004244:	0606      	lsls	r6, r0, #24
 8004246:	f101 0304 	add.w	r3, r1, #4
 800424a:	d50a      	bpl.n	8004262 <_printf_i+0xce>
 800424c:	680e      	ldr	r6, [r1, #0]
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	2e00      	cmp	r6, #0
 8004252:	da03      	bge.n	800425c <_printf_i+0xc8>
 8004254:	232d      	movs	r3, #45	; 0x2d
 8004256:	4276      	negs	r6, r6
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	485e      	ldr	r0, [pc, #376]	; (80043d8 <_printf_i+0x244>)
 800425e:	230a      	movs	r3, #10
 8004260:	e019      	b.n	8004296 <_printf_i+0x102>
 8004262:	680e      	ldr	r6, [r1, #0]
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800426a:	bf18      	it	ne
 800426c:	b236      	sxthne	r6, r6
 800426e:	e7ef      	b.n	8004250 <_printf_i+0xbc>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	6029      	str	r1, [r5, #0]
 8004278:	0601      	lsls	r1, r0, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xec>
 800427c:	681e      	ldr	r6, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0xf2>
 8004280:	0646      	lsls	r6, r0, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xe8>
 8004284:	881e      	ldrh	r6, [r3, #0]
 8004286:	4854      	ldr	r0, [pc, #336]	; (80043d8 <_printf_i+0x244>)
 8004288:	2f6f      	cmp	r7, #111	; 0x6f
 800428a:	bf0c      	ite	eq
 800428c:	2308      	moveq	r3, #8
 800428e:	230a      	movne	r3, #10
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004296:	6865      	ldr	r5, [r4, #4]
 8004298:	60a5      	str	r5, [r4, #8]
 800429a:	2d00      	cmp	r5, #0
 800429c:	bfa2      	ittt	ge
 800429e:	6821      	ldrge	r1, [r4, #0]
 80042a0:	f021 0104 	bicge.w	r1, r1, #4
 80042a4:	6021      	strge	r1, [r4, #0]
 80042a6:	b90e      	cbnz	r6, 80042ac <_printf_i+0x118>
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	d04d      	beq.n	8004348 <_printf_i+0x1b4>
 80042ac:	4615      	mov	r5, r2
 80042ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80042b2:	fb03 6711 	mls	r7, r3, r1, r6
 80042b6:	5dc7      	ldrb	r7, [r0, r7]
 80042b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042bc:	4637      	mov	r7, r6
 80042be:	42bb      	cmp	r3, r7
 80042c0:	460e      	mov	r6, r1
 80042c2:	d9f4      	bls.n	80042ae <_printf_i+0x11a>
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d10b      	bne.n	80042e0 <_printf_i+0x14c>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	07de      	lsls	r6, r3, #31
 80042cc:	d508      	bpl.n	80042e0 <_printf_i+0x14c>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	6861      	ldr	r1, [r4, #4]
 80042d2:	4299      	cmp	r1, r3
 80042d4:	bfde      	ittt	le
 80042d6:	2330      	movle	r3, #48	; 0x30
 80042d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042e0:	1b52      	subs	r2, r2, r5
 80042e2:	6122      	str	r2, [r4, #16]
 80042e4:	f8cd a000 	str.w	sl, [sp]
 80042e8:	464b      	mov	r3, r9
 80042ea:	aa03      	add	r2, sp, #12
 80042ec:	4621      	mov	r1, r4
 80042ee:	4640      	mov	r0, r8
 80042f0:	f7ff fee2 	bl	80040b8 <_printf_common>
 80042f4:	3001      	adds	r0, #1
 80042f6:	d14c      	bne.n	8004392 <_printf_i+0x1fe>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	b004      	add	sp, #16
 80042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004302:	4835      	ldr	r0, [pc, #212]	; (80043d8 <_printf_i+0x244>)
 8004304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004308:	6829      	ldr	r1, [r5, #0]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004310:	6029      	str	r1, [r5, #0]
 8004312:	061d      	lsls	r5, r3, #24
 8004314:	d514      	bpl.n	8004340 <_printf_i+0x1ac>
 8004316:	07df      	lsls	r7, r3, #31
 8004318:	bf44      	itt	mi
 800431a:	f043 0320 	orrmi.w	r3, r3, #32
 800431e:	6023      	strmi	r3, [r4, #0]
 8004320:	b91e      	cbnz	r6, 800432a <_printf_i+0x196>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f023 0320 	bic.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	2310      	movs	r3, #16
 800432c:	e7b0      	b.n	8004290 <_printf_i+0xfc>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	f043 0320 	orr.w	r3, r3, #32
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	2378      	movs	r3, #120	; 0x78
 8004338:	4828      	ldr	r0, [pc, #160]	; (80043dc <_printf_i+0x248>)
 800433a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800433e:	e7e3      	b.n	8004308 <_printf_i+0x174>
 8004340:	0659      	lsls	r1, r3, #25
 8004342:	bf48      	it	mi
 8004344:	b2b6      	uxthmi	r6, r6
 8004346:	e7e6      	b.n	8004316 <_printf_i+0x182>
 8004348:	4615      	mov	r5, r2
 800434a:	e7bb      	b.n	80042c4 <_printf_i+0x130>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	6826      	ldr	r6, [r4, #0]
 8004350:	6961      	ldr	r1, [r4, #20]
 8004352:	1d18      	adds	r0, r3, #4
 8004354:	6028      	str	r0, [r5, #0]
 8004356:	0635      	lsls	r5, r6, #24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	d501      	bpl.n	8004360 <_printf_i+0x1cc>
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	e002      	b.n	8004366 <_printf_i+0x1d2>
 8004360:	0670      	lsls	r0, r6, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0x1c8>
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	2300      	movs	r3, #0
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	4615      	mov	r5, r2
 800436c:	e7ba      	b.n	80042e4 <_printf_i+0x150>
 800436e:	682b      	ldr	r3, [r5, #0]
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	602a      	str	r2, [r5, #0]
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	2100      	movs	r1, #0
 800437a:	4628      	mov	r0, r5
 800437c:	f7fb ff60 	bl	8000240 <memchr>
 8004380:	b108      	cbz	r0, 8004386 <_printf_i+0x1f2>
 8004382:	1b40      	subs	r0, r0, r5
 8004384:	6060      	str	r0, [r4, #4]
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	2300      	movs	r3, #0
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004390:	e7a8      	b.n	80042e4 <_printf_i+0x150>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	462a      	mov	r2, r5
 8004396:	4649      	mov	r1, r9
 8004398:	4640      	mov	r0, r8
 800439a:	47d0      	blx	sl
 800439c:	3001      	adds	r0, #1
 800439e:	d0ab      	beq.n	80042f8 <_printf_i+0x164>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	079b      	lsls	r3, r3, #30
 80043a4:	d413      	bmi.n	80043ce <_printf_i+0x23a>
 80043a6:	68e0      	ldr	r0, [r4, #12]
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	4298      	cmp	r0, r3
 80043ac:	bfb8      	it	lt
 80043ae:	4618      	movlt	r0, r3
 80043b0:	e7a4      	b.n	80042fc <_printf_i+0x168>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d09b      	beq.n	80042f8 <_printf_i+0x164>
 80043c0:	3501      	adds	r5, #1
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	9903      	ldr	r1, [sp, #12]
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dcf2      	bgt.n	80043b2 <_printf_i+0x21e>
 80043cc:	e7eb      	b.n	80043a6 <_printf_i+0x212>
 80043ce:	2500      	movs	r5, #0
 80043d0:	f104 0619 	add.w	r6, r4, #25
 80043d4:	e7f5      	b.n	80043c2 <_printf_i+0x22e>
 80043d6:	bf00      	nop
 80043d8:	08004701 	.word	0x08004701
 80043dc:	08004712 	.word	0x08004712

080043e0 <memcpy>:
 80043e0:	440a      	add	r2, r1
 80043e2:	4291      	cmp	r1, r2
 80043e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043e8:	d100      	bne.n	80043ec <memcpy+0xc>
 80043ea:	4770      	bx	lr
 80043ec:	b510      	push	{r4, lr}
 80043ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f6:	4291      	cmp	r1, r2
 80043f8:	d1f9      	bne.n	80043ee <memcpy+0xe>
 80043fa:	bd10      	pop	{r4, pc}

080043fc <memmove>:
 80043fc:	4288      	cmp	r0, r1
 80043fe:	b510      	push	{r4, lr}
 8004400:	eb01 0402 	add.w	r4, r1, r2
 8004404:	d902      	bls.n	800440c <memmove+0x10>
 8004406:	4284      	cmp	r4, r0
 8004408:	4623      	mov	r3, r4
 800440a:	d807      	bhi.n	800441c <memmove+0x20>
 800440c:	1e43      	subs	r3, r0, #1
 800440e:	42a1      	cmp	r1, r4
 8004410:	d008      	beq.n	8004424 <memmove+0x28>
 8004412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800441a:	e7f8      	b.n	800440e <memmove+0x12>
 800441c:	4402      	add	r2, r0
 800441e:	4601      	mov	r1, r0
 8004420:	428a      	cmp	r2, r1
 8004422:	d100      	bne.n	8004426 <memmove+0x2a>
 8004424:	bd10      	pop	{r4, pc}
 8004426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800442a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800442e:	e7f7      	b.n	8004420 <memmove+0x24>

08004430 <_free_r>:
 8004430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004432:	2900      	cmp	r1, #0
 8004434:	d044      	beq.n	80044c0 <_free_r+0x90>
 8004436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443a:	9001      	str	r0, [sp, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f1a1 0404 	sub.w	r4, r1, #4
 8004442:	bfb8      	it	lt
 8004444:	18e4      	addlt	r4, r4, r3
 8004446:	f000 f913 	bl	8004670 <__malloc_lock>
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <_free_r+0x94>)
 800444c:	9801      	ldr	r0, [sp, #4]
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	b933      	cbnz	r3, 8004460 <_free_r+0x30>
 8004452:	6063      	str	r3, [r4, #4]
 8004454:	6014      	str	r4, [r2, #0]
 8004456:	b003      	add	sp, #12
 8004458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800445c:	f000 b90e 	b.w	800467c <__malloc_unlock>
 8004460:	42a3      	cmp	r3, r4
 8004462:	d908      	bls.n	8004476 <_free_r+0x46>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	1961      	adds	r1, r4, r5
 8004468:	428b      	cmp	r3, r1
 800446a:	bf01      	itttt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	1949      	addeq	r1, r1, r5
 8004472:	6021      	streq	r1, [r4, #0]
 8004474:	e7ed      	b.n	8004452 <_free_r+0x22>
 8004476:	461a      	mov	r2, r3
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b10b      	cbz	r3, 8004480 <_free_r+0x50>
 800447c:	42a3      	cmp	r3, r4
 800447e:	d9fa      	bls.n	8004476 <_free_r+0x46>
 8004480:	6811      	ldr	r1, [r2, #0]
 8004482:	1855      	adds	r5, r2, r1
 8004484:	42a5      	cmp	r5, r4
 8004486:	d10b      	bne.n	80044a0 <_free_r+0x70>
 8004488:	6824      	ldr	r4, [r4, #0]
 800448a:	4421      	add	r1, r4
 800448c:	1854      	adds	r4, r2, r1
 800448e:	42a3      	cmp	r3, r4
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	d1e0      	bne.n	8004456 <_free_r+0x26>
 8004494:	681c      	ldr	r4, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	6053      	str	r3, [r2, #4]
 800449a:	4421      	add	r1, r4
 800449c:	6011      	str	r1, [r2, #0]
 800449e:	e7da      	b.n	8004456 <_free_r+0x26>
 80044a0:	d902      	bls.n	80044a8 <_free_r+0x78>
 80044a2:	230c      	movs	r3, #12
 80044a4:	6003      	str	r3, [r0, #0]
 80044a6:	e7d6      	b.n	8004456 <_free_r+0x26>
 80044a8:	6825      	ldr	r5, [r4, #0]
 80044aa:	1961      	adds	r1, r4, r5
 80044ac:	428b      	cmp	r3, r1
 80044ae:	bf04      	itt	eq
 80044b0:	6819      	ldreq	r1, [r3, #0]
 80044b2:	685b      	ldreq	r3, [r3, #4]
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	bf04      	itt	eq
 80044b8:	1949      	addeq	r1, r1, r5
 80044ba:	6021      	streq	r1, [r4, #0]
 80044bc:	6054      	str	r4, [r2, #4]
 80044be:	e7ca      	b.n	8004456 <_free_r+0x26>
 80044c0:	b003      	add	sp, #12
 80044c2:	bd30      	pop	{r4, r5, pc}
 80044c4:	20000138 	.word	0x20000138

080044c8 <sbrk_aligned>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4e0e      	ldr	r6, [pc, #56]	; (8004504 <sbrk_aligned+0x3c>)
 80044cc:	460c      	mov	r4, r1
 80044ce:	6831      	ldr	r1, [r6, #0]
 80044d0:	4605      	mov	r5, r0
 80044d2:	b911      	cbnz	r1, 80044da <sbrk_aligned+0x12>
 80044d4:	f000 f8bc 	bl	8004650 <_sbrk_r>
 80044d8:	6030      	str	r0, [r6, #0]
 80044da:	4621      	mov	r1, r4
 80044dc:	4628      	mov	r0, r5
 80044de:	f000 f8b7 	bl	8004650 <_sbrk_r>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	d00a      	beq.n	80044fc <sbrk_aligned+0x34>
 80044e6:	1cc4      	adds	r4, r0, #3
 80044e8:	f024 0403 	bic.w	r4, r4, #3
 80044ec:	42a0      	cmp	r0, r4
 80044ee:	d007      	beq.n	8004500 <sbrk_aligned+0x38>
 80044f0:	1a21      	subs	r1, r4, r0
 80044f2:	4628      	mov	r0, r5
 80044f4:	f000 f8ac 	bl	8004650 <_sbrk_r>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d101      	bne.n	8004500 <sbrk_aligned+0x38>
 80044fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004500:	4620      	mov	r0, r4
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	2000013c 	.word	0x2000013c

08004508 <_malloc_r>:
 8004508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800450c:	1ccd      	adds	r5, r1, #3
 800450e:	f025 0503 	bic.w	r5, r5, #3
 8004512:	3508      	adds	r5, #8
 8004514:	2d0c      	cmp	r5, #12
 8004516:	bf38      	it	cc
 8004518:	250c      	movcc	r5, #12
 800451a:	2d00      	cmp	r5, #0
 800451c:	4607      	mov	r7, r0
 800451e:	db01      	blt.n	8004524 <_malloc_r+0x1c>
 8004520:	42a9      	cmp	r1, r5
 8004522:	d905      	bls.n	8004530 <_malloc_r+0x28>
 8004524:	230c      	movs	r3, #12
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	2600      	movs	r6, #0
 800452a:	4630      	mov	r0, r6
 800452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004530:	4e2e      	ldr	r6, [pc, #184]	; (80045ec <_malloc_r+0xe4>)
 8004532:	f000 f89d 	bl	8004670 <__malloc_lock>
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	461c      	mov	r4, r3
 800453a:	bb34      	cbnz	r4, 800458a <_malloc_r+0x82>
 800453c:	4629      	mov	r1, r5
 800453e:	4638      	mov	r0, r7
 8004540:	f7ff ffc2 	bl	80044c8 <sbrk_aligned>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	4604      	mov	r4, r0
 8004548:	d14d      	bne.n	80045e6 <_malloc_r+0xde>
 800454a:	6834      	ldr	r4, [r6, #0]
 800454c:	4626      	mov	r6, r4
 800454e:	2e00      	cmp	r6, #0
 8004550:	d140      	bne.n	80045d4 <_malloc_r+0xcc>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	4631      	mov	r1, r6
 8004556:	4638      	mov	r0, r7
 8004558:	eb04 0803 	add.w	r8, r4, r3
 800455c:	f000 f878 	bl	8004650 <_sbrk_r>
 8004560:	4580      	cmp	r8, r0
 8004562:	d13a      	bne.n	80045da <_malloc_r+0xd2>
 8004564:	6821      	ldr	r1, [r4, #0]
 8004566:	3503      	adds	r5, #3
 8004568:	1a6d      	subs	r5, r5, r1
 800456a:	f025 0503 	bic.w	r5, r5, #3
 800456e:	3508      	adds	r5, #8
 8004570:	2d0c      	cmp	r5, #12
 8004572:	bf38      	it	cc
 8004574:	250c      	movcc	r5, #12
 8004576:	4629      	mov	r1, r5
 8004578:	4638      	mov	r0, r7
 800457a:	f7ff ffa5 	bl	80044c8 <sbrk_aligned>
 800457e:	3001      	adds	r0, #1
 8004580:	d02b      	beq.n	80045da <_malloc_r+0xd2>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	442b      	add	r3, r5
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	e00e      	b.n	80045a8 <_malloc_r+0xa0>
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	1b52      	subs	r2, r2, r5
 800458e:	d41e      	bmi.n	80045ce <_malloc_r+0xc6>
 8004590:	2a0b      	cmp	r2, #11
 8004592:	d916      	bls.n	80045c2 <_malloc_r+0xba>
 8004594:	1961      	adds	r1, r4, r5
 8004596:	42a3      	cmp	r3, r4
 8004598:	6025      	str	r5, [r4, #0]
 800459a:	bf18      	it	ne
 800459c:	6059      	strne	r1, [r3, #4]
 800459e:	6863      	ldr	r3, [r4, #4]
 80045a0:	bf08      	it	eq
 80045a2:	6031      	streq	r1, [r6, #0]
 80045a4:	5162      	str	r2, [r4, r5]
 80045a6:	604b      	str	r3, [r1, #4]
 80045a8:	4638      	mov	r0, r7
 80045aa:	f104 060b 	add.w	r6, r4, #11
 80045ae:	f000 f865 	bl	800467c <__malloc_unlock>
 80045b2:	f026 0607 	bic.w	r6, r6, #7
 80045b6:	1d23      	adds	r3, r4, #4
 80045b8:	1af2      	subs	r2, r6, r3
 80045ba:	d0b6      	beq.n	800452a <_malloc_r+0x22>
 80045bc:	1b9b      	subs	r3, r3, r6
 80045be:	50a3      	str	r3, [r4, r2]
 80045c0:	e7b3      	b.n	800452a <_malloc_r+0x22>
 80045c2:	6862      	ldr	r2, [r4, #4]
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	bf0c      	ite	eq
 80045c8:	6032      	streq	r2, [r6, #0]
 80045ca:	605a      	strne	r2, [r3, #4]
 80045cc:	e7ec      	b.n	80045a8 <_malloc_r+0xa0>
 80045ce:	4623      	mov	r3, r4
 80045d0:	6864      	ldr	r4, [r4, #4]
 80045d2:	e7b2      	b.n	800453a <_malloc_r+0x32>
 80045d4:	4634      	mov	r4, r6
 80045d6:	6876      	ldr	r6, [r6, #4]
 80045d8:	e7b9      	b.n	800454e <_malloc_r+0x46>
 80045da:	230c      	movs	r3, #12
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4638      	mov	r0, r7
 80045e0:	f000 f84c 	bl	800467c <__malloc_unlock>
 80045e4:	e7a1      	b.n	800452a <_malloc_r+0x22>
 80045e6:	6025      	str	r5, [r4, #0]
 80045e8:	e7de      	b.n	80045a8 <_malloc_r+0xa0>
 80045ea:	bf00      	nop
 80045ec:	20000138 	.word	0x20000138

080045f0 <_realloc_r>:
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	4680      	mov	r8, r0
 80045f6:	4614      	mov	r4, r2
 80045f8:	460e      	mov	r6, r1
 80045fa:	b921      	cbnz	r1, 8004606 <_realloc_r+0x16>
 80045fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004600:	4611      	mov	r1, r2
 8004602:	f7ff bf81 	b.w	8004508 <_malloc_r>
 8004606:	b92a      	cbnz	r2, 8004614 <_realloc_r+0x24>
 8004608:	f7ff ff12 	bl	8004430 <_free_r>
 800460c:	4625      	mov	r5, r4
 800460e:	4628      	mov	r0, r5
 8004610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004614:	f000 f838 	bl	8004688 <_malloc_usable_size_r>
 8004618:	4284      	cmp	r4, r0
 800461a:	4607      	mov	r7, r0
 800461c:	d802      	bhi.n	8004624 <_realloc_r+0x34>
 800461e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004622:	d812      	bhi.n	800464a <_realloc_r+0x5a>
 8004624:	4621      	mov	r1, r4
 8004626:	4640      	mov	r0, r8
 8004628:	f7ff ff6e 	bl	8004508 <_malloc_r>
 800462c:	4605      	mov	r5, r0
 800462e:	2800      	cmp	r0, #0
 8004630:	d0ed      	beq.n	800460e <_realloc_r+0x1e>
 8004632:	42bc      	cmp	r4, r7
 8004634:	4622      	mov	r2, r4
 8004636:	4631      	mov	r1, r6
 8004638:	bf28      	it	cs
 800463a:	463a      	movcs	r2, r7
 800463c:	f7ff fed0 	bl	80043e0 <memcpy>
 8004640:	4631      	mov	r1, r6
 8004642:	4640      	mov	r0, r8
 8004644:	f7ff fef4 	bl	8004430 <_free_r>
 8004648:	e7e1      	b.n	800460e <_realloc_r+0x1e>
 800464a:	4635      	mov	r5, r6
 800464c:	e7df      	b.n	800460e <_realloc_r+0x1e>
	...

08004650 <_sbrk_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4d06      	ldr	r5, [pc, #24]	; (800466c <_sbrk_r+0x1c>)
 8004654:	2300      	movs	r3, #0
 8004656:	4604      	mov	r4, r0
 8004658:	4608      	mov	r0, r1
 800465a:	602b      	str	r3, [r5, #0]
 800465c:	f7fc fa66 	bl	8000b2c <_sbrk>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <_sbrk_r+0x1a>
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	b103      	cbz	r3, 800466a <_sbrk_r+0x1a>
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	20000140 	.word	0x20000140

08004670 <__malloc_lock>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__malloc_lock+0x8>)
 8004672:	f000 b811 	b.w	8004698 <__retarget_lock_acquire_recursive>
 8004676:	bf00      	nop
 8004678:	20000144 	.word	0x20000144

0800467c <__malloc_unlock>:
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <__malloc_unlock+0x8>)
 800467e:	f000 b80c 	b.w	800469a <__retarget_lock_release_recursive>
 8004682:	bf00      	nop
 8004684:	20000144 	.word	0x20000144

08004688 <_malloc_usable_size_r>:
 8004688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800468c:	1f18      	subs	r0, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	bfbc      	itt	lt
 8004692:	580b      	ldrlt	r3, [r1, r0]
 8004694:	18c0      	addlt	r0, r0, r3
 8004696:	4770      	bx	lr

08004698 <__retarget_lock_acquire_recursive>:
 8004698:	4770      	bx	lr

0800469a <__retarget_lock_release_recursive>:
 800469a:	4770      	bx	lr

0800469c <_init>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr

080046a8 <_fini>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr
