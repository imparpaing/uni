
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006080  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006280  08006280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006468  08006468  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006470  08006470  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000070  080064e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080064e8  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125ee  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ab  00000000  00000000  0003268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00035a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028829  00000000  00000000  000367f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012667  00000000  00000000  0005f019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7fb  00000000  00000000  00071680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016de7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  0016decc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006268 	.word	0x08006268

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006268 	.word	0x08006268

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_GPIO_Init+0xa4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a22      	ldr	r2, [pc, #136]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_GPIO_Init+0xa4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xa8>)
 8000670:	f001 fe80 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xa8>)
 800068c:	f001 fcc6 	bl	800201c <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020400 	.word	0x40020400

080006a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a4:	f3bf 8f4f 	dsb	sy
}
 80006a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006aa:	f3bf 8f6f 	isb	sy
}
 80006ae:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <SCB_EnableICache+0x48>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
}
 80006bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006be:	f3bf 8f6f 	isb	sy
}
 80006c2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SCB_EnableICache+0x48>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SCB_EnableICache+0x48>)
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d0:	f3bf 8f4f 	dsb	sy
}
 80006d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d6:	f3bf 8f6f 	isb	sy
}
 80006da:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SCB_EnableDCache+0x84>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <SCB_EnableDCache+0x84>)
 8000702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000706:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0b5b      	lsrs	r3, r3, #13
 800070c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000710:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800071a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	015a      	lsls	r2, r3, #5
 8000720:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000724:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072a:	4911      	ldr	r1, [pc, #68]	; (8000770 <SCB_EnableDCache+0x84>)
 800072c:	4313      	orrs	r3, r2
 800072e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	60ba      	str	r2, [r7, #8]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1ef      	bne.n	800071c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1e5      	bne.n	8000712 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000746:	f3bf 8f4f 	dsb	sy
}
 800074a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SCB_EnableDCache+0x84>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <SCB_EnableDCache+0x84>)
 8000752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000756:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800075e:	f3bf 8f6f 	isb	sy
}
 8000762:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <uart_print>:
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <uart_print+0x2c>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000784:	bf00      	nop
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <uart_print+0x2c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <uart_print+0x12>
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40004800 	.word	0x40004800

080007a4 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b0d      	cmp	r3, #13
 80007b2:	d002      	beq.n	80007ba <char_is_endmessage+0x16>
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d101      	bne.n	80007be <char_is_endmessage+0x1a>
	{
		return 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <char_is_endmessage+0x1c>
	}
	else return 0;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <rx_has_data>:

// Reception
uint8_t rx_has_data()
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <rx_has_data+0x24>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <rx_has_data+0x28>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	429a      	cmp	r2, r3
 80007de:	d101      	bne.n	80007e4 <rx_has_data+0x18>
	{
		return 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e000      	b.n	80007e6 <rx_has_data+0x1a>
	}
	else return 1;
 80007e4:	2301      	movs	r3, #1
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	200000c2 	.word	0x200000c2
 80007f4:	200000c3 	.word	0x200000c3

080007f8 <increase_rx_empty>:

void increase_rx_empty()
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	rx_empty++;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <increase_rx_empty+0x2c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	3301      	adds	r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <increase_rx_empty+0x2c>)
 8000808:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <increase_rx_empty+0x2c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b31      	cmp	r3, #49	; 0x31
 8000812:	d902      	bls.n	800081a <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <increase_rx_empty+0x2c>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
	}
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	200000c2 	.word	0x200000c2

08000828 <increase_rx_busy>:

void increase_rx_busy()
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	rx_busy++;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <increase_rx_busy+0x2c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <increase_rx_busy+0x2c>)
 8000838:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <increase_rx_busy+0x2c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b31      	cmp	r3, #49	; 0x31
 8000842:	d902      	bls.n	800084a <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <increase_rx_busy+0x2c>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	}
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	200000c3 	.word	0x200000c3

08000858 <tx_has_data>:

// Transmission
uint8_t tx_has_data()
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <tx_has_data+0x24>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <tx_has_data+0x28>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	429a      	cmp	r2, r3
 800086a:	d101      	bne.n	8000870 <tx_has_data+0x18>
	{
		return 0;
 800086c:	2300      	movs	r3, #0
 800086e:	e000      	b.n	8000872 <tx_has_data+0x1a>
	}
	else return 1;
 8000870:	2301      	movs	r3, #1
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	200000f6 	.word	0x200000f6
 8000880:	200000f7 	.word	0x200000f7

08000884 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	tx_busy++;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <increase_tx_busy+0x2c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <increase_tx_busy+0x2c>)
 8000894:	701a      	strb	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <increase_tx_busy+0x2c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b31      	cmp	r3, #49	; 0x31
 800089e:	d902      	bls.n	80008a6 <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <increase_tx_busy+0x2c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	}
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	200000f7 	.word	0x200000f7

080008b4 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <get_char+0x24>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <get_char+0x28>)
 80008c4:	5c9b      	ldrb	r3, [r3, r2]
 80008c6:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 80008c8:	f7ff ffae 	bl	8000828 <increase_rx_busy>
	return tmp;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000c3 	.word	0x200000c3
 80008dc:	20000090 	.word	0x20000090

080008e0 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 80008ec:	e041      	b.n	8000972 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <get_message+0xa8>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	461c      	mov	r4, r3
 80008f4:	f7ff ffde 	bl	80008b4 <get_char>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <get_message+0xac>)
 80008fe:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <get_message+0xa8>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <get_message+0xac>)
 8000908:	5c9b      	ldrb	r3, [r3, r2]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff4a 	bl	80007a4 <char_is_endmessage>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d021      	beq.n	800095a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <get_message+0xa8>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <get_message+0xac>)
 800091e:	2100      	movs	r1, #0
 8000920:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e009      	b.n	800093c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	440b      	add	r3, r1
 8000930:	4916      	ldr	r1, [pc, #88]	; (800098c <get_message+0xac>)
 8000932:	5c8a      	ldrb	r2, [r1, r2]
 8000934:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	3301      	adds	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <get_message+0xa8>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d3ef      	bcc.n	8000928 <get_message+0x48>
			}

			message_length = idx;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <get_message+0xa8>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <get_message+0xa8>)
 8000950:	2200      	movs	r2, #0
 8000952:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000954:	89bb      	ldrh	r3, [r7, #12]
 8000956:	b29b      	uxth	r3, r3
 8000958:	e011      	b.n	800097e <get_message+0x9e>
		}
		else
		{
			idx++;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <get_message+0xa8>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <get_message+0xa8>)
 8000964:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <get_message+0xa8>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	2b32      	cmp	r3, #50	; 0x32
 800096c:	d901      	bls.n	8000972 <get_message+0x92>
 800096e:	2300      	movs	r3, #0
 8000970:	e005      	b.n	800097e <get_message+0x9e>
	while(rx_has_data() == 1)
 8000972:	f7ff ff2b 	bl	80007cc <rx_has_data>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d0b8      	beq.n	80008ee <get_message+0xe>
		}
	}
	return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop
 8000988:	200001a6 	.word	0x200001a6
 800098c:	200001a8 	.word	0x200001a8

08000990 <send_response>:

// Send response from STM
void send_response(char *message, ...)
{
 8000990:	b40f      	push	{r0, r1, r2, r3}
 8000992:	b590      	push	{r4, r7, lr}
 8000994:	b091      	sub	sp, #68	; 0x44
 8000996:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 8000998:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800099c:	607b      	str	r3, [r7, #4]
	vsprintf(response, message, arglist);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 ff8e 	bl	80058c8 <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <send_response+0xc4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80009b8:	e012      	b.n	80009e0 <send_response+0x50>
	{
		tx_buffer[idx] = response[i];
 80009ba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80009bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009be:	3240      	adds	r2, #64	; 0x40
 80009c0:	443a      	add	r2, r7
 80009c2:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 80009c6:	4a24      	ldr	r2, [pc, #144]	; (8000a58 <send_response+0xc8>)
 80009c8:	54d1      	strb	r1, [r2, r3]
		idx++;
 80009ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009cc:	3301      	adds	r3, #1
 80009ce:	87fb      	strh	r3, [r7, #62]	; 0x3e

		if (idx >= BUFFER_LENGTH)
 80009d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009d2:	2b31      	cmp	r3, #49	; 0x31
 80009d4:	d901      	bls.n	80009da <send_response+0x4a>
			idx = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	for (uint16_t i=0; i<strlen(response); i++)
 80009da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80009dc:	3301      	adds	r3, #1
 80009de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80009e0:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc2a 	bl	8000240 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	429c      	cmp	r4, r3
 80009f0:	d3e3      	bcc.n	80009ba <send_response+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
}
 80009f4:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 80009f6:	f7ff ff2f 	bl	8000858 <tx_has_data>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d118      	bne.n	8000a32 <send_response+0xa2>
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <send_response+0xcc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	2b80      	cmp	r3, #128	; 0x80
 8000a0c:	d111      	bne.n	8000a32 <send_response+0xa2>
	{
		tx_empty = idx;
 8000a0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <send_response+0xc4>)
 8000a14:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <send_response+0xd0>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <send_response+0xc8>)
 8000a20:	4413      	add	r3, r2
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <send_response+0xcc>)
 8000a28:	f003 fb04 	bl	8004034 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 8000a2c:	f7ff ff2a 	bl	8000884 <increase_tx_busy>
 8000a30:	e003      	b.n	8000a3a <send_response+0xaa>
	}
	else
		tx_empty = idx;
 8000a32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <send_response+0xc4>)
 8000a38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a3a:	b662      	cpsie	i
}
 8000a3c:	bf00      	nop

	__enable_irq();

	// Wait after re-enabling interrupts
	HAL_Delay(5);
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f001 f8a8 	bl	8001b94 <HAL_Delay>
}
 8000a44:	bf00      	nop
 8000a46:	3744      	adds	r7, #68	; 0x44
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a4e:	b004      	add	sp, #16
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	200000f6 	.word	0x200000f6
 8000a58:	200000c4 	.word	0x200000c4
 8000a5c:	20000230 	.word	0x20000230
 8000a60:	200000f7 	.word	0x200000f7

08000a64 <turn_on_led>:

void turn_on_led()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <turn_on_led+0x14>)
 8000a6e:	f001 fc81 	bl	8002374 <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40020400 	.word	0x40020400

08000a7c <turn_off_led>:

void turn_off_led()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <turn_off_led+0x14>)
 8000a86:	f001 fc75 	bl	8002374 <HAL_GPIO_WritePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020400 	.word	0x40020400

08000a94 <timer_delay>:

void timer_delay(uint16_t ms)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
	// Reset timer counter
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <timer_delay+0x30>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for set period to pass
	while (__HAL_TIM_GET_COUNTER(&htim3) < ms);
 8000aa6:	bf00      	nop
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <timer_delay+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3f9      	bcc.n	8000aa8 <timer_delay+0x14>
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200001e4 	.word	0x200001e4

08000ac8 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <calculate_delay+0x58>)
 8000ad4:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	ee07 3a90 	vmov	s15, r3
 8000adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ae0:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae8:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af4:	eeb0 0b47 	vmov.f64	d0, d7
 8000af8:	f005 fb3e 	bl	8006178 <ceil>
 8000afc:	eeb0 7b40 	vmov.f64	d7, d0
 8000b00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b04:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b10:	ee17 3a90 	vmov	r3, s15
 8000b14:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 8000b16:	897b      	ldrh	r3, [r7, #10]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	447a0000 	.word	0x447a0000

08000b24 <validate_command>:

uint8_t validate_command(char *single_command_message)
{
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b092      	sub	sp, #72	; 0x48
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	uint8_t command_valid = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Command template arrays
	char led_on[] = "LED[ON]";
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <validate_command+0x128>)
 8000b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3c:	e883 0003 	stmia.w	r3, {r0, r1}
	char led_off[] = "LED[OFF]";
 8000b40:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <validate_command+0x12c>)
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b48:	c303      	stmia	r3!, {r0, r1}
 8000b4a:	701a      	strb	r2, [r3, #0]
	char led_blink[] = "LED[BLINK,X]";
 8000b4c:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <validate_command+0x130>)
 8000b4e:	f107 0420 	add.w	r4, r7, #32
 8000b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b54:	c407      	stmia	r4!, {r0, r1, r2}
 8000b56:	7023      	strb	r3, [r4, #0]
	char insert_delay[] = "INSERT[DELAY,XXXX]";
 8000b58:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <validate_command+0x134>)
 8000b5a:	f107 040c 	add.w	r4, r7, #12
 8000b5e:	461d      	mov	r5, r3
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	8022      	strh	r2, [r4, #0]
 8000b6a:	3402      	adds	r4, #2
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	7023      	strb	r3, [r4, #0]

	// Compare command with templates
	if (strncmp(single_command_message, led_on, sizeof(led_on)) == 0)
 8000b70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b74:	2208      	movs	r2, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f004 fdee 	bl	800575a <strncmp>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d103      	bne.n	8000b8c <validate_command+0x68>
	{
		command_valid = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000b8a:	e059      	b.n	8000c40 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_off, sizeof(led_off)) == 0)
 8000b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b90:	2209      	movs	r2, #9
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f004 fde0 	bl	800575a <strncmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d103      	bne.n	8000ba8 <validate_command+0x84>
	{
		command_valid = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ba6:	e04b      	b.n	8000c40 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_blink, sizeof(led_blink)-3) == 0)
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	220a      	movs	r2, #10
 8000bae:	4619      	mov	r1, r3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f004 fdd2 	bl	800575a <strncmp>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d111      	bne.n	8000be0 <validate_command+0xbc>
	{
		if ((single_command_message[10] >= 0x30 && single_command_message[10] <= 0x39) && single_command[11] == ']')
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	330a      	adds	r3, #10
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b2f      	cmp	r3, #47	; 0x2f
 8000bc4:	d93c      	bls.n	8000c40 <validate_command+0x11c>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	330a      	adds	r3, #10
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b39      	cmp	r3, #57	; 0x39
 8000bce:	d837      	bhi.n	8000c40 <validate_command+0x11c>
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <validate_command+0x138>)
 8000bd2:	7adb      	ldrb	r3, [r3, #11]
 8000bd4:	2b5d      	cmp	r3, #93	; 0x5d
 8000bd6:	d133      	bne.n	8000c40 <validate_command+0x11c>
			command_valid = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000bde:	e02f      	b.n	8000c40 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, insert_delay, sizeof(insert_delay)-6) == 0)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	220d      	movs	r2, #13
 8000be6:	4619      	mov	r1, r3
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f004 fdb6 	bl	800575a <strncmp>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d125      	bne.n	8000c40 <validate_command+0x11c>
	{
		for (uint8_t y=0; y<4; y++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000bfa:	e01d      	b.n	8000c38 <validate_command+0x114>
			if ((single_command_message[12+y] >= 0x30 && single_command_message[12+y] <= 0x39) && single_command[17] == ']')
 8000bfc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c00:	330c      	adds	r3, #12
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b2f      	cmp	r3, #47	; 0x2f
 8000c0c:	d90f      	bls.n	8000c2e <validate_command+0x10a>
 8000c0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c12:	330c      	adds	r3, #12
 8000c14:	461a      	mov	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b39      	cmp	r3, #57	; 0x39
 8000c1e:	d806      	bhi.n	8000c2e <validate_command+0x10a>
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <validate_command+0x138>)
 8000c22:	7c5b      	ldrb	r3, [r3, #17]
 8000c24:	2b5d      	cmp	r3, #93	; 0x5d
 8000c26:	d102      	bne.n	8000c2e <validate_command+0x10a>
				command_valid = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for (uint8_t y=0; y<4; y++)
 8000c2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c32:	3301      	adds	r3, #1
 8000c34:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000c38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d9dd      	bls.n	8000bfc <validate_command+0xd8>
	}

	return command_valid;
 8000c40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3748      	adds	r7, #72	; 0x48
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	08006280 	.word	0x08006280
 8000c50:	08006288 	.word	0x08006288
 8000c54:	08006294 	.word	0x08006294
 8000c58:	080062a4 	.word	0x080062a4
 8000c5c:	2000016c 	.word	0x2000016c

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b5b0      	push	{r4, r5, r7, lr}
 8000c62:	b0b0      	sub	sp, #192	; 0xc0
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c66:	f000 fd11 	bl	800168c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000c6a:	f7ff fd19 	bl	80006a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000c6e:	f7ff fd3d 	bl	80006ec <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f000 ff32 	bl	8001ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 fc41 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f7ff fcbb 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 fe6b 	bl	8001958 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000c82:	f000 fdf3 	bl	800186c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000c86:	48b0      	ldr	r0, [pc, #704]	; (8000f48 <main+0x2e8>)
 8000c88:	f002 fd0c 	bl	80036a4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	49af      	ldr	r1, [pc, #700]	; (8000f4c <main+0x2ec>)
 8000c90:	48af      	ldr	r0, [pc, #700]	; (8000f50 <main+0x2f0>)
 8000c92:	f003 fa2d 	bl	80040f0 <HAL_UART_Receive_IT>
  __IO uint16_t param_length;
  static uint16_t command_length;

  // LED command parameters
  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000c96:	4aaf      	ldr	r2, [pc, #700]	; (8000f54 <main+0x2f4>)
 8000c98:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c9c:	6812      	ldr	r2, [r2, #0]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	8019      	strh	r1, [r3, #0]
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	0c12      	lsrs	r2, r2, #16
 8000ca6:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 8000ca8:	4bab      	ldr	r3, [pc, #684]	; (8000f58 <main+0x2f8>)
 8000caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  char blink_cmd[] = "BLINK,";
 8000cae:	4aab      	ldr	r2, [pc, #684]	; (8000f5c <main+0x2fc>)
 8000cb0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb8:	6018      	str	r0, [r3, #0]
 8000cba:	3304      	adds	r3, #4
 8000cbc:	8019      	strh	r1, [r3, #0]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	0c0a      	lsrs	r2, r1, #16
 8000cc2:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 8000cc4:	4aa6      	ldr	r2, [pc, #664]	; (8000f60 <main+0x300>)
 8000cc6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cce:	6018      	str	r0, [r3, #0]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	8019      	strh	r1, [r3, #0]
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	0c0a      	lsrs	r2, r1, #16
 8000cd8:	701a      	strb	r2, [r3, #0]

  // Error messages
  char invalid_command[] = "Error: Command not found\r\n";
 8000cda:	4ba2      	ldr	r3, [pc, #648]	; (8000f64 <main+0x304>)
 8000cdc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cea:	c403      	stmia	r4!, {r0, r1}
 8000cec:	8022      	strh	r2, [r4, #0]
 8000cee:	3402      	adds	r4, #2
 8000cf0:	0c13      	lsrs	r3, r2, #16
 8000cf2:	7023      	strb	r3, [r4, #0]
  char missing_separator[] = "Error: No command separator found\r\n";
 8000cf4:	4b9c      	ldr	r3, [pc, #624]	; (8000f68 <main+0x308>)
 8000cf6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	6023      	str	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000d08:	4b90      	ldr	r3, [pc, #576]	; (8000f4c <main+0x2ec>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b0a      	cmp	r3, #10
 8000d0e:	d003      	beq.n	8000d18 <main+0xb8>
 8000d10:	4b8e      	ldr	r3, [pc, #568]	; (8000f4c <main+0x2ec>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b0d      	cmp	r3, #13
 8000d16:	d106      	bne.n	8000d26 <main+0xc6>
	{
		message_length = get_message(message);
 8000d18:	4894      	ldr	r0, [pc, #592]	; (8000f6c <main+0x30c>)
 8000d1a:	f7ff fde1 	bl	80008e0 <get_message>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b93      	ldr	r3, [pc, #588]	; (8000f70 <main+0x310>)
 8000d24:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000d26:	4b92      	ldr	r3, [pc, #584]	; (8000f70 <main+0x310>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 839c 	beq.w	800146a <main+0x80a>
	{
		for (uint8_t i=0; i<message_length; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8000d38:	e38f      	b.n	800145a <main+0x7fa>
		{
			// Check for command separator character
			command_separator = strchr(message, ';');
 8000d3a:	213b      	movs	r1, #59	; 0x3b
 8000d3c:	488b      	ldr	r0, [pc, #556]	; (8000f6c <main+0x30c>)
 8000d3e:	f004 fcff 	bl	8005740 <strchr>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a8b      	ldr	r2, [pc, #556]	; (8000f74 <main+0x314>)
 8000d46:	6013      	str	r3, [r2, #0]

			// If separator char was not found
			if (command_separator == NULL)
 8000d48:	4b8a      	ldr	r3, [pc, #552]	; (8000f74 <main+0x314>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d111      	bne.n	8000d74 <main+0x114>
			{
				while (i < message_length)
 8000d50:	e004      	b.n	8000d5c <main+0xfc>
					i++;
 8000d52:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d56:	3301      	adds	r3, #1
 8000d58:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (i < message_length)
 8000d5c:	4b84      	ldr	r3, [pc, #528]	; (8000f70 <main+0x310>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3f3      	bcc.n	8000d52 <main+0xf2>
				send_response(missing_separator);
 8000d6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fe0e 	bl	8000990 <send_response>
			}

			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000d74:	4b80      	ldr	r3, [pc, #512]	; (8000f78 <main+0x318>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d105      	bne.n	8000d8a <main+0x12a>
 8000d7e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d82:	4a7a      	ldr	r2, [pc, #488]	; (8000f6c <main+0x30c>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	2b4c      	cmp	r3, #76	; 0x4c
 8000d88:	d00a      	beq.n	8000da0 <main+0x140>
 8000d8a:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <main+0x318>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d109      	bne.n	8000da8 <main+0x148>
 8000d94:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000d98:	4a74      	ldr	r2, [pc, #464]	; (8000f6c <main+0x30c>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	2b49      	cmp	r3, #73	; 0x49
 8000d9e:	d103      	bne.n	8000da8 <main+0x148>
				sw_state = 1;
 8000da0:	4b75      	ldr	r3, [pc, #468]	; (8000f78 <main+0x318>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e019      	b.n	8000ddc <main+0x17c>
			else if (sw_state == 0 && (message[i] != ';' && message[i] != '#' && message[i] != ','))
 8000da8:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <main+0x318>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d114      	bne.n	8000ddc <main+0x17c>
 8000db2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000db6:	4a6d      	ldr	r2, [pc, #436]	; (8000f6c <main+0x30c>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	2b3b      	cmp	r3, #59	; 0x3b
 8000dbc:	d00e      	beq.n	8000ddc <main+0x17c>
 8000dbe:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dc2:	4a6a      	ldr	r2, [pc, #424]	; (8000f6c <main+0x30c>)
 8000dc4:	5cd3      	ldrb	r3, [r2, r3]
 8000dc6:	2b23      	cmp	r3, #35	; 0x23
 8000dc8:	d008      	beq.n	8000ddc <main+0x17c>
 8000dca:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000dce:	4a67      	ldr	r2, [pc, #412]	; (8000f6c <main+0x30c>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	2b2c      	cmp	r3, #44	; 0x2c
 8000dd4:	d002      	beq.n	8000ddc <main+0x17c>
				error_found = 1;
 8000dd6:	4b69      	ldr	r3, [pc, #420]	; (8000f7c <main+0x31c>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000ddc:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <main+0x318>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3b01      	subs	r3, #1
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	f200 82cf 	bhi.w	8001388 <main+0x728>
 8000dea:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <main+0x190>)
 8000dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df0:	08000e05 	.word	0x08000e05
 8000df4:	08000e9b 	.word	0x08000e9b
 8000df8:	08000edb 	.word	0x08000edb
 8000dfc:	08000f1b 	.word	0x08000f1b
 8000e00:	08000ff5 	.word	0x08000ff5
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000e04:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e08:	3301      	adds	r3, #1
 8000e0a:	4a58      	ldr	r2, [pc, #352]	; (8000f6c <main+0x30c>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	2b45      	cmp	r3, #69	; 0x45
 8000e10:	d10f      	bne.n	8000e32 <main+0x1d2>
 8000e12:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e16:	3302      	adds	r3, #2
 8000e18:	4a54      	ldr	r2, [pc, #336]	; (8000f6c <main+0x30c>)
 8000e1a:	5cd3      	ldrb	r3, [r2, r3]
 8000e1c:	2b44      	cmp	r3, #68	; 0x44
 8000e1e:	d108      	bne.n	8000e32 <main+0x1d2>
				{
					i = i+2;
 8000e20:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e24:	3302      	adds	r3, #2
 8000e26:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000e2a:	4b53      	ldr	r3, [pc, #332]	; (8000f78 <main+0x318>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e032      	b.n	8000e98 <main+0x238>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 8000e32:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a4c      	ldr	r2, [pc, #304]	; (8000f6c <main+0x30c>)
 8000e3a:	5cd3      	ldrb	r3, [r2, r3]
 8000e3c:	2b4e      	cmp	r3, #78	; 0x4e
 8000e3e:	d124      	bne.n	8000e8a <main+0x22a>
 8000e40:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e44:	3302      	adds	r3, #2
 8000e46:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <main+0x30c>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	2b53      	cmp	r3, #83	; 0x53
 8000e4c:	d11d      	bne.n	8000e8a <main+0x22a>
 8000e4e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e52:	3303      	adds	r3, #3
 8000e54:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <main+0x30c>)
 8000e56:	5cd3      	ldrb	r3, [r2, r3]
 8000e58:	2b45      	cmp	r3, #69	; 0x45
 8000e5a:	d116      	bne.n	8000e8a <main+0x22a>
 8000e5c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e60:	3304      	adds	r3, #4
 8000e62:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <main+0x30c>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	2b52      	cmp	r3, #82	; 0x52
 8000e68:	d10f      	bne.n	8000e8a <main+0x22a>
 8000e6a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e6e:	3305      	adds	r3, #5
 8000e70:	4a3e      	ldr	r2, [pc, #248]	; (8000f6c <main+0x30c>)
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	2b54      	cmp	r3, #84	; 0x54
 8000e76:	d108      	bne.n	8000e8a <main+0x22a>
				{
					i = i+5;
 8000e78:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e7c:	3305      	adds	r3, #5
 8000e7e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <main+0x318>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e006      	b.n	8000e98 <main+0x238>
				}
				else
				{
					error_found = 1;
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <main+0x31c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <main+0x318>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000e96:	e277      	b.n	8001388 <main+0x728>
 8000e98:	e276      	b.n	8001388 <main+0x728>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000e9a:	215b      	movs	r1, #91	; 0x5b
 8000e9c:	4833      	ldr	r0, [pc, #204]	; (8000f6c <main+0x30c>)
 8000e9e:	f004 fc4f 	bl	8005740 <strchr>
 8000ea2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10b      	bne.n	8000ec6 <main+0x266>
				{
					i = i+1;
 8000eae:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <main+0x31c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <main+0x318>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000ec4:	e260      	b.n	8001388 <main+0x728>
					open_idx = (uint16_t)(open_bracket - message);
 8000ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000eca:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <main+0x30c>)
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
					sw_state = 3;
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <main+0x318>)
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	701a      	strb	r2, [r3, #0]
				break;
 8000ed8:	e256      	b.n	8001388 <main+0x728>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000eda:	215d      	movs	r1, #93	; 0x5d
 8000edc:	4823      	ldr	r0, [pc, #140]	; (8000f6c <main+0x30c>)
 8000ede:	f004 fc2f 	bl	8005740 <strchr>
 8000ee2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10b      	bne.n	8000f06 <main+0x2a6>
				{
					i = i+1;
 8000eee:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <main+0x31c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <main+0x318>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000f04:	e240      	b.n	8001388 <main+0x728>
					close_idx = (uint16_t)(close_bracket - message);
 8000f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <main+0x30c>)
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
					sw_state = 4;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <main+0x318>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	701a      	strb	r2, [r3, #0]
				break;
 8000f18:	e236      	b.n	8001388 <main+0x728>

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8000f1a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8000f1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3b01      	subs	r3, #1
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <main+0x320>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000f3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000f44:	e041      	b.n	8000fca <main+0x36a>
 8000f46:	bf00      	nop
 8000f48:	200001e4 	.word	0x200001e4
 8000f4c:	2000008c 	.word	0x2000008c
 8000f50:	20000230 	.word	0x20000230
 8000f54:	080062b8 	.word	0x080062b8
 8000f58:	0046464f 	.word	0x0046464f
 8000f5c:	080062bc 	.word	0x080062bc
 8000f60:	080062c4 	.word	0x080062c4
 8000f64:	080062cc 	.word	0x080062cc
 8000f68:	080062e8 	.word	0x080062e8
 8000f6c:	200000f8 	.word	0x200000f8
 8000f70:	2000012a 	.word	0x2000012a
 8000f74:	200001a0 	.word	0x200001a0
 8000f78:	2000012b 	.word	0x2000012b
 8000f7c:	200001a4 	.word	0x200001a4
 8000f80:	200001da 	.word	0x200001da
				{
					command[j] = message[y];
 8000f84:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8000f88:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000f8c:	49af      	ldr	r1, [pc, #700]	; (800124c <main+0x5ec>)
 8000f8e:	5c8a      	ldrb	r2, [r1, r2]
 8000f90:	33c0      	adds	r3, #192	; 0xc0
 8000f92:	443b      	add	r3, r7
 8000f94:	f803 2cbc 	strb.w	r2, [r3, #-188]
					temp_command[j] = command[j];
 8000f98:	f897 20ba 	ldrb.w	r2, [r7, #186]	; 0xba
 8000f9c:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000fa0:	32c0      	adds	r2, #192	; 0xc0
 8000fa2:	443a      	add	r2, r7
 8000fa4:	f812 1cbc 	ldrb.w	r1, [r2, #-188]
 8000fa8:	4aa9      	ldr	r2, [pc, #676]	; (8001250 <main+0x5f0>)
 8000faa:	54d1      	strb	r1, [r2, r3]
					j++;
 8000fac:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
					command_length = j;
 8000fb6:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4ba5      	ldr	r3, [pc, #660]	; (8001254 <main+0x5f4>)
 8000fbe:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8000fc0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8000fca:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8000fce:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3d6      	bcc.n	8000f84 <main+0x324>
				}

				if (command_length == param_length)
 8000fd6:	4b9f      	ldr	r3, [pc, #636]	; (8001254 <main+0x5f4>)
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d103      	bne.n	8000fec <main+0x38c>
					sw_state = 5;
 8000fe4:	4b9c      	ldr	r3, [pc, #624]	; (8001258 <main+0x5f8>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 8000fea:	e1cd      	b.n	8001388 <main+0x728>
					sw_state = 0;
 8000fec:	4b9a      	ldr	r3, [pc, #616]	; (8001258 <main+0x5f8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
				break;
 8000ff2:	e1c9      	b.n	8001388 <main+0x728>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 8000ff4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a94      	ldr	r2, [pc, #592]	; (800124c <main+0x5ec>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	2b3b      	cmp	r3, #59	; 0x3b
 8001000:	d008      	beq.n	8001014 <main+0x3b4>
				{
					send_response(missing_separator);
 8001002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fcc2 	bl	8000990 <send_response>
					sw_state = 0;
 800100c:	4b92      	ldr	r3, [pc, #584]	; (8001258 <main+0x5f8>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
					break;
 8001012:	e1b9      	b.n	8001388 <main+0x728>
				}

				// Print executed command
				char CMD[] = "COMMAND: ";
 8001014:	4a91      	ldr	r2, [pc, #580]	; (800125c <main+0x5fc>)
 8001016:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800101a:	ca07      	ldmia	r2, {r0, r1, r2}
 800101c:	c303      	stmia	r3!, {r0, r1}
 800101e:	801a      	strh	r2, [r3, #0]
				char NEWLINE[] = "\r\n";
 8001020:	4a8f      	ldr	r2, [pc, #572]	; (8001260 <main+0x600>)
 8001022:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	4611      	mov	r1, r2
 800102a:	8019      	strh	r1, [r3, #0]
 800102c:	3302      	adds	r3, #2
 800102e:	0c12      	lsrs	r2, r2, #16
 8001030:	701a      	strb	r2, [r3, #0]

				send_response(CMD);
 8001032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fcaa 	bl	8000990 <send_response>
				send_response(temp_command);
 800103c:	4884      	ldr	r0, [pc, #528]	; (8001250 <main+0x5f0>)
 800103e:	f7ff fca7 	bl	8000990 <send_response>
				send_response(NEWLINE);
 8001042:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fca2 	bl	8000990 <send_response>

				// Clear temp array
				for (uint8_t y=0; y<command_length; y++)
 800104c:	2300      	movs	r3, #0
 800104e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001052:	e009      	b.n	8001068 <main+0x408>
					temp_command[y] = '\0';
 8001054:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001058:	4a7d      	ldr	r2, [pc, #500]	; (8001250 <main+0x5f0>)
 800105a:	2100      	movs	r1, #0
 800105c:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<command_length; y++)
 800105e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001062:	3301      	adds	r3, #1
 8001064:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001068:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b79      	ldr	r3, [pc, #484]	; (8001254 <main+0x5f4>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d3ee      	bcc.n	8001054 <main+0x3f4>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 8001076:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800107a:	b29b      	uxth	r3, r3
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 800107e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001080:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fb67 	bl	800575a <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d13b      	bne.n	800110a <main+0x4aa>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<7; y++)
 8001092:	2300      	movs	r3, #0
 8001094:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001098:	e010      	b.n	80010bc <main+0x45c>
						single_command[y] = message[close_idx-6+y];
 800109a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800109e:	1f9a      	subs	r2, r3, #6
 80010a0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010a4:	441a      	add	r2, r3
 80010a6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010aa:	4968      	ldr	r1, [pc, #416]	; (800124c <main+0x5ec>)
 80010ac:	5c89      	ldrb	r1, [r1, r2]
 80010ae:	4a6d      	ldr	r2, [pc, #436]	; (8001264 <main+0x604>)
 80010b0:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<7; y++)
 80010b2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010b6:	3301      	adds	r3, #1
 80010b8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80010bc:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80010c0:	2b06      	cmp	r3, #6
 80010c2:	d9ea      	bls.n	800109a <main+0x43a>

					// Validate last command
					temp_check = validate_command(single_command);
 80010c4:	4867      	ldr	r0, [pc, #412]	; (8001264 <main+0x604>)
 80010c6:	f7ff fd2d 	bl	8000b24 <validate_command>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <main+0x608>)
 80010d0:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <main+0x608>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10f      	bne.n	80010fc <main+0x49c>
					{
						i = i+param_length;
 80010dc:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80010e8:	4413      	add	r3, r2
 80010ea:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <main+0x60c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

						// Turn on LED
						led_action = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 80010fa:	e120      	b.n	800133e <main+0x6de>
					}
					else
					{
						error_found = 1;
 80010fc:	4b5b      	ldr	r3, [pc, #364]	; (800126c <main+0x60c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001102:	4b55      	ldr	r3, [pc, #340]	; (8001258 <main+0x5f8>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e119      	b.n	800133e <main+0x6de>
					}
				}
				else if (strncmp(command, off_cmd, len) == 0)
 800110a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800110c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fb21 	bl	800575a <strncmp>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d13b      	bne.n	8001196 <main+0x536>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<8; y++)
 800111e:	2300      	movs	r3, #0
 8001120:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8001124:	e010      	b.n	8001148 <main+0x4e8>
						single_command[y] = message[close_idx-7+y];
 8001126:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800112a:	1fda      	subs	r2, r3, #7
 800112c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001130:	441a      	add	r2, r3
 8001132:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001136:	4945      	ldr	r1, [pc, #276]	; (800124c <main+0x5ec>)
 8001138:	5c89      	ldrb	r1, [r1, r2]
 800113a:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <main+0x604>)
 800113c:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<8; y++)
 800113e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001142:	3301      	adds	r3, #1
 8001144:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8001148:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800114c:	2b07      	cmp	r3, #7
 800114e:	d9ea      	bls.n	8001126 <main+0x4c6>

					// Validate last command
					temp_check = validate_command(single_command);
 8001150:	4844      	ldr	r0, [pc, #272]	; (8001264 <main+0x604>)
 8001152:	f7ff fce7 	bl	8000b24 <validate_command>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b43      	ldr	r3, [pc, #268]	; (8001268 <main+0x608>)
 800115c:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 800115e:	4b42      	ldr	r3, [pc, #264]	; (8001268 <main+0x608>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d10f      	bne.n	8001188 <main+0x528>
					{
						i = i+param_length;
 8001168:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800116c:	b29b      	uxth	r3, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001174:	4413      	add	r3, r2
 8001176:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 800117a:	4b3c      	ldr	r3, [pc, #240]	; (800126c <main+0x60c>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]

						// Turn off LED
						led_action = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001186:	e0da      	b.n	800133e <main+0x6de>
					}
					else
					{
						error_found = 1;
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <main+0x60c>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <main+0x5f8>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e0d3      	b.n	800133e <main+0x6de>
					}
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 8001196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fada 	bl	800575a <strncmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d13f      	bne.n	800122c <main+0x5cc>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<12; y++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80011b2:	e011      	b.n	80011d8 <main+0x578>
						single_command[y] = message[close_idx-11+y];
 80011b4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80011b8:	f1a3 020b 	sub.w	r2, r3, #11
 80011bc:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80011c0:	441a      	add	r2, r3
 80011c2:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80011c6:	4921      	ldr	r1, [pc, #132]	; (800124c <main+0x5ec>)
 80011c8:	5c89      	ldrb	r1, [r1, r2]
 80011ca:	4a26      	ldr	r2, [pc, #152]	; (8001264 <main+0x604>)
 80011cc:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<12; y++)
 80011ce:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80011d2:	3301      	adds	r3, #1
 80011d4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80011d8:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80011dc:	2b0b      	cmp	r3, #11
 80011de:	d9e9      	bls.n	80011b4 <main+0x554>

					// Validate last command
					temp_check = validate_command(single_command);
 80011e0:	4820      	ldr	r0, [pc, #128]	; (8001264 <main+0x604>)
 80011e2:	f7ff fc9f 	bl	8000b24 <validate_command>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <main+0x608>)
 80011ec:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <main+0x608>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d112      	bne.n	800121e <main+0x5be>
					{
						i = i+param_length;
 80011f8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001204:	4413      	add	r3, r2
 8001206:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <main+0x60c>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]

						// Enable LED blink
						blink_setup = 1;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <main+0x610>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 800121c:	e08f      	b.n	800133e <main+0x6de>
					}
					else
					{
						error_found = 1;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <main+0x60c>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <main+0x5f8>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	e088      	b.n	800133e <main+0x6de>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 800122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122e:	1f1a      	subs	r2, r3, #4
 8001230:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f004 fa8f 	bl	800575a <strncmp>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d17d      	bne.n	800133e <main+0x6de>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 8001242:	2300      	movs	r3, #0
 8001244:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001248:	e039      	b.n	80012be <main+0x65e>
 800124a:	bf00      	nop
 800124c:	200000f8 	.word	0x200000f8
 8001250:	20000138 	.word	0x20000138
 8001254:	200001da 	.word	0x200001da
 8001258:	2000012b 	.word	0x2000012b
 800125c:	0800630c 	.word	0x0800630c
 8001260:	08006318 	.word	0x08006318
 8001264:	2000016c 	.word	0x2000016c
 8001268:	200001a5 	.word	0x200001a5
 800126c:	200001a4 	.word	0x200001a4
 8001270:	2000012c 	.word	0x2000012c
						if (message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39)
 8001274:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001278:	1f1a      	subs	r2, r3, #4
 800127a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800127e:	4413      	add	r3, r2
 8001280:	4a92      	ldr	r2, [pc, #584]	; (80014cc <main+0x86c>)
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	2b2f      	cmp	r3, #47	; 0x2f
 8001286:	d91e      	bls.n	80012c6 <main+0x666>
 8001288:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800128c:	1f1a      	subs	r2, r3, #4
 800128e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001292:	4413      	add	r3, r2
 8001294:	4a8d      	ldr	r2, [pc, #564]	; (80014cc <main+0x86c>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	2b39      	cmp	r3, #57	; 0x39
 800129a:	d814      	bhi.n	80012c6 <main+0x666>
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 800129c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80012a0:	1f1a      	subs	r2, r3, #4
 80012a2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012a6:	441a      	add	r2, r3
 80012a8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012ac:	4987      	ldr	r1, [pc, #540]	; (80014cc <main+0x86c>)
 80012ae:	5c89      	ldrb	r1, [r1, r2]
 80012b0:	4a87      	ldr	r2, [pc, #540]	; (80014d0 <main+0x870>)
 80012b2:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<4; y++)
 80012b4:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012b8:	3301      	adds	r3, #1
 80012ba:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80012be:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d9d6      	bls.n	8001274 <main+0x614>
						else
							break;

					// Store last command in a separate array
					for (uint8_t y=0; y<18; y++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 80012cc:	e011      	b.n	80012f2 <main+0x692>
						single_command[y] = message[close_idx-17+y];
 80012ce:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80012d2:	f1a3 0211 	sub.w	r2, r3, #17
 80012d6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80012da:	441a      	add	r2, r3
 80012dc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80012e0:	497a      	ldr	r1, [pc, #488]	; (80014cc <main+0x86c>)
 80012e2:	5c89      	ldrb	r1, [r1, r2]
 80012e4:	4a7b      	ldr	r2, [pc, #492]	; (80014d4 <main+0x874>)
 80012e6:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<18; y++)
 80012e8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80012ec:	3301      	adds	r3, #1
 80012ee:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 80012f2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80012f6:	2b11      	cmp	r3, #17
 80012f8:	d9e9      	bls.n	80012ce <main+0x66e>

					// Validate last command
					temp_check = validate_command(single_command);
 80012fa:	4876      	ldr	r0, [pc, #472]	; (80014d4 <main+0x874>)
 80012fc:	f7ff fc12 	bl	8000b24 <validate_command>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b74      	ldr	r3, [pc, #464]	; (80014d8 <main+0x878>)
 8001306:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <main+0x878>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10f      	bne.n	8001332 <main+0x6d2>
					{
						i = i+param_length;
 8001312:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001316:	b29b      	uxth	r3, r3
 8001318:	b2da      	uxtb	r2, r3
 800131a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800131e:	4413      	add	r3, r2
 8001320:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001324:	4b6d      	ldr	r3, [pc, #436]	; (80014dc <main+0x87c>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]

						// Enable the delay
						led_action = 3;
 800132a:	2303      	movs	r3, #3
 800132c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001330:	e005      	b.n	800133e <main+0x6de>
					}
					else
					{
						error_found = 1;
 8001332:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <main+0x87c>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001338:	4b69      	ldr	r3, [pc, #420]	; (80014e0 <main+0x880>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
					}
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 800133e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001342:	4a62      	ldr	r2, [pc, #392]	; (80014cc <main+0x86c>)
 8001344:	2123      	movs	r1, #35	; 0x23
 8001346:	54d1      	strb	r1, [r2, r3]
				message[close_idx] = '#';
 8001348:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800134c:	4a5f      	ldr	r2, [pc, #380]	; (80014cc <main+0x86c>)
 800134e:	2123      	movs	r1, #35	; 0x23
 8001350:	54d1      	strb	r1, [r2, r3]

				// Clear the single_command array
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 8001352:	2300      	movs	r3, #0
 8001354:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8001358:	e009      	b.n	800136e <main+0x70e>
					single_command[y] = '\0';
 800135a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800135e:	4a5d      	ldr	r2, [pc, #372]	; (80014d4 <main+0x874>)
 8001360:	2100      	movs	r1, #0
 8001362:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 8001364:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001368:	3301      	adds	r3, #1
 800136a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 800136e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001372:	2b31      	cmp	r3, #49	; 0x31
 8001374:	d9f1      	bls.n	800135a <main+0x6fa>

				// Reset sw_state
				i = i-1;
 8001376:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800137a:	3b01      	subs	r3, #1
 800137c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				sw_state = 0;
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <main+0x880>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
				break;
 8001386:	bf00      	nop
			} /* sw_state switch end */

			// Display error alert
			if (error_found == 1)
 8001388:	4b54      	ldr	r3, [pc, #336]	; (80014dc <main+0x87c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d119      	bne.n	80013c6 <main+0x766>
			{
				while (message[i] != ';')
 8001392:	e004      	b.n	800139e <main+0x73e>
					i++;
 8001394:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001398:	3301      	adds	r3, #1
 800139a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (message[i] != ';')
 800139e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013a2:	4a4a      	ldr	r2, [pc, #296]	; (80014cc <main+0x86c>)
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	2b3b      	cmp	r3, #59	; 0x3b
 80013a8:	d1f4      	bne.n	8001394 <main+0x734>
				if (message[i] == ';')
 80013aa:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013ae:	4a47      	ldr	r2, [pc, #284]	; (80014cc <main+0x86c>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	2b3b      	cmp	r3, #59	; 0x3b
 80013b4:	d104      	bne.n	80013c0 <main+0x760>
					send_response(invalid_command);
 80013b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fae8 	bl	8000990 <send_response>
				error_found = 0;
 80013c0:	4b46      	ldr	r3, [pc, #280]	; (80014dc <main+0x87c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
			}

			// Diode control switch
			switch (led_action)
 80013c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d83f      	bhi.n	8001450 <main+0x7f0>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <main+0x778>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	080013ef 	.word	0x080013ef
 80013e0:	080013f5 	.word	0x080013f5
 80013e4:	0800143f 	.word	0x0800143f
			{
			case 0:
				// Turn off LED
				turn_off_led();
 80013e8:	f7ff fb48 	bl	8000a7c <turn_off_led>
				break;
 80013ec:	e030      	b.n	8001450 <main+0x7f0>

			case 1:
				// Turn on LED
				turn_on_led();
 80013ee:	f7ff fb39 	bl	8000a64 <turn_on_led>
				break;
 80013f2:	e02d      	b.n	8001450 <main+0x7f0>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 80013f4:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <main+0x884>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d127      	bne.n	800144e <main+0x7ee>
				{
					delay = message[close_idx-1] - '0';
 80013fe:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001402:	3b01      	subs	r3, #1
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <main+0x86c>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	3b30      	subs	r3, #48	; 0x30
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <main+0x888>)
 800140e:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 8001410:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <main+0x888>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <main+0x7c2>
						blink_ms = 0;
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <main+0x88c>)
 800141c:	2200      	movs	r2, #0
 800141e:	801a      	strh	r2, [r3, #0]
 8001420:	e009      	b.n	8001436 <main+0x7d6>
					else
						 blink_ms = calculate_delay(delay);
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <main+0x888>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fb4d 	bl	8000ac8 <calculate_delay>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <main+0x88c>)
 8001434:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <main+0x884>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800143c:	e007      	b.n	800144e <main+0x7ee>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <main+0x870>)
 8001440:	f004 f947 	bl	80056d2 <atoi>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <main+0x890>)
 800144a:	801a      	strh	r2, [r3, #0]
				break;
 800144c:	e000      	b.n	8001450 <main+0x7f0>
				break;
 800144e:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8001450:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001454:	3301      	adds	r3, #1
 8001456:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <main+0x894>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8001464:	429a      	cmp	r2, r3
 8001466:	f4ff ac68 	bcc.w	8000d3a <main+0xda>
	} /* if statement end */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Command: LED[BLINK,x]
	if (blink_ms != 0 && (led_action == 2 || led_action == 3))
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <main+0x88c>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d016      	beq.n	80014a2 <main+0x842>
 8001474:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d004      	beq.n	8001488 <main+0x828>
 800147e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d10c      	bne.n	80014a2 <main+0x842>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	481b      	ldr	r0, [pc, #108]	; (80014f8 <main+0x898>)
 800148c:	f000 ff8b 	bl	80023a6 <HAL_GPIO_TogglePin>
		uint16_t test_delay = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		timer_delay(test_delay);
 8001496:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fafa 	bl	8000a94 <timer_delay>
	{
 80014a0:	e013      	b.n	80014ca <main+0x86a>
	}
	// Command: LED[ON] / LED[OFF]
	else if (led_action != 2 || led_action != 3)
 80014a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d104      	bne.n	80014b6 <main+0x856>
 80014ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d003      	beq.n	80014be <main+0x85e>
		// Disable LED blink with other commands
		blink_ms = 0;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <main+0x88c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
 80014bc:	e005      	b.n	80014ca <main+0x86a>
	else
		// Start the delay
		timer_delay(loop_delay);
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <main+0x890>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fae5 	bl	8000a94 <timer_delay>
	if (character == '\n' || character == '\r')
 80014ca:	e41d      	b.n	8000d08 <main+0xa8>
 80014cc:	200000f8 	.word	0x200000f8
 80014d0:	20000134 	.word	0x20000134
 80014d4:	2000016c 	.word	0x2000016c
 80014d8:	200001a5 	.word	0x200001a5
 80014dc:	200001a4 	.word	0x200001a4
 80014e0:	2000012b 	.word	0x2000012b
 80014e4:	2000012c 	.word	0x2000012c
 80014e8:	2000012d 	.word	0x2000012d
 80014ec:	2000012e 	.word	0x2000012e
 80014f0:	20000130 	.word	0x20000130
 80014f4:	2000012a 	.word	0x2000012a
 80014f8:	40020400 	.word	0x40020400

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2234      	movs	r2, #52	; 0x34
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f004 f910 	bl	8005730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <SystemClock_Config+0xdc>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <SystemClock_Config+0xdc>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <SystemClock_Config+0xdc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <SystemClock_Config+0xe0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <SystemClock_Config+0xe0>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <SystemClock_Config+0xe0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001554:	2303      	movs	r3, #3
 8001556:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155e:	2301      	movs	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001562:	2310      	movs	r3, #16
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001570:	2319      	movs	r3, #25
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001574:	23d8      	movs	r3, #216	; 0xd8
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4618      	mov	r0, r3
 800158a:	f000 ff77 	bl	800247c <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001594:	f000 f8a6 	bl	80016e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001598:	f000 ff20 	bl	80023dc <HAL_PWREx_EnableOverDrive>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015a2:	f000 f89f 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a6:	230f      	movs	r3, #15
 80015a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015aa:	2302      	movs	r3, #2
 80015ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fa09 	bl	80029d8 <HAL_RCC_ClockConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015cc:	f000 f88a 	bl	80016e4 <Error_Handler>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3750      	adds	r7, #80	; 0x50
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Reception callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_UART_RxCpltCallback+0x44>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f8c1 	bl	8000774 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <HAL_UART_RxCpltCallback+0x48>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10e      	bne.n	800161a <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_UART_RxCpltCallback+0x4c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_UART_RxCpltCallback+0x44>)
 8001606:	7819      	ldrb	r1, [r3, #0]
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_UART_RxCpltCallback+0x50>)
 800160a:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 800160c:	f7ff f8f4 	bl	80007f8 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	4904      	ldr	r1, [pc, #16]	; (8001624 <HAL_UART_RxCpltCallback+0x44>)
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <HAL_UART_RxCpltCallback+0x54>)
 8001616:	f002 fd6b 	bl	80040f0 <HAL_UART_Receive_IT>
	}
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000008c 	.word	0x2000008c
 8001628:	40004800 	.word	0x40004800
 800162c:	200000c2 	.word	0x200000c2
 8001630:	20000090 	.word	0x20000090
 8001634:	20000230 	.word	0x20000230

08001638 <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_UART_TxCpltCallback+0x44>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 800164a:	f7ff f905 	bl	8000858 <tx_has_data>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10e      	bne.n	8001672 <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_UART_TxCpltCallback+0x48>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_UART_TxCpltCallback+0x4c>)
 800165e:	5c9a      	ldrb	r2, [r3, r2]
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_UART_TxCpltCallback+0x50>)
 8001662:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 8001664:	f7ff f90e 	bl	8000884 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 8001668:	2201      	movs	r2, #1
 800166a:	4907      	ldr	r1, [pc, #28]	; (8001688 <HAL_UART_TxCpltCallback+0x50>)
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f002 fce1 	bl	8004034 <HAL_UART_Transmit_IT>
		}
	}
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004800 	.word	0x40004800
 8001680:	200000f7 	.word	0x200000f7
 8001684:	200000c4 	.word	0x200000c4
 8001688:	200001dc 	.word	0x200001dc

0800168c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800169e:	f000 fbaf 	bl	8001e00 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016ae:	231f      	movs	r3, #31
 80016b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016b2:	2387      	movs	r3, #135	; 0x87
 80016b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016ba:	2300      	movs	r3, #0
 80016bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016ce:	463b      	mov	r3, r7
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fbcd 	bl	8001e70 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016d6:	2004      	movs	r0, #4
 80016d8:	f000 fbaa 	bl	8001e30 <HAL_MPU_Enable>

}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x50>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <HAL_MspInit+0x50>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x50>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x50>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_MspInit+0x50>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x50>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2005      	movs	r0, #5
 800172c:	f000 fb31 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001730:	2005      	movs	r0, #5
 8001732:	f000 fb4a 	bl	8001dca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 f9e0 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <TIM3_IRQHandler+0x18>)
 80017ae:	f001 fff1 	bl	8003794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <TIM3_IRQHandler+0x1c>)
 80017b6:	f000 fdf6 	bl	80023a6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200001e4 	.word	0x200001e4
 80017c4:	40020400 	.word	0x40020400

080017c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART3_IRQHandler+0x10>)
 80017ce:	f002 fcd3 	bl	8004178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000230 	.word	0x20000230

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f003 ff66 	bl	80056dc <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20080000 	.word	0x20080000
 800183c:	00000400 	.word	0x00000400
 8001840:	200001e0 	.word	0x200001e0
 8001844:	200002d0 	.word	0x200002d0

08001848 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_TIM3_Init+0x98>)
 800188c:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <MX_TIM3_Init+0x9c>)
 800188e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5399/3;
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_TIM3_Init+0x98>)
 8001892:	f240 7207 	movw	r2, #1799	; 0x707
 8001896:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_TIM3_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_TIM3_Init+0x98>)
 80018a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80018a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_TIM3_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_TIM3_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018b2:	4814      	ldr	r0, [pc, #80]	; (8001904 <MX_TIM3_Init+0x98>)
 80018b4:	f001 fe9e 	bl	80035f4 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80018be:	f7ff ff11 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_TIM3_Init+0x98>)
 80018d0:	f002 f880 	bl	80039d4 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80018da:	f7ff ff03 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_TIM3_Init+0x98>)
 80018ec:	f002 faa8 	bl	8003e40 <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80018f6:	f7ff fef5 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001e4 	.word	0x200001e4
 8001908:	40000400 	.word	0x40000400

0800190c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_TIM_Base_MspInit+0x44>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d113      	bne.n	8001946 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_TIM_Base_MspInit+0x48>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <HAL_TIM_Base_MspInit+0x48>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_TIM_Base_MspInit+0x48>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	201d      	movs	r0, #29
 800193c:	f000 fa29 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001940:	201d      	movs	r0, #29
 8001942:	f000 fa42 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40000400 	.word	0x40000400
 8001954:	40023800 	.word	0x40023800

08001958 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <MX_USART3_UART_Init+0x5c>)
 8001960:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800199c:	f002 fafc 	bl	8003f98 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019a6:	f7ff fe9d 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000230 	.word	0x20000230
 80019b4:	40004800 	.word	0x40004800

080019b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0ae      	sub	sp, #184	; 0xb8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2290      	movs	r2, #144	; 0x90
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fea9 	bl	8005730 <memset>
  if(uartHandle->Instance==USART3)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_UART_MspInit+0xc4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d144      	bne.n	8001a72 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 80019ee:	2320      	movs	r3, #32
 80019f0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f9d4 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a02:	f7ff fe6f 	bl	80016e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <HAL_UART_MspInit+0xcc>)
 8001a5e:	f000 fadd 	bl	800201c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2027      	movs	r0, #39	; 0x27
 8001a68:	f000 f993 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a6c:	2027      	movs	r0, #39	; 0x27
 8001a6e:	f000 f9ac 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	37b8      	adds	r7, #184	; 0xb8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40004800 	.word	0x40004800
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020c00 	.word	0x40020c00

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa4:	4c0b      	ldr	r4, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab2:	f7ff fec9 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f003 fe17 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7ff f8d1 	bl	8000c60 <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001acc:	08006478 	.word	0x08006478
  ldr r2, =_sbss
 8001ad0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ad4:	200002cc 	.word	0x200002cc

08001ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC_IRQHandler>

08001ada <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ade:	2003      	movs	r0, #3
 8001ae0:	f000 f94c 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae4:	200f      	movs	r0, #15
 8001ae6:	f000 f805 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aea:	f7ff fe01 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x54>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f967 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f000 f92f 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_InitTick+0x5c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008
 8001b78:	200002b8 	.word	0x200002b8

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200002b8 	.word	0x200002b8

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff ffee 	bl	8001b7c <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008

08001bdc <__NVIC_SetPriorityGrouping>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <__NVIC_SetPriorityGrouping+0x40>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <__NVIC_SetPriorityGrouping+0x40>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	60d3      	str	r3, [r2, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	05fa0000 	.word	0x05fa0000

08001c24 <__NVIC_GetPriorityGrouping>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	; (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff3e 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff31 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e04:	f3bf 8f5f 	dmb	sy
}
 8001e08:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_MPU_Disable+0x28>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_MPU_Disable+0x28>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_MPU_Disable+0x2c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	e000ed90 	.word	0xe000ed90

08001e30 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e38:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_MPU_Enable+0x38>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_MPU_Enable+0x3c>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_MPU_Enable+0x3c>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4e:	f3bf 8f4f 	dsb	sy
}
 8001e52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e54:	f3bf 8f6f 	isb	sy
}
 8001e58:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed90 	.word	0xe000ed90
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	785a      	ldrb	r2, [r3, #1]
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_MPU_ConfigRegion+0x84>)
 8001e7e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d029      	beq.n	8001edc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_MPU_ConfigRegion+0x84>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7b1b      	ldrb	r3, [r3, #12]
 8001e94:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7adb      	ldrb	r3, [r3, #11]
 8001e9a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7a9b      	ldrb	r3, [r3, #10]
 8001ea2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ea4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7b5b      	ldrb	r3, [r3, #13]
 8001eaa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001eac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7b9b      	ldrb	r3, [r3, #14]
 8001eb2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7bdb      	ldrb	r3, [r3, #15]
 8001eba:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ebc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7a5b      	ldrb	r3, [r3, #9]
 8001ec2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ec4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7a1b      	ldrb	r3, [r3, #8]
 8001eca:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ecc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ed6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ed8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001eda:	e005      	b.n	8001ee8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_MPU_ConfigRegion+0x84>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <HAL_MPU_ConfigRegion+0x84>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed90 	.word	0xe000ed90

08001ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f06:	f7ff fe39 	bl	8001b7c <HAL_GetTick>
 8001f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d008      	beq.n	8001f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e052      	b.n	8001fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0216 	bic.w	r2, r2, #22
 8001f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <HAL_DMA_Abort+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0208 	bic.w	r2, r2, #8
 8001f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7a:	e013      	b.n	8001fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f7c:	f7ff fdfe 	bl	8001b7c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d90c      	bls.n	8001fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e015      	b.n	8001fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1e4      	bne.n	8001f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	223f      	movs	r2, #63	; 0x3f
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00c      	b.n	8002010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e175      	b.n	8002328 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8164 	bne.w	8002322 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d005      	beq.n	8002072 <HAL_GPIO_Init+0x56>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d130      	bne.n	80020d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80be 	beq.w	8002322 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021be:	4a61      	ldr	r2, [pc, #388]	; (8002344 <HAL_GPIO_Init+0x328>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_GPIO_Init+0x32c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d037      	beq.n	800225a <HAL_GPIO_Init+0x23e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a57      	ldr	r2, [pc, #348]	; (800234c <HAL_GPIO_Init+0x330>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <HAL_GPIO_Init+0x23a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_GPIO_Init+0x334>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02b      	beq.n	8002252 <HAL_GPIO_Init+0x236>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a55      	ldr	r2, [pc, #340]	; (8002354 <HAL_GPIO_Init+0x338>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d025      	beq.n	800224e <HAL_GPIO_Init+0x232>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a54      	ldr	r2, [pc, #336]	; (8002358 <HAL_GPIO_Init+0x33c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <HAL_GPIO_Init+0x22e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a53      	ldr	r2, [pc, #332]	; (800235c <HAL_GPIO_Init+0x340>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x22a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_GPIO_Init+0x344>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x226>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a51      	ldr	r2, [pc, #324]	; (8002364 <HAL_GPIO_Init+0x348>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x222>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a50      	ldr	r2, [pc, #320]	; (8002368 <HAL_GPIO_Init+0x34c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x21e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4f      	ldr	r2, [pc, #316]	; (800236c <HAL_GPIO_Init+0x350>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x21a>
 8002232:	2309      	movs	r3, #9
 8002234:	e012      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002236:	230a      	movs	r3, #10
 8002238:	e010      	b.n	800225c <HAL_GPIO_Init+0x240>
 800223a:	2308      	movs	r3, #8
 800223c:	e00e      	b.n	800225c <HAL_GPIO_Init+0x240>
 800223e:	2307      	movs	r3, #7
 8002240:	e00c      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002242:	2306      	movs	r3, #6
 8002244:	e00a      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002246:	2305      	movs	r3, #5
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x240>
 800224a:	2304      	movs	r3, #4
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x240>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x240>
 800225a:	2300      	movs	r3, #0
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x328>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_GPIO_Init+0x354>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a34      	ldr	r2, [pc, #208]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_GPIO_Init+0x354>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	f67f ae86 	bls.w	800203c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40021400 	.word	0x40021400
 8002360:	40021800 	.word	0x40021800
 8002364:	40021c00 	.word	0x40021c00
 8002368:	40022000 	.word	0x40022000
 800236c:	40022400 	.word	0x40022400
 8002370:	40013c00 	.word	0x40013c00

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b8:	887a      	ldrh	r2, [r7, #2]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	041a      	lsls	r2, r3, #16
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	400b      	ands	r3, r1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	619a      	str	r2, [r3, #24]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a22      	ldr	r2, [pc, #136]	; (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240a:	f7ff fbb7 	bl	8001b7c <HAL_GetTick>
 800240e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002410:	e009      	b.n	8002426 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002412:	f7ff fbb3 	bl	8001b7c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002420:	d901      	bls.n	8002426 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e022      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d1ee      	bne.n	8002412 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff fb9c 	bl	8001b7c <HAL_GetTick>
 8002444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002446:	e009      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002448:	f7ff fb98 	bl	8001b7c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e007      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000

0800247c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e29b      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ac:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d112      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
 80024b8:	4b90      	ldr	r3, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c4:	d10b      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c6:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06c      	beq.n	80025ac <HAL_RCC_OscConfig+0x130>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d168      	bne.n	80025ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e275      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x7a>
 80024e8:	4b84      	ldr	r3, [pc, #528]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a83      	ldr	r2, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e02e      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x9c>
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7b      	ldr	r2, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0xc0>
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b73      	ldr	r3, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a72      	ldr	r2, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff fb0e 	bl	8001b7c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff fb0a 	bl	8001b7c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e229      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff fafa 	bl	8001b7c <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff faf6 	bl	8001b7c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e215      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x110>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d069      	beq.n	800268e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1e9      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	493d      	ldr	r1, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e040      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff faac 	bl	8001b7c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7ff faa8 	bl	8001b7c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1c7      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4929      	ldr	r1, [pc, #164]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
 800265a:	e018      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff fa88 	bl	8001b7c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7ff fa84 	bl	8001b7c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1a3      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d038      	beq.n	800270c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff fa65 	bl	8001b7c <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7ff fa61 	bl	8001b7c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e180      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x23a>
 80026d4:	e01a      	b.n	800270c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7ff fa4b 	bl	8001b7c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7ff fa47 	bl	8001b7c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d903      	bls.n	8002700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e166      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
 80026fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a4 	beq.w	8002862 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b89      	ldr	r3, [pc, #548]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a88      	ldr	r2, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b86      	ldr	r3, [pc, #536]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b83      	ldr	r3, [pc, #524]	; (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800274e:	4b80      	ldr	r3, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7f      	ldr	r2, [pc, #508]	; (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7ff fa0f 	bl	8001b7c <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7ff fa0b 	bl	8001b7c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e12a      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x4d4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x31a>
 8002788:	4b70      	ldr	r3, [pc, #448]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a6f      	ldr	r2, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x33c>
 800279e:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x35e>
 80027c0:	4b62      	ldr	r3, [pc, #392]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a61      	ldr	r2, [pc, #388]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b5f      	ldr	r3, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a5e      	ldr	r2, [pc, #376]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a5b      	ldr	r2, [pc, #364]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7ff f9bf 	bl	8001b7c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7ff f9bb 	bl	8001b7c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0d8      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x386>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7ff f9a9 	bl	8001b7c <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7ff f9a5 	bl	8001b7c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0c2      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a3c      	ldr	r2, [pc, #240]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80ae 	beq.w	80029c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d06d      	beq.n	8002954 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d14b      	bne.n	8002918 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a31      	ldr	r2, [pc, #196]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f976 	bl	8001b7c <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff f972 	bl	8001b7c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e091      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	071b      	lsls	r3, r3, #28
 80028de:	491b      	ldr	r1, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7ff f944 	bl	8001b7c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff f940 	bl	8001b7c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e05f      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x47c>
 8002916:	e057      	b.n	80029c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f92a 	bl	8001b7c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f926 	bl	8001b7c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e045      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x4b0>
 800294a:	e03d      	b.n	80029c8 <HAL_RCC_OscConfig+0x54c>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <HAL_RCC_OscConfig+0x558>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d030      	beq.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d129      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d122      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800298a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298c:	4293      	cmp	r3, r2
 800298e:	d119      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10f      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0d0      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f0:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d910      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b67      	ldr	r3, [pc, #412]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 020f 	bic.w	r2, r3, #15
 8002a06:	4965      	ldr	r1, [pc, #404]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d040      	beq.n	8002afc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d115      	bne.n	8002aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e073      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06b      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f023 0203 	bic.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4936      	ldr	r1, [pc, #216]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002acc:	f7ff f856 	bl	8001b7c <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f7ff f852 	bl	8001b7c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e053      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 020c 	and.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d1eb      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d210      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 020f 	bic.w	r2, r3, #15
 8002b12:	4922      	ldr	r1, [pc, #136]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f821 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b7c:	5ccb      	ldrb	r3, [r1, r3]
 8002b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1d4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe ffb2 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	0800631c 	.word	0x0800631c
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	b090      	sub	sp, #64	; 0x40
 8002bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	f200 80a1 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x16c>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x3a>
 8002be2:	e09b      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8002be6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002be8:	e09b      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bee:	e098      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bfa:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d028      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	627a      	str	r2, [r7, #36]	; 0x24
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c1c:	fb03 f201 	mul.w	r2, r3, r1
 8002c20:	2300      	movs	r3, #0
 8002c22:	fb00 f303 	mul.w	r3, r0, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c2a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c30:	460a      	mov	r2, r1
 8002c32:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	4413      	add	r3, r2
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	61fa      	str	r2, [r7, #28]
 8002c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c4a:	f7fd fb51 	bl	80002f0 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4613      	mov	r3, r2
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c56:	e053      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	2200      	movs	r2, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	617a      	str	r2, [r7, #20]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c6a:	f04f 0b00 	mov.w	fp, #0
 8002c6e:	4652      	mov	r2, sl
 8002c70:	465b      	mov	r3, fp
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	0159      	lsls	r1, r3, #5
 8002c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c80:	0150      	lsls	r0, r2, #5
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	ebb2 080a 	subs.w	r8, r2, sl
 8002c8a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ca2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ca6:	eb63 0509 	sbc.w	r5, r3, r9
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	00eb      	lsls	r3, r5, #3
 8002cb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb8:	00e2      	lsls	r2, r4, #3
 8002cba:	4614      	mov	r4, r2
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	eb14 030a 	adds.w	r3, r4, sl
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	eb45 030b 	adc.w	r3, r5, fp
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cea:	2200      	movs	r2, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	60fa      	str	r2, [r7, #12]
 8002cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cf4:	f7fd fafc 	bl	80002f0 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3740      	adds	r7, #64	; 0x40
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	017d7840 	.word	0x017d7840

08002d3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000000 	.word	0x20000000

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff0 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0a9b      	lsrs	r3, r3, #10
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	0800632c 	.word	0x0800632c

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffdc 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0b5b      	lsrs	r3, r3, #13
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	0800632c 	.word	0x0800632c

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a68      	ldr	r2, [pc, #416]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	4b66      	ldr	r3, [pc, #408]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	4964      	ldr	r1, [pc, #400]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	4959      	ldr	r1, [pc, #356]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e3a:	4b4e      	ldr	r3, [pc, #312]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	494a      	ldr	r1, [pc, #296]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 808b 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6413      	str	r3, [r2, #64]	; 0x40
 8002e94:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ea0:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a34      	ldr	r2, [pc, #208]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7fe fe66 	bl	8001b7c <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb4:	f7fe fe62 	bl	8001b7c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e38f      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ed2:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d035      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d02e      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d114      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fe2a 	bl	8001b7c <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fe26 	bl	8001b7c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e351      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ee      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f5a:	d111      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	4901      	ldr	r1, [pc, #4]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	0ffffcff 	.word	0x0ffffcff
 8002f80:	4bac      	ldr	r3, [pc, #688]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4aab      	ldr	r2, [pc, #684]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f8a:	6093      	str	r3, [r2, #8]
 8002f8c:	4ba9      	ldr	r3, [pc, #676]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	49a6      	ldr	r1, [pc, #664]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002faa:	4ba2      	ldr	r3, [pc, #648]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb0:	4aa0      	ldr	r2, [pc, #640]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fba:	4b9e      	ldr	r3, [pc, #632]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	499b      	ldr	r1, [pc, #620]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd8:	4b96      	ldr	r3, [pc, #600]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe6:	4993      	ldr	r1, [pc, #588]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ffa:	4b8e      	ldr	r3, [pc, #568]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003008:	498a      	ldr	r1, [pc, #552]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800301c:	4b85      	ldr	r3, [pc, #532]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	4982      	ldr	r1, [pc, #520]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800303e:	4b7d      	ldr	r3, [pc, #500]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4979      	ldr	r1, [pc, #484]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003060:	4b74      	ldr	r3, [pc, #464]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4971      	ldr	r1, [pc, #452]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003082:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f023 020c 	bic.w	r2, r3, #12
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	4968      	ldr	r1, [pc, #416]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a4:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	4960      	ldr	r1, [pc, #384]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d4:	4957      	ldr	r1, [pc, #348]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030e8:	4b52      	ldr	r3, [pc, #328]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	494f      	ldr	r1, [pc, #316]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	4946      	ldr	r1, [pc, #280]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800312c:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	493e      	ldr	r1, [pc, #248]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	4935      	ldr	r1, [pc, #212]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317e:	492d      	ldr	r1, [pc, #180]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d011      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003192:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a0:	4924      	ldr	r1, [pc, #144]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	4914      	ldr	r1, [pc, #80]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003204:	490b      	ldr	r1, [pc, #44]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00f      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003228:	4902      	ldr	r1, [pc, #8]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003230:	e002      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	4986      	ldr	r1, [pc, #536]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003268:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003278:	497d      	ldr	r1, [pc, #500]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d006      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80d6 	beq.w	8003440 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003294:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a75      	ldr	r2, [pc, #468]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800329e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7fe fc6c 	bl	8001b7c <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032a8:	f7fe fc68 	bl	8001b7c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e195      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032ba:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d021      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11d      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032da:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032e8:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	0e1b      	lsrs	r3, r3, #24
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	019a      	lsls	r2, r3, #6
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	071b      	lsls	r3, r3, #28
 800330e:	4958      	ldr	r1, [pc, #352]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02e      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003340:	d129      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003342:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003350:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003356:	0f1b      	lsrs	r3, r3, #28
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	019a      	lsls	r2, r3, #6
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	071b      	lsls	r3, r3, #28
 8003376:	493e      	ldr	r1, [pc, #248]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003384:	f023 021f 	bic.w	r2, r3, #31
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	3b01      	subs	r3, #1
 800338e:	4938      	ldr	r1, [pc, #224]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01d      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033a2:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a8:	0e1b      	lsrs	r3, r3, #24
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b0:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b6:	0f1b      	lsrs	r3, r3, #28
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	019a      	lsls	r2, r3, #6
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	431a      	orrs	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	061b      	lsls	r3, r3, #24
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	071b      	lsls	r3, r3, #28
 80033d6:	4926      	ldr	r1, [pc, #152]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d011      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	019a      	lsls	r2, r3, #6
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	041b      	lsls	r3, r3, #16
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	071b      	lsls	r3, r3, #28
 8003406:	491a      	ldr	r1, [pc, #104]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800340e:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341a:	f7fe fbaf 	bl	8001b7c <HAL_GetTick>
 800341e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003422:	f7fe fbab 	bl	8001b7c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	; 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0d8      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	f040 80ce 	bne.w	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a08      	ldr	r2, [pc, #32]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003454:	f7fe fb92 	bl	8001b7c <HAL_GetTick>
 8003458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800345a:	e00b      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800345c:	f7fe fb8e 	bl	8001b7c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d904      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e0bb      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003480:	d0ec      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034aa:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	0f1b      	lsrs	r3, r3, #28
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	019a      	lsls	r2, r3, #6
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	4944      	ldr	r1, [pc, #272]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034e6:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	493d      	ldr	r1, [pc, #244]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d022      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003514:	d11d      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	0e1b      	lsrs	r3, r3, #24
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	0f1b      	lsrs	r3, r3, #28
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	019a      	lsls	r2, r3, #6
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	4929      	ldr	r1, [pc, #164]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	0e1b      	lsrs	r3, r3, #24
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	019a      	lsls	r2, r3, #6
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	4917      	ldr	r1, [pc, #92]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4911      	ldr	r1, [pc, #68]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fe fade 	bl	8001b7c <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035c4:	f7fe fada 	bl	8001b7c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e007      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e2:	d1ef      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e049      	b.n	800369a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fe f976 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 faca 	bl	8003bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d001      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e054      	b.n	8003766 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <HAL_TIM_Base_Start_IT+0xd0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d022      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d01d      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a22      	ldr	r2, [pc, #136]	; (8003778 <HAL_TIM_Base_Start_IT+0xd4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a21      	ldr	r2, [pc, #132]	; (800377c <HAL_TIM_Base_Start_IT+0xd8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_TIM_Base_Start_IT+0xdc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_TIM_Base_Start_IT+0xe0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <HAL_TIM_Base_Start_IT+0xe4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x80>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_TIM_Base_Start_IT+0xe8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d115      	bne.n	8003750 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	4b19      	ldr	r3, [pc, #100]	; (8003790 <HAL_TIM_Base_Start_IT+0xec>)
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d015      	beq.n	8003762 <HAL_TIM_Base_Start_IT+0xbe>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d011      	beq.n	8003762 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	e008      	b.n	8003762 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e000      	b.n	8003764 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40001800 	.word	0x40001800
 8003790:	00010007 	.word	0x00010007

08003794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0202 	mvn.w	r2, #2
 80037c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f9da 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9cc 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f9dd 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0204 	mvn.w	r2, #4
 8003814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9b0 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9a2 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f9b3 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0208 	mvn.w	r2, #8
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2204      	movs	r2, #4
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f986 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f978 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f989 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0210 	mvn.w	r2, #16
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2208      	movs	r2, #8
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f95c 	bl	8003b90 <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f94e 	bl	8003b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f95f 	bl	8003ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0201 	mvn.w	r2, #1
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f928 	bl	8003b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fb16 	bl	8003f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003952:	d10e      	bne.n	8003972 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fb09 	bl	8003f84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f90d 	bl	8003bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d10e      	bne.n	80039ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d107      	bne.n	80039ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f06f 0220 	mvn.w	r2, #32
 80039c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fac9 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_ConfigClockSource+0x1c>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e0b4      	b.n	8003b5a <HAL_TIM_ConfigClockSource+0x186>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_TIM_ConfigClockSource+0x190>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a28:	d03e      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0xd4>
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2e:	f200 8087 	bhi.w	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	f000 8086 	beq.w	8003b46 <HAL_TIM_ConfigClockSource+0x172>
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3e:	d87f      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b70      	cmp	r3, #112	; 0x70
 8003a42:	d01a      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0xa6>
 8003a44:	2b70      	cmp	r3, #112	; 0x70
 8003a46:	d87b      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d050      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x11a>
 8003a4c:	2b60      	cmp	r3, #96	; 0x60
 8003a4e:	d877      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b50      	cmp	r3, #80	; 0x50
 8003a52:	d03c      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0xfa>
 8003a54:	2b50      	cmp	r3, #80	; 0x50
 8003a56:	d873      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d058      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x13a>
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d86f      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d064      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a64:	2b30      	cmp	r3, #48	; 0x30
 8003a66:	d86b      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d060      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d867      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d05c      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d05a      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x15a>
 8003a78:	e062      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6899      	ldr	r1, [r3, #8]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f000 f9b9 	bl	8003e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	609a      	str	r2, [r3, #8]
      break;
 8003aa6:	e04f      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6899      	ldr	r1, [r3, #8]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f000 f9a2 	bl	8003e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aca:	609a      	str	r2, [r3, #8]
      break;
 8003acc:	e03c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 f916 	bl	8003d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2150      	movs	r1, #80	; 0x50
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f96f 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003aec:	e02c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f000 f935 	bl	8003d6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2160      	movs	r1, #96	; 0x60
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f95f 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e01c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f000 f8f6 	bl	8003d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2140      	movs	r1, #64	; 0x40
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f94f 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b2c:	e00c      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f000 f946 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b3e:	e003      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
      break;
 8003b44:	e000      	b.n	8003b48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	fffeff88 	.word	0xfffeff88

08003b68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a40      	ldr	r2, [pc, #256]	; (8003ce0 <TIM_Base_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d00f      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a3d      	ldr	r2, [pc, #244]	; (8003ce4 <TIM_Base_SetConfig+0x118>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a3c      	ldr	r2, [pc, #240]	; (8003ce8 <TIM_Base_SetConfig+0x11c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <TIM_Base_SetConfig+0x120>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3a      	ldr	r2, [pc, #232]	; (8003cf0 <TIM_Base_SetConfig+0x124>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d108      	bne.n	8003c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <TIM_Base_SetConfig+0x114>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d02b      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d027      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <TIM_Base_SetConfig+0x118>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d023      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <TIM_Base_SetConfig+0x11c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01f      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <TIM_Base_SetConfig+0x120>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01b      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <TIM_Base_SetConfig+0x124>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d017      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <TIM_Base_SetConfig+0x128>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <TIM_Base_SetConfig+0x12c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <TIM_Base_SetConfig+0x130>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <TIM_Base_SetConfig+0x134>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a24      	ldr	r2, [pc, #144]	; (8003d04 <TIM_Base_SetConfig+0x138>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <TIM_Base_SetConfig+0x13c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <TIM_Base_SetConfig+0x114>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0xf8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <TIM_Base_SetConfig+0x124>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d103      	bne.n	8003ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40010400 	.word	0x40010400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800
 8003d00:	40001800 	.word	0x40001800
 8003d04:	40001c00 	.word	0x40001c00
 8003d08:	40002000 	.word	0x40002000

08003d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 030a 	bic.w	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0210 	bic.w	r2, r3, #16
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f043 0307 	orr.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e06d      	b.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a30      	ldr	r2, [pc, #192]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2f      	ldr	r2, [pc, #188]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d108      	bne.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d022      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d01d      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d018      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d10c      	bne.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010400 	.word	0x40010400
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e040      	b.n	800402c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fcfc 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fbd6 	bl	8004788 <UART_SetConfig>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e022      	b.n	800402c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fe2e 	bl	8004c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 feb5 	bl	8004d94 <UART_CheckIdleState>
 800402a:	4603      	mov	r3, r0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004034:	b480      	push	{r7}
 8004036:	b08b      	sub	sp, #44	; 0x2c
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004046:	2b20      	cmp	r3, #32
 8004048:	d147      	bne.n	80040da <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_UART_Transmit_IT+0x22>
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e040      	b.n	80040dc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2221      	movs	r2, #33	; 0x21
 8004082:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d107      	bne.n	800409e <HAL_UART_Transmit_IT+0x6a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <HAL_UART_Transmit_IT+0xb4>)
 800409a:	66da      	str	r2, [r3, #108]	; 0x6c
 800409c:	e002      	b.n	80040a4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_UART_Transmit_IT+0xb8>)
 80040a2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	613b      	str	r3, [r7, #16]
   return(result);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	69f9      	ldr	r1, [r7, #28]
 80040c8:	6a3a      	ldr	r2, [r7, #32]
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	372c      	adds	r7, #44	; 0x2c
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	080052f3 	.word	0x080052f3
 80040ec:	0800523d 	.word	0x0800523d

080040f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004104:	2b20      	cmp	r3, #32
 8004106:	d132      	bne.n	800416e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_UART_Receive_IT+0x24>
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e02b      	b.n	8004170 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	69f9      	ldr	r1, [r7, #28]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	61bb      	str	r3, [r7, #24]
   return(result);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	461a      	mov	r2, r3
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 ff29 	bl	8004fbc <UART_Start_Receive_IT>
 800416a:	4603      	mov	r3, r0
 800416c:	e000      	b.n	8004170 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b0ba      	sub	sp, #232	; 0xe8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800419e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041a6:	4013      	ands	r3, r2
 80041a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d115      	bne.n	80041e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00f      	beq.n	80041e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 82ac 	beq.w	800472e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
      }
      return;
 80041de:	e2a6      	b.n	800472e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8117 	beq.w	8004418 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041fa:	4b85      	ldr	r3, [pc, #532]	; (8004410 <HAL_UART_IRQHandler+0x298>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 810a 	beq.w	8004418 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d011      	beq.n	8004234 <HAL_UART_IRQHandler+0xbc>
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422a:	f043 0201 	orr.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d011      	beq.n	8004264 <HAL_UART_IRQHandler+0xec>
 8004240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2202      	movs	r2, #2
 8004252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	f043 0204 	orr.w	r2, r3, #4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d011      	beq.n	8004294 <HAL_UART_IRQHandler+0x11c>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2204      	movs	r2, #4
 8004282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428a:	f043 0202 	orr.w	r2, r3, #2
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d017      	beq.n	80042d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2208      	movs	r2, #8
 80042be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c6:	f043 0208 	orr.w	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d012      	beq.n	8004302 <HAL_UART_IRQHandler+0x18a>
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8212 	beq.w	8004732 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800431a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d005      	beq.n	800435a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800434e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004352:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004356:	2b00      	cmp	r3, #0
 8004358:	d04f      	beq.n	80043fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fef4 	bl	8005148 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d141      	bne.n	80043f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800439a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800439e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1d9      	bne.n	800436e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d013      	beq.n	80043ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_UART_IRQHandler+0x29c>)
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd fe02 	bl	8001fd8 <HAL_DMA_Abort_IT>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043e4:	4610      	mov	r0, r2
 80043e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	e00f      	b.n	800440a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9ac 	bl	8004748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	e00b      	b.n	800440a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9a8 	bl	8004748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	e007      	b.n	800440a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f9a4 	bl	8004748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004408:	e193      	b.n	8004732 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440a:	bf00      	nop
    return;
 800440c:	e191      	b.n	8004732 <HAL_UART_IRQHandler+0x5ba>
 800440e:	bf00      	nop
 8004410:	04000120 	.word	0x04000120
 8004414:	08005211 	.word	0x08005211

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441c:	2b01      	cmp	r3, #1
 800441e:	f040 814c 	bne.w	80046ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8145 	beq.w	80046ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 813e 	beq.w	80046ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2210      	movs	r2, #16
 8004444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	f040 80b6 	bne.w	80045c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004462:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8165 	beq.w	8004736 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004476:	429a      	cmp	r2, r3
 8004478:	f080 815d 	bcs.w	8004736 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004482:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004490:	f000 8086 	beq.w	80045a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1da      	bne.n	8004494 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004502:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004506:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800450a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e1      	bne.n	80044de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800452a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800453e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004540:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004544:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800454c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e3      	bne.n	800451a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004582:	65bb      	str	r3, [r7, #88]	; 0x58
 8004584:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd fcac 	bl	8001ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8ce 	bl	800475c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045c0:	e0b9      	b.n	8004736 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80ab 	beq.w	800473a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80045e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a6 	beq.w	800473a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
 8004612:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e4      	bne.n	80045ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	623b      	str	r3, [r7, #32]
   return(result);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004648:	633a      	str	r2, [r7, #48]	; 0x30
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800464e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e3      	bne.n	8004624 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	60fb      	str	r3, [r7, #12]
   return(result);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f023 0310 	bic.w	r3, r3, #16
 8004684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	69b9      	ldr	r1, [r7, #24]
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	617b      	str	r3, [r7, #20]
   return(result);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e4      	bne.n	8004670 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f852 	bl	800475c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046b8:	e03f      	b.n	800473a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00e      	beq.n	80046e4 <HAL_UART_IRQHandler+0x56c>
 80046c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f849 	bl	8004774 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046e2:	e02d      	b.n	8004740 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01c      	beq.n	800473e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4798      	blx	r3
    }
    return;
 800470c:	e017      	b.n	800473e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d012      	beq.n	8004740 <HAL_UART_IRQHandler+0x5c8>
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fe43 	bl	80053b2 <UART_EndTransmit_IT>
    return;
 800472c:	e008      	b.n	8004740 <HAL_UART_IRQHandler+0x5c8>
      return;
 800472e:	bf00      	nop
 8004730:	e006      	b.n	8004740 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004732:	bf00      	nop
 8004734:	e004      	b.n	8004740 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_UART_IRQHandler+0x5c8>
      return;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_UART_IRQHandler+0x5c8>
    return;
 800473e:	bf00      	nop
  }

}
 8004740:	37e8      	adds	r7, #232	; 0xe8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop

08004748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4ba6      	ldr	r3, [pc, #664]	; (8004a4c <UART_SetConfig+0x2c4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	430b      	orrs	r3, r1
 80047be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a94      	ldr	r2, [pc, #592]	; (8004a50 <UART_SetConfig+0x2c8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d120      	bne.n	8004846 <UART_SetConfig+0xbe>
 8004804:	4b93      	ldr	r3, [pc, #588]	; (8004a54 <UART_SetConfig+0x2cc>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b03      	cmp	r3, #3
 8004810:	d816      	bhi.n	8004840 <UART_SetConfig+0xb8>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x90>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004829 	.word	0x08004829
 800481c:	08004835 	.word	0x08004835
 8004820:	0800482f 	.word	0x0800482f
 8004824:	0800483b 	.word	0x0800483b
 8004828:	2301      	movs	r3, #1
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e150      	b.n	8004ad0 <UART_SetConfig+0x348>
 800482e:	2302      	movs	r3, #2
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e14d      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004834:	2304      	movs	r3, #4
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e14a      	b.n	8004ad0 <UART_SetConfig+0x348>
 800483a:	2308      	movs	r3, #8
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e147      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004840:	2310      	movs	r3, #16
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e144      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a83      	ldr	r2, [pc, #524]	; (8004a58 <UART_SetConfig+0x2d0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d132      	bne.n	80048b6 <UART_SetConfig+0x12e>
 8004850:	4b80      	ldr	r3, [pc, #512]	; (8004a54 <UART_SetConfig+0x2cc>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d828      	bhi.n	80048b0 <UART_SetConfig+0x128>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0xdc>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004899 	.word	0x08004899
 8004868:	080048b1 	.word	0x080048b1
 800486c:	080048b1 	.word	0x080048b1
 8004870:	080048b1 	.word	0x080048b1
 8004874:	080048a5 	.word	0x080048a5
 8004878:	080048b1 	.word	0x080048b1
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048b1 	.word	0x080048b1
 8004884:	0800489f 	.word	0x0800489f
 8004888:	080048b1 	.word	0x080048b1
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b1 	.word	0x080048b1
 8004894:	080048ab 	.word	0x080048ab
 8004898:	2300      	movs	r3, #0
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e118      	b.n	8004ad0 <UART_SetConfig+0x348>
 800489e:	2302      	movs	r3, #2
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e115      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048a4:	2304      	movs	r3, #4
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e112      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048aa:	2308      	movs	r3, #8
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e10f      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048b0:	2310      	movs	r3, #16
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e10c      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a68      	ldr	r2, [pc, #416]	; (8004a5c <UART_SetConfig+0x2d4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d120      	bne.n	8004902 <UART_SetConfig+0x17a>
 80048c0:	4b64      	ldr	r3, [pc, #400]	; (8004a54 <UART_SetConfig+0x2cc>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ca:	2b30      	cmp	r3, #48	; 0x30
 80048cc:	d013      	beq.n	80048f6 <UART_SetConfig+0x16e>
 80048ce:	2b30      	cmp	r3, #48	; 0x30
 80048d0:	d814      	bhi.n	80048fc <UART_SetConfig+0x174>
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d009      	beq.n	80048ea <UART_SetConfig+0x162>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d810      	bhi.n	80048fc <UART_SetConfig+0x174>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <UART_SetConfig+0x15c>
 80048de:	2b10      	cmp	r3, #16
 80048e0:	d006      	beq.n	80048f0 <UART_SetConfig+0x168>
 80048e2:	e00b      	b.n	80048fc <UART_SetConfig+0x174>
 80048e4:	2300      	movs	r3, #0
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e0f2      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048ea:	2302      	movs	r3, #2
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e0ef      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048f0:	2304      	movs	r3, #4
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e0ec      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048f6:	2308      	movs	r3, #8
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e0e9      	b.n	8004ad0 <UART_SetConfig+0x348>
 80048fc:	2310      	movs	r3, #16
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e0e6      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a56      	ldr	r2, [pc, #344]	; (8004a60 <UART_SetConfig+0x2d8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d120      	bne.n	800494e <UART_SetConfig+0x1c6>
 800490c:	4b51      	ldr	r3, [pc, #324]	; (8004a54 <UART_SetConfig+0x2cc>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004916:	2bc0      	cmp	r3, #192	; 0xc0
 8004918:	d013      	beq.n	8004942 <UART_SetConfig+0x1ba>
 800491a:	2bc0      	cmp	r3, #192	; 0xc0
 800491c:	d814      	bhi.n	8004948 <UART_SetConfig+0x1c0>
 800491e:	2b80      	cmp	r3, #128	; 0x80
 8004920:	d009      	beq.n	8004936 <UART_SetConfig+0x1ae>
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d810      	bhi.n	8004948 <UART_SetConfig+0x1c0>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <UART_SetConfig+0x1a8>
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d006      	beq.n	800493c <UART_SetConfig+0x1b4>
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x1c0>
 8004930:	2300      	movs	r3, #0
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e0cc      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004936:	2302      	movs	r3, #2
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e0c9      	b.n	8004ad0 <UART_SetConfig+0x348>
 800493c:	2304      	movs	r3, #4
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0c6      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004942:	2308      	movs	r3, #8
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0c3      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004948:	2310      	movs	r3, #16
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e0c0      	b.n	8004ad0 <UART_SetConfig+0x348>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a44      	ldr	r2, [pc, #272]	; (8004a64 <UART_SetConfig+0x2dc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d125      	bne.n	80049a4 <UART_SetConfig+0x21c>
 8004958:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <UART_SetConfig+0x2cc>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004966:	d017      	beq.n	8004998 <UART_SetConfig+0x210>
 8004968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496c:	d817      	bhi.n	800499e <UART_SetConfig+0x216>
 800496e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004972:	d00b      	beq.n	800498c <UART_SetConfig+0x204>
 8004974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004978:	d811      	bhi.n	800499e <UART_SetConfig+0x216>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <UART_SetConfig+0x1fe>
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d006      	beq.n	8004992 <UART_SetConfig+0x20a>
 8004984:	e00b      	b.n	800499e <UART_SetConfig+0x216>
 8004986:	2300      	movs	r3, #0
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e0a1      	b.n	8004ad0 <UART_SetConfig+0x348>
 800498c:	2302      	movs	r3, #2
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e09e      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004992:	2304      	movs	r3, #4
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e09b      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004998:	2308      	movs	r3, #8
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e098      	b.n	8004ad0 <UART_SetConfig+0x348>
 800499e:	2310      	movs	r3, #16
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e095      	b.n	8004ad0 <UART_SetConfig+0x348>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <UART_SetConfig+0x2e0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d125      	bne.n	80049fa <UART_SetConfig+0x272>
 80049ae:	4b29      	ldr	r3, [pc, #164]	; (8004a54 <UART_SetConfig+0x2cc>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049bc:	d017      	beq.n	80049ee <UART_SetConfig+0x266>
 80049be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c2:	d817      	bhi.n	80049f4 <UART_SetConfig+0x26c>
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c8:	d00b      	beq.n	80049e2 <UART_SetConfig+0x25a>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	d811      	bhi.n	80049f4 <UART_SetConfig+0x26c>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <UART_SetConfig+0x254>
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d8:	d006      	beq.n	80049e8 <UART_SetConfig+0x260>
 80049da:	e00b      	b.n	80049f4 <UART_SetConfig+0x26c>
 80049dc:	2301      	movs	r3, #1
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e076      	b.n	8004ad0 <UART_SetConfig+0x348>
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e073      	b.n	8004ad0 <UART_SetConfig+0x348>
 80049e8:	2304      	movs	r3, #4
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e070      	b.n	8004ad0 <UART_SetConfig+0x348>
 80049ee:	2308      	movs	r3, #8
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e06d      	b.n	8004ad0 <UART_SetConfig+0x348>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e06a      	b.n	8004ad0 <UART_SetConfig+0x348>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <UART_SetConfig+0x2e4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d138      	bne.n	8004a76 <UART_SetConfig+0x2ee>
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <UART_SetConfig+0x2cc>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a12:	d017      	beq.n	8004a44 <UART_SetConfig+0x2bc>
 8004a14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a18:	d82a      	bhi.n	8004a70 <UART_SetConfig+0x2e8>
 8004a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1e:	d00b      	beq.n	8004a38 <UART_SetConfig+0x2b0>
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a24:	d824      	bhi.n	8004a70 <UART_SetConfig+0x2e8>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <UART_SetConfig+0x2aa>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d006      	beq.n	8004a3e <UART_SetConfig+0x2b6>
 8004a30:	e01e      	b.n	8004a70 <UART_SetConfig+0x2e8>
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e04b      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e048      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004a3e:	2304      	movs	r3, #4
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e045      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004a44:	2308      	movs	r3, #8
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e042      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004a4a:	bf00      	nop
 8004a4c:	efff69f3 	.word	0xefff69f3
 8004a50:	40011000 	.word	0x40011000
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40004400 	.word	0x40004400
 8004a5c:	40004800 	.word	0x40004800
 8004a60:	40004c00 	.word	0x40004c00
 8004a64:	40005000 	.word	0x40005000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	40007800 	.word	0x40007800
 8004a70:	2310      	movs	r3, #16
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e02c      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a72      	ldr	r2, [pc, #456]	; (8004c44 <UART_SetConfig+0x4bc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d125      	bne.n	8004acc <UART_SetConfig+0x344>
 8004a80:	4b71      	ldr	r3, [pc, #452]	; (8004c48 <UART_SetConfig+0x4c0>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a8e:	d017      	beq.n	8004ac0 <UART_SetConfig+0x338>
 8004a90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a94:	d817      	bhi.n	8004ac6 <UART_SetConfig+0x33e>
 8004a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9a:	d00b      	beq.n	8004ab4 <UART_SetConfig+0x32c>
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa0:	d811      	bhi.n	8004ac6 <UART_SetConfig+0x33e>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <UART_SetConfig+0x326>
 8004aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aaa:	d006      	beq.n	8004aba <UART_SetConfig+0x332>
 8004aac:	e00b      	b.n	8004ac6 <UART_SetConfig+0x33e>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e00d      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e00a      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004aba:	2304      	movs	r3, #4
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e007      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e004      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e001      	b.n	8004ad0 <UART_SetConfig+0x348>
 8004acc:	2310      	movs	r3, #16
 8004ace:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad8:	d15b      	bne.n	8004b92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d828      	bhi.n	8004b32 <UART_SetConfig+0x3aa>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x360>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b23 	.word	0x08004b23
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b33 	.word	0x08004b33
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fe f922 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8004b10:	61b8      	str	r0, [r7, #24]
        break;
 8004b12:	e013      	b.n	8004b3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fe f932 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004b18:	61b8      	str	r0, [r7, #24]
        break;
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <UART_SetConfig+0x4c4>)
 8004b1e:	61bb      	str	r3, [r7, #24]
        break;
 8004b20:	e00c      	b.n	8004b3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7fe f845 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8004b26:	61b8      	str	r0, [r7, #24]
        break;
 8004b28:	e008      	b.n	8004b3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	61bb      	str	r3, [r7, #24]
        break;
 8004b30:	e004      	b.n	8004b3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	77bb      	strb	r3, [r7, #30]
        break;
 8004b3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d074      	beq.n	8004c2c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	005a      	lsls	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	d916      	bls.n	8004b8c <UART_SetConfig+0x404>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d212      	bcs.n	8004b8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f023 030f 	bic.w	r3, r3, #15
 8004b6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	89fa      	ldrh	r2, [r7, #14]
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	e04f      	b.n	8004c2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	77bb      	strb	r3, [r7, #30]
 8004b90:	e04c      	b.n	8004c2c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d828      	bhi.n	8004bea <UART_SetConfig+0x462>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x418>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bd5 	.word	0x08004bd5
 8004bac:	08004beb 	.word	0x08004beb
 8004bb0:	08004bdb 	.word	0x08004bdb
 8004bb4:	08004beb 	.word	0x08004beb
 8004bb8:	08004beb 	.word	0x08004beb
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	08004be3 	.word	0x08004be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc4:	f7fe f8c6 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8004bc8:	61b8      	str	r0, [r7, #24]
        break;
 8004bca:	e013      	b.n	8004bf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7fe f8d6 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004bd0:	61b8      	str	r0, [r7, #24]
        break;
 8004bd2:	e00f      	b.n	8004bf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <UART_SetConfig+0x4c4>)
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e00c      	b.n	8004bf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bda:	f7fd ffe9 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8004bde:	61b8      	str	r0, [r7, #24]
        break;
 8004be0:	e008      	b.n	8004bf4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	61bb      	str	r3, [r7, #24]
        break;
 8004be8:	e004      	b.n	8004bf4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bf2:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	085a      	lsrs	r2, r3, #1
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b0f      	cmp	r3, #15
 8004c12:	d909      	bls.n	8004c28 <UART_SetConfig+0x4a0>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1a:	d205      	bcs.n	8004c28 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	e001      	b.n	8004c2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c38:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40007c00 	.word	0x40007c00
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	00f42400 	.word	0x00f42400

08004c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d10a      	bne.n	8004d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da4:	f7fc feea 	bl	8001b7c <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d10e      	bne.n	8004dd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f831 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e027      	b.n	8004e26 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d10e      	bne.n	8004e02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f81b 	bl	8004e2e <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e011      	b.n	8004e26 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b09c      	sub	sp, #112	; 0x70
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3e:	e0a7      	b.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	f000 80a3 	beq.w	8004f90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fc fe97 	bl	8001b7c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d13f      	bne.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e74:	667b      	str	r3, [r7, #100]	; 0x64
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e6      	bne.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e5      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e068      	b.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d050      	beq.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efc:	d148      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
 8004f28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f5a:	623a      	str	r2, [r7, #32]
 8004f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e010      	b.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	f43f af48 	beq.w	8004e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3770      	adds	r7, #112	; 0x70
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b097      	sub	sp, #92	; 0x5c
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	88fa      	ldrh	r2, [r7, #6]
 8004fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	d10e      	bne.n	800500e <UART_Start_Receive_IT+0x52>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d105      	bne.n	8005004 <UART_Start_Receive_IT+0x48>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005002:	e02d      	b.n	8005060 <UART_Start_Receive_IT+0xa4>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	22ff      	movs	r2, #255	; 0xff
 8005008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800500c:	e028      	b.n	8005060 <UART_Start_Receive_IT+0xa4>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <UART_Start_Receive_IT+0x76>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <UART_Start_Receive_IT+0x6c>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	22ff      	movs	r2, #255	; 0xff
 8005022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005026:	e01b      	b.n	8005060 <UART_Start_Receive_IT+0xa4>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	227f      	movs	r2, #127	; 0x7f
 800502c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005030:	e016      	b.n	8005060 <UART_Start_Receive_IT+0xa4>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800503a:	d10d      	bne.n	8005058 <UART_Start_Receive_IT+0x9c>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <UART_Start_Receive_IT+0x92>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	227f      	movs	r2, #127	; 0x7f
 8005048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800504c:	e008      	b.n	8005060 <UART_Start_Receive_IT+0xa4>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	223f      	movs	r2, #63	; 0x3f
 8005052:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005056:	e003      	b.n	8005060 <UART_Start_Receive_IT+0xa4>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2222      	movs	r2, #34	; 0x22
 800506c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	657b      	str	r3, [r7, #84]	; 0x54
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005090:	64ba      	str	r2, [r7, #72]	; 0x48
 8005092:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800509e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ac:	d107      	bne.n	80050be <UART_Start_Receive_IT+0x102>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4a21      	ldr	r2, [pc, #132]	; (8005140 <UART_Start_Receive_IT+0x184>)
 80050ba:	669a      	str	r2, [r3, #104]	; 0x68
 80050bc:	e002      	b.n	80050c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a20      	ldr	r2, [pc, #128]	; (8005144 <UART_Start_Receive_IT+0x188>)
 80050c2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d019      	beq.n	8005100 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80050e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
 80050ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e6      	bne.n	80050cc <UART_Start_Receive_IT+0x110>
 80050fe:	e018      	b.n	8005132 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	613b      	str	r3, [r7, #16]
   return(result);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	653b      	str	r3, [r7, #80]	; 0x50
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	69f9      	ldr	r1, [r7, #28]
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	61bb      	str	r3, [r7, #24]
   return(result);
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e6      	bne.n	8005100 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	375c      	adds	r7, #92	; 0x5c
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	0800556d 	.word	0x0800556d
 8005144:	08005407 	.word	0x08005407

08005148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b095      	sub	sp, #84	; 0x54
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
 8005170:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	61fb      	str	r3, [r7, #28]
   return(result);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d118      	bne.n	80051f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e6      	bne.n	80051be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005204:	bf00      	nop
 8005206:	3754      	adds	r7, #84	; 0x54
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff fa8a 	bl	8004748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b08f      	sub	sp, #60	; 0x3c
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005248:	2b21      	cmp	r3, #33	; 0x21
 800524a:	d14c      	bne.n	80052e6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d132      	bne.n	80052be <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	61fb      	str	r3, [r7, #28]
   return(result);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005278:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	60bb      	str	r3, [r7, #8]
   return(result);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529e:	633b      	str	r3, [r7, #48]	; 0x30
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	613b      	str	r3, [r7, #16]
   return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e6      	bne.n	800528a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80052bc:	e013      	b.n	80052e6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80052e6:	bf00      	nop
 80052e8:	373c      	adds	r7, #60	; 0x3c
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b091      	sub	sp, #68	; 0x44
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052fe:	2b21      	cmp	r3, #33	; 0x21
 8005300:	d151      	bne.n	80053a6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d132      	bne.n	8005374 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	623b      	str	r3, [r7, #32]
   return(result);
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	633b      	str	r3, [r7, #48]	; 0x30
 800532e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	60fb      	str	r3, [r7, #12]
   return(result);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	617b      	str	r3, [r7, #20]
   return(result);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e6      	bne.n	8005340 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005372:	e018      	b.n	80053a6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005388:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	1c9a      	adds	r2, r3, #2
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80053a6:	bf00      	nop
 80053a8:	3744      	adds	r7, #68	; 0x44
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b088      	sub	sp, #32
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	613b      	str	r3, [r7, #16]
   return(result);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e6      	bne.n	80053ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fc f91d 	bl	8001638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fe:	bf00      	nop
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b096      	sub	sp, #88	; 0x58
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005414:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541e:	2b22      	cmp	r3, #34	; 0x22
 8005420:	f040 8098 	bne.w	8005554 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800542e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005432:	b2d9      	uxtb	r1, r3
 8005434:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	400a      	ands	r2, r1
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d17b      	bne.n	8005564 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005480:	653b      	str	r3, [r7, #80]	; 0x50
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548a:	647b      	str	r3, [r7, #68]	; 0x44
 800548c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e6      	bne.n	800546c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	623b      	str	r3, [r7, #32]
   return(result);
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3308      	adds	r3, #8
 80054bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054be:	633a      	str	r2, [r7, #48]	; 0x30
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d12e      	bne.n	800554c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	60fb      	str	r3, [r7, #12]
   return(result);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f023 0310 	bic.w	r3, r3, #16
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	617b      	str	r3, [r7, #20]
   return(result);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b10      	cmp	r3, #16
 8005532:	d103      	bne.n	800553c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2210      	movs	r2, #16
 800553a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff f909 	bl	800475c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800554a:	e00b      	b.n	8005564 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fc f847 	bl	80015e0 <HAL_UART_RxCpltCallback>
}
 8005552:	e007      	b.n	8005564 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	619a      	str	r2, [r3, #24]
}
 8005564:	bf00      	nop
 8005566:	3758      	adds	r7, #88	; 0x58
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b096      	sub	sp, #88	; 0x58
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800557a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005584:	2b22      	cmp	r3, #34	; 0x22
 8005586:	f040 8098 	bne.w	80056ba <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800559a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800559e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055a2:	4013      	ands	r3, r2
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d17b      	bne.n	80056ca <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f0:	643b      	str	r3, [r7, #64]	; 0x40
 80055f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	61fb      	str	r3, [r7, #28]
   return(result);
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	64bb      	str	r3, [r7, #72]	; 0x48
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005624:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800562a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e5      	bne.n	8005604 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	2b01      	cmp	r3, #1
 8005652:	d12e      	bne.n	80056b2 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60bb      	str	r3, [r7, #8]
   return(result);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	647b      	str	r3, [r7, #68]	; 0x44
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6979      	ldr	r1, [r7, #20]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	613b      	str	r3, [r7, #16]
   return(result);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e6      	bne.n	800565a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d103      	bne.n	80056a2 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2210      	movs	r2, #16
 80056a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff f856 	bl	800475c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056b0:	e00b      	b.n	80056ca <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fb ff94 	bl	80015e0 <HAL_UART_RxCpltCallback>
}
 80056b8:	e007      	b.n	80056ca <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0208 	orr.w	r2, r2, #8
 80056c8:	619a      	str	r2, [r3, #24]
}
 80056ca:	bf00      	nop
 80056cc:	3758      	adds	r7, #88	; 0x58
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <atoi>:
 80056d2:	220a      	movs	r2, #10
 80056d4:	2100      	movs	r1, #0
 80056d6:	f000 b8d7 	b.w	8005888 <strtol>
	...

080056dc <__errno>:
 80056dc:	4b01      	ldr	r3, [pc, #4]	; (80056e4 <__errno+0x8>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000000c 	.word	0x2000000c

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4d0d      	ldr	r5, [pc, #52]	; (8005720 <__libc_init_array+0x38>)
 80056ec:	4c0d      	ldr	r4, [pc, #52]	; (8005724 <__libc_init_array+0x3c>)
 80056ee:	1b64      	subs	r4, r4, r5
 80056f0:	10a4      	asrs	r4, r4, #2
 80056f2:	2600      	movs	r6, #0
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	4d0b      	ldr	r5, [pc, #44]	; (8005728 <__libc_init_array+0x40>)
 80056fa:	4c0c      	ldr	r4, [pc, #48]	; (800572c <__libc_init_array+0x44>)
 80056fc:	f000 fdb4 	bl	8006268 <_init>
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	2600      	movs	r6, #0
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f855 3b04 	ldr.w	r3, [r5], #4
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	08006470 	.word	0x08006470
 8005724:	08006470 	.word	0x08006470
 8005728:	08006470 	.word	0x08006470
 800572c:	08006474 	.word	0x08006474

08005730 <memset>:
 8005730:	4402      	add	r2, r0
 8005732:	4603      	mov	r3, r0
 8005734:	4293      	cmp	r3, r2
 8005736:	d100      	bne.n	800573a <memset+0xa>
 8005738:	4770      	bx	lr
 800573a:	f803 1b01 	strb.w	r1, [r3], #1
 800573e:	e7f9      	b.n	8005734 <memset+0x4>

08005740 <strchr>:
 8005740:	b2c9      	uxtb	r1, r1
 8005742:	4603      	mov	r3, r0
 8005744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005748:	b11a      	cbz	r2, 8005752 <strchr+0x12>
 800574a:	428a      	cmp	r2, r1
 800574c:	d1f9      	bne.n	8005742 <strchr+0x2>
 800574e:	4618      	mov	r0, r3
 8005750:	4770      	bx	lr
 8005752:	2900      	cmp	r1, #0
 8005754:	bf18      	it	ne
 8005756:	2300      	movne	r3, #0
 8005758:	e7f9      	b.n	800574e <strchr+0xe>

0800575a <strncmp>:
 800575a:	b510      	push	{r4, lr}
 800575c:	b17a      	cbz	r2, 800577e <strncmp+0x24>
 800575e:	4603      	mov	r3, r0
 8005760:	3901      	subs	r1, #1
 8005762:	1884      	adds	r4, r0, r2
 8005764:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005768:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800576c:	4290      	cmp	r0, r2
 800576e:	d101      	bne.n	8005774 <strncmp+0x1a>
 8005770:	42a3      	cmp	r3, r4
 8005772:	d101      	bne.n	8005778 <strncmp+0x1e>
 8005774:	1a80      	subs	r0, r0, r2
 8005776:	bd10      	pop	{r4, pc}
 8005778:	2800      	cmp	r0, #0
 800577a:	d1f3      	bne.n	8005764 <strncmp+0xa>
 800577c:	e7fa      	b.n	8005774 <strncmp+0x1a>
 800577e:	4610      	mov	r0, r2
 8005780:	e7f9      	b.n	8005776 <strncmp+0x1c>
	...

08005784 <_strtol_l.constprop.0>:
 8005784:	2b01      	cmp	r3, #1
 8005786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578a:	d001      	beq.n	8005790 <_strtol_l.constprop.0+0xc>
 800578c:	2b24      	cmp	r3, #36	; 0x24
 800578e:	d906      	bls.n	800579e <_strtol_l.constprop.0+0x1a>
 8005790:	f7ff ffa4 	bl	80056dc <__errno>
 8005794:	2316      	movs	r3, #22
 8005796:	6003      	str	r3, [r0, #0]
 8005798:	2000      	movs	r0, #0
 800579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005884 <_strtol_l.constprop.0+0x100>
 80057a2:	460d      	mov	r5, r1
 80057a4:	462e      	mov	r6, r5
 80057a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80057ae:	f017 0708 	ands.w	r7, r7, #8
 80057b2:	d1f7      	bne.n	80057a4 <_strtol_l.constprop.0+0x20>
 80057b4:	2c2d      	cmp	r4, #45	; 0x2d
 80057b6:	d132      	bne.n	800581e <_strtol_l.constprop.0+0x9a>
 80057b8:	782c      	ldrb	r4, [r5, #0]
 80057ba:	2701      	movs	r7, #1
 80057bc:	1cb5      	adds	r5, r6, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d05b      	beq.n	800587a <_strtol_l.constprop.0+0xf6>
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d109      	bne.n	80057da <_strtol_l.constprop.0+0x56>
 80057c6:	2c30      	cmp	r4, #48	; 0x30
 80057c8:	d107      	bne.n	80057da <_strtol_l.constprop.0+0x56>
 80057ca:	782c      	ldrb	r4, [r5, #0]
 80057cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80057d0:	2c58      	cmp	r4, #88	; 0x58
 80057d2:	d14d      	bne.n	8005870 <_strtol_l.constprop.0+0xec>
 80057d4:	786c      	ldrb	r4, [r5, #1]
 80057d6:	2310      	movs	r3, #16
 80057d8:	3502      	adds	r5, #2
 80057da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80057de:	f108 38ff 	add.w	r8, r8, #4294967295
 80057e2:	f04f 0c00 	mov.w	ip, #0
 80057e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80057ea:	4666      	mov	r6, ip
 80057ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80057f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80057f4:	f1be 0f09 	cmp.w	lr, #9
 80057f8:	d816      	bhi.n	8005828 <_strtol_l.constprop.0+0xa4>
 80057fa:	4674      	mov	r4, lr
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	dd24      	ble.n	800584a <_strtol_l.constprop.0+0xc6>
 8005800:	f1bc 0f00 	cmp.w	ip, #0
 8005804:	db1e      	blt.n	8005844 <_strtol_l.constprop.0+0xc0>
 8005806:	45b1      	cmp	r9, r6
 8005808:	d31c      	bcc.n	8005844 <_strtol_l.constprop.0+0xc0>
 800580a:	d101      	bne.n	8005810 <_strtol_l.constprop.0+0x8c>
 800580c:	45a2      	cmp	sl, r4
 800580e:	db19      	blt.n	8005844 <_strtol_l.constprop.0+0xc0>
 8005810:	fb06 4603 	mla	r6, r6, r3, r4
 8005814:	f04f 0c01 	mov.w	ip, #1
 8005818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800581c:	e7e8      	b.n	80057f0 <_strtol_l.constprop.0+0x6c>
 800581e:	2c2b      	cmp	r4, #43	; 0x2b
 8005820:	bf04      	itt	eq
 8005822:	782c      	ldrbeq	r4, [r5, #0]
 8005824:	1cb5      	addeq	r5, r6, #2
 8005826:	e7ca      	b.n	80057be <_strtol_l.constprop.0+0x3a>
 8005828:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800582c:	f1be 0f19 	cmp.w	lr, #25
 8005830:	d801      	bhi.n	8005836 <_strtol_l.constprop.0+0xb2>
 8005832:	3c37      	subs	r4, #55	; 0x37
 8005834:	e7e2      	b.n	80057fc <_strtol_l.constprop.0+0x78>
 8005836:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800583a:	f1be 0f19 	cmp.w	lr, #25
 800583e:	d804      	bhi.n	800584a <_strtol_l.constprop.0+0xc6>
 8005840:	3c57      	subs	r4, #87	; 0x57
 8005842:	e7db      	b.n	80057fc <_strtol_l.constprop.0+0x78>
 8005844:	f04f 3cff 	mov.w	ip, #4294967295
 8005848:	e7e6      	b.n	8005818 <_strtol_l.constprop.0+0x94>
 800584a:	f1bc 0f00 	cmp.w	ip, #0
 800584e:	da05      	bge.n	800585c <_strtol_l.constprop.0+0xd8>
 8005850:	2322      	movs	r3, #34	; 0x22
 8005852:	6003      	str	r3, [r0, #0]
 8005854:	4646      	mov	r6, r8
 8005856:	b942      	cbnz	r2, 800586a <_strtol_l.constprop.0+0xe6>
 8005858:	4630      	mov	r0, r6
 800585a:	e79e      	b.n	800579a <_strtol_l.constprop.0+0x16>
 800585c:	b107      	cbz	r7, 8005860 <_strtol_l.constprop.0+0xdc>
 800585e:	4276      	negs	r6, r6
 8005860:	2a00      	cmp	r2, #0
 8005862:	d0f9      	beq.n	8005858 <_strtol_l.constprop.0+0xd4>
 8005864:	f1bc 0f00 	cmp.w	ip, #0
 8005868:	d000      	beq.n	800586c <_strtol_l.constprop.0+0xe8>
 800586a:	1e69      	subs	r1, r5, #1
 800586c:	6011      	str	r1, [r2, #0]
 800586e:	e7f3      	b.n	8005858 <_strtol_l.constprop.0+0xd4>
 8005870:	2430      	movs	r4, #48	; 0x30
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1b1      	bne.n	80057da <_strtol_l.constprop.0+0x56>
 8005876:	2308      	movs	r3, #8
 8005878:	e7af      	b.n	80057da <_strtol_l.constprop.0+0x56>
 800587a:	2c30      	cmp	r4, #48	; 0x30
 800587c:	d0a5      	beq.n	80057ca <_strtol_l.constprop.0+0x46>
 800587e:	230a      	movs	r3, #10
 8005880:	e7ab      	b.n	80057da <_strtol_l.constprop.0+0x56>
 8005882:	bf00      	nop
 8005884:	08006335 	.word	0x08006335

08005888 <strtol>:
 8005888:	4613      	mov	r3, r2
 800588a:	460a      	mov	r2, r1
 800588c:	4601      	mov	r1, r0
 800588e:	4802      	ldr	r0, [pc, #8]	; (8005898 <strtol+0x10>)
 8005890:	6800      	ldr	r0, [r0, #0]
 8005892:	f7ff bf77 	b.w	8005784 <_strtol_l.constprop.0>
 8005896:	bf00      	nop
 8005898:	2000000c 	.word	0x2000000c

0800589c <_vsiprintf_r>:
 800589c:	b500      	push	{lr}
 800589e:	b09b      	sub	sp, #108	; 0x6c
 80058a0:	9100      	str	r1, [sp, #0]
 80058a2:	9104      	str	r1, [sp, #16]
 80058a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058a8:	9105      	str	r1, [sp, #20]
 80058aa:	9102      	str	r1, [sp, #8]
 80058ac:	4905      	ldr	r1, [pc, #20]	; (80058c4 <_vsiprintf_r+0x28>)
 80058ae:	9103      	str	r1, [sp, #12]
 80058b0:	4669      	mov	r1, sp
 80058b2:	f000 f86f 	bl	8005994 <_svfiprintf_r>
 80058b6:	9b00      	ldr	r3, [sp, #0]
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	b01b      	add	sp, #108	; 0x6c
 80058be:	f85d fb04 	ldr.w	pc, [sp], #4
 80058c2:	bf00      	nop
 80058c4:	ffff0208 	.word	0xffff0208

080058c8 <vsiprintf>:
 80058c8:	4613      	mov	r3, r2
 80058ca:	460a      	mov	r2, r1
 80058cc:	4601      	mov	r1, r0
 80058ce:	4802      	ldr	r0, [pc, #8]	; (80058d8 <vsiprintf+0x10>)
 80058d0:	6800      	ldr	r0, [r0, #0]
 80058d2:	f7ff bfe3 	b.w	800589c <_vsiprintf_r>
 80058d6:	bf00      	nop
 80058d8:	2000000c 	.word	0x2000000c

080058dc <__ssputs_r>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	688e      	ldr	r6, [r1, #8]
 80058e2:	429e      	cmp	r6, r3
 80058e4:	4682      	mov	sl, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	4690      	mov	r8, r2
 80058ea:	461f      	mov	r7, r3
 80058ec:	d838      	bhi.n	8005960 <__ssputs_r+0x84>
 80058ee:	898a      	ldrh	r2, [r1, #12]
 80058f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058f4:	d032      	beq.n	800595c <__ssputs_r+0x80>
 80058f6:	6825      	ldr	r5, [r4, #0]
 80058f8:	6909      	ldr	r1, [r1, #16]
 80058fa:	eba5 0901 	sub.w	r9, r5, r1
 80058fe:	6965      	ldr	r5, [r4, #20]
 8005900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005908:	3301      	adds	r3, #1
 800590a:	444b      	add	r3, r9
 800590c:	106d      	asrs	r5, r5, #1
 800590e:	429d      	cmp	r5, r3
 8005910:	bf38      	it	cc
 8005912:	461d      	movcc	r5, r3
 8005914:	0553      	lsls	r3, r2, #21
 8005916:	d531      	bpl.n	800597c <__ssputs_r+0xa0>
 8005918:	4629      	mov	r1, r5
 800591a:	f000 fb63 	bl	8005fe4 <_malloc_r>
 800591e:	4606      	mov	r6, r0
 8005920:	b950      	cbnz	r0, 8005938 <__ssputs_r+0x5c>
 8005922:	230c      	movs	r3, #12
 8005924:	f8ca 3000 	str.w	r3, [sl]
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	6921      	ldr	r1, [r4, #16]
 800593a:	464a      	mov	r2, r9
 800593c:	f000 fabe 	bl	8005ebc <memcpy>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	6126      	str	r6, [r4, #16]
 800594e:	6165      	str	r5, [r4, #20]
 8005950:	444e      	add	r6, r9
 8005952:	eba5 0509 	sub.w	r5, r5, r9
 8005956:	6026      	str	r6, [r4, #0]
 8005958:	60a5      	str	r5, [r4, #8]
 800595a:	463e      	mov	r6, r7
 800595c:	42be      	cmp	r6, r7
 800595e:	d900      	bls.n	8005962 <__ssputs_r+0x86>
 8005960:	463e      	mov	r6, r7
 8005962:	6820      	ldr	r0, [r4, #0]
 8005964:	4632      	mov	r2, r6
 8005966:	4641      	mov	r1, r8
 8005968:	f000 fab6 	bl	8005ed8 <memmove>
 800596c:	68a3      	ldr	r3, [r4, #8]
 800596e:	1b9b      	subs	r3, r3, r6
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	4433      	add	r3, r6
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	2000      	movs	r0, #0
 800597a:	e7db      	b.n	8005934 <__ssputs_r+0x58>
 800597c:	462a      	mov	r2, r5
 800597e:	f000 fba5 	bl	80060cc <_realloc_r>
 8005982:	4606      	mov	r6, r0
 8005984:	2800      	cmp	r0, #0
 8005986:	d1e1      	bne.n	800594c <__ssputs_r+0x70>
 8005988:	6921      	ldr	r1, [r4, #16]
 800598a:	4650      	mov	r0, sl
 800598c:	f000 fabe 	bl	8005f0c <_free_r>
 8005990:	e7c7      	b.n	8005922 <__ssputs_r+0x46>
	...

08005994 <_svfiprintf_r>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	4698      	mov	r8, r3
 800599a:	898b      	ldrh	r3, [r1, #12]
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	b09d      	sub	sp, #116	; 0x74
 80059a0:	4607      	mov	r7, r0
 80059a2:	460d      	mov	r5, r1
 80059a4:	4614      	mov	r4, r2
 80059a6:	d50e      	bpl.n	80059c6 <_svfiprintf_r+0x32>
 80059a8:	690b      	ldr	r3, [r1, #16]
 80059aa:	b963      	cbnz	r3, 80059c6 <_svfiprintf_r+0x32>
 80059ac:	2140      	movs	r1, #64	; 0x40
 80059ae:	f000 fb19 	bl	8005fe4 <_malloc_r>
 80059b2:	6028      	str	r0, [r5, #0]
 80059b4:	6128      	str	r0, [r5, #16]
 80059b6:	b920      	cbnz	r0, 80059c2 <_svfiprintf_r+0x2e>
 80059b8:	230c      	movs	r3, #12
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	e0d1      	b.n	8005b66 <_svfiprintf_r+0x1d2>
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	616b      	str	r3, [r5, #20]
 80059c6:	2300      	movs	r3, #0
 80059c8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ca:	2320      	movs	r3, #32
 80059cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d4:	2330      	movs	r3, #48	; 0x30
 80059d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b80 <_svfiprintf_r+0x1ec>
 80059da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059de:	f04f 0901 	mov.w	r9, #1
 80059e2:	4623      	mov	r3, r4
 80059e4:	469a      	mov	sl, r3
 80059e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ea:	b10a      	cbz	r2, 80059f0 <_svfiprintf_r+0x5c>
 80059ec:	2a25      	cmp	r2, #37	; 0x25
 80059ee:	d1f9      	bne.n	80059e4 <_svfiprintf_r+0x50>
 80059f0:	ebba 0b04 	subs.w	fp, sl, r4
 80059f4:	d00b      	beq.n	8005a0e <_svfiprintf_r+0x7a>
 80059f6:	465b      	mov	r3, fp
 80059f8:	4622      	mov	r2, r4
 80059fa:	4629      	mov	r1, r5
 80059fc:	4638      	mov	r0, r7
 80059fe:	f7ff ff6d 	bl	80058dc <__ssputs_r>
 8005a02:	3001      	adds	r0, #1
 8005a04:	f000 80aa 	beq.w	8005b5c <_svfiprintf_r+0x1c8>
 8005a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a0a:	445a      	add	r2, fp
 8005a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80a2 	beq.w	8005b5c <_svfiprintf_r+0x1c8>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a22:	f10a 0a01 	add.w	sl, sl, #1
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	9307      	str	r3, [sp, #28]
 8005a2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a2e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a30:	4654      	mov	r4, sl
 8005a32:	2205      	movs	r2, #5
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	4851      	ldr	r0, [pc, #324]	; (8005b80 <_svfiprintf_r+0x1ec>)
 8005a3a:	f7fa fc09 	bl	8000250 <memchr>
 8005a3e:	9a04      	ldr	r2, [sp, #16]
 8005a40:	b9d8      	cbnz	r0, 8005a7a <_svfiprintf_r+0xe6>
 8005a42:	06d0      	lsls	r0, r2, #27
 8005a44:	bf44      	itt	mi
 8005a46:	2320      	movmi	r3, #32
 8005a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a4c:	0711      	lsls	r1, r2, #28
 8005a4e:	bf44      	itt	mi
 8005a50:	232b      	movmi	r3, #43	; 0x2b
 8005a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a56:	f89a 3000 	ldrb.w	r3, [sl]
 8005a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5c:	d015      	beq.n	8005a8a <_svfiprintf_r+0xf6>
 8005a5e:	9a07      	ldr	r2, [sp, #28]
 8005a60:	4654      	mov	r4, sl
 8005a62:	2000      	movs	r0, #0
 8005a64:	f04f 0c0a 	mov.w	ip, #10
 8005a68:	4621      	mov	r1, r4
 8005a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a6e:	3b30      	subs	r3, #48	; 0x30
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	d94e      	bls.n	8005b12 <_svfiprintf_r+0x17e>
 8005a74:	b1b0      	cbz	r0, 8005aa4 <_svfiprintf_r+0x110>
 8005a76:	9207      	str	r2, [sp, #28]
 8005a78:	e014      	b.n	8005aa4 <_svfiprintf_r+0x110>
 8005a7a:	eba0 0308 	sub.w	r3, r0, r8
 8005a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a82:	4313      	orrs	r3, r2
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	46a2      	mov	sl, r4
 8005a88:	e7d2      	b.n	8005a30 <_svfiprintf_r+0x9c>
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	1d19      	adds	r1, r3, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	9103      	str	r1, [sp, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bfbb      	ittet	lt
 8005a96:	425b      	neglt	r3, r3
 8005a98:	f042 0202 	orrlt.w	r2, r2, #2
 8005a9c:	9307      	strge	r3, [sp, #28]
 8005a9e:	9307      	strlt	r3, [sp, #28]
 8005aa0:	bfb8      	it	lt
 8005aa2:	9204      	strlt	r2, [sp, #16]
 8005aa4:	7823      	ldrb	r3, [r4, #0]
 8005aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa8:	d10c      	bne.n	8005ac4 <_svfiprintf_r+0x130>
 8005aaa:	7863      	ldrb	r3, [r4, #1]
 8005aac:	2b2a      	cmp	r3, #42	; 0x2a
 8005aae:	d135      	bne.n	8005b1c <_svfiprintf_r+0x188>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	1d1a      	adds	r2, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	9203      	str	r2, [sp, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfb8      	it	lt
 8005abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ac0:	3402      	adds	r4, #2
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b90 <_svfiprintf_r+0x1fc>
 8005ac8:	7821      	ldrb	r1, [r4, #0]
 8005aca:	2203      	movs	r2, #3
 8005acc:	4650      	mov	r0, sl
 8005ace:	f7fa fbbf 	bl	8000250 <memchr>
 8005ad2:	b140      	cbz	r0, 8005ae6 <_svfiprintf_r+0x152>
 8005ad4:	2340      	movs	r3, #64	; 0x40
 8005ad6:	eba0 000a 	sub.w	r0, r0, sl
 8005ada:	fa03 f000 	lsl.w	r0, r3, r0
 8005ade:	9b04      	ldr	r3, [sp, #16]
 8005ae0:	4303      	orrs	r3, r0
 8005ae2:	3401      	adds	r4, #1
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aea:	4826      	ldr	r0, [pc, #152]	; (8005b84 <_svfiprintf_r+0x1f0>)
 8005aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005af0:	2206      	movs	r2, #6
 8005af2:	f7fa fbad 	bl	8000250 <memchr>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d038      	beq.n	8005b6c <_svfiprintf_r+0x1d8>
 8005afa:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <_svfiprintf_r+0x1f4>)
 8005afc:	bb1b      	cbnz	r3, 8005b46 <_svfiprintf_r+0x1b2>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	3307      	adds	r3, #7
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	3308      	adds	r3, #8
 8005b08:	9303      	str	r3, [sp, #12]
 8005b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0c:	4433      	add	r3, r6
 8005b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b10:	e767      	b.n	80059e2 <_svfiprintf_r+0x4e>
 8005b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b16:	460c      	mov	r4, r1
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e7a5      	b.n	8005a68 <_svfiprintf_r+0xd4>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	3401      	adds	r4, #1
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	4619      	mov	r1, r3
 8005b24:	f04f 0c0a 	mov.w	ip, #10
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b2e:	3a30      	subs	r2, #48	; 0x30
 8005b30:	2a09      	cmp	r2, #9
 8005b32:	d903      	bls.n	8005b3c <_svfiprintf_r+0x1a8>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0c5      	beq.n	8005ac4 <_svfiprintf_r+0x130>
 8005b38:	9105      	str	r1, [sp, #20]
 8005b3a:	e7c3      	b.n	8005ac4 <_svfiprintf_r+0x130>
 8005b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b40:	4604      	mov	r4, r0
 8005b42:	2301      	movs	r3, #1
 8005b44:	e7f0      	b.n	8005b28 <_svfiprintf_r+0x194>
 8005b46:	ab03      	add	r3, sp, #12
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <_svfiprintf_r+0x1f8>)
 8005b4e:	a904      	add	r1, sp, #16
 8005b50:	4638      	mov	r0, r7
 8005b52:	f3af 8000 	nop.w
 8005b56:	1c42      	adds	r2, r0, #1
 8005b58:	4606      	mov	r6, r0
 8005b5a:	d1d6      	bne.n	8005b0a <_svfiprintf_r+0x176>
 8005b5c:	89ab      	ldrh	r3, [r5, #12]
 8005b5e:	065b      	lsls	r3, r3, #25
 8005b60:	f53f af2c 	bmi.w	80059bc <_svfiprintf_r+0x28>
 8005b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b66:	b01d      	add	sp, #116	; 0x74
 8005b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6c:	ab03      	add	r3, sp, #12
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	462a      	mov	r2, r5
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <_svfiprintf_r+0x1f8>)
 8005b74:	a904      	add	r1, sp, #16
 8005b76:	4638      	mov	r0, r7
 8005b78:	f000 f87a 	bl	8005c70 <_printf_i>
 8005b7c:	e7eb      	b.n	8005b56 <_svfiprintf_r+0x1c2>
 8005b7e:	bf00      	nop
 8005b80:	08006435 	.word	0x08006435
 8005b84:	0800643f 	.word	0x0800643f
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	080058dd 	.word	0x080058dd
 8005b90:	0800643b 	.word	0x0800643b

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4699      	mov	r9, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bfb8      	it	lt
 8005ba8:	4613      	movlt	r3, r2
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc26      	bgt.n	8005c2a <_printf_common+0x96>
 8005bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be0:	1e13      	subs	r3, r2, #0
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d42b      	bmi.n	8005c44 <_printf_common+0xb0>
 8005bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c0      	blx	r8
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d01e      	beq.n	8005c38 <_printf_common+0xa4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	68e5      	ldr	r5, [r4, #12]
 8005bfe:	6832      	ldr	r2, [r6, #0]
 8005c00:	f003 0306 	and.w	r3, r3, #6
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	bf08      	it	eq
 8005c08:	1aad      	subeq	r5, r5, r2
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	2600      	movs	r6, #0
 8005c20:	341a      	adds	r4, #26
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d11a      	bne.n	8005c5c <_printf_common+0xc8>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e008      	b.n	8005c3c <_printf_common+0xa8>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4649      	mov	r1, r9
 8005c30:	4638      	mov	r0, r7
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0xac>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7c6      	b.n	8005bd2 <_printf_common+0x3e>
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	2030      	movs	r0, #48	; 0x30
 8005c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c4e:	4422      	add	r2, r4
 8005c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e7c7      	b.n	8005bec <_printf_common+0x58>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa4>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7d9      	b.n	8005c22 <_printf_common+0x8e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	7e0f      	ldrb	r7, [r1, #24]
 8005c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c78:	2f78      	cmp	r7, #120	; 0x78
 8005c7a:	4691      	mov	r9, r2
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	469a      	mov	sl, r3
 8005c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c86:	d807      	bhi.n	8005c98 <_printf_i+0x28>
 8005c88:	2f62      	cmp	r7, #98	; 0x62
 8005c8a:	d80a      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	f000 80d8 	beq.w	8005e42 <_printf_i+0x1d2>
 8005c92:	2f58      	cmp	r7, #88	; 0x58
 8005c94:	f000 80a3 	beq.w	8005dde <_printf_i+0x16e>
 8005c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca0:	e03a      	b.n	8005d18 <_printf_i+0xa8>
 8005ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ca6:	2b15      	cmp	r3, #21
 8005ca8:	d8f6      	bhi.n	8005c98 <_printf_i+0x28>
 8005caa:	a101      	add	r1, pc, #4	; (adr r1, 8005cb0 <_printf_i+0x40>)
 8005cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005c99 	.word	0x08005c99
 8005cbc:	08005c99 	.word	0x08005c99
 8005cc0:	08005c99 	.word	0x08005c99
 8005cc4:	08005c99 	.word	0x08005c99
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c99 	.word	0x08005c99
 8005cd0:	08005c99 	.word	0x08005c99
 8005cd4:	08005c99 	.word	0x08005c99
 8005cd8:	08005c99 	.word	0x08005c99
 8005cdc:	08005e29 	.word	0x08005e29
 8005ce0:	08005d4d 	.word	0x08005d4d
 8005ce4:	08005e0b 	.word	0x08005e0b
 8005ce8:	08005c99 	.word	0x08005c99
 8005cec:	08005c99 	.word	0x08005c99
 8005cf0:	08005e4b 	.word	0x08005e4b
 8005cf4:	08005c99 	.word	0x08005c99
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005c99 	.word	0x08005c99
 8005d00:	08005c99 	.word	0x08005c99
 8005d04:	08005e13 	.word	0x08005e13
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	602a      	str	r2, [r5, #0]
 8005d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0a3      	b.n	8005e64 <_printf_i+0x1f4>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	6829      	ldr	r1, [r5, #0]
 8005d20:	0606      	lsls	r6, r0, #24
 8005d22:	f101 0304 	add.w	r3, r1, #4
 8005d26:	d50a      	bpl.n	8005d3e <_printf_i+0xce>
 8005d28:	680e      	ldr	r6, [r1, #0]
 8005d2a:	602b      	str	r3, [r5, #0]
 8005d2c:	2e00      	cmp	r6, #0
 8005d2e:	da03      	bge.n	8005d38 <_printf_i+0xc8>
 8005d30:	232d      	movs	r3, #45	; 0x2d
 8005d32:	4276      	negs	r6, r6
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d38:	485e      	ldr	r0, [pc, #376]	; (8005eb4 <_printf_i+0x244>)
 8005d3a:	230a      	movs	r3, #10
 8005d3c:	e019      	b.n	8005d72 <_printf_i+0x102>
 8005d3e:	680e      	ldr	r6, [r1, #0]
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d46:	bf18      	it	ne
 8005d48:	b236      	sxthne	r6, r6
 8005d4a:	e7ef      	b.n	8005d2c <_printf_i+0xbc>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	6820      	ldr	r0, [r4, #0]
 8005d50:	1d19      	adds	r1, r3, #4
 8005d52:	6029      	str	r1, [r5, #0]
 8005d54:	0601      	lsls	r1, r0, #24
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0xec>
 8005d58:	681e      	ldr	r6, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0xf2>
 8005d5c:	0646      	lsls	r6, r0, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0xe8>
 8005d60:	881e      	ldrh	r6, [r3, #0]
 8005d62:	4854      	ldr	r0, [pc, #336]	; (8005eb4 <_printf_i+0x244>)
 8005d64:	2f6f      	cmp	r7, #111	; 0x6f
 8005d66:	bf0c      	ite	eq
 8005d68:	2308      	moveq	r3, #8
 8005d6a:	230a      	movne	r3, #10
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d72:	6865      	ldr	r5, [r4, #4]
 8005d74:	60a5      	str	r5, [r4, #8]
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	bfa2      	ittt	ge
 8005d7a:	6821      	ldrge	r1, [r4, #0]
 8005d7c:	f021 0104 	bicge.w	r1, r1, #4
 8005d80:	6021      	strge	r1, [r4, #0]
 8005d82:	b90e      	cbnz	r6, 8005d88 <_printf_i+0x118>
 8005d84:	2d00      	cmp	r5, #0
 8005d86:	d04d      	beq.n	8005e24 <_printf_i+0x1b4>
 8005d88:	4615      	mov	r5, r2
 8005d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d92:	5dc7      	ldrb	r7, [r0, r7]
 8005d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d98:	4637      	mov	r7, r6
 8005d9a:	42bb      	cmp	r3, r7
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	d9f4      	bls.n	8005d8a <_printf_i+0x11a>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d10b      	bne.n	8005dbc <_printf_i+0x14c>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07de      	lsls	r6, r3, #31
 8005da8:	d508      	bpl.n	8005dbc <_printf_i+0x14c>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6861      	ldr	r1, [r4, #4]
 8005dae:	4299      	cmp	r1, r3
 8005db0:	bfde      	ittt	le
 8005db2:	2330      	movle	r3, #48	; 0x30
 8005db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dbc:	1b52      	subs	r2, r2, r5
 8005dbe:	6122      	str	r2, [r4, #16]
 8005dc0:	f8cd a000 	str.w	sl, [sp]
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	aa03      	add	r2, sp, #12
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4640      	mov	r0, r8
 8005dcc:	f7ff fee2 	bl	8005b94 <_printf_common>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d14c      	bne.n	8005e6e <_printf_i+0x1fe>
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	b004      	add	sp, #16
 8005dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dde:	4835      	ldr	r0, [pc, #212]	; (8005eb4 <_printf_i+0x244>)
 8005de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005de4:	6829      	ldr	r1, [r5, #0]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dec:	6029      	str	r1, [r5, #0]
 8005dee:	061d      	lsls	r5, r3, #24
 8005df0:	d514      	bpl.n	8005e1c <_printf_i+0x1ac>
 8005df2:	07df      	lsls	r7, r3, #31
 8005df4:	bf44      	itt	mi
 8005df6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dfa:	6023      	strmi	r3, [r4, #0]
 8005dfc:	b91e      	cbnz	r6, 8005e06 <_printf_i+0x196>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f023 0320 	bic.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2310      	movs	r3, #16
 8005e08:	e7b0      	b.n	8005d6c <_printf_i+0xfc>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	2378      	movs	r3, #120	; 0x78
 8005e14:	4828      	ldr	r0, [pc, #160]	; (8005eb8 <_printf_i+0x248>)
 8005e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e1a:	e7e3      	b.n	8005de4 <_printf_i+0x174>
 8005e1c:	0659      	lsls	r1, r3, #25
 8005e1e:	bf48      	it	mi
 8005e20:	b2b6      	uxthmi	r6, r6
 8005e22:	e7e6      	b.n	8005df2 <_printf_i+0x182>
 8005e24:	4615      	mov	r5, r2
 8005e26:	e7bb      	b.n	8005da0 <_printf_i+0x130>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	6826      	ldr	r6, [r4, #0]
 8005e2c:	6961      	ldr	r1, [r4, #20]
 8005e2e:	1d18      	adds	r0, r3, #4
 8005e30:	6028      	str	r0, [r5, #0]
 8005e32:	0635      	lsls	r5, r6, #24
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0x1cc>
 8005e38:	6019      	str	r1, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <_printf_i+0x1d2>
 8005e3c:	0670      	lsls	r0, r6, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0x1c8>
 8005e40:	8019      	strh	r1, [r3, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	4615      	mov	r5, r2
 8005e48:	e7ba      	b.n	8005dc0 <_printf_i+0x150>
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	602a      	str	r2, [r5, #0]
 8005e50:	681d      	ldr	r5, [r3, #0]
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	2100      	movs	r1, #0
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7fa f9fa 	bl	8000250 <memchr>
 8005e5c:	b108      	cbz	r0, 8005e62 <_printf_i+0x1f2>
 8005e5e:	1b40      	subs	r0, r0, r5
 8005e60:	6060      	str	r0, [r4, #4]
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	6123      	str	r3, [r4, #16]
 8005e66:	2300      	movs	r3, #0
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e6c:	e7a8      	b.n	8005dc0 <_printf_i+0x150>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	462a      	mov	r2, r5
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	47d0      	blx	sl
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d0ab      	beq.n	8005dd4 <_printf_i+0x164>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	079b      	lsls	r3, r3, #30
 8005e80:	d413      	bmi.n	8005eaa <_printf_i+0x23a>
 8005e82:	68e0      	ldr	r0, [r4, #12]
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	4298      	cmp	r0, r3
 8005e88:	bfb8      	it	lt
 8005e8a:	4618      	movlt	r0, r3
 8005e8c:	e7a4      	b.n	8005dd8 <_printf_i+0x168>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4632      	mov	r2, r6
 8005e92:	4649      	mov	r1, r9
 8005e94:	4640      	mov	r0, r8
 8005e96:	47d0      	blx	sl
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d09b      	beq.n	8005dd4 <_printf_i+0x164>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	9903      	ldr	r1, [sp, #12]
 8005ea2:	1a5b      	subs	r3, r3, r1
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dcf2      	bgt.n	8005e8e <_printf_i+0x21e>
 8005ea8:	e7eb      	b.n	8005e82 <_printf_i+0x212>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	f104 0619 	add.w	r6, r4, #25
 8005eb0:	e7f5      	b.n	8005e9e <_printf_i+0x22e>
 8005eb2:	bf00      	nop
 8005eb4:	08006446 	.word	0x08006446
 8005eb8:	08006457 	.word	0x08006457

08005ebc <memcpy>:
 8005ebc:	440a      	add	r2, r1
 8005ebe:	4291      	cmp	r1, r2
 8005ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec4:	d100      	bne.n	8005ec8 <memcpy+0xc>
 8005ec6:	4770      	bx	lr
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	d1f9      	bne.n	8005eca <memcpy+0xe>
 8005ed6:	bd10      	pop	{r4, pc}

08005ed8 <memmove>:
 8005ed8:	4288      	cmp	r0, r1
 8005eda:	b510      	push	{r4, lr}
 8005edc:	eb01 0402 	add.w	r4, r1, r2
 8005ee0:	d902      	bls.n	8005ee8 <memmove+0x10>
 8005ee2:	4284      	cmp	r4, r0
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	d807      	bhi.n	8005ef8 <memmove+0x20>
 8005ee8:	1e43      	subs	r3, r0, #1
 8005eea:	42a1      	cmp	r1, r4
 8005eec:	d008      	beq.n	8005f00 <memmove+0x28>
 8005eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ef6:	e7f8      	b.n	8005eea <memmove+0x12>
 8005ef8:	4402      	add	r2, r0
 8005efa:	4601      	mov	r1, r0
 8005efc:	428a      	cmp	r2, r1
 8005efe:	d100      	bne.n	8005f02 <memmove+0x2a>
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f0a:	e7f7      	b.n	8005efc <memmove+0x24>

08005f0c <_free_r>:
 8005f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d044      	beq.n	8005f9c <_free_r+0x90>
 8005f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f16:	9001      	str	r0, [sp, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f1e:	bfb8      	it	lt
 8005f20:	18e4      	addlt	r4, r4, r3
 8005f22:	f000 f913 	bl	800614c <__malloc_lock>
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <_free_r+0x94>)
 8005f28:	9801      	ldr	r0, [sp, #4]
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	b933      	cbnz	r3, 8005f3c <_free_r+0x30>
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	6014      	str	r4, [r2, #0]
 8005f32:	b003      	add	sp, #12
 8005f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f38:	f000 b90e 	b.w	8006158 <__malloc_unlock>
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d908      	bls.n	8005f52 <_free_r+0x46>
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf01      	itttt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	1949      	addeq	r1, r1, r5
 8005f4e:	6021      	streq	r1, [r4, #0]
 8005f50:	e7ed      	b.n	8005f2e <_free_r+0x22>
 8005f52:	461a      	mov	r2, r3
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b10b      	cbz	r3, 8005f5c <_free_r+0x50>
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d9fa      	bls.n	8005f52 <_free_r+0x46>
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	1855      	adds	r5, r2, r1
 8005f60:	42a5      	cmp	r5, r4
 8005f62:	d10b      	bne.n	8005f7c <_free_r+0x70>
 8005f64:	6824      	ldr	r4, [r4, #0]
 8005f66:	4421      	add	r1, r4
 8005f68:	1854      	adds	r4, r2, r1
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	d1e0      	bne.n	8005f32 <_free_r+0x26>
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	6053      	str	r3, [r2, #4]
 8005f76:	4421      	add	r1, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	e7da      	b.n	8005f32 <_free_r+0x26>
 8005f7c:	d902      	bls.n	8005f84 <_free_r+0x78>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	6003      	str	r3, [r0, #0]
 8005f82:	e7d6      	b.n	8005f32 <_free_r+0x26>
 8005f84:	6825      	ldr	r5, [r4, #0]
 8005f86:	1961      	adds	r1, r4, r5
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	bf04      	itt	eq
 8005f8c:	6819      	ldreq	r1, [r3, #0]
 8005f8e:	685b      	ldreq	r3, [r3, #4]
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	bf04      	itt	eq
 8005f94:	1949      	addeq	r1, r1, r5
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	6054      	str	r4, [r2, #4]
 8005f9a:	e7ca      	b.n	8005f32 <_free_r+0x26>
 8005f9c:	b003      	add	sp, #12
 8005f9e:	bd30      	pop	{r4, r5, pc}
 8005fa0:	200002bc 	.word	0x200002bc

08005fa4 <sbrk_aligned>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4e0e      	ldr	r6, [pc, #56]	; (8005fe0 <sbrk_aligned+0x3c>)
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	4605      	mov	r5, r0
 8005fae:	b911      	cbnz	r1, 8005fb6 <sbrk_aligned+0x12>
 8005fb0:	f000 f8bc 	bl	800612c <_sbrk_r>
 8005fb4:	6030      	str	r0, [r6, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f8b7 	bl	800612c <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d00a      	beq.n	8005fd8 <sbrk_aligned+0x34>
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d007      	beq.n	8005fdc <sbrk_aligned+0x38>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 f8ac 	bl	800612c <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d101      	bne.n	8005fdc <sbrk_aligned+0x38>
 8005fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	200002c0 	.word	0x200002c0

08005fe4 <_malloc_r>:
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	1ccd      	adds	r5, r1, #3
 8005fea:	f025 0503 	bic.w	r5, r5, #3
 8005fee:	3508      	adds	r5, #8
 8005ff0:	2d0c      	cmp	r5, #12
 8005ff2:	bf38      	it	cc
 8005ff4:	250c      	movcc	r5, #12
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	db01      	blt.n	8006000 <_malloc_r+0x1c>
 8005ffc:	42a9      	cmp	r1, r5
 8005ffe:	d905      	bls.n	800600c <_malloc_r+0x28>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	2600      	movs	r6, #0
 8006006:	4630      	mov	r0, r6
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	4e2e      	ldr	r6, [pc, #184]	; (80060c8 <_malloc_r+0xe4>)
 800600e:	f000 f89d 	bl	800614c <__malloc_lock>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	461c      	mov	r4, r3
 8006016:	bb34      	cbnz	r4, 8006066 <_malloc_r+0x82>
 8006018:	4629      	mov	r1, r5
 800601a:	4638      	mov	r0, r7
 800601c:	f7ff ffc2 	bl	8005fa4 <sbrk_aligned>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	4604      	mov	r4, r0
 8006024:	d14d      	bne.n	80060c2 <_malloc_r+0xde>
 8006026:	6834      	ldr	r4, [r6, #0]
 8006028:	4626      	mov	r6, r4
 800602a:	2e00      	cmp	r6, #0
 800602c:	d140      	bne.n	80060b0 <_malloc_r+0xcc>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	4631      	mov	r1, r6
 8006032:	4638      	mov	r0, r7
 8006034:	eb04 0803 	add.w	r8, r4, r3
 8006038:	f000 f878 	bl	800612c <_sbrk_r>
 800603c:	4580      	cmp	r8, r0
 800603e:	d13a      	bne.n	80060b6 <_malloc_r+0xd2>
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	3503      	adds	r5, #3
 8006044:	1a6d      	subs	r5, r5, r1
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	4629      	mov	r1, r5
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff ffa5 	bl	8005fa4 <sbrk_aligned>
 800605a:	3001      	adds	r0, #1
 800605c:	d02b      	beq.n	80060b6 <_malloc_r+0xd2>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	442b      	add	r3, r5
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	e00e      	b.n	8006084 <_malloc_r+0xa0>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	1b52      	subs	r2, r2, r5
 800606a:	d41e      	bmi.n	80060aa <_malloc_r+0xc6>
 800606c:	2a0b      	cmp	r2, #11
 800606e:	d916      	bls.n	800609e <_malloc_r+0xba>
 8006070:	1961      	adds	r1, r4, r5
 8006072:	42a3      	cmp	r3, r4
 8006074:	6025      	str	r5, [r4, #0]
 8006076:	bf18      	it	ne
 8006078:	6059      	strne	r1, [r3, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	bf08      	it	eq
 800607e:	6031      	streq	r1, [r6, #0]
 8006080:	5162      	str	r2, [r4, r5]
 8006082:	604b      	str	r3, [r1, #4]
 8006084:	4638      	mov	r0, r7
 8006086:	f104 060b 	add.w	r6, r4, #11
 800608a:	f000 f865 	bl	8006158 <__malloc_unlock>
 800608e:	f026 0607 	bic.w	r6, r6, #7
 8006092:	1d23      	adds	r3, r4, #4
 8006094:	1af2      	subs	r2, r6, r3
 8006096:	d0b6      	beq.n	8006006 <_malloc_r+0x22>
 8006098:	1b9b      	subs	r3, r3, r6
 800609a:	50a3      	str	r3, [r4, r2]
 800609c:	e7b3      	b.n	8006006 <_malloc_r+0x22>
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	bf0c      	ite	eq
 80060a4:	6032      	streq	r2, [r6, #0]
 80060a6:	605a      	strne	r2, [r3, #4]
 80060a8:	e7ec      	b.n	8006084 <_malloc_r+0xa0>
 80060aa:	4623      	mov	r3, r4
 80060ac:	6864      	ldr	r4, [r4, #4]
 80060ae:	e7b2      	b.n	8006016 <_malloc_r+0x32>
 80060b0:	4634      	mov	r4, r6
 80060b2:	6876      	ldr	r6, [r6, #4]
 80060b4:	e7b9      	b.n	800602a <_malloc_r+0x46>
 80060b6:	230c      	movs	r3, #12
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4638      	mov	r0, r7
 80060bc:	f000 f84c 	bl	8006158 <__malloc_unlock>
 80060c0:	e7a1      	b.n	8006006 <_malloc_r+0x22>
 80060c2:	6025      	str	r5, [r4, #0]
 80060c4:	e7de      	b.n	8006084 <_malloc_r+0xa0>
 80060c6:	bf00      	nop
 80060c8:	200002bc 	.word	0x200002bc

080060cc <_realloc_r>:
 80060cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d0:	4680      	mov	r8, r0
 80060d2:	4614      	mov	r4, r2
 80060d4:	460e      	mov	r6, r1
 80060d6:	b921      	cbnz	r1, 80060e2 <_realloc_r+0x16>
 80060d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060dc:	4611      	mov	r1, r2
 80060de:	f7ff bf81 	b.w	8005fe4 <_malloc_r>
 80060e2:	b92a      	cbnz	r2, 80060f0 <_realloc_r+0x24>
 80060e4:	f7ff ff12 	bl	8005f0c <_free_r>
 80060e8:	4625      	mov	r5, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f0:	f000 f838 	bl	8006164 <_malloc_usable_size_r>
 80060f4:	4284      	cmp	r4, r0
 80060f6:	4607      	mov	r7, r0
 80060f8:	d802      	bhi.n	8006100 <_realloc_r+0x34>
 80060fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060fe:	d812      	bhi.n	8006126 <_realloc_r+0x5a>
 8006100:	4621      	mov	r1, r4
 8006102:	4640      	mov	r0, r8
 8006104:	f7ff ff6e 	bl	8005fe4 <_malloc_r>
 8006108:	4605      	mov	r5, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d0ed      	beq.n	80060ea <_realloc_r+0x1e>
 800610e:	42bc      	cmp	r4, r7
 8006110:	4622      	mov	r2, r4
 8006112:	4631      	mov	r1, r6
 8006114:	bf28      	it	cs
 8006116:	463a      	movcs	r2, r7
 8006118:	f7ff fed0 	bl	8005ebc <memcpy>
 800611c:	4631      	mov	r1, r6
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fef4 	bl	8005f0c <_free_r>
 8006124:	e7e1      	b.n	80060ea <_realloc_r+0x1e>
 8006126:	4635      	mov	r5, r6
 8006128:	e7df      	b.n	80060ea <_realloc_r+0x1e>
	...

0800612c <_sbrk_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	; (8006148 <_sbrk_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fb fb50 	bl	80017dc <_sbrk>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_sbrk_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_sbrk_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	200002c4 	.word	0x200002c4

0800614c <__malloc_lock>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__malloc_lock+0x8>)
 800614e:	f000 b811 	b.w	8006174 <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	200002c8 	.word	0x200002c8

08006158 <__malloc_unlock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_unlock+0x8>)
 800615a:	f000 b80c 	b.w	8006176 <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	200002c8 	.word	0x200002c8

08006164 <_malloc_usable_size_r>:
 8006164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006168:	1f18      	subs	r0, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfbc      	itt	lt
 800616e:	580b      	ldrlt	r3, [r1, r0]
 8006170:	18c0      	addlt	r0, r0, r3
 8006172:	4770      	bx	lr

08006174 <__retarget_lock_acquire_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_release_recursive>:
 8006176:	4770      	bx	lr

08006178 <ceil>:
 8006178:	ee10 1a90 	vmov	r1, s1
 800617c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006180:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006184:	2b13      	cmp	r3, #19
 8006186:	b530      	push	{r4, r5, lr}
 8006188:	ee10 0a10 	vmov	r0, s0
 800618c:	ee10 5a10 	vmov	r5, s0
 8006190:	dc2f      	bgt.n	80061f2 <ceil+0x7a>
 8006192:	2b00      	cmp	r3, #0
 8006194:	da13      	bge.n	80061be <ceil+0x46>
 8006196:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006258 <ceil+0xe0>
 800619a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800619e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80061a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a6:	dd05      	ble.n	80061b4 <ceil+0x3c>
 80061a8:	2900      	cmp	r1, #0
 80061aa:	db4c      	blt.n	8006246 <ceil+0xce>
 80061ac:	4301      	orrs	r1, r0
 80061ae:	d04e      	beq.n	800624e <ceil+0xd6>
 80061b0:	492b      	ldr	r1, [pc, #172]	; (8006260 <ceil+0xe8>)
 80061b2:	2000      	movs	r0, #0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4602      	mov	r2, r0
 80061b8:	ec43 2b10 	vmov	d0, r2, r3
 80061bc:	e020      	b.n	8006200 <ceil+0x88>
 80061be:	4a29      	ldr	r2, [pc, #164]	; (8006264 <ceil+0xec>)
 80061c0:	411a      	asrs	r2, r3
 80061c2:	ea01 0402 	and.w	r4, r1, r2
 80061c6:	4304      	orrs	r4, r0
 80061c8:	d01a      	beq.n	8006200 <ceil+0x88>
 80061ca:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8006258 <ceil+0xe0>
 80061ce:	ee30 0b07 	vadd.f64	d0, d0, d7
 80061d2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	ddeb      	ble.n	80061b4 <ceil+0x3c>
 80061dc:	2900      	cmp	r1, #0
 80061de:	bfc2      	ittt	gt
 80061e0:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 80061e4:	fa40 f303 	asrgt.w	r3, r0, r3
 80061e8:	18c9      	addgt	r1, r1, r3
 80061ea:	ea21 0102 	bic.w	r1, r1, r2
 80061ee:	2000      	movs	r0, #0
 80061f0:	e7e0      	b.n	80061b4 <ceil+0x3c>
 80061f2:	2b33      	cmp	r3, #51	; 0x33
 80061f4:	dd05      	ble.n	8006202 <ceil+0x8a>
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fa:	d101      	bne.n	8006200 <ceil+0x88>
 80061fc:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006200:	bd30      	pop	{r4, r5, pc}
 8006202:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006206:	f04f 32ff 	mov.w	r2, #4294967295
 800620a:	40e2      	lsrs	r2, r4
 800620c:	4202      	tst	r2, r0
 800620e:	d0f7      	beq.n	8006200 <ceil+0x88>
 8006210:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8006258 <ceil+0xe0>
 8006214:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006218:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	ddc8      	ble.n	80061b4 <ceil+0x3c>
 8006222:	2900      	cmp	r1, #0
 8006224:	dd02      	ble.n	800622c <ceil+0xb4>
 8006226:	2b14      	cmp	r3, #20
 8006228:	d103      	bne.n	8006232 <ceil+0xba>
 800622a:	3101      	adds	r1, #1
 800622c:	ea20 0002 	bic.w	r0, r0, r2
 8006230:	e7c0      	b.n	80061b4 <ceil+0x3c>
 8006232:	2401      	movs	r4, #1
 8006234:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006238:	fa04 f303 	lsl.w	r3, r4, r3
 800623c:	4418      	add	r0, r3
 800623e:	42a8      	cmp	r0, r5
 8006240:	bf38      	it	cc
 8006242:	1909      	addcc	r1, r1, r4
 8006244:	e7f2      	b.n	800622c <ceil+0xb4>
 8006246:	2000      	movs	r0, #0
 8006248:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800624c:	e7b2      	b.n	80061b4 <ceil+0x3c>
 800624e:	4608      	mov	r0, r1
 8006250:	e7b0      	b.n	80061b4 <ceil+0x3c>
 8006252:	bf00      	nop
 8006254:	f3af 8000 	nop.w
 8006258:	8800759c 	.word	0x8800759c
 800625c:	7e37e43c 	.word	0x7e37e43c
 8006260:	3ff00000 	.word	0x3ff00000
 8006264:	000fffff 	.word	0x000fffff

08006268 <_init>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr

08006274 <_fini>:
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006276:	bf00      	nop
 8006278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627a:	bc08      	pop	{r3}
 800627c:	469e      	mov	lr, r3
 800627e:	4770      	bx	lr
