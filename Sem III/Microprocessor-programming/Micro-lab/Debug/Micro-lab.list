
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea0  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b8  080040b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c0  080040c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  080040d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080040d4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b02f  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f8  00000000  00000000  0002b069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bbe  00000000  00000000  0002d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a337  00000000  00000000  000543fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f18f4  00000000  00000000  0005e735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150029  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb0  00000000  00000000  0015007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004080 	.word	0x08004080

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004080 	.word	0x08004080

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]

USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0d      	cmp	r3, #13
 800064e:	d002      	beq.n	8000656 <char_is_endmessage+0x16>
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b0a      	cmp	r3, #10
 8000654:	d101      	bne.n	800065a <char_is_endmessage+0x1a>
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <char_is_endmessage+0x1c>
	}
	else return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <rx_has_data>:

uint8_t rx_has_data()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <rx_has_data+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <rx_has_data+0x28>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	429a      	cmp	r2, r3
 800067a:	d101      	bne.n	8000680 <rx_has_data+0x18>
	{
		return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e000      	b.n	8000682 <rx_has_data+0x1a>
	}
	else return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	200000d2 	.word	0x200000d2
 8000690:	200000d3 	.word	0x200000d3

08000694 <increase_rx_empty>:

void increase_rx_empty()
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	rx_empty++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <increase_rx_empty+0x2c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a4:	701a      	strb	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <increase_rx_empty+0x2c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b1e      	cmp	r3, #30
 80006ae:	d902      	bls.n	80006b6 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <increase_rx_empty+0x2c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	200000d2 	.word	0x200000d2

080006c4 <increase_rx_busy>:

void increase_rx_busy()
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	rx_busy++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <increase_rx_busy+0x2c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d4:	701a      	strb	r2, [r3, #0]
	if(rx_busy>BUFFER_LENGTH)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <increase_rx_busy+0x2c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b1e      	cmp	r3, #30
 80006de:	d902      	bls.n	80006e6 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <increase_rx_busy+0x2c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	}
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	200000d3 	.word	0x200000d3

080006f4 <get_char>:

// Get character from the reception buffer
uint8_t get_char()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <get_char+0x24>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <get_char+0x28>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000708:	f7ff ffdc 	bl	80006c4 <increase_rx_busy>
	return tmp;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000d3 	.word	0x200000d3
 800071c:	200000b4 	.word	0x200000b4

08000720 <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800072c:	e041      	b.n	80007b2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <get_message+0xa8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461c      	mov	r4, r3
 8000734:	f7ff ffde 	bl	80006f4 <get_char>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <get_message+0xac>)
 800073e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <get_message+0xa8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <get_message+0xac>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff78 	bl	8000640 <char_is_endmessage>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d021      	beq.n	800079a <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <get_message+0xa8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <get_message+0xac>)
 800075e:	2100      	movs	r1, #0
 8000760:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	440b      	add	r3, r1
 8000770:	4916      	ldr	r1, [pc, #88]	; (80007cc <get_message+0xac>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <get_message+0xa8>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3ef      	bcc.n	8000768 <get_message+0x48>
			}

			message_length = idx;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <get_message+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <get_message+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
			return message_length;
 8000794:	89bb      	ldrh	r3, [r7, #12]
 8000796:	b29b      	uxth	r3, r3
 8000798:	e011      	b.n	80007be <get_message+0x9e>
		}
		else
		{
			idx++;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <get_message+0xa8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <get_message+0xa8>)
 80007a4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <get_message+0xa8>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	d901      	bls.n	80007b2 <get_message+0x92>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e005      	b.n	80007be <get_message+0x9e>
	while(rx_has_data() == 1)
 80007b2:	f7ff ff59 	bl	8000668 <rx_has_data>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d0b8      	beq.n	800072e <get_message+0xe>
		}
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000f8 	.word	0x200000f8
 80007cc:	200000fc 	.word	0x200000fc

080007d0 <turn_on_led>:

void turn_on_led()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <turn_on_led+0x14>)
 80007da:	f001 f82f 	bl	800183c <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020400 	.word	0x40020400

080007e8 <turn_off_led>:

void turn_off_led()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <turn_off_led+0x14>)
 80007f2:	f001 f823 	bl	800183c <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <led_delay>:

uint16_t led_delay(uint8_t blink_hz)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1000.0;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <led_delay+0x58>)
 800080c:	60fb      	str	r3, [r7, #12]
	delay_f = delay_f / blink_hz;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000818:	edd7 6a03 	vldr	s13, [r7, #12]
 800081c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000820:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_f = ceil(delay_f);
 8000824:	edd7 7a03 	vldr	s15, [r7, #12]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f003 fbae 	bl	8003f90 <ceil>
 8000834:	eeb0 7b40 	vmov.f64	d7, d0
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay = (uint16_t)delay_f;
 8000840:	edd7 7a03 	vldr	s15, [r7, #12]
 8000844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	817b      	strh	r3, [r7, #10]
	return delay;
 800084e:	897b      	ldrh	r3, [r7, #10]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	447a0000 	.word	0x447a0000

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000862:	f000 fa71 	bl	8000d48 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000866:	f7ff fe69 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800086a:	f7ff fe8d 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fb98 	bl	8000fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f967 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 f9f1 	bl	8000c5c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800087a:	f000 f9bf 	bl	8000bfc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	499c      	ldr	r1, [pc, #624]	; (8000af4 <main+0x298>)
 8000882:	489d      	ldr	r0, [pc, #628]	; (8000af8 <main+0x29c>)
 8000884:	f002 f918 	bl	8002ab8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __IO uint8_t led_action;

  /* Command templates */
  uint8_t blink_cmd[5] = "BLINK";
 8000888:	4a9c      	ldr	r2, [pc, #624]	; (8000afc <main+0x2a0>)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000892:	6018      	str	r0, [r3, #0]
 8000894:	3304      	adds	r3, #4
 8000896:	7019      	strb	r1, [r3, #0]
  __IO uint8_t blink_active;

  while (1)
  {
	if (blink_active == 1)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b01      	cmp	r3, #1
 800089e:	d109      	bne.n	80008b4 <main+0x58>
	{
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	4897      	ldr	r0, [pc, #604]	; (8000b00 <main+0x2a4>)
 80008a4:	f000 ffe3 	bl	800186e <HAL_GPIO_TogglePin>
		HAL_Delay(blink_ms);
 80008a8:	4b96      	ldr	r3, [pc, #600]	; (8000b04 <main+0x2a8>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fbd4 	bl	800105c <HAL_Delay>

	} /* Blink LED */

	if (character == '\n' || character == '\r')
 80008b4:	4b8f      	ldr	r3, [pc, #572]	; (8000af4 <main+0x298>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b0a      	cmp	r3, #10
 80008ba:	d003      	beq.n	80008c4 <main+0x68>
 80008bc:	4b8d      	ldr	r3, [pc, #564]	; (8000af4 <main+0x298>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b0d      	cmp	r3, #13
 80008c2:	d106      	bne.n	80008d2 <main+0x76>
	{
		message_length = get_message(message);
 80008c4:	4890      	ldr	r0, [pc, #576]	; (8000b08 <main+0x2ac>)
 80008c6:	f7ff ff2b 	bl	8000720 <get_message>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b8f      	ldr	r3, [pc, #572]	; (8000b0c <main+0x2b0>)
 80008d0:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 80008d2:	4b8e      	ldr	r3, [pc, #568]	; (8000b0c <main+0x2b0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0dd      	beq.n	8000898 <main+0x3c>
	{
		for (uint8_t i=0; i<message_length; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e123      	b.n	8000b2a <main+0x2ce>
		{
			/* Find command start */
			if (message[i] == 'L')
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	4a88      	ldr	r2, [pc, #544]	; (8000b08 <main+0x2ac>)
 80008e6:	5cd3      	ldrb	r3, [r2, r3]
 80008e8:	2b4c      	cmp	r3, #76	; 0x4c
 80008ea:	d105      	bne.n	80008f8 <main+0x9c>
			{
				i++;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	3301      	adds	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
				frame_state = 1;
 80008f2:	4b87      	ldr	r3, [pc, #540]	; (8000b10 <main+0x2b4>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
			} /* if character is 'L' */
			if (message[i] == 'I')
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4a83      	ldr	r2, [pc, #524]	; (8000b08 <main+0x2ac>)
 80008fc:	5cd3      	ldrb	r3, [r2, r3]
 80008fe:	2b49      	cmp	r3, #73	; 0x49
 8000900:	d105      	bne.n	800090e <main+0xb2>
			{
				i++;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	3301      	adds	r3, #1
 8000906:	73fb      	strb	r3, [r7, #15]
				frame_state = 1;
 8000908:	4b81      	ldr	r3, [pc, #516]	; (8000b10 <main+0x2b4>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
			} /* if character is 'I' */

			switch (frame_state)
 800090e:	4b80      	ldr	r3, [pc, #512]	; (8000b10 <main+0x2b4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b03      	cmp	r3, #3
 8000916:	f000 80a0 	beq.w	8000a5a <main+0x1fe>
 800091a:	2b03      	cmp	r3, #3
 800091c:	f300 80fe 	bgt.w	8000b1c <main+0x2c0>
 8000920:	2b01      	cmp	r3, #1
 8000922:	d002      	beq.n	800092a <main+0xce>
 8000924:	2b02      	cmp	r3, #2
 8000926:	d016      	beq.n	8000956 <main+0xfa>
 8000928:	e0f8      	b.n	8000b1c <main+0x2c0>
			{
				case 1:
					if (message[i] == 'E' && message[i+1] == 'D')
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	4a76      	ldr	r2, [pc, #472]	; (8000b08 <main+0x2ac>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	2b45      	cmp	r3, #69	; 0x45
 8000932:	d10c      	bne.n	800094e <main+0xf2>
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	4a73      	ldr	r2, [pc, #460]	; (8000b08 <main+0x2ac>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	2b44      	cmp	r3, #68	; 0x44
 800093e:	d106      	bne.n	800094e <main+0xf2>
					{
						i = i+1;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	3301      	adds	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
						frame_state = 2;
 8000946:	4b72      	ldr	r3, [pc, #456]	; (8000b10 <main+0x2b4>)
 8000948:	2202      	movs	r2, #2
 800094a:	701a      	strb	r2, [r3, #0]
					} /* if 'LED' sequence found */
					else frame_state = 0;
					break;
 800094c:	e0ea      	b.n	8000b24 <main+0x2c8>
					else frame_state = 0;
 800094e:	4b70      	ldr	r3, [pc, #448]	; (8000b10 <main+0x2b4>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
					break;
 8000954:	e0e6      	b.n	8000b24 <main+0x2c8>

				case 2:
					if (message[i] == '[' && message[i+1] == 'O' && message[i+2] == 'N')
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	4a6b      	ldr	r2, [pc, #428]	; (8000b08 <main+0x2ac>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	2b5b      	cmp	r3, #91	; 0x5b
 800095e:	d114      	bne.n	800098a <main+0x12e>
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	3301      	adds	r3, #1
 8000964:	4a68      	ldr	r2, [pc, #416]	; (8000b08 <main+0x2ac>)
 8000966:	5cd3      	ldrb	r3, [r2, r3]
 8000968:	2b4f      	cmp	r3, #79	; 0x4f
 800096a:	d10e      	bne.n	800098a <main+0x12e>
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	3302      	adds	r3, #2
 8000970:	4a65      	ldr	r2, [pc, #404]	; (8000b08 <main+0x2ac>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	2b4e      	cmp	r3, #78	; 0x4e
 8000976:	d108      	bne.n	800098a <main+0x12e>
					{
						i = i+2;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3302      	adds	r3, #2
 800097c:	73fb      	strb	r3, [r7, #15]
						led_action = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	737b      	strb	r3, [r7, #13]
						frame_state = 3;
 8000982:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <main+0x2b4>)
 8000984:	2203      	movs	r2, #3
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e066      	b.n	8000a58 <main+0x1fc>
					} /* if 'ON' sequence found */
					else if (message[i] == '[' && message[i+1] == 'O' && message[i+2] == 'F' && message[i+3] == 'F')
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4a5e      	ldr	r2, [pc, #376]	; (8000b08 <main+0x2ac>)
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	2b5b      	cmp	r3, #91	; 0x5b
 8000992:	d11a      	bne.n	80009ca <main+0x16e>
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	3301      	adds	r3, #1
 8000998:	4a5b      	ldr	r2, [pc, #364]	; (8000b08 <main+0x2ac>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	2b4f      	cmp	r3, #79	; 0x4f
 800099e:	d114      	bne.n	80009ca <main+0x16e>
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3302      	adds	r3, #2
 80009a4:	4a58      	ldr	r2, [pc, #352]	; (8000b08 <main+0x2ac>)
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	2b46      	cmp	r3, #70	; 0x46
 80009aa:	d10e      	bne.n	80009ca <main+0x16e>
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	3303      	adds	r3, #3
 80009b0:	4a55      	ldr	r2, [pc, #340]	; (8000b08 <main+0x2ac>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	2b46      	cmp	r3, #70	; 0x46
 80009b6:	d108      	bne.n	80009ca <main+0x16e>
					{
						i = i+3;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	3303      	adds	r3, #3
 80009bc:	73fb      	strb	r3, [r7, #15]
						led_action = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	737b      	strb	r3, [r7, #13]
						frame_state = 3;
 80009c2:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <main+0x2b4>)
 80009c4:	2203      	movs	r2, #3
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e046      	b.n	8000a58 <main+0x1fc>
					} /* if command 'OFF' found */
					else if (message[i] == '[' && message[i+1] == 'B')
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <main+0x2ac>)
 80009ce:	5cd3      	ldrb	r3, [r2, r3]
 80009d0:	2b5b      	cmp	r3, #91	; 0x5b
 80009d2:	d13c      	bne.n	8000a4e <main+0x1f2>
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a4b      	ldr	r2, [pc, #300]	; (8000b08 <main+0x2ac>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	2b42      	cmp	r3, #66	; 0x42
 80009de:	d136      	bne.n	8000a4e <main+0x1f2>
					{
						i++;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
						for (uint8_t i=0; i<5; i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	73bb      	strb	r3, [r7, #14]
 80009ea:	e010      	b.n	8000a0e <main+0x1b2>
						{
							if (message[i] != blink_cmd[i])
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	4a46      	ldr	r2, [pc, #280]	; (8000b08 <main+0x2ac>)
 80009f0:	5cd2      	ldrb	r2, [r2, r3]
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	3310      	adds	r3, #16
 80009f6:	443b      	add	r3, r7
 80009f8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d003      	beq.n	8000a08 <main+0x1ac>
							{
								frame_state = 0;
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <main+0x2b4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
								break;
 8000a06:	e005      	b.n	8000a14 <main+0x1b8>
						for (uint8_t i=0; i<5; i++)
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d9eb      	bls.n	80009ec <main+0x190>
							} /* check for 'BLINK' sequence */
						}

						i = i+5;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	3305      	adds	r3, #5
 8000a18:	73fb      	strb	r3, [r7, #15]
						if (message[i] == ',' && (message[i+1] >= 0x30 && message[i+1] <= 0x39))
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	4a3a      	ldr	r2, [pc, #232]	; (8000b08 <main+0x2ac>)
 8000a1e:	5cd3      	ldrb	r3, [r2, r3]
 8000a20:	2b2c      	cmp	r3, #44	; 0x2c
 8000a22:	d118      	bne.n	8000a56 <main+0x1fa>
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a37      	ldr	r2, [pc, #220]	; (8000b08 <main+0x2ac>)
 8000a2a:	5cd3      	ldrb	r3, [r2, r3]
 8000a2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a2e:	d912      	bls.n	8000a56 <main+0x1fa>
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a34      	ldr	r2, [pc, #208]	; (8000b08 <main+0x2ac>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	2b39      	cmp	r3, #57	; 0x39
 8000a3a:	d80c      	bhi.n	8000a56 <main+0x1fa>
						{
							/* Get blink delay */
							i = i+1;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
							led_action = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	737b      	strb	r3, [r7, #13]
							frame_state = 3;
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <main+0x2b4>)
 8000a48:	2203      	movs	r2, #3
 8000a4a:	701a      	strb	r2, [r3, #0]
						if (message[i] == ',' && (message[i+1] >= 0x30 && message[i+1] <= 0x39))
 8000a4c:	e003      	b.n	8000a56 <main+0x1fa>
						} /* if ',' found and char between '0' and '9' */
					} /* if command 'BLINK' found */
					else frame_state = 0;
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <main+0x2b4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
					break;
 8000a54:	e066      	b.n	8000b24 <main+0x2c8>
						if (message[i] == ',' && (message[i+1] >= 0x30 && message[i+1] <= 0x39))
 8000a56:	bf00      	nop
					break;
 8000a58:	e064      	b.n	8000b24 <main+0x2c8>

				case 3:
					if (message[i] == ']' && led_action == 0)
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <main+0x2ac>)
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
 8000a60:	2b5d      	cmp	r3, #93	; 0x5d
 8000a62:	d10b      	bne.n	8000a7c <main+0x220>
 8000a64:	7b7b      	ldrb	r3, [r7, #13]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d107      	bne.n	8000a7c <main+0x220>
					{
						blink_active = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	71fb      	strb	r3, [r7, #7]
						frame_state = 0;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <main+0x2b4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
						turn_off_led();
 8000a76:	f7ff feb7 	bl	80007e8 <turn_off_led>
 8000a7a:	e03a      	b.n	8000af2 <main+0x296>
					} /* toggle LED ON */
					else if (message[i] == ']' && led_action == 1)
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <main+0x2ac>)
 8000a80:	5cd3      	ldrb	r3, [r2, r3]
 8000a82:	2b5d      	cmp	r3, #93	; 0x5d
 8000a84:	d10b      	bne.n	8000a9e <main+0x242>
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d107      	bne.n	8000a9e <main+0x242>
					{
						blink_active = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
						frame_state = 0;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <main+0x2b4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
						turn_on_led();
 8000a98:	f7ff fe9a 	bl	80007d0 <turn_on_led>
 8000a9c:	e029      	b.n	8000af2 <main+0x296>
					} /* toggle LED OFF */
					else if (message[i] == ']' && led_action == 2)
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <main+0x2ac>)
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	2b5d      	cmp	r3, #93	; 0x5d
 8000aa6:	d120      	bne.n	8000aea <main+0x28e>
 8000aa8:	7b7b      	ldrb	r3, [r7, #13]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d11c      	bne.n	8000aea <main+0x28e>
					{
						blink_delay = message[i-1];
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <main+0x2ac>)
 8000ab6:	5cd2      	ldrb	r2, [r2, r3]
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <main+0x2b8>)
 8000aba:	701a      	strb	r2, [r3, #0]
						delay = blink_delay - '0';
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <main+0x2b8>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	3b30      	subs	r3, #48	; 0x30
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <main+0x2bc>)
 8000ac8:	701a      	strb	r2, [r3, #0]
						blink_ms = led_delay(delay);
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <main+0x2bc>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fe95 	bl	8000800 <led_delay>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <main+0x2a8>)
 8000adc:	801a      	strh	r2, [r3, #0]
						/* convert char to int */
						blink_active = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	71fb      	strb	r3, [r7, #7]
						frame_state = 0;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <main+0x2b4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e003      	b.n	8000af2 <main+0x296>
					} /* blink LED */
					else frame_state = 0;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <main+0x2b4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
					break;
 8000af0:	e018      	b.n	8000b24 <main+0x2c8>
 8000af2:	e017      	b.n	8000b24 <main+0x2c8>
 8000af4:	200000b0 	.word	0x200000b0
 8000af8:	20000028 	.word	0x20000028
 8000afc:	08004098 	.word	0x08004098
 8000b00:	40020400 	.word	0x40020400
 8000b04:	200000f6 	.word	0x200000f6
 8000b08:	200000d4 	.word	0x200000d4
 8000b0c:	200000f2 	.word	0x200000f2
 8000b10:	200000f3 	.word	0x200000f3
 8000b14:	200000f4 	.word	0x200000f4
 8000b18:	200000f5 	.word	0x200000f5

				default:
					frame_state = 0;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <main+0x2e0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
					break;
 8000b22:	bf00      	nop
		for (uint8_t i=0; i<message_length; i++)
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	3301      	adds	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <main+0x2e4>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	f4ff aed5 	bcc.w	80008e2 <main+0x86>
	if (blink_active == 1)
 8000b38:	e6ae      	b.n	8000898 <main+0x3c>
 8000b3a:	bf00      	nop
 8000b3c:	200000f3 	.word	0x200000f3
 8000b40:	200000f2 	.word	0x200000f2

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2234      	movs	r2, #52	; 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fa14 	bl	8003f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <SystemClock_Config+0xb0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <SystemClock_Config+0xb0>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <SystemClock_Config+0xb0>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <SystemClock_Config+0xb4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <SystemClock_Config+0xb4>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <SystemClock_Config+0xb4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fe77 	bl	80018a4 <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f8f0 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f910 	bl	8001e00 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000be6:	f000 f8db 	bl	8000da0 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	; 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MX_USART3_UART_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c40:	f001 feec 	bl	8002a1c <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f000 f8a9 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000028 	.word	0x20000028
 8000c58:	40004800 	.word	0x40004800

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_GPIO_Init+0x8c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	480b      	ldr	r0, [pc, #44]	; (8000cec <MX_GPIO_Init+0x90>)
 8000cc0:	f000 fdbc 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_GPIO_Init+0x90>)
 8000cdc:	f000 fc02 	bl	80014e4 <HAL_GPIO_Init>

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020400 	.word	0x40020400

08000cf0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_UART_RxCpltCallback+0x44>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc87 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <HAL_UART_RxCpltCallback+0x48>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d10e      	bne.n	8000d2a <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_UART_RxCpltCallback+0x4c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <HAL_UART_RxCpltCallback+0x44>)
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_UART_RxCpltCallback+0x50>)
 8000d1a:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 8000d1c:	f7ff fcba 	bl	8000694 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	4904      	ldr	r1, [pc, #16]	; (8000d34 <HAL_UART_RxCpltCallback+0x44>)
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <HAL_UART_RxCpltCallback+0x54>)
 8000d26:	f001 fec7 	bl	8002ab8 <HAL_UART_Receive_IT>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000b0 	.word	0x200000b0
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	200000d2 	.word	0x200000d2
 8000d40:	200000b4 	.word	0x200000b4
 8000d44:	20000028 	.word	0x20000028

08000d48 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d5a:	f000 fab5 	bl	80012c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d6e:	2387      	movs	r3, #135	; 0x87
 8000d70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d76:	2300      	movs	r3, #0
 8000d78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fad3 	bl	8001338 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d92:	2004      	movs	r0, #4
 8000d94:	f000 fab0 	bl	80012f8 <HAL_MPU_Enable>

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x44>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ae      	sub	sp, #184	; 0xb8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2290      	movs	r2, #144	; 0x90
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 f8b3 	bl	8003f80 <memset>
  if(huart->Instance==USART3)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_UART_MspInit+0xc4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d144      	bne.n	8000eae <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f9ca 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e3e:	f7ff ffaf 	bl	8000da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_UART_MspInit+0xc8>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_UART_MspInit+0xc8>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_UART_MspInit+0xc8>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0xc8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0xc8>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_UART_MspInit+0xc8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_UART_MspInit+0xcc>)
 8000e9a:	f000 fb23 	bl	80014e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2027      	movs	r0, #39	; 0x27
 8000ea4:	f000 f9d9 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ea8:	2027      	movs	r0, #39	; 0x27
 8000eaa:	f000 f9f2 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	37b8      	adds	r7, #184	; 0xb8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f884 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <USART3_IRQHandler+0x10>)
 8000f1e:	f001 fe0f 	bl	8002b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000028 	.word	0x20000028

08000f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f002 ffdb 	bl	8003f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fc6b 	bl	800085c <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f94:	080040c8 	.word	0x080040c8
  ldr r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f9c:	20000120 	.word	0x20000120

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>

08000fa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f94c 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fac:	200f      	movs	r0, #15
 8000fae:	f000 f805 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fefb 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f967 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f92f 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	2000011c 	.word	0x2000011c

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000011c 	.word	0x2000011c

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	05fa0000 	.word	0x05fa0000

080010ec <__NVIC_GetPriorityGrouping>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff3e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff31 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa2 	bl	8001200 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012cc:	f3bf 8f5f 	dmb	sy
}
 80012d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_MPU_Disable+0x28>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_MPU_Disable+0x28>)
 80012d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012dc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_MPU_Disable+0x2c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	e000ed90 	.word	0xe000ed90

080012f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_MPU_Enable+0x38>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_MPU_Enable+0x3c>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <HAL_MPU_Enable+0x3c>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001316:	f3bf 8f4f 	dsb	sy
}
 800131a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800131c:	f3bf 8f6f 	isb	sy
}
 8001320:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed90 	.word	0xe000ed90
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	785a      	ldrb	r2, [r3, #1]
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_MPU_ConfigRegion+0x84>)
 8001346:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d029      	beq.n	80013a4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001350:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_MPU_ConfigRegion+0x84>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7b1b      	ldrb	r3, [r3, #12]
 800135c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7adb      	ldrb	r3, [r3, #11]
 8001362:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001364:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7a9b      	ldrb	r3, [r3, #10]
 800136a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800136c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7b5b      	ldrb	r3, [r3, #13]
 8001372:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001374:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7b9b      	ldrb	r3, [r3, #14]
 800137a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800137c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7bdb      	ldrb	r3, [r3, #15]
 8001382:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001384:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7a5b      	ldrb	r3, [r3, #9]
 800138a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800138c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7a1b      	ldrb	r3, [r3, #8]
 8001392:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001394:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800139e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80013a2:	e005      	b.n	80013b0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_MPU_ConfigRegion+0x84>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_MPU_ConfigRegion+0x84>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed90 	.word	0xe000ed90

080013c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013ce:	f7ff fe39 	bl	8001044 <HAL_GetTick>
 80013d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e052      	b.n	8001498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0216 	bic.w	r2, r2, #22
 8001400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <HAL_DMA_Abort+0x62>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001442:	e013      	b.n	800146c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001444:	f7ff fdfe 	bl	8001044 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b05      	cmp	r3, #5
 8001450:	d90c      	bls.n	800146c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e015      	b.n	8001498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e4      	bne.n	8001444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147e:	223f      	movs	r2, #63	; 0x3f
 8001480:	409a      	lsls	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d004      	beq.n	80014be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00c      	b.n	80014d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2205      	movs	r2, #5
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e175      	b.n	80017f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8164 	bne.w	80017ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d005      	beq.n	800153a <HAL_GPIO_Init+0x56>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d130      	bne.n	800159c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 0201 	and.w	r2, r3, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d017      	beq.n	80015d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d123      	bne.n	800162c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80be 	beq.w	80017ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b66      	ldr	r3, [pc, #408]	; (8001808 <HAL_GPIO_Init+0x324>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a65      	ldr	r2, [pc, #404]	; (8001808 <HAL_GPIO_Init+0x324>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_GPIO_Init+0x324>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001686:	4a61      	ldr	r2, [pc, #388]	; (800180c <HAL_GPIO_Init+0x328>)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_GPIO_Init+0x32c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d037      	beq.n	8001722 <HAL_GPIO_Init+0x23e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a57      	ldr	r2, [pc, #348]	; (8001814 <HAL_GPIO_Init+0x330>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d031      	beq.n	800171e <HAL_GPIO_Init+0x23a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a56      	ldr	r2, [pc, #344]	; (8001818 <HAL_GPIO_Init+0x334>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d02b      	beq.n	800171a <HAL_GPIO_Init+0x236>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a55      	ldr	r2, [pc, #340]	; (800181c <HAL_GPIO_Init+0x338>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d025      	beq.n	8001716 <HAL_GPIO_Init+0x232>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a54      	ldr	r2, [pc, #336]	; (8001820 <HAL_GPIO_Init+0x33c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01f      	beq.n	8001712 <HAL_GPIO_Init+0x22e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a53      	ldr	r2, [pc, #332]	; (8001824 <HAL_GPIO_Init+0x340>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x22a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_GPIO_Init+0x344>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x226>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a51      	ldr	r2, [pc, #324]	; (800182c <HAL_GPIO_Init+0x348>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x222>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a50      	ldr	r2, [pc, #320]	; (8001830 <HAL_GPIO_Init+0x34c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x21e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4f      	ldr	r2, [pc, #316]	; (8001834 <HAL_GPIO_Init+0x350>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x21a>
 80016fa:	2309      	movs	r3, #9
 80016fc:	e012      	b.n	8001724 <HAL_GPIO_Init+0x240>
 80016fe:	230a      	movs	r3, #10
 8001700:	e010      	b.n	8001724 <HAL_GPIO_Init+0x240>
 8001702:	2308      	movs	r3, #8
 8001704:	e00e      	b.n	8001724 <HAL_GPIO_Init+0x240>
 8001706:	2307      	movs	r3, #7
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x240>
 800170a:	2306      	movs	r3, #6
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x240>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x240>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x240>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x240>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x240>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x240>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001734:	4935      	ldr	r1, [pc, #212]	; (800180c <HAL_GPIO_Init+0x328>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_GPIO_Init+0x354>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001766:	4a34      	ldr	r2, [pc, #208]	; (8001838 <HAL_GPIO_Init+0x354>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176c:	4b32      	ldr	r3, [pc, #200]	; (8001838 <HAL_GPIO_Init+0x354>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <HAL_GPIO_Init+0x354>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <HAL_GPIO_Init+0x354>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <HAL_GPIO_Init+0x354>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_GPIO_Init+0x354>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_GPIO_Init+0x354>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f ae86 	bls.w	8001504 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40013800 	.word	0x40013800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40022000 	.word	0x40022000
 8001834:	40022400 	.word	0x40022400
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001880:	887a      	ldrh	r2, [r7, #2]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	041a      	lsls	r2, r3, #16
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43d9      	mvns	r1, r3
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	400b      	ands	r3, r1
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e29b      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8087 	beq.w	80019d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c8:	4b96      	ldr	r3, [pc, #600]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d00c      	beq.n	80018ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d4:	4b93      	ldr	r3, [pc, #588]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d112      	bne.n	8001906 <HAL_RCC_OscConfig+0x62>
 80018e0:	4b90      	ldr	r3, [pc, #576]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ec:	d10b      	bne.n	8001906 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ee:	4b8d      	ldr	r3, [pc, #564]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d06c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x130>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d168      	bne.n	80019d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e275      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x7a>
 8001910:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a83      	ldr	r2, [pc, #524]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e02e      	b.n	800197c <HAL_RCC_OscConfig+0xd8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x9c>
 8001926:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7e      	ldr	r2, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 800192c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7b      	ldr	r2, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xd8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0xc0>
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a72      	ldr	r2, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xd8>
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6b      	ldr	r2, [pc, #428]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fb5e 	bl	8001044 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fb5a 	bl	8001044 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e229      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xe8>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb4a 	bl	8001044 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fb46 	bl	8001044 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e215      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	4b57      	ldr	r3, [pc, #348]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x110>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d069      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e2:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d11c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x190>
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d116      	bne.n	8001a34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x17a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e1e9      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	493d      	ldr	r1, [pc, #244]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	e040      	b.n	8001ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d023      	beq.n	8001a84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a38      	ldr	r2, [pc, #224]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fafc 	bl	8001044 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff faf8 	bl	8001044 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1c7      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4929      	ldr	r1, [pc, #164]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
 8001a82:	e018      	b.n	8001ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fad8 	bl	8001044 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fad4 	bl	8001044 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1a3      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d038      	beq.n	8001b34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fab5 	bl	8001044 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ade:	f7ff fab1 	bl	8001044 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e180      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x23a>
 8001afc:	e01a      	b.n	8001b34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_RCC_OscConfig+0x280>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa9b 	bl	8001044 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff fa97 	bl	8001044 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d903      	bls.n	8001b28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e166      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
 8001b24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a4 	beq.w	8001c8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b42:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10d      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a88      	ldr	r2, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b86      	ldr	r3, [pc, #536]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6a:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <HAL_RCC_OscConfig+0x4d4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d118      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b76:	4b80      	ldr	r3, [pc, #512]	; (8001d78 <HAL_RCC_OscConfig+0x4d4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a7f      	ldr	r2, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x4d4>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fa5f 	bl	8001044 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8a:	f7ff fa5b 	bl	8001044 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b64      	cmp	r3, #100	; 0x64
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e12a      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x4d4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x31a>
 8001bb0:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a6f      	ldr	r2, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbc:	e02d      	b.n	8001c1a <HAL_RCC_OscConfig+0x376>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x33c>
 8001bc6:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd2:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	e01c      	b.n	8001c1a <HAL_RCC_OscConfig+0x376>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d10c      	bne.n	8001c02 <HAL_RCC_OscConfig+0x35e>
 8001be8:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf4:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001c00:	e00b      	b.n	8001c1a <HAL_RCC_OscConfig+0x376>
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	4a5b      	ldr	r2, [pc, #364]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0e:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c14:	f023 0304 	bic.w	r3, r3, #4
 8001c18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d015      	beq.n	8001c4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff fa0f 	bl	8001044 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff fa0b 	bl	8001044 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0d8      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ee      	beq.n	8001c2a <HAL_RCC_OscConfig+0x386>
 8001c4c:	e014      	b.n	8001c78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f9f9 	bl	8001044 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f9f5 	bl	8001044 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0c2      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1ee      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d105      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a3c      	ldr	r2, [pc, #240]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80ae 	beq.w	8001df0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c94:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d06d      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d14b      	bne.n	8001d40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a31      	ldr	r2, [pc, #196]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f9c6 	bl	8001044 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f9c2 	bl	8001044 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e091      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	071b      	lsls	r3, r3, #28
 8001d06:	491b      	ldr	r1, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f994 	bl	8001044 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f990 	bl	8001044 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e05f      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x47c>
 8001d3e:	e057      	b.n	8001df0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f97a 	bl	8001044 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f976 	bl	8001044 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e045      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_OscConfig+0x4d0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4b0>
 8001d72:	e03d      	b.n	8001df0 <HAL_RCC_OscConfig+0x54c>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCC_OscConfig+0x558>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d030      	beq.n	8001dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d129      	bne.n	8001dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d122      	bne.n	8001dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001db2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d119      	bne.n	8001dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d10f      	bne.n	8001dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0d0      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 020f 	bic.w	r2, r3, #15
 8001e2e:	4965      	ldr	r1, [pc, #404]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b8      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	494d      	ldr	r1, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d040      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e073      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06b      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f8a6 	bl	8001044 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f8a2 	bl	8001044 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e053      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d210      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 020f 	bic.w	r2, r3, #15
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e032      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f92:	f000 f821 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490a      	ldr	r1, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x1cc>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1d4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f802 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	080040a0 	.word	0x080040a0
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b090      	sub	sp, #64	; 0x40
 8001fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff0:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d00d      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x40>
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	f200 80a1 	bhi.w	8002144 <HAL_RCC_GetSysClockFreq+0x16c>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x34>
 8002006:	2b04      	cmp	r3, #4
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x3a>
 800200a:	e09b      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_RCC_GetSysClockFreq+0x184>)
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002010:	e09b      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_GetSysClockFreq+0x188>)
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002016:	e098      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002018:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <HAL_RCC_GetSysClockFreq+0x180>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002022:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_GetSysClockFreq+0x180>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d028      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_GetSysClockFreq+0x180>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	2200      	movs	r2, #0
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	627a      	str	r2, [r7, #36]	; 0x24
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002040:	2100      	movs	r1, #0
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_GetSysClockFreq+0x188>)
 8002044:	fb03 f201 	mul.w	r2, r3, r1
 8002048:	2300      	movs	r3, #0
 800204a:	fb00 f303 	mul.w	r3, r0, r3
 800204e:	4413      	add	r3, r2
 8002050:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_RCC_GetSysClockFreq+0x188>)
 8002052:	fba0 1202 	umull	r1, r2, r0, r2
 8002056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002058:	460a      	mov	r2, r1
 800205a:	62ba      	str	r2, [r7, #40]	; 0x28
 800205c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800205e:	4413      	add	r3, r2
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	2200      	movs	r2, #0
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	61fa      	str	r2, [r7, #28]
 800206a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800206e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002072:	f7fe f8e1 	bl	8000238 <__aeabi_uldivmod>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4613      	mov	r3, r2
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207e:	e053      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <HAL_RCC_GetSysClockFreq+0x180>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	2200      	movs	r2, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	617a      	str	r2, [r7, #20]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002092:	f04f 0b00 	mov.w	fp, #0
 8002096:	4652      	mov	r2, sl
 8002098:	465b      	mov	r3, fp
 800209a:	f04f 0000 	mov.w	r0, #0
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	0159      	lsls	r1, r3, #5
 80020a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a8:	0150      	lsls	r0, r2, #5
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ebb2 080a 	subs.w	r8, r2, sl
 80020b2:	eb63 090b 	sbc.w	r9, r3, fp
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020ca:	ebb2 0408 	subs.w	r4, r2, r8
 80020ce:	eb63 0509 	sbc.w	r5, r3, r9
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	00eb      	lsls	r3, r5, #3
 80020dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020e0:	00e2      	lsls	r2, r4, #3
 80020e2:	4614      	mov	r4, r2
 80020e4:	461d      	mov	r5, r3
 80020e6:	eb14 030a 	adds.w	r3, r4, sl
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	eb45 030b 	adc.w	r3, r5, fp
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020fe:	4629      	mov	r1, r5
 8002100:	028b      	lsls	r3, r1, #10
 8002102:	4621      	mov	r1, r4
 8002104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002108:	4621      	mov	r1, r4
 800210a:	028a      	lsls	r2, r1, #10
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	2200      	movs	r2, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	60fa      	str	r2, [r7, #12]
 8002118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800211c:	f7fe f88c 	bl	8000238 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_GetSysClockFreq+0x180>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002142:	e002      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetSysClockFreq+0x184>)
 8002146:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800214c:	4618      	mov	r0, r3
 800214e:	3740      	adds	r7, #64	; 0x40
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	00f42400 	.word	0x00f42400
 8002160:	017d7840 	.word	0x017d7840

08002164 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff0 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a9b      	lsrs	r3, r3, #10
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	080040b0 	.word	0x080040b0

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffdc 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0b5b      	lsrs	r3, r3, #13
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	080040b0 	.word	0x080040b0

080021cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021f4:	4b69      	ldr	r3, [pc, #420]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a68      	ldr	r2, [pc, #416]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021fe:	6093      	str	r3, [r2, #8]
 8002200:	4b66      	ldr	r3, [pc, #408]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	4964      	ldr	r1, [pc, #400]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002216:	2301      	movs	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	4959      	ldr	r1, [pc, #356]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002244:	d101      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d017      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002262:	4b4e      	ldr	r3, [pc, #312]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002268:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	494a      	ldr	r1, [pc, #296]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002280:	d101      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800229e:	2301      	movs	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 808b 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	4a39      	ldr	r2, [pc, #228]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6413      	str	r3, [r2, #64]	; 0x40
 80022bc:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe feb6 	bl	8001044 <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022dc:	f7fe feb2 	bl	8001044 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e38f      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002302:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d035      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	d02e      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002320:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002338:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800233a:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d114      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fe7a 	bl	8001044 <HAL_GetTick>
 8002350:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe fe76 	bl	8001044 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e351      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ee      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002382:	d111      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002392:	400b      	ands	r3, r1
 8002394:	4901      	ldr	r1, [pc, #4]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
 800239a:	e00b      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000
 80023a4:	0ffffcff 	.word	0x0ffffcff
 80023a8:	4bac      	ldr	r3, [pc, #688]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4aab      	ldr	r2, [pc, #684]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023b2:	6093      	str	r3, [r2, #8]
 80023b4:	4ba9      	ldr	r3, [pc, #676]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	49a6      	ldr	r1, [pc, #664]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d010      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023d2:	4ba2      	ldr	r3, [pc, #648]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d8:	4aa0      	ldr	r2, [pc, #640]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023e2:	4b9e      	ldr	r3, [pc, #632]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	499b      	ldr	r1, [pc, #620]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002400:	4b96      	ldr	r3, [pc, #600]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240e:	4993      	ldr	r1, [pc, #588]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002422:	4b8e      	ldr	r3, [pc, #568]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002430:	498a      	ldr	r1, [pc, #552]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002444:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002452:	4982      	ldr	r1, [pc, #520]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002466:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4979      	ldr	r1, [pc, #484]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002488:	4b74      	ldr	r3, [pc, #464]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4971      	ldr	r1, [pc, #452]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f023 020c 	bic.w	r2, r3, #12
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	4968      	ldr	r1, [pc, #416]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024cc:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4960      	ldr	r1, [pc, #384]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fc:	4957      	ldr	r1, [pc, #348]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002510:	4b52      	ldr	r3, [pc, #328]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	494f      	ldr	r1, [pc, #316]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4946      	ldr	r1, [pc, #280]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002554:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	493e      	ldr	r1, [pc, #248]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002598:	4b30      	ldr	r3, [pc, #192]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a6:	492d      	ldr	r1, [pc, #180]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d011      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c8:	4924      	ldr	r1, [pc, #144]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002608:	4914      	ldr	r1, [pc, #80]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262c:	490b      	ldr	r1, [pc, #44]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00f      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	4902      	ldr	r1, [pc, #8]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002658:	e002      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800266c:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002672:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	4986      	ldr	r1, [pc, #536]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002690:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a0:	497d      	ldr	r1, [pc, #500]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d006      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80d6 	beq.w	8002868 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026bc:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a75      	ldr	r2, [pc, #468]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c8:	f7fe fcbc 	bl	8001044 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026d0:	f7fe fcb8 	bl	8001044 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e195      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026e2:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d021      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11d      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002716:	0e1b      	lsrs	r3, r3, #24
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	019a      	lsls	r2, r3, #6
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	071b      	lsls	r3, r3, #28
 8002736:	4958      	ldr	r1, [pc, #352]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02e      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002768:	d129      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800276c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277e:	0f1b      	lsrs	r3, r3, #28
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	019a      	lsls	r2, r3, #6
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	041b      	lsls	r3, r3, #16
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	071b      	lsls	r3, r3, #28
 800279e:	493e      	ldr	r1, [pc, #248]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ac:	f023 021f 	bic.w	r2, r3, #31
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	3b01      	subs	r3, #1
 80027b6:	4938      	ldr	r1, [pc, #224]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01d      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d0:	0e1b      	lsrs	r3, r3, #24
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027d8:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027de:	0f1b      	lsrs	r3, r3, #28
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	019a      	lsls	r2, r3, #6
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	071b      	lsls	r3, r3, #28
 80027fe:	4926      	ldr	r1, [pc, #152]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	019a      	lsls	r2, r3, #6
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	071b      	lsls	r3, r3, #28
 800282e:	491a      	ldr	r1, [pc, #104]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002842:	f7fe fbff 	bl	8001044 <HAL_GetTick>
 8002846:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800284a:	f7fe fbfb 	bl	8001044 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b64      	cmp	r3, #100	; 0x64
 8002856:	d901      	bls.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0d8      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	f040 80ce 	bne.w	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287c:	f7fe fbe2 	bl	8001044 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002882:	e00b      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002884:	f7fe fbde 	bl	8001044 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d904      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0bb      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800289c:	4b5e      	ldr	r3, [pc, #376]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a8:	d0ec      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d02e      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d12a      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028e0:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	0f1b      	lsrs	r3, r3, #28
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	019a      	lsls	r2, r3, #6
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	431a      	orrs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	4944      	ldr	r1, [pc, #272]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800290e:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002914:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	493d      	ldr	r1, [pc, #244]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d022      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293c:	d11d      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	0e1b      	lsrs	r3, r3, #24
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800294c:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	0f1b      	lsrs	r3, r3, #28
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	019a      	lsls	r2, r3, #6
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	041b      	lsls	r3, r3, #16
 8002966:	431a      	orrs	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	071b      	lsls	r3, r3, #28
 8002972:	4929      	ldr	r1, [pc, #164]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d028      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	0e1b      	lsrs	r3, r3, #24
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	019a      	lsls	r2, r3, #6
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	071b      	lsls	r3, r3, #28
 80029ba:	4917      	ldr	r1, [pc, #92]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	4911      	ldr	r1, [pc, #68]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e4:	f7fe fb2e 	bl	8001044 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029ec:	f7fe fb2a 	bl	8001044 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e007      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a0a:	d1ef      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e040      	b.n	8002ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe f9d8 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fb82 	bl	8003164 <UART_SetConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fdda 	bl	800362c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fe61 	bl	8003770 <UART_CheckIdleState>
 8002aae:	4603      	mov	r3, r0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d132      	bne.n	8002b36 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Receive_IT+0x24>
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e02b      	b.n	8002b38 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d018      	beq.n	8002b26 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	613b      	str	r3, [r7, #16]
   return(result);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	69f9      	ldr	r1, [r7, #28]
 8002b18:	6a3a      	ldr	r2, [r7, #32]
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e6      	bne.n	8002af4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 ff33 	bl	8003998 <UART_Start_Receive_IT>
 8002b32:	4603      	mov	r3, r0
 8002b34:	e000      	b.n	8002b38 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0ba      	sub	sp, #232	; 0xe8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b6e:	4013      	ands	r3, r2
 8002b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d115      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00f      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 82ac 	beq.w	80030f6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
      }
      return;
 8002ba6:	e2a6      	b.n	80030f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8117 	beq.w	8002de0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bc2:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <HAL_UART_IRQHandler+0x298>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 810a 	beq.w	8002de0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d011      	beq.n	8002bfc <HAL_UART_IRQHandler+0xbc>
 8002bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d011      	beq.n	8002c2c <HAL_UART_IRQHandler+0xec>
 8002c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d011      	beq.n	8002c5c <HAL_UART_IRQHandler+0x11c>
 8002c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d017      	beq.n	8002c98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2208      	movs	r2, #8
 8002c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8e:	f043 0208 	orr.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d012      	beq.n	8002cca <HAL_UART_IRQHandler+0x18a>
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8212 	beq.w	80030fa <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d005      	beq.n	8002d22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d04f      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fefe 	bl	8003b24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d141      	bne.n	8002dba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1d9      	bne.n	8002d36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d013      	beq.n	8002db2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_UART_IRQHandler+0x29c>)
 8002d90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fb82 	bl	80014a0 <HAL_DMA_Abort_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d017      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dac:	4610      	mov	r0, r2
 8002dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e00f      	b.n	8002dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9b6 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e00b      	b.n	8002dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9b2 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e007      	b.n	8002dd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f9ae 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002dd0:	e193      	b.n	80030fa <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd2:	bf00      	nop
    return;
 8002dd4:	e191      	b.n	80030fa <HAL_UART_IRQHandler+0x5ba>
 8002dd6:	bf00      	nop
 8002dd8:	04000120 	.word	0x04000120
 8002ddc:	08003bed 	.word	0x08003bed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f040 814c 	bne.w	8003082 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8145 	beq.w	8003082 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 813e 	beq.w	8003082 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	f040 80b6 	bne.w	8002f8a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8165 	beq.w	80030fe <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	f080 815d 	bcs.w	80030fe <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e58:	f000 8086 	beq.w	8002f68 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1da      	bne.n	8002e5c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3308      	adds	r3, #8
 8002eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e1      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e3      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	f023 0310 	bic.w	r3, r3, #16
 8002f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e4      	bne.n	8002f28 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa2c 	bl	80013c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8d8 	bl	8003138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f88:	e0b9      	b.n	80030fe <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80ab 	beq.w	8003102 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a6 	beq.w	8003102 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e4      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3308      	adds	r3, #8
 800300c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003010:	633a      	str	r2, [r7, #48]	; 0x30
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e3      	bne.n	8002fec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	60fb      	str	r3, [r7, #12]
   return(result);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f023 0310 	bic.w	r3, r3, #16
 800304c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	617b      	str	r3, [r7, #20]
   return(result);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e4      	bne.n	8003038 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f85c 	bl	8003138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003080:	e03f      	b.n	8003102 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <HAL_UART_IRQHandler+0x56c>
 800308e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f853 	bl	8003150 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030aa:	e02d      	b.n	8003108 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01c      	beq.n	8003106 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
    }
    return;
 80030d4:	e017      	b.n	8003106 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <HAL_UART_IRQHandler+0x5c8>
 80030e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fd92 	bl	8003c18 <UART_EndTransmit_IT>
    return;
 80030f4:	e008      	b.n	8003108 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030f6:	bf00      	nop
 80030f8:	e006      	b.n	8003108 <HAL_UART_IRQHandler+0x5c8>
    return;
 80030fa:	bf00      	nop
 80030fc:	e004      	b.n	8003108 <HAL_UART_IRQHandler+0x5c8>
      return;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003106:	bf00      	nop
  }

}
 8003108:	37e8      	adds	r7, #232	; 0xe8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop

08003110 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4ba6      	ldr	r3, [pc, #664]	; (8003428 <UART_SetConfig+0x2c4>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	6979      	ldr	r1, [r7, #20]
 8003198:	430b      	orrs	r3, r1
 800319a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a94      	ldr	r2, [pc, #592]	; (800342c <UART_SetConfig+0x2c8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d120      	bne.n	8003222 <UART_SetConfig+0xbe>
 80031e0:	4b93      	ldr	r3, [pc, #588]	; (8003430 <UART_SetConfig+0x2cc>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d816      	bhi.n	800321c <UART_SetConfig+0xb8>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x90>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003205 	.word	0x08003205
 80031f8:	08003211 	.word	0x08003211
 80031fc:	0800320b 	.word	0x0800320b
 8003200:	08003217 	.word	0x08003217
 8003204:	2301      	movs	r3, #1
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e150      	b.n	80034ac <UART_SetConfig+0x348>
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e14d      	b.n	80034ac <UART_SetConfig+0x348>
 8003210:	2304      	movs	r3, #4
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e14a      	b.n	80034ac <UART_SetConfig+0x348>
 8003216:	2308      	movs	r3, #8
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e147      	b.n	80034ac <UART_SetConfig+0x348>
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e144      	b.n	80034ac <UART_SetConfig+0x348>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a83      	ldr	r2, [pc, #524]	; (8003434 <UART_SetConfig+0x2d0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d132      	bne.n	8003292 <UART_SetConfig+0x12e>
 800322c:	4b80      	ldr	r3, [pc, #512]	; (8003430 <UART_SetConfig+0x2cc>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d828      	bhi.n	800328c <UART_SetConfig+0x128>
 800323a:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <UART_SetConfig+0xdc>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	08003275 	.word	0x08003275
 8003244:	0800328d 	.word	0x0800328d
 8003248:	0800328d 	.word	0x0800328d
 800324c:	0800328d 	.word	0x0800328d
 8003250:	08003281 	.word	0x08003281
 8003254:	0800328d 	.word	0x0800328d
 8003258:	0800328d 	.word	0x0800328d
 800325c:	0800328d 	.word	0x0800328d
 8003260:	0800327b 	.word	0x0800327b
 8003264:	0800328d 	.word	0x0800328d
 8003268:	0800328d 	.word	0x0800328d
 800326c:	0800328d 	.word	0x0800328d
 8003270:	08003287 	.word	0x08003287
 8003274:	2300      	movs	r3, #0
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e118      	b.n	80034ac <UART_SetConfig+0x348>
 800327a:	2302      	movs	r3, #2
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	e115      	b.n	80034ac <UART_SetConfig+0x348>
 8003280:	2304      	movs	r3, #4
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e112      	b.n	80034ac <UART_SetConfig+0x348>
 8003286:	2308      	movs	r3, #8
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e10f      	b.n	80034ac <UART_SetConfig+0x348>
 800328c:	2310      	movs	r3, #16
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e10c      	b.n	80034ac <UART_SetConfig+0x348>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a68      	ldr	r2, [pc, #416]	; (8003438 <UART_SetConfig+0x2d4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d120      	bne.n	80032de <UART_SetConfig+0x17a>
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <UART_SetConfig+0x2cc>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032a6:	2b30      	cmp	r3, #48	; 0x30
 80032a8:	d013      	beq.n	80032d2 <UART_SetConfig+0x16e>
 80032aa:	2b30      	cmp	r3, #48	; 0x30
 80032ac:	d814      	bhi.n	80032d8 <UART_SetConfig+0x174>
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d009      	beq.n	80032c6 <UART_SetConfig+0x162>
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d810      	bhi.n	80032d8 <UART_SetConfig+0x174>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <UART_SetConfig+0x15c>
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d006      	beq.n	80032cc <UART_SetConfig+0x168>
 80032be:	e00b      	b.n	80032d8 <UART_SetConfig+0x174>
 80032c0:	2300      	movs	r3, #0
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e0f2      	b.n	80034ac <UART_SetConfig+0x348>
 80032c6:	2302      	movs	r3, #2
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e0ef      	b.n	80034ac <UART_SetConfig+0x348>
 80032cc:	2304      	movs	r3, #4
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e0ec      	b.n	80034ac <UART_SetConfig+0x348>
 80032d2:	2308      	movs	r3, #8
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e0e9      	b.n	80034ac <UART_SetConfig+0x348>
 80032d8:	2310      	movs	r3, #16
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e0e6      	b.n	80034ac <UART_SetConfig+0x348>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a56      	ldr	r2, [pc, #344]	; (800343c <UART_SetConfig+0x2d8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d120      	bne.n	800332a <UART_SetConfig+0x1c6>
 80032e8:	4b51      	ldr	r3, [pc, #324]	; (8003430 <UART_SetConfig+0x2cc>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032f2:	2bc0      	cmp	r3, #192	; 0xc0
 80032f4:	d013      	beq.n	800331e <UART_SetConfig+0x1ba>
 80032f6:	2bc0      	cmp	r3, #192	; 0xc0
 80032f8:	d814      	bhi.n	8003324 <UART_SetConfig+0x1c0>
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d009      	beq.n	8003312 <UART_SetConfig+0x1ae>
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d810      	bhi.n	8003324 <UART_SetConfig+0x1c0>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <UART_SetConfig+0x1a8>
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d006      	beq.n	8003318 <UART_SetConfig+0x1b4>
 800330a:	e00b      	b.n	8003324 <UART_SetConfig+0x1c0>
 800330c:	2300      	movs	r3, #0
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e0cc      	b.n	80034ac <UART_SetConfig+0x348>
 8003312:	2302      	movs	r3, #2
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e0c9      	b.n	80034ac <UART_SetConfig+0x348>
 8003318:	2304      	movs	r3, #4
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e0c6      	b.n	80034ac <UART_SetConfig+0x348>
 800331e:	2308      	movs	r3, #8
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e0c3      	b.n	80034ac <UART_SetConfig+0x348>
 8003324:	2310      	movs	r3, #16
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e0c0      	b.n	80034ac <UART_SetConfig+0x348>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a44      	ldr	r2, [pc, #272]	; (8003440 <UART_SetConfig+0x2dc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d125      	bne.n	8003380 <UART_SetConfig+0x21c>
 8003334:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <UART_SetConfig+0x2cc>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003342:	d017      	beq.n	8003374 <UART_SetConfig+0x210>
 8003344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003348:	d817      	bhi.n	800337a <UART_SetConfig+0x216>
 800334a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334e:	d00b      	beq.n	8003368 <UART_SetConfig+0x204>
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d811      	bhi.n	800337a <UART_SetConfig+0x216>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <UART_SetConfig+0x1fe>
 800335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335e:	d006      	beq.n	800336e <UART_SetConfig+0x20a>
 8003360:	e00b      	b.n	800337a <UART_SetConfig+0x216>
 8003362:	2300      	movs	r3, #0
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e0a1      	b.n	80034ac <UART_SetConfig+0x348>
 8003368:	2302      	movs	r3, #2
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e09e      	b.n	80034ac <UART_SetConfig+0x348>
 800336e:	2304      	movs	r3, #4
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e09b      	b.n	80034ac <UART_SetConfig+0x348>
 8003374:	2308      	movs	r3, #8
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e098      	b.n	80034ac <UART_SetConfig+0x348>
 800337a:	2310      	movs	r3, #16
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e095      	b.n	80034ac <UART_SetConfig+0x348>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <UART_SetConfig+0x2e0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d125      	bne.n	80033d6 <UART_SetConfig+0x272>
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <UART_SetConfig+0x2cc>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003398:	d017      	beq.n	80033ca <UART_SetConfig+0x266>
 800339a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800339e:	d817      	bhi.n	80033d0 <UART_SetConfig+0x26c>
 80033a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a4:	d00b      	beq.n	80033be <UART_SetConfig+0x25a>
 80033a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033aa:	d811      	bhi.n	80033d0 <UART_SetConfig+0x26c>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <UART_SetConfig+0x254>
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d006      	beq.n	80033c4 <UART_SetConfig+0x260>
 80033b6:	e00b      	b.n	80033d0 <UART_SetConfig+0x26c>
 80033b8:	2301      	movs	r3, #1
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e076      	b.n	80034ac <UART_SetConfig+0x348>
 80033be:	2302      	movs	r3, #2
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e073      	b.n	80034ac <UART_SetConfig+0x348>
 80033c4:	2304      	movs	r3, #4
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e070      	b.n	80034ac <UART_SetConfig+0x348>
 80033ca:	2308      	movs	r3, #8
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e06d      	b.n	80034ac <UART_SetConfig+0x348>
 80033d0:	2310      	movs	r3, #16
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e06a      	b.n	80034ac <UART_SetConfig+0x348>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <UART_SetConfig+0x2e4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d138      	bne.n	8003452 <UART_SetConfig+0x2ee>
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <UART_SetConfig+0x2cc>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033ee:	d017      	beq.n	8003420 <UART_SetConfig+0x2bc>
 80033f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033f4:	d82a      	bhi.n	800344c <UART_SetConfig+0x2e8>
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	d00b      	beq.n	8003414 <UART_SetConfig+0x2b0>
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003400:	d824      	bhi.n	800344c <UART_SetConfig+0x2e8>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <UART_SetConfig+0x2aa>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	d006      	beq.n	800341a <UART_SetConfig+0x2b6>
 800340c:	e01e      	b.n	800344c <UART_SetConfig+0x2e8>
 800340e:	2300      	movs	r3, #0
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e04b      	b.n	80034ac <UART_SetConfig+0x348>
 8003414:	2302      	movs	r3, #2
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e048      	b.n	80034ac <UART_SetConfig+0x348>
 800341a:	2304      	movs	r3, #4
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e045      	b.n	80034ac <UART_SetConfig+0x348>
 8003420:	2308      	movs	r3, #8
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e042      	b.n	80034ac <UART_SetConfig+0x348>
 8003426:	bf00      	nop
 8003428:	efff69f3 	.word	0xefff69f3
 800342c:	40011000 	.word	0x40011000
 8003430:	40023800 	.word	0x40023800
 8003434:	40004400 	.word	0x40004400
 8003438:	40004800 	.word	0x40004800
 800343c:	40004c00 	.word	0x40004c00
 8003440:	40005000 	.word	0x40005000
 8003444:	40011400 	.word	0x40011400
 8003448:	40007800 	.word	0x40007800
 800344c:	2310      	movs	r3, #16
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e02c      	b.n	80034ac <UART_SetConfig+0x348>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a72      	ldr	r2, [pc, #456]	; (8003620 <UART_SetConfig+0x4bc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d125      	bne.n	80034a8 <UART_SetConfig+0x344>
 800345c:	4b71      	ldr	r3, [pc, #452]	; (8003624 <UART_SetConfig+0x4c0>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003466:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800346a:	d017      	beq.n	800349c <UART_SetConfig+0x338>
 800346c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003470:	d817      	bhi.n	80034a2 <UART_SetConfig+0x33e>
 8003472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003476:	d00b      	beq.n	8003490 <UART_SetConfig+0x32c>
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347c:	d811      	bhi.n	80034a2 <UART_SetConfig+0x33e>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <UART_SetConfig+0x326>
 8003482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003486:	d006      	beq.n	8003496 <UART_SetConfig+0x332>
 8003488:	e00b      	b.n	80034a2 <UART_SetConfig+0x33e>
 800348a:	2300      	movs	r3, #0
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e00d      	b.n	80034ac <UART_SetConfig+0x348>
 8003490:	2302      	movs	r3, #2
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e00a      	b.n	80034ac <UART_SetConfig+0x348>
 8003496:	2304      	movs	r3, #4
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e007      	b.n	80034ac <UART_SetConfig+0x348>
 800349c:	2308      	movs	r3, #8
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e004      	b.n	80034ac <UART_SetConfig+0x348>
 80034a2:	2310      	movs	r3, #16
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e001      	b.n	80034ac <UART_SetConfig+0x348>
 80034a8:	2310      	movs	r3, #16
 80034aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b4:	d15b      	bne.n	800356e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d828      	bhi.n	800350e <UART_SetConfig+0x3aa>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0x360>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	080034f1 	.word	0x080034f1
 80034cc:	080034f9 	.word	0x080034f9
 80034d0:	0800350f 	.word	0x0800350f
 80034d4:	080034ff 	.word	0x080034ff
 80034d8:	0800350f 	.word	0x0800350f
 80034dc:	0800350f 	.word	0x0800350f
 80034e0:	0800350f 	.word	0x0800350f
 80034e4:	08003507 	.word	0x08003507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e8:	f7fe fe48 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80034ec:	61b8      	str	r0, [r7, #24]
        break;
 80034ee:	e013      	b.n	8003518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f0:	f7fe fe58 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80034f4:	61b8      	str	r0, [r7, #24]
        break;
 80034f6:	e00f      	b.n	8003518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f8:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <UART_SetConfig+0x4c4>)
 80034fa:	61bb      	str	r3, [r7, #24]
        break;
 80034fc:	e00c      	b.n	8003518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fe:	f7fe fd6b 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8003502:	61b8      	str	r0, [r7, #24]
        break;
 8003504:	e008      	b.n	8003518 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350a:	61bb      	str	r3, [r7, #24]
        break;
 800350c:	e004      	b.n	8003518 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	77bb      	strb	r3, [r7, #30]
        break;
 8003516:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d074      	beq.n	8003608 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	005a      	lsls	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	441a      	add	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d916      	bls.n	8003568 <UART_SetConfig+0x404>
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d212      	bcs.n	8003568 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f023 030f 	bic.w	r3, r3, #15
 800354a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	b29a      	uxth	r2, r3
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	4313      	orrs	r3, r2
 800355c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	89fa      	ldrh	r2, [r7, #14]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	e04f      	b.n	8003608 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	77bb      	strb	r3, [r7, #30]
 800356c:	e04c      	b.n	8003608 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d828      	bhi.n	80035c6 <UART_SetConfig+0x462>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0x418>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035b1 	.word	0x080035b1
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035b7 	.word	0x080035b7
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035c7 	.word	0x080035c7
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035bf 	.word	0x080035bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7fe fdec 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 80035a4:	61b8      	str	r0, [r7, #24]
        break;
 80035a6:	e013      	b.n	80035d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a8:	f7fe fdfc 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80035ac:	61b8      	str	r0, [r7, #24]
        break;
 80035ae:	e00f      	b.n	80035d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <UART_SetConfig+0x4c4>)
 80035b2:	61bb      	str	r3, [r7, #24]
        break;
 80035b4:	e00c      	b.n	80035d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b6:	f7fe fd0f 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80035ba:	61b8      	str	r0, [r7, #24]
        break;
 80035bc:	e008      	b.n	80035d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c2:	61bb      	str	r3, [r7, #24]
        break;
 80035c4:	e004      	b.n	80035d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	77bb      	strb	r3, [r7, #30]
        break;
 80035ce:	bf00      	nop
    }

    if (pclk != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d018      	beq.n	8003608 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	085a      	lsrs	r2, r3, #1
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	441a      	add	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d909      	bls.n	8003604 <UART_SetConfig+0x4a0>
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f6:	d205      	bcs.n	8003604 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	e001      	b.n	8003608 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003614:	7fbb      	ldrb	r3, [r7, #30]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40007c00 	.word	0x40007c00
 8003624:	40023800 	.word	0x40023800
 8003628:	00f42400 	.word	0x00f42400

0800362c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01a      	beq.n	8003742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372a:	d10a      	bne.n	8003742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003780:	f7fd fc60 	bl	8001044 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d10e      	bne.n	80037b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f831 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e027      	b.n	8003802 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d10e      	bne.n	80037de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f81b 	bl	800380a <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e011      	b.n	8003802 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b09c      	sub	sp, #112	; 0x70
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381a:	e0a7      	b.n	800396c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	f000 80a3 	beq.w	800396c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fd fc0d 	bl	8001044 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <UART_WaitOnFlagUntilTimeout+0x32>
 8003836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003838:	2b00      	cmp	r3, #0
 800383a:	d13f      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003850:	667b      	str	r3, [r7, #100]	; 0x64
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800385a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800385c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e6      	bne.n	800383c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	663b      	str	r3, [r7, #96]	; 0x60
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800388e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003890:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e5      	bne.n	800386e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e068      	b.n	800398e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d050      	beq.n	800396c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d8:	d148      	bne.n	800396c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
 8003904:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e6      	bne.n	80038e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	613b      	str	r3, [r7, #16]
   return(result);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	66bb      	str	r3, [r7, #104]	; 0x68
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3308      	adds	r3, #8
 8003934:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003936:	623a      	str	r2, [r7, #32]
 8003938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	69f9      	ldr	r1, [r7, #28]
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	61bb      	str	r3, [r7, #24]
   return(result);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e5      	bne.n	8003916 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e010      	b.n	800398e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	429a      	cmp	r2, r3
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	429a      	cmp	r2, r3
 8003988:	f43f af48 	beq.w	800381c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3770      	adds	r7, #112	; 0x70
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003998:	b480      	push	{r7}
 800399a:	b097      	sub	sp, #92	; 0x5c
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	88fa      	ldrh	r2, [r7, #6]
 80039b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	d10e      	bne.n	80039ea <UART_Start_Receive_IT+0x52>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <UART_Start_Receive_IT+0x48>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039de:	e02d      	b.n	8003a3c <UART_Start_Receive_IT+0xa4>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039e8:	e028      	b.n	8003a3c <UART_Start_Receive_IT+0xa4>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <UART_Start_Receive_IT+0x76>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <UART_Start_Receive_IT+0x6c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a02:	e01b      	b.n	8003a3c <UART_Start_Receive_IT+0xa4>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	227f      	movs	r2, #127	; 0x7f
 8003a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a0c:	e016      	b.n	8003a3c <UART_Start_Receive_IT+0xa4>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a16:	d10d      	bne.n	8003a34 <UART_Start_Receive_IT+0x9c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <UART_Start_Receive_IT+0x92>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	227f      	movs	r2, #127	; 0x7f
 8003a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a28:	e008      	b.n	8003a3c <UART_Start_Receive_IT+0xa4>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	223f      	movs	r2, #63	; 0x3f
 8003a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a32:	e003      	b.n	8003a3c <UART_Start_Receive_IT+0xa4>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2222      	movs	r2, #34	; 0x22
 8003a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3308      	adds	r3, #8
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	657b      	str	r3, [r7, #84]	; 0x54
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a6c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e5      	bne.n	8003a4c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a88:	d107      	bne.n	8003a9a <UART_Start_Receive_IT+0x102>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <UART_Start_Receive_IT+0x184>)
 8003a96:	669a      	str	r2, [r3, #104]	; 0x68
 8003a98:	e002      	b.n	8003aa0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <UART_Start_Receive_IT+0x188>)
 8003a9e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d019      	beq.n	8003adc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_Start_Receive_IT+0x110>
 8003ada:	e018      	b.n	8003b0e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f043 0320 	orr.w	r3, r3, #32
 8003af0:	653b      	str	r3, [r7, #80]	; 0x50
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	69f9      	ldr	r1, [r7, #28]
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e6      	bne.n	8003adc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	375c      	adds	r7, #92	; 0x5c
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	08003dd3 	.word	0x08003dd3
 8003b20:	08003c6d 	.word	0x08003c6d

08003b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b095      	sub	sp, #84	; 0x54
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e6      	bne.n	8003b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d118      	bne.n	8003bcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f023 0310 	bic.w	r3, r3, #16
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6979      	ldr	r1, [r7, #20]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e6      	bne.n	8003b9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003be0:	bf00      	nop
 8003be2:	3754      	adds	r7, #84	; 0x54
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff fa8a 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fa56 	bl	8003110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c64:	bf00      	nop
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b096      	sub	sp, #88	; 0x58
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c7a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c84:	2b22      	cmp	r3, #34	; 0x22
 8003c86:	f040 8098 	bne.w	8003dba <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c94:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c98:	b2d9      	uxtb	r1, r3
 8003c9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d17b      	bne.n	8003dca <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e6      	bne.n	8003cd2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	623b      	str	r3, [r7, #32]
   return(result);
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3308      	adds	r3, #8
 8003d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d24:	633a      	str	r2, [r7, #48]	; 0x30
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e5      	bne.n	8003d04 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d12e      	bne.n	8003db2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	69b9      	ldr	r1, [r7, #24]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	617b      	str	r3, [r7, #20]
   return(result);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d103      	bne.n	8003da2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2210      	movs	r2, #16
 8003da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff f9c4 	bl	8003138 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003db0:	e00b      	b.n	8003dca <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fc ff9c 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 8003db8:	e007      	b.n	8003dca <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	619a      	str	r2, [r3, #24]
}
 8003dca:	bf00      	nop
 8003dcc:	3758      	adds	r7, #88	; 0x58
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b096      	sub	sp, #88	; 0x58
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003de0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dea:	2b22      	cmp	r3, #34	; 0x22
 8003dec:	f040 8098 	bne.w	8003f20 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e00:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003e04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d17b      	bne.n	8003f30 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40
 8003e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d12e      	bne.n	8003f18 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f023 0310 	bic.w	r3, r3, #16
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6979      	ldr	r1, [r7, #20]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	613b      	str	r3, [r7, #16]
   return(result);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e6      	bne.n	8003ec0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d103      	bne.n	8003f08 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2210      	movs	r2, #16
 8003f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff f911 	bl	8003138 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f16:	e00b      	b.n	8003f30 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc fee9 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 8003f1e:	e007      	b.n	8003f30 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0208 	orr.w	r2, r2, #8
 8003f2e:	619a      	str	r2, [r3, #24]
}
 8003f30:	bf00      	nop
 8003f32:	3758      	adds	r7, #88	; 0x58
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <__libc_init_array>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4d0d      	ldr	r5, [pc, #52]	; (8003f70 <__libc_init_array+0x38>)
 8003f3c:	4c0d      	ldr	r4, [pc, #52]	; (8003f74 <__libc_init_array+0x3c>)
 8003f3e:	1b64      	subs	r4, r4, r5
 8003f40:	10a4      	asrs	r4, r4, #2
 8003f42:	2600      	movs	r6, #0
 8003f44:	42a6      	cmp	r6, r4
 8003f46:	d109      	bne.n	8003f5c <__libc_init_array+0x24>
 8003f48:	4d0b      	ldr	r5, [pc, #44]	; (8003f78 <__libc_init_array+0x40>)
 8003f4a:	4c0c      	ldr	r4, [pc, #48]	; (8003f7c <__libc_init_array+0x44>)
 8003f4c:	f000 f898 	bl	8004080 <_init>
 8003f50:	1b64      	subs	r4, r4, r5
 8003f52:	10a4      	asrs	r4, r4, #2
 8003f54:	2600      	movs	r6, #0
 8003f56:	42a6      	cmp	r6, r4
 8003f58:	d105      	bne.n	8003f66 <__libc_init_array+0x2e>
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f60:	4798      	blx	r3
 8003f62:	3601      	adds	r6, #1
 8003f64:	e7ee      	b.n	8003f44 <__libc_init_array+0xc>
 8003f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6a:	4798      	blx	r3
 8003f6c:	3601      	adds	r6, #1
 8003f6e:	e7f2      	b.n	8003f56 <__libc_init_array+0x1e>
 8003f70:	080040c0 	.word	0x080040c0
 8003f74:	080040c0 	.word	0x080040c0
 8003f78:	080040c0 	.word	0x080040c0
 8003f7c:	080040c4 	.word	0x080040c4

08003f80 <memset>:
 8003f80:	4402      	add	r2, r0
 8003f82:	4603      	mov	r3, r0
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d100      	bne.n	8003f8a <memset+0xa>
 8003f88:	4770      	bx	lr
 8003f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8e:	e7f9      	b.n	8003f84 <memset+0x4>

08003f90 <ceil>:
 8003f90:	ee10 1a90 	vmov	r1, s1
 8003f94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003f98:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8003f9c:	2b13      	cmp	r3, #19
 8003f9e:	b530      	push	{r4, r5, lr}
 8003fa0:	ee10 0a10 	vmov	r0, s0
 8003fa4:	ee10 5a10 	vmov	r5, s0
 8003fa8:	dc2f      	bgt.n	800400a <ceil+0x7a>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da13      	bge.n	8003fd6 <ceil+0x46>
 8003fae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8004070 <ceil+0xe0>
 8003fb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8003fb6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbe:	dd05      	ble.n	8003fcc <ceil+0x3c>
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	db4c      	blt.n	800405e <ceil+0xce>
 8003fc4:	4301      	orrs	r1, r0
 8003fc6:	d04e      	beq.n	8004066 <ceil+0xd6>
 8003fc8:	492b      	ldr	r1, [pc, #172]	; (8004078 <ceil+0xe8>)
 8003fca:	2000      	movs	r0, #0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4602      	mov	r2, r0
 8003fd0:	ec43 2b10 	vmov	d0, r2, r3
 8003fd4:	e020      	b.n	8004018 <ceil+0x88>
 8003fd6:	4a29      	ldr	r2, [pc, #164]	; (800407c <ceil+0xec>)
 8003fd8:	411a      	asrs	r2, r3
 8003fda:	ea01 0402 	and.w	r4, r1, r2
 8003fde:	4304      	orrs	r4, r0
 8003fe0:	d01a      	beq.n	8004018 <ceil+0x88>
 8003fe2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8004070 <ceil+0xe0>
 8003fe6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8003fea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff2:	ddeb      	ble.n	8003fcc <ceil+0x3c>
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	bfc2      	ittt	gt
 8003ff8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8003ffc:	fa40 f303 	asrgt.w	r3, r0, r3
 8004000:	18c9      	addgt	r1, r1, r3
 8004002:	ea21 0102 	bic.w	r1, r1, r2
 8004006:	2000      	movs	r0, #0
 8004008:	e7e0      	b.n	8003fcc <ceil+0x3c>
 800400a:	2b33      	cmp	r3, #51	; 0x33
 800400c:	dd05      	ble.n	800401a <ceil+0x8a>
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004012:	d101      	bne.n	8004018 <ceil+0x88>
 8004014:	ee30 0b00 	vadd.f64	d0, d0, d0
 8004018:	bd30      	pop	{r4, r5, pc}
 800401a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	40e2      	lsrs	r2, r4
 8004024:	4202      	tst	r2, r0
 8004026:	d0f7      	beq.n	8004018 <ceil+0x88>
 8004028:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8004070 <ceil+0xe0>
 800402c:	ee30 0b07 	vadd.f64	d0, d0, d7
 8004030:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004038:	ddc8      	ble.n	8003fcc <ceil+0x3c>
 800403a:	2900      	cmp	r1, #0
 800403c:	dd02      	ble.n	8004044 <ceil+0xb4>
 800403e:	2b14      	cmp	r3, #20
 8004040:	d103      	bne.n	800404a <ceil+0xba>
 8004042:	3101      	adds	r1, #1
 8004044:	ea20 0002 	bic.w	r0, r0, r2
 8004048:	e7c0      	b.n	8003fcc <ceil+0x3c>
 800404a:	2401      	movs	r4, #1
 800404c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004050:	fa04 f303 	lsl.w	r3, r4, r3
 8004054:	4418      	add	r0, r3
 8004056:	42a8      	cmp	r0, r5
 8004058:	bf38      	it	cc
 800405a:	1909      	addcc	r1, r1, r4
 800405c:	e7f2      	b.n	8004044 <ceil+0xb4>
 800405e:	2000      	movs	r0, #0
 8004060:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004064:	e7b2      	b.n	8003fcc <ceil+0x3c>
 8004066:	4608      	mov	r0, r1
 8004068:	e7b0      	b.n	8003fcc <ceil+0x3c>
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w
 8004070:	8800759c 	.word	0x8800759c
 8004074:	7e37e43c 	.word	0x7e37e43c
 8004078:	3ff00000 	.word	0x3ff00000
 800407c:	000fffff 	.word	0x000fffff

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
