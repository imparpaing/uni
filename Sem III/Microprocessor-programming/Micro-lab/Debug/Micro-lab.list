
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003908  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b18  08003b18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b20  08003b20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003b34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003b34  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adcc  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001889  00000000  00000000  0002ae06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002ce00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a10  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fed  00000000  00000000  00053ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1005  00000000  00000000  0005dee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014eeea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d74  00000000  00000000  0014ef3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003ae8 	.word	0x08003ae8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003ae8 	.word	0x08003ae8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <uart_print>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]

USART3->TDR =(x);
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <uart_print+0x2c>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	6293      	str	r3, [r2, #40]	; 0x28
while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_print+0x2c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart_print+0x12>
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40004800 	.word	0x40004800

08000640 <increase_rx_empty>:

void increase_rx_empty()
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	rx_empty++;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <increase_rx_empty+0x2c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	3301      	adds	r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <increase_rx_empty+0x2c>)
 8000650:	701a      	strb	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <increase_rx_empty+0x2c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b1e      	cmp	r3, #30
 800065a:	d902      	bls.n	8000662 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <increase_rx_empty+0x2c>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	}
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	200000d2 	.word	0x200000d2

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000676:	f000 f951 	bl	800091c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800067a:	f7ff ff5f 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800067e:	f7ff ff83 	bl	8000588 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fa78 	bl	8000b76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f847 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f8d1 	bl	8000830 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068e:	f000 f89f 	bl	80007d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	491c      	ldr	r1, [pc, #112]	; (8000708 <main+0x98>)
 8000696:	481d      	ldr	r0, [pc, #116]	; (800070c <main+0x9c>)
 8000698:	f001 ffba 	bl	8002610 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Print reception buffer content after pressing ENTER
	if(character == 13 || character == 10)
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <main+0x98>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b0d      	cmp	r3, #13
 80006a2:	d003      	beq.n	80006ac <main+0x3c>
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <main+0x98>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b0a      	cmp	r3, #10
 80006aa:	d1f7      	bne.n	800069c <main+0x2c>
	{
		uint8_t message_length = rx_empty;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <main+0xa0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	71fb      	strb	r3, [r7, #7]
		rx_empty = 0;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <main+0xa0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]

		// Print reception buffer contents
		for(volatile uint8_t i=0;i<message_length;i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	71bb      	strb	r3, [r7, #6]
 80006bc:	e00c      	b.n	80006d8 <main+0x68>
		{
			uart_print(rx_buffer[i]);
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <main+0xa4>)
 80006c6:	5c9b      	ldrb	r3, [r3, r2]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffa1 	bl	8000610 <uart_print>
		for(volatile uint8_t i=0;i<message_length;i++)
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	71bb      	strb	r3, [r7, #6]
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d8ed      	bhi.n	80006be <main+0x4e>
		}

		// Clear reception buffer
		for(volatile uint8_t i=0;i<BUFFER_LENGTH;i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	717b      	strb	r3, [r7, #5]
 80006e6:	e00a      	b.n	80006fe <main+0x8e>
		{
			rx_buffer[i] = '\000';
 80006e8:	797b      	ldrb	r3, [r7, #5]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <main+0xa4>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	5499      	strb	r1, [r3, r2]
		for(volatile uint8_t i=0;i<BUFFER_LENGTH;i++)
 80006f4:	797b      	ldrb	r3, [r7, #5]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	717b      	strb	r3, [r7, #5]
 80006fe:	797b      	ldrb	r3, [r7, #5]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b1d      	cmp	r3, #29
 8000704:	d9f0      	bls.n	80006e8 <main+0x78>
	if(character == 13 || character == 10)
 8000706:	e7c9      	b.n	800069c <main+0x2c>
 8000708:	200000b0 	.word	0x200000b0
 800070c:	20000028 	.word	0x20000028
 8000710:	200000d2 	.word	0x200000d2
 8000714:	200000b4 	.word	0x200000b4

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 f9d6 	bl	8003ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xb0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xb0>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xb0>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <SystemClock_Config+0xb4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <SystemClock_Config+0xb4>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <SystemClock_Config+0xb4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fe39 	bl	80013fc <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000790:	f000 f8f0 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f8d2 	bl	8001958 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ba:	f000 f8db 	bl	8000974 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_USART3_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000814:	f001 feae 	bl	8002574 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f8a9 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000028 	.word	0x20000028
 800082c:	40004800 	.word	0x40004800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_GPIO_Init+0x8c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_GPIO_Init+0x8c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_GPIO_Init+0x8c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_GPIO_Init+0x8c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <MX_GPIO_Init+0x8c>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_GPIO_Init+0x8c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_GPIO_Init+0x8c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <MX_GPIO_Init+0x8c>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_GPIO_Init+0x8c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0x90>)
 8000894:	f000 fd98 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0x90>)
 80008b0:	f000 fbde 	bl	8001070 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400

080008c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_UART_RxCpltCallback+0x44>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe9d 	bl	8000610 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a0c      	ldr	r2, [pc, #48]	; (800090c <HAL_UART_RxCpltCallback+0x48>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d10e      	bne.n	80008fe <HAL_UART_RxCpltCallback+0x3a>
	{
		// Save character to reception buffer
		rx_buffer[rx_empty] = character;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_UART_RxCpltCallback+0x4c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <HAL_UART_RxCpltCallback+0x44>)
 80008ea:	7819      	ldrb	r1, [r3, #0]
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_UART_RxCpltCallback+0x50>)
 80008ee:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 80008f0:	f7ff fea6 	bl	8000640 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	4904      	ldr	r1, [pc, #16]	; (8000908 <HAL_UART_RxCpltCallback+0x44>)
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <HAL_UART_RxCpltCallback+0x54>)
 80008fa:	f001 fe89 	bl	8002610 <HAL_UART_Receive_IT>
	}
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000b0 	.word	0x200000b0
 800090c:	40004800 	.word	0x40004800
 8000910:	200000d2 	.word	0x200000d2
 8000914:	200000b4 	.word	0x200000b4
 8000918:	20000028 	.word	0x20000028

0800091c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800092e:	f000 fa91 	bl	8000e54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000932:	2301      	movs	r3, #1
 8000934:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000936:	2300      	movs	r3, #0
 8000938:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800093e:	231f      	movs	r3, #31
 8000940:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000942:	2387      	movs	r3, #135	; 0x87
 8000944:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000946:	2300      	movs	r3, #0
 8000948:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800094a:	2300      	movs	r3, #0
 800094c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800094e:	2301      	movs	r3, #1
 8000950:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000952:	2301      	movs	r3, #1
 8000954:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800095e:	463b      	mov	r3, r7
 8000960:	4618      	mov	r0, r3
 8000962:	f000 faaf 	bl	8000ec4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000966:	2004      	movs	r0, #4
 8000968:	f000 fa8c 	bl	8000e84 <HAL_MPU_Enable>

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x44>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0ae      	sub	sp, #184	; 0xb8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2290      	movs	r2, #144	; 0x90
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 f875 	bl	8003ad8 <memset>
  if(huart->Instance==USART3)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <HAL_UART_MspInit+0xc4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d144      	bne.n	8000a82 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 f98c 	bl	8001d24 <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a12:	f7ff ffaf 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_UART_MspInit+0xc8>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_UART_MspInit+0xc8>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_UART_MspInit+0xc8>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_UART_MspInit+0xc8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0xc8>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_UART_MspInit+0xc8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a60:	2307      	movs	r3, #7
 8000a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_UART_MspInit+0xcc>)
 8000a6e:	f000 faff 	bl	8001070 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2027      	movs	r0, #39	; 0x27
 8000a78:	f000 f9b5 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a7c:	2027      	movs	r0, #39	; 0x27
 8000a7e:	f000 f9ce 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	37b8      	adds	r7, #184	; 0xb8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40004800 	.word	0x40004800
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f884 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <USART3_IRQHandler+0x10>)
 8000af2:	f001 fdd1 	bl	8002698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000028 	.word	0x20000028

08000b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2a:	490e      	ldr	r1, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b40:	4c0b      	ldr	r4, [pc, #44]	; (8000b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4e:	f7ff ffd7 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f002 ff9d 	bl	8003a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fd8b 	bl	8000670 <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b68:	08003b28 	.word	0x08003b28
  ldr r2, =_sbss
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b70:	200000d8 	.word	0x200000d8

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>

08000b76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f928 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b80:	200f      	movs	r0, #15
 8000b82:	f000 f805 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b86:	f7ff fefb 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f943 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f90b 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200000d4 	.word	0x200000d4

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000d4 	.word	0x200000d4

08000c30 <__NVIC_SetPriorityGrouping>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <__NVIC_SetPriorityGrouping+0x40>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x40>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	05fa0000 	.word	0x05fa0000

08000c78 <__NVIC_GetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff3e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff31 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e58:	f3bf 8f5f 	dmb	sy
}
 8000e5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_MPU_Disable+0x28>)
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_MPU_Disable+0x28>)
 8000e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e68:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_MPU_Disable+0x2c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	e000ed90 	.word	0xe000ed90

08000e84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <HAL_MPU_Enable+0x38>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_MPU_Enable+0x3c>)
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_MPU_Enable+0x3c>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea2:	f3bf 8f4f 	dsb	sy
}
 8000ea6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ea8:	f3bf 8f6f 	isb	sy
}
 8000eac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed90 	.word	0xe000ed90
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	785a      	ldrb	r2, [r3, #1]
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_MPU_ConfigRegion+0x84>)
 8000ed2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d029      	beq.n	8000f30 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <HAL_MPU_ConfigRegion+0x84>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b1b      	ldrb	r3, [r3, #12]
 8000ee8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7adb      	ldrb	r3, [r3, #11]
 8000eee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ef0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7a9b      	ldrb	r3, [r3, #10]
 8000ef6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ef8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7b5b      	ldrb	r3, [r3, #13]
 8000efe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7b9b      	ldrb	r3, [r3, #14]
 8000f06:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7bdb      	ldrb	r3, [r3, #15]
 8000f0e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7a5b      	ldrb	r3, [r3, #9]
 8000f16:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7a1b      	ldrb	r3, [r3, #8]
 8000f1e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f20:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f2a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f2c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f2e:	e005      	b.n	8000f3c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_MPU_ConfigRegion+0x84>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_MPU_ConfigRegion+0x84>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed90 	.word	0xe000ed90

08000f4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f5a:	f7ff fe5d 	bl	8000c18 <HAL_GetTick>
 8000f5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d008      	beq.n	8000f7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e052      	b.n	8001024 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0216 	bic.w	r2, r2, #22
 8000f8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <HAL_DMA_Abort+0x62>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0208 	bic.w	r2, r2, #8
 8000fbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0201 	bic.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fce:	e013      	b.n	8000ff8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fd0:	f7ff fe22 	bl	8000c18 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	d90c      	bls.n	8000ff8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e015      	b.n	8001024 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1e4      	bne.n	8000fd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100a:	223f      	movs	r2, #63	; 0x3f
 800100c:	409a      	lsls	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d004      	beq.n	800104a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00c      	b.n	8001064 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2205      	movs	r2, #5
 800104e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e175      	b.n	800137c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8164 	bne.w	8001376 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_GPIO_Init+0x56>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80be 	beq.w	8001376 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b66      	ldr	r3, [pc, #408]	; (8001394 <HAL_GPIO_Init+0x324>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a65      	ldr	r2, [pc, #404]	; (8001394 <HAL_GPIO_Init+0x324>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <HAL_GPIO_Init+0x324>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001212:	4a61      	ldr	r2, [pc, #388]	; (8001398 <HAL_GPIO_Init+0x328>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_GPIO_Init+0x32c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d037      	beq.n	80012ae <HAL_GPIO_Init+0x23e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <HAL_GPIO_Init+0x330>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d031      	beq.n	80012aa <HAL_GPIO_Init+0x23a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a56      	ldr	r2, [pc, #344]	; (80013a4 <HAL_GPIO_Init+0x334>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d02b      	beq.n	80012a6 <HAL_GPIO_Init+0x236>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a55      	ldr	r2, [pc, #340]	; (80013a8 <HAL_GPIO_Init+0x338>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x232>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a54      	ldr	r2, [pc, #336]	; (80013ac <HAL_GPIO_Init+0x33c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x22e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a53      	ldr	r2, [pc, #332]	; (80013b0 <HAL_GPIO_Init+0x340>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x22a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_GPIO_Init+0x344>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x226>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a51      	ldr	r2, [pc, #324]	; (80013b8 <HAL_GPIO_Init+0x348>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x222>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a50      	ldr	r2, [pc, #320]	; (80013bc <HAL_GPIO_Init+0x34c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x21e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4f      	ldr	r2, [pc, #316]	; (80013c0 <HAL_GPIO_Init+0x350>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x21a>
 8001286:	2309      	movs	r3, #9
 8001288:	e012      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800128a:	230a      	movs	r3, #10
 800128c:	e010      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800128e:	2308      	movs	r3, #8
 8001290:	e00e      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 8001292:	2307      	movs	r3, #7
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 8001296:	2306      	movs	r3, #6
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_GPIO_Init+0x328>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <HAL_GPIO_Init+0x354>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <HAL_GPIO_Init+0x354>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <HAL_GPIO_Init+0x354>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <HAL_GPIO_Init+0x354>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_GPIO_Init+0x354>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <HAL_GPIO_Init+0x354>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_GPIO_Init+0x354>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_GPIO_Init+0x354>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae86 	bls.w	8001090 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40022400 	.word	0x40022400
 80013c4:	40013c00 	.word	0x40013c00

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e29b      	b.n	800194a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8087 	beq.w	800152e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001420:	4b96      	ldr	r3, [pc, #600]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b04      	cmp	r3, #4
 800142a:	d00c      	beq.n	8001446 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142c:	4b93      	ldr	r3, [pc, #588]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d112      	bne.n	800145e <HAL_RCC_OscConfig+0x62>
 8001438:	4b90      	ldr	r3, [pc, #576]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001444:	d10b      	bne.n	800145e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001446:	4b8d      	ldr	r3, [pc, #564]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d06c      	beq.n	800152c <HAL_RCC_OscConfig+0x130>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d168      	bne.n	800152c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e275      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x7a>
 8001468:	4b84      	ldr	r3, [pc, #528]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a83      	ldr	r2, [pc, #524]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e02e      	b.n	80014d4 <HAL_RCC_OscConfig+0xd8>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x9c>
 800147e:	4b7f      	ldr	r3, [pc, #508]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7e      	ldr	r2, [pc, #504]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b7c      	ldr	r3, [pc, #496]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a7b      	ldr	r2, [pc, #492]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xd8>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0xc0>
 80014a2:	4b76      	ldr	r3, [pc, #472]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a75      	ldr	r2, [pc, #468]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b73      	ldr	r3, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a72      	ldr	r2, [pc, #456]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xd8>
 80014bc:	4b6f      	ldr	r3, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a6e      	ldr	r2, [pc, #440]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b6c      	ldr	r3, [pc, #432]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a6b      	ldr	r2, [pc, #428]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb9c 	bl	8000c18 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fb98 	bl	8000c18 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e229      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe8>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fb88 	bl	8000c18 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fb84 	bl	8000c18 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e215      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x110>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d069      	beq.n	800160e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153a:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x190>
 8001552:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x17a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1e9      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	493d      	ldr	r1, [pc, #244]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e040      	b.n	800160e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a38      	ldr	r2, [pc, #224]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb3a 	bl	8000c18 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb36 	bl	8000c18 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1c7      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4929      	ldr	r1, [pc, #164]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
 80015da:	e018      	b.n	800160e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a26      	ldr	r2, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x280>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb16 	bl	8000c18 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fb12 	bl	8000c18 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1a3      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d038      	beq.n	800168c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d019      	beq.n	8001656 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162e:	f7ff faf3 	bl	8000c18 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff faef 	bl	8000c18 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e180      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x23a>
 8001654:	e01a      	b.n	800168c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_OscConfig+0x280>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_RCC_OscConfig+0x280>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fad9 	bl	8000c18 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fad5 	bl	8000c18 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d903      	bls.n	8001680 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e166      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
 800167c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b92      	ldr	r3, [pc, #584]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ee      	bne.n	800166a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a4 	beq.w	80017e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b8c      	ldr	r3, [pc, #560]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10d      	bne.n	80016c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b89      	ldr	r3, [pc, #548]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a88      	ldr	r2, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b86      	ldr	r3, [pc, #536]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	4b83      	ldr	r3, [pc, #524]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016ce:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7f      	ldr	r2, [pc, #508]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fa9d 	bl	8000c18 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fa99 	bl	8000c18 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e12a      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f4:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x4d4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x31a>
 8001708:	4b70      	ldr	r3, [pc, #448]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a6f      	ldr	r2, [pc, #444]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e02d      	b.n	8001772 <HAL_RCC_OscConfig+0x376>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x33c>
 800171e:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a6a      	ldr	r2, [pc, #424]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a67      	ldr	r2, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	e01c      	b.n	8001772 <HAL_RCC_OscConfig+0x376>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x35e>
 8001740:	4b62      	ldr	r3, [pc, #392]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a61      	ldr	r2, [pc, #388]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a5e      	ldr	r2, [pc, #376]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0x376>
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff fa4d 	bl	8000c18 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fa49 	bl	8000c18 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0d8      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ee      	beq.n	8001782 <HAL_RCC_OscConfig+0x386>
 80017a4:	e014      	b.n	80017d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa37 	bl	8000c18 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff fa33 	bl	8000c18 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0c2      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ee      	bne.n	80017ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d105      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a3c      	ldr	r2, [pc, #240]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80ae 	beq.w	8001948 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d06d      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d14b      	bne.n	8001898 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a31      	ldr	r2, [pc, #196]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fa04 	bl	8000c18 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fa00 	bl	8000c18 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e091      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	071b      	lsls	r3, r3, #28
 800185e:	491b      	ldr	r1, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f9d2 	bl	8000c18 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f9ce 	bl	8000c18 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e05f      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x47c>
 8001896:	e057      	b.n	8001948 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 800189e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f9b8 	bl	8000c18 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f9b4 	bl	8000c18 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e045      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x4b0>
 80018ca:	e03d      	b.n	8001948 <HAL_RCC_OscConfig+0x54c>
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_RCC_OscConfig+0x558>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d030      	beq.n	8001944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d129      	bne.n	8001944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d122      	bne.n	8001944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001904:	4013      	ands	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800190c:	4293      	cmp	r3, r2
 800190e:	d119      	bne.n	8001944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	3b01      	subs	r3, #1
 800191e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d10f      	bne.n	8001944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0d0      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d910      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 020f 	bic.w	r2, r3, #15
 8001986:	4965      	ldr	r1, [pc, #404]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0b8      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a58      	ldr	r2, [pc, #352]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 80019d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	494d      	ldr	r1, [pc, #308]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d040      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d115      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e073      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e06b      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 0203 	bic.w	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4936      	ldr	r1, [pc, #216]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f8e4 	bl	8000c18 <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7ff f8e0 	bl	8000c18 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e053      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 020c 	and.w	r2, r3, #12
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1eb      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d210      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 020f 	bic.w	r2, r3, #15
 8001a92:	4922      	ldr	r1, [pc, #136]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e032      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4916      	ldr	r1, [pc, #88]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	490e      	ldr	r1, [pc, #56]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aea:	f000 f821 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	490a      	ldr	r1, [pc, #40]	; (8001b24 <HAL_RCC_ClockConfig+0x1cc>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1d0>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1d4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f840 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08003b00 	.word	0x08003b00
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b34:	b090      	sub	sp, #64	; 0x40
 8001b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d00d      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x40>
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	f200 80a1 	bhi.w	8001c9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b62:	e09b      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b68:	e09b      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6a:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b6e:	e098      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b70:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d028      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	627a      	str	r2, [r7, #36]	; 0x24
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b9c:	fb03 f201 	mul.w	r2, r3, r1
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	fb00 f303 	mul.w	r3, r0, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a43      	ldr	r2, [pc, #268]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001baa:	fba0 1202 	umull	r1, r2, r0, r2
 8001bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb6:	4413      	add	r3, r2
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	61fa      	str	r2, [r7, #28]
 8001bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bca:	f7fe fb35 	bl	8000238 <__aeabi_uldivmod>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd6:	e053      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	2200      	movs	r2, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	617a      	str	r2, [r7, #20]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bea:	f04f 0b00 	mov.w	fp, #0
 8001bee:	4652      	mov	r2, sl
 8001bf0:	465b      	mov	r3, fp
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	0159      	lsls	r1, r3, #5
 8001bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c00:	0150      	lsls	r0, r2, #5
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ebb2 080a 	subs.w	r8, r2, sl
 8001c0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c22:	ebb2 0408 	subs.w	r4, r2, r8
 8001c26:	eb63 0509 	sbc.w	r5, r3, r9
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	00eb      	lsls	r3, r5, #3
 8001c34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c38:	00e2      	lsls	r2, r4, #3
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	eb14 030a 	adds.w	r3, r4, sl
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	eb45 030b 	adc.w	r3, r5, fp
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c56:	4629      	mov	r1, r5
 8001c58:	028b      	lsls	r3, r1, #10
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c60:	4621      	mov	r1, r4
 8001c62:	028a      	lsls	r2, r1, #10
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c74:	f7fe fae0 	bl	8000238 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3740      	adds	r7, #64	; 0x40
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	017d7840 	.word	0x017d7840

08001cbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08003b10 	.word	0x08003b10

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffdc 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08003b10 	.word	0x08003b10

08001d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d012      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a68      	ldr	r2, [pc, #416]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d56:	6093      	str	r3, [r2, #8]
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	4964      	ldr	r1, [pc, #400]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d017      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	4959      	ldr	r1, [pc, #356]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d017      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dba:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	494a      	ldr	r1, [pc, #296]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd8:	d101      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 808b 	beq.w	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a39      	ldr	r2, [pc, #228]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a34      	ldr	r2, [pc, #208]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2c:	f7fe fef4 	bl	8000c18 <HAL_GetTick>
 8001e30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7fe fef0 	bl	8000c18 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e38f      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e52:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d035      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d02e      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d114      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe feb8 	bl	8000c18 <HAL_GetTick>
 8001ea8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7fe feb4 	bl	8000c18 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e351      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0ee      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eda:	d111      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001eea:	400b      	ands	r3, r1
 8001eec:	4901      	ldr	r1, [pc, #4]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	0ffffcff 	.word	0x0ffffcff
 8001f00:	4bac      	ldr	r3, [pc, #688]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4aab      	ldr	r2, [pc, #684]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f0a:	6093      	str	r3, [r2, #8]
 8001f0c:	4ba9      	ldr	r3, [pc, #676]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	49a6      	ldr	r1, [pc, #664]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d010      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f2a:	4ba2      	ldr	r3, [pc, #648]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f30:	4aa0      	ldr	r2, [pc, #640]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f3a:	4b9e      	ldr	r3, [pc, #632]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	499b      	ldr	r1, [pc, #620]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f58:	4b96      	ldr	r3, [pc, #600]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f66:	4993      	ldr	r1, [pc, #588]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f7a:	4b8e      	ldr	r3, [pc, #568]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f88:	498a      	ldr	r1, [pc, #552]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f9c:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001faa:	4982      	ldr	r1, [pc, #520]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fbe:	4b7d      	ldr	r3, [pc, #500]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4979      	ldr	r1, [pc, #484]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe0:	4b74      	ldr	r3, [pc, #464]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4971      	ldr	r1, [pc, #452]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002002:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	f023 020c 	bic.w	r2, r3, #12
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	4968      	ldr	r1, [pc, #416]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	4960      	ldr	r1, [pc, #384]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002046:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002054:	4957      	ldr	r1, [pc, #348]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002068:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	494f      	ldr	r1, [pc, #316]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	4946      	ldr	r1, [pc, #280]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	493e      	ldr	r1, [pc, #248]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020fe:	492d      	ldr	r1, [pc, #180]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d011      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002112:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002120:	4924      	ldr	r1, [pc, #144]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800212c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002130:	d101      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002160:	4914      	ldr	r1, [pc, #80]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002184:	490b      	ldr	r1, [pc, #44]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00f      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a8:	4902      	ldr	r1, [pc, #8]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021b0:	e002      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00b      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021c4:	4b8a      	ldr	r3, [pc, #552]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	4986      	ldr	r1, [pc, #536]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00b      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021e8:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f8:	497d      	ldr	r1, [pc, #500]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d006      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80d6 	beq.w	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a75      	ldr	r2, [pc, #468]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800221a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800221e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002220:	f7fe fcfa 	bl	8000c18 <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002228:	f7fe fcf6 	bl	8000c18 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e195      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800223a:	4b6d      	ldr	r3, [pc, #436]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d021      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11d      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800225a:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800225c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002268:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800226e:	0e1b      	lsrs	r3, r3, #24
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	019a      	lsls	r2, r3, #6
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	071b      	lsls	r3, r3, #28
 800228e:	4958      	ldr	r1, [pc, #352]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02e      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c0:	d129      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022d0:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d6:	0f1b      	lsrs	r3, r3, #28
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	019a      	lsls	r2, r3, #6
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	061b      	lsls	r3, r3, #24
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	071b      	lsls	r3, r3, #28
 80022f6:	493e      	ldr	r1, [pc, #248]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022fe:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	f023 021f 	bic.w	r2, r3, #31
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	3b01      	subs	r3, #1
 800230e:	4938      	ldr	r1, [pc, #224]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01d      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002322:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002328:	0e1b      	lsrs	r3, r3, #24
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002330:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002336:	0f1b      	lsrs	r3, r3, #28
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	019a      	lsls	r2, r3, #6
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	431a      	orrs	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	071b      	lsls	r3, r3, #28
 8002356:	4926      	ldr	r1, [pc, #152]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d011      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	019a      	lsls	r2, r3, #6
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	071b      	lsls	r3, r3, #28
 8002386:	491a      	ldr	r1, [pc, #104]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002394:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239a:	f7fe fc3d 	bl	8000c18 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023a2:	f7fe fc39 	bl	8000c18 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	; 0x64
 80023ae:	d901      	bls.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0d8      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	f040 80ce 	bne.w	8002564 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d4:	f7fe fc20 	bl	8000c18 <HAL_GetTick>
 80023d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023da:	e00b      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023dc:	f7fe fc1c 	bl	8000c18 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d904      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0bb      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023f4:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002400:	d0ec      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800241e:	2b00      	cmp	r3, #0
 8002420:	d02e      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d12a      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800242a:	4b51      	ldr	r3, [pc, #324]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002438:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	0f1b      	lsrs	r3, r3, #28
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	019a      	lsls	r2, r3, #6
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	071b      	lsls	r3, r3, #28
 800245e:	4944      	ldr	r1, [pc, #272]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	493d      	ldr	r1, [pc, #244]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d022      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002494:	d11d      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	0e1b      	lsrs	r3, r3, #24
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024a4:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	0f1b      	lsrs	r3, r3, #28
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	019a      	lsls	r2, r3, #6
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	061b      	lsls	r3, r3, #24
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	071b      	lsls	r3, r3, #28
 80024ca:	4929      	ldr	r1, [pc, #164]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d028      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	0e1b      	lsrs	r3, r3, #24
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	019a      	lsls	r2, r3, #6
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	431a      	orrs	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	071b      	lsls	r3, r3, #28
 8002512:	4917      	ldr	r1, [pc, #92]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800251c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	4911      	ldr	r1, [pc, #68]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe fb6c 	bl	8000c18 <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002544:	f7fe fb68 	bl	8000c18 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e007      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800255e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002562:	d1ef      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e040      	b.n	8002608 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fa16 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	; 0x24
 80025a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fb82 	bl	8002cbc <UART_SetConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e022      	b.n	8002608 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fdda 	bl	8003184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fe61 	bl	80032c8 <UART_CheckIdleState>
 8002606:	4603      	mov	r3, r0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002624:	2b20      	cmp	r3, #32
 8002626:	d132      	bne.n	800268e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_UART_Receive_IT+0x24>
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e02b      	b.n	8002690 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d018      	beq.n	800267e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	613b      	str	r3, [r7, #16]
   return(result);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266e:	69f9      	ldr	r1, [r7, #28]
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	e841 2300 	strex	r3, r2, [r1]
 8002676:	61bb      	str	r3, [r7, #24]
   return(result);
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1e6      	bne.n	800264c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	461a      	mov	r2, r3
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 ff33 	bl	80034f0 <UART_Start_Receive_IT>
 800268a:	4603      	mov	r3, r0
 800268c:	e000      	b.n	8002690 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b0ba      	sub	sp, #232	; 0xe8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80026c6:	4013      	ands	r3, r2
 80026c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d115      	bne.n	8002700 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00f      	beq.n	8002700 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 82ac 	beq.w	8002c4e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
      }
      return;
 80026fe:	e2a6      	b.n	8002c4e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8117 	beq.w	8002938 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800271a:	4b85      	ldr	r3, [pc, #532]	; (8002930 <HAL_UART_IRQHandler+0x298>)
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 810a 	beq.w	8002938 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d011      	beq.n	8002754 <HAL_UART_IRQHandler+0xbc>
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <HAL_UART_IRQHandler+0xec>
 8002760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2202      	movs	r2, #2
 8002772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277a:	f043 0204 	orr.w	r2, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d011      	beq.n	80027b4 <HAL_UART_IRQHandler+0x11c>
 8002790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2204      	movs	r2, #4
 80027a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027aa:	f043 0202 	orr.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2208      	movs	r2, #8
 80027de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e6:	f043 0208 	orr.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <HAL_UART_IRQHandler+0x18a>
 80027fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8212 	beq.w	8002c52 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d005      	beq.n	800287a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800286e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002872:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002876:	2b00      	cmp	r3, #0
 8002878:	d04f      	beq.n	800291a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fefe 	bl	800367c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d141      	bne.n	8002912 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3308      	adds	r3, #8
 8002894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3308      	adds	r3, #8
 80028b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028ca:	e841 2300 	strex	r3, r2, [r1]
 80028ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1d9      	bne.n	800288e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d013      	beq.n	800290a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <HAL_UART_IRQHandler+0x29c>)
 80028e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fb9c 	bl	800102c <HAL_DMA_Abort_IT>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d017      	beq.n	800292a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002904:	4610      	mov	r0, r2
 8002906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002908:	e00f      	b.n	800292a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f9b6 	bl	8002c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	e00b      	b.n	800292a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9b2 	bl	8002c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e007      	b.n	800292a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9ae 	bl	8002c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002928:	e193      	b.n	8002c52 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292a:	bf00      	nop
    return;
 800292c:	e191      	b.n	8002c52 <HAL_UART_IRQHandler+0x5ba>
 800292e:	bf00      	nop
 8002930:	04000120 	.word	0x04000120
 8002934:	08003745 	.word	0x08003745

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 814c 	bne.w	8002bda <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8145 	beq.w	8002bda <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 813e 	beq.w	8002bda <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2210      	movs	r2, #16
 8002964:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	f040 80b6 	bne.w	8002ae2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002982:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8165 	beq.w	8002c56 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002996:	429a      	cmp	r2, r3
 8002998:	f080 815d 	bcs.w	8002c56 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	f000 8086 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1da      	bne.n	80029b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3308      	adds	r3, #8
 8002a04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a08:	e853 3f00 	ldrex	r3, [r3]
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e1      	bne.n	80029fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3308      	adds	r3, #8
 8002a40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3308      	adds	r3, #8
 8002a5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e3      	bne.n	8002a3a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a90:	f023 0310 	bic.w	r3, r3, #16
 8002a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e4      	bne.n	8002a80 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fa46 	bl	8000f4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8d8 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ae0:	e0b9      	b.n	8002c56 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80ab 	beq.w	8002c5a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a6 	beq.w	8002c5a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b30:	647b      	str	r3, [r7, #68]	; 0x44
 8002b32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e4      	bne.n	8002b0e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3308      	adds	r3, #8
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	623b      	str	r3, [r7, #32]
   return(result);
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3308      	adds	r3, #8
 8002b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b68:	633a      	str	r2, [r7, #48]	; 0x30
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e3      	bne.n	8002b44 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	e853 3f00 	ldrex	r3, [r3]
 8002b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f023 0310 	bic.w	r3, r3, #16
 8002ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e4      	bne.n	8002b90 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f85c 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bd8:	e03f      	b.n	8002c5a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00e      	beq.n	8002c04 <HAL_UART_IRQHandler+0x56c>
 8002be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f853 	bl	8002ca8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c02:	e02d      	b.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01c      	beq.n	8002c5e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
    }
    return;
 8002c2c:	e017      	b.n	8002c5e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d012      	beq.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
 8002c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fd92 	bl	8003770 <UART_EndTransmit_IT>
    return;
 8002c4c:	e008      	b.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002c4e:	bf00      	nop
 8002c50:	e006      	b.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002c52:	bf00      	nop
 8002c54:	e004      	b.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002c5e:	bf00      	nop
  }

}
 8002c60:	37e8      	adds	r7, #232	; 0xe8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop

08002c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4ba6      	ldr	r3, [pc, #664]	; (8002f80 <UART_SetConfig+0x2c4>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	6979      	ldr	r1, [r7, #20]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a94      	ldr	r2, [pc, #592]	; (8002f84 <UART_SetConfig+0x2c8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d120      	bne.n	8002d7a <UART_SetConfig+0xbe>
 8002d38:	4b93      	ldr	r3, [pc, #588]	; (8002f88 <UART_SetConfig+0x2cc>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d816      	bhi.n	8002d74 <UART_SetConfig+0xb8>
 8002d46:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <UART_SetConfig+0x90>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d69 	.word	0x08002d69
 8002d54:	08002d63 	.word	0x08002d63
 8002d58:	08002d6f 	.word	0x08002d6f
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	77fb      	strb	r3, [r7, #31]
 8002d60:	e150      	b.n	8003004 <UART_SetConfig+0x348>
 8002d62:	2302      	movs	r3, #2
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	e14d      	b.n	8003004 <UART_SetConfig+0x348>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e14a      	b.n	8003004 <UART_SetConfig+0x348>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e147      	b.n	8003004 <UART_SetConfig+0x348>
 8002d74:	2310      	movs	r3, #16
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e144      	b.n	8003004 <UART_SetConfig+0x348>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a83      	ldr	r2, [pc, #524]	; (8002f8c <UART_SetConfig+0x2d0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d132      	bne.n	8002dea <UART_SetConfig+0x12e>
 8002d84:	4b80      	ldr	r3, [pc, #512]	; (8002f88 <UART_SetConfig+0x2cc>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d828      	bhi.n	8002de4 <UART_SetConfig+0x128>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <UART_SetConfig+0xdc>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002dcd 	.word	0x08002dcd
 8002d9c:	08002de5 	.word	0x08002de5
 8002da0:	08002de5 	.word	0x08002de5
 8002da4:	08002de5 	.word	0x08002de5
 8002da8:	08002dd9 	.word	0x08002dd9
 8002dac:	08002de5 	.word	0x08002de5
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002de5 	.word	0x08002de5
 8002db8:	08002dd3 	.word	0x08002dd3
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	08002de5 	.word	0x08002de5
 8002dc8:	08002ddf 	.word	0x08002ddf
 8002dcc:	2300      	movs	r3, #0
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e118      	b.n	8003004 <UART_SetConfig+0x348>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e115      	b.n	8003004 <UART_SetConfig+0x348>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e112      	b.n	8003004 <UART_SetConfig+0x348>
 8002dde:	2308      	movs	r3, #8
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e10f      	b.n	8003004 <UART_SetConfig+0x348>
 8002de4:	2310      	movs	r3, #16
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e10c      	b.n	8003004 <UART_SetConfig+0x348>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a68      	ldr	r2, [pc, #416]	; (8002f90 <UART_SetConfig+0x2d4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d120      	bne.n	8002e36 <UART_SetConfig+0x17a>
 8002df4:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <UART_SetConfig+0x2cc>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dfe:	2b30      	cmp	r3, #48	; 0x30
 8002e00:	d013      	beq.n	8002e2a <UART_SetConfig+0x16e>
 8002e02:	2b30      	cmp	r3, #48	; 0x30
 8002e04:	d814      	bhi.n	8002e30 <UART_SetConfig+0x174>
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d009      	beq.n	8002e1e <UART_SetConfig+0x162>
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d810      	bhi.n	8002e30 <UART_SetConfig+0x174>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <UART_SetConfig+0x15c>
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d006      	beq.n	8002e24 <UART_SetConfig+0x168>
 8002e16:	e00b      	b.n	8002e30 <UART_SetConfig+0x174>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e0f2      	b.n	8003004 <UART_SetConfig+0x348>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	e0ef      	b.n	8003004 <UART_SetConfig+0x348>
 8002e24:	2304      	movs	r3, #4
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e0ec      	b.n	8003004 <UART_SetConfig+0x348>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e0e9      	b.n	8003004 <UART_SetConfig+0x348>
 8002e30:	2310      	movs	r3, #16
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e0e6      	b.n	8003004 <UART_SetConfig+0x348>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a56      	ldr	r2, [pc, #344]	; (8002f94 <UART_SetConfig+0x2d8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d120      	bne.n	8002e82 <UART_SetConfig+0x1c6>
 8002e40:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <UART_SetConfig+0x2cc>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e4c:	d013      	beq.n	8002e76 <UART_SetConfig+0x1ba>
 8002e4e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e50:	d814      	bhi.n	8002e7c <UART_SetConfig+0x1c0>
 8002e52:	2b80      	cmp	r3, #128	; 0x80
 8002e54:	d009      	beq.n	8002e6a <UART_SetConfig+0x1ae>
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d810      	bhi.n	8002e7c <UART_SetConfig+0x1c0>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <UART_SetConfig+0x1a8>
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d006      	beq.n	8002e70 <UART_SetConfig+0x1b4>
 8002e62:	e00b      	b.n	8002e7c <UART_SetConfig+0x1c0>
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e0cc      	b.n	8003004 <UART_SetConfig+0x348>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e0c9      	b.n	8003004 <UART_SetConfig+0x348>
 8002e70:	2304      	movs	r3, #4
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e0c6      	b.n	8003004 <UART_SetConfig+0x348>
 8002e76:	2308      	movs	r3, #8
 8002e78:	77fb      	strb	r3, [r7, #31]
 8002e7a:	e0c3      	b.n	8003004 <UART_SetConfig+0x348>
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	e0c0      	b.n	8003004 <UART_SetConfig+0x348>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a44      	ldr	r2, [pc, #272]	; (8002f98 <UART_SetConfig+0x2dc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d125      	bne.n	8002ed8 <UART_SetConfig+0x21c>
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <UART_SetConfig+0x2cc>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e9a:	d017      	beq.n	8002ecc <UART_SetConfig+0x210>
 8002e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea0:	d817      	bhi.n	8002ed2 <UART_SetConfig+0x216>
 8002ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea6:	d00b      	beq.n	8002ec0 <UART_SetConfig+0x204>
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d811      	bhi.n	8002ed2 <UART_SetConfig+0x216>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <UART_SetConfig+0x1fe>
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d006      	beq.n	8002ec6 <UART_SetConfig+0x20a>
 8002eb8:	e00b      	b.n	8002ed2 <UART_SetConfig+0x216>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e0a1      	b.n	8003004 <UART_SetConfig+0x348>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e09e      	b.n	8003004 <UART_SetConfig+0x348>
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e09b      	b.n	8003004 <UART_SetConfig+0x348>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e098      	b.n	8003004 <UART_SetConfig+0x348>
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e095      	b.n	8003004 <UART_SetConfig+0x348>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <UART_SetConfig+0x2e0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d125      	bne.n	8002f2e <UART_SetConfig+0x272>
 8002ee2:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <UART_SetConfig+0x2cc>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ef0:	d017      	beq.n	8002f22 <UART_SetConfig+0x266>
 8002ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ef6:	d817      	bhi.n	8002f28 <UART_SetConfig+0x26c>
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efc:	d00b      	beq.n	8002f16 <UART_SetConfig+0x25a>
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	d811      	bhi.n	8002f28 <UART_SetConfig+0x26c>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <UART_SetConfig+0x254>
 8002f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0c:	d006      	beq.n	8002f1c <UART_SetConfig+0x260>
 8002f0e:	e00b      	b.n	8002f28 <UART_SetConfig+0x26c>
 8002f10:	2301      	movs	r3, #1
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e076      	b.n	8003004 <UART_SetConfig+0x348>
 8002f16:	2302      	movs	r3, #2
 8002f18:	77fb      	strb	r3, [r7, #31]
 8002f1a:	e073      	b.n	8003004 <UART_SetConfig+0x348>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e070      	b.n	8003004 <UART_SetConfig+0x348>
 8002f22:	2308      	movs	r3, #8
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e06d      	b.n	8003004 <UART_SetConfig+0x348>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e06a      	b.n	8003004 <UART_SetConfig+0x348>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <UART_SetConfig+0x2e4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d138      	bne.n	8002faa <UART_SetConfig+0x2ee>
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <UART_SetConfig+0x2cc>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f46:	d017      	beq.n	8002f78 <UART_SetConfig+0x2bc>
 8002f48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f4c:	d82a      	bhi.n	8002fa4 <UART_SetConfig+0x2e8>
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	d00b      	beq.n	8002f6c <UART_SetConfig+0x2b0>
 8002f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f58:	d824      	bhi.n	8002fa4 <UART_SetConfig+0x2e8>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <UART_SetConfig+0x2aa>
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d006      	beq.n	8002f72 <UART_SetConfig+0x2b6>
 8002f64:	e01e      	b.n	8002fa4 <UART_SetConfig+0x2e8>
 8002f66:	2300      	movs	r3, #0
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e04b      	b.n	8003004 <UART_SetConfig+0x348>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e048      	b.n	8003004 <UART_SetConfig+0x348>
 8002f72:	2304      	movs	r3, #4
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e045      	b.n	8003004 <UART_SetConfig+0x348>
 8002f78:	2308      	movs	r3, #8
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e042      	b.n	8003004 <UART_SetConfig+0x348>
 8002f7e:	bf00      	nop
 8002f80:	efff69f3 	.word	0xefff69f3
 8002f84:	40011000 	.word	0x40011000
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40004800 	.word	0x40004800
 8002f94:	40004c00 	.word	0x40004c00
 8002f98:	40005000 	.word	0x40005000
 8002f9c:	40011400 	.word	0x40011400
 8002fa0:	40007800 	.word	0x40007800
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e02c      	b.n	8003004 <UART_SetConfig+0x348>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a72      	ldr	r2, [pc, #456]	; (8003178 <UART_SetConfig+0x4bc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d125      	bne.n	8003000 <UART_SetConfig+0x344>
 8002fb4:	4b71      	ldr	r3, [pc, #452]	; (800317c <UART_SetConfig+0x4c0>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fc2:	d017      	beq.n	8002ff4 <UART_SetConfig+0x338>
 8002fc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fc8:	d817      	bhi.n	8002ffa <UART_SetConfig+0x33e>
 8002fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fce:	d00b      	beq.n	8002fe8 <UART_SetConfig+0x32c>
 8002fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd4:	d811      	bhi.n	8002ffa <UART_SetConfig+0x33e>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <UART_SetConfig+0x326>
 8002fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fde:	d006      	beq.n	8002fee <UART_SetConfig+0x332>
 8002fe0:	e00b      	b.n	8002ffa <UART_SetConfig+0x33e>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e00d      	b.n	8003004 <UART_SetConfig+0x348>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e00a      	b.n	8003004 <UART_SetConfig+0x348>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	e007      	b.n	8003004 <UART_SetConfig+0x348>
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e004      	b.n	8003004 <UART_SetConfig+0x348>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e001      	b.n	8003004 <UART_SetConfig+0x348>
 8003000:	2310      	movs	r3, #16
 8003002:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300c:	d15b      	bne.n	80030c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800300e:	7ffb      	ldrb	r3, [r7, #31]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d828      	bhi.n	8003066 <UART_SetConfig+0x3aa>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <UART_SetConfig+0x360>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003041 	.word	0x08003041
 8003020:	08003049 	.word	0x08003049
 8003024:	08003051 	.word	0x08003051
 8003028:	08003067 	.word	0x08003067
 800302c:	08003057 	.word	0x08003057
 8003030:	08003067 	.word	0x08003067
 8003034:	08003067 	.word	0x08003067
 8003038:	08003067 	.word	0x08003067
 800303c:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7fe fe48 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003044:	61b8      	str	r0, [r7, #24]
        break;
 8003046:	e013      	b.n	8003070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7fe fe58 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 800304c:	61b8      	str	r0, [r7, #24]
        break;
 800304e:	e00f      	b.n	8003070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <UART_SetConfig+0x4c4>)
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e00c      	b.n	8003070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7fe fd6b 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 800305a:	61b8      	str	r0, [r7, #24]
        break;
 800305c:	e008      	b.n	8003070 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003062:	61bb      	str	r3, [r7, #24]
        break;
 8003064:	e004      	b.n	8003070 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	77bb      	strb	r3, [r7, #30]
        break;
 800306e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d074      	beq.n	8003160 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	005a      	lsls	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d916      	bls.n	80030c0 <UART_SetConfig+0x404>
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d212      	bcs.n	80030c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f023 030f 	bic.w	r3, r3, #15
 80030a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	89fb      	ldrh	r3, [r7, #14]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	89fa      	ldrh	r2, [r7, #14]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e04f      	b.n	8003160 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	77bb      	strb	r3, [r7, #30]
 80030c4:	e04c      	b.n	8003160 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d828      	bhi.n	800311e <UART_SetConfig+0x462>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <UART_SetConfig+0x418>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	08003101 	.word	0x08003101
 80030dc:	08003109 	.word	0x08003109
 80030e0:	0800311f 	.word	0x0800311f
 80030e4:	0800310f 	.word	0x0800310f
 80030e8:	0800311f 	.word	0x0800311f
 80030ec:	0800311f 	.word	0x0800311f
 80030f0:	0800311f 	.word	0x0800311f
 80030f4:	08003117 	.word	0x08003117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f8:	f7fe fdec 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80030fc:	61b8      	str	r0, [r7, #24]
        break;
 80030fe:	e013      	b.n	8003128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003100:	f7fe fdfc 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003104:	61b8      	str	r0, [r7, #24]
        break;
 8003106:	e00f      	b.n	8003128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <UART_SetConfig+0x4c4>)
 800310a:	61bb      	str	r3, [r7, #24]
        break;
 800310c:	e00c      	b.n	8003128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310e:	f7fe fd0f 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8003112:	61b8      	str	r0, [r7, #24]
        break;
 8003114:	e008      	b.n	8003128 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311a:	61bb      	str	r3, [r7, #24]
        break;
 800311c:	e004      	b.n	8003128 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	77bb      	strb	r3, [r7, #30]
        break;
 8003126:	bf00      	nop
    }

    if (pclk != 0U)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	085a      	lsrs	r2, r3, #1
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d909      	bls.n	800315c <UART_SetConfig+0x4a0>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314e:	d205      	bcs.n	800315c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	e001      	b.n	8003160 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800316c:	7fbb      	ldrb	r3, [r7, #30]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40007c00 	.word	0x40007c00
 800317c:	40023800 	.word	0x40023800
 8003180:	00f42400 	.word	0x00f42400

08003184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01a      	beq.n	800329a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003282:	d10a      	bne.n	800329a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032d8:	f7fd fc9e 	bl	8000c18 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d10e      	bne.n	800330a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f831 	bl	8003362 <UART_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e027      	b.n	800335a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d10e      	bne.n	8003336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f81b 	bl	8003362 <UART_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e011      	b.n	800335a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b09c      	sub	sp, #112	; 0x70
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003372:	e0a7      	b.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	f000 80a3 	beq.w	80034c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fd fc4b 	bl	8000c18 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <UART_WaitOnFlagUntilTimeout+0x32>
 800338e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003390:	2b00      	cmp	r3, #0
 8003392:	d13f      	bne.n	8003414 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033a8:	667b      	str	r3, [r7, #100]	; 0x64
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e6      	bne.n	8003394 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3308      	adds	r3, #8
 80033cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	663b      	str	r3, [r7, #96]	; 0x60
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3308      	adds	r3, #8
 80033e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e5      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e068      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d050      	beq.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003430:	d148      	bne.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800343a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003450:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
 800345c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e6      	bne.n	800343c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3308      	adds	r3, #8
 8003474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	613b      	str	r3, [r7, #16]
   return(result);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	66bb      	str	r3, [r7, #104]	; 0x68
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3308      	adds	r3, #8
 800348c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800348e:	623a      	str	r2, [r7, #32]
 8003490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	69f9      	ldr	r1, [r7, #28]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	61bb      	str	r3, [r7, #24]
   return(result);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e010      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	429a      	cmp	r2, r3
 80034e0:	f43f af48 	beq.w	8003374 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3770      	adds	r7, #112	; 0x70
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b097      	sub	sp, #92	; 0x5c
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	88fa      	ldrh	r2, [r7, #6]
 8003508:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003522:	d10e      	bne.n	8003542 <UART_Start_Receive_IT+0x52>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <UART_Start_Receive_IT+0x48>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003532:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003536:	e02d      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003540:	e028      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <UART_Start_Receive_IT+0x76>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <UART_Start_Receive_IT+0x6c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	22ff      	movs	r2, #255	; 0xff
 8003556:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800355a:	e01b      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	227f      	movs	r2, #127	; 0x7f
 8003560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003564:	e016      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800356e:	d10d      	bne.n	800358c <UART_Start_Receive_IT+0x9c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <UART_Start_Receive_IT+0x92>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	227f      	movs	r2, #127	; 0x7f
 800357c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003580:	e008      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	223f      	movs	r2, #63	; 0x3f
 8003586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800358a:	e003      	b.n	8003594 <UART_Start_Receive_IT+0xa4>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2222      	movs	r2, #34	; 0x22
 80035a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3308      	adds	r3, #8
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	657b      	str	r3, [r7, #84]	; 0x54
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3308      	adds	r3, #8
 80035c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e5      	bne.n	80035a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e0:	d107      	bne.n	80035f2 <UART_Start_Receive_IT+0x102>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a21      	ldr	r2, [pc, #132]	; (8003674 <UART_Start_Receive_IT+0x184>)
 80035ee:	669a      	str	r2, [r3, #104]	; 0x68
 80035f0:	e002      	b.n	80035f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a20      	ldr	r2, [pc, #128]	; (8003678 <UART_Start_Receive_IT+0x188>)
 80035f6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d019      	beq.n	8003634 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
 8003620:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e6      	bne.n	8003600 <UART_Start_Receive_IT+0x110>
 8003632:	e018      	b.n	8003666 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	613b      	str	r3, [r7, #16]
   return(result);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f043 0320 	orr.w	r3, r3, #32
 8003648:	653b      	str	r3, [r7, #80]	; 0x50
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	69f9      	ldr	r1, [r7, #28]
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e6      	bne.n	8003634 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	375c      	adds	r7, #92	; 0x5c
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	0800392b 	.word	0x0800392b
 8003678:	080037c5 	.word	0x080037c5

0800367c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b095      	sub	sp, #84	; 0x54
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a2:	643b      	str	r3, [r7, #64]	; 0x40
 80036a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e6      	bne.n	8003684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3308      	adds	r3, #8
 80036bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e5      	bne.n	80036b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d118      	bne.n	8003724 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0310 	bic.w	r3, r3, #16
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6979      	ldr	r1, [r7, #20]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	613b      	str	r3, [r7, #16]
   return(result);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e6      	bne.n	80036f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003738:	bf00      	nop
 800373a:	3754      	adds	r7, #84	; 0x54
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fa8a 	bl	8002c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	60bb      	str	r3, [r7, #8]
   return(result);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6979      	ldr	r1, [r7, #20]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	613b      	str	r3, [r7, #16]
   return(result);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e6      	bne.n	8003778 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fa56 	bl	8002c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b096      	sub	sp, #88	; 0x58
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037dc:	2b22      	cmp	r3, #34	; 0x22
 80037de:	f040 8098 	bne.w	8003912 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037f0:	b2d9      	uxtb	r1, r3
 80037f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	400a      	ands	r2, r1
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d17b      	bne.n	8003922 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800383e:	653b      	str	r3, [r7, #80]	; 0x50
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
 800384a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800384e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e6      	bne.n	800382a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	623b      	str	r3, [r7, #32]
   return(result);
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800387c:	633a      	str	r2, [r7, #48]	; 0x30
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d12e      	bne.n	800390a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	60fb      	str	r3, [r7, #12]
   return(result);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0310 	bic.w	r3, r3, #16
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	69b9      	ldr	r1, [r7, #24]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	617b      	str	r3, [r7, #20]
   return(result);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e6      	bne.n	80038b2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d103      	bne.n	80038fa <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff f9c4 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003908:	e00b      	b.n	8003922 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fc ffda 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8003910:	e007      	b.n	8003922 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0208 	orr.w	r2, r2, #8
 8003920:	619a      	str	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	3758      	adds	r7, #88	; 0x58
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b096      	sub	sp, #88	; 0x58
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003938:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003942:	2b22      	cmp	r3, #34	; 0x22
 8003944:	f040 8098 	bne.w	8003a78 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003958:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800395c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003960:	4013      	ands	r3, r2
 8003962:	b29a      	uxth	r2, r3
 8003964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003966:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	1c9a      	adds	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d17b      	bne.n	8003a88 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ae:	643b      	str	r3, [r7, #64]	; 0x40
 80039b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e6      	bne.n	8003990 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3308      	adds	r3, #8
 80039c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3308      	adds	r3, #8
 80039e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e5      	bne.n	80039c2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d12e      	bne.n	8003a70 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	613b      	str	r3, [r7, #16]
   return(result);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d103      	bne.n	8003a60 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff f911 	bl	8002c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a6e:	e00b      	b.n	8003a88 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fc ff27 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8003a76:	e007      	b.n	8003a88 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	619a      	str	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	3758      	adds	r7, #88	; 0x58
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <__libc_init_array>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4d0d      	ldr	r5, [pc, #52]	; (8003ac8 <__libc_init_array+0x38>)
 8003a94:	4c0d      	ldr	r4, [pc, #52]	; (8003acc <__libc_init_array+0x3c>)
 8003a96:	1b64      	subs	r4, r4, r5
 8003a98:	10a4      	asrs	r4, r4, #2
 8003a9a:	2600      	movs	r6, #0
 8003a9c:	42a6      	cmp	r6, r4
 8003a9e:	d109      	bne.n	8003ab4 <__libc_init_array+0x24>
 8003aa0:	4d0b      	ldr	r5, [pc, #44]	; (8003ad0 <__libc_init_array+0x40>)
 8003aa2:	4c0c      	ldr	r4, [pc, #48]	; (8003ad4 <__libc_init_array+0x44>)
 8003aa4:	f000 f820 	bl	8003ae8 <_init>
 8003aa8:	1b64      	subs	r4, r4, r5
 8003aaa:	10a4      	asrs	r4, r4, #2
 8003aac:	2600      	movs	r6, #0
 8003aae:	42a6      	cmp	r6, r4
 8003ab0:	d105      	bne.n	8003abe <__libc_init_array+0x2e>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab8:	4798      	blx	r3
 8003aba:	3601      	adds	r6, #1
 8003abc:	e7ee      	b.n	8003a9c <__libc_init_array+0xc>
 8003abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac2:	4798      	blx	r3
 8003ac4:	3601      	adds	r6, #1
 8003ac6:	e7f2      	b.n	8003aae <__libc_init_array+0x1e>
 8003ac8:	08003b20 	.word	0x08003b20
 8003acc:	08003b20 	.word	0x08003b20
 8003ad0:	08003b20 	.word	0x08003b20
 8003ad4:	08003b24 	.word	0x08003b24

08003ad8 <memset>:
 8003ad8:	4402      	add	r2, r0
 8003ada:	4603      	mov	r3, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <memset+0xa>
 8003ae0:	4770      	bx	lr
 8003ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae6:	e7f9      	b.n	8003adc <memset+0x4>

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr
