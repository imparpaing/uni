
Micro-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd0  08006cd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd8  08006cd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000070  08006d50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08006d50  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012afe  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ec  00000000  00000000  00032b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00035388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d69  00000000  00000000  00036fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013712  00000000  00000000  0005fd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcea2  00000000  00000000  0007343b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001702dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d4  00000000  00000000  00170330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006ac8 	.word	0x08006ac8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006ac8 	.word	0x08006ac8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_GPIO_Init+0xa4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a22      	ldr	r2, [pc, #136]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_GPIO_Init+0xa4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_GPIO_Init+0xa4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xa8>)
 8000670:	f001 ff20 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xa8>)
 800068c:	f001 fd66 	bl	800215c <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020400 	.word	0x40020400

080006a0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_IWDG_Init+0x34>)
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <MX_IWDG_Init+0x38>)
 80006a8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_IWDG_Init+0x34>)
 80006ac:	2206      	movs	r2, #6
 80006ae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_IWDG_Init+0x34>)
 80006b2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006b6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_IWDG_Init+0x34>)
 80006ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006be:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_IWDG_Init+0x34>)
 80006c2:	f001 ff2a 	bl	800251a <HAL_IWDG_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80006cc:	f001 f88a 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	40003000 	.word	0x40003000

080006dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006e0:	f3bf 8f4f 	dsb	sy
}
 80006e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e6:	f3bf 8f6f 	isb	sy
}
 80006ea:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <SCB_EnableICache+0x48>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006f4:	f3bf 8f4f 	dsb	sy
}
 80006f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006fa:	f3bf 8f6f 	isb	sy
}
 80006fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SCB_EnableICache+0x48>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SCB_EnableICache+0x48>)
 8000706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000712:	f3bf 8f6f 	isb	sy
}
 8000716:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SCB_EnableDCache+0x84>)
 8000730:	2200      	movs	r2, #0
 8000732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000736:	f3bf 8f4f 	dsb	sy
}
 800073a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <SCB_EnableDCache+0x84>)
 800073e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000742:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	0b5b      	lsrs	r3, r3, #13
 8000748:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800074c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	08db      	lsrs	r3, r3, #3
 8000752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000756:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	015a      	lsls	r2, r3, #5
 800075c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000760:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000766:	4911      	ldr	r1, [pc, #68]	; (80007ac <SCB_EnableDCache+0x84>)
 8000768:	4313      	orrs	r3, r2
 800076a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	60ba      	str	r2, [r7, #8]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1ef      	bne.n	8000758 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	60fa      	str	r2, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1e5      	bne.n	800074e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000782:	f3bf 8f4f 	dsb	sy
}
 8000786:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <SCB_EnableDCache+0x84>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <SCB_EnableDCache+0x84>)
 800078e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000792:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000794:	f3bf 8f4f 	dsb	sy
}
 8000798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800079a:	f3bf 8f6f 	isb	sy
}
 800079e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <uart_print>:
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
// Print character to terminal
void uart_print(unsigned char x)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	USART3->TDR =(x);
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <uart_print+0x2c>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 80007c0:	bf00      	nop
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <uart_print+0x2c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <uart_print+0x12>
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40004800 	.word	0x40004800

080007e0 <char_is_endmessage>:

uint8_t char_is_endmessage(char c)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b0d      	cmp	r3, #13
 80007ee:	d002      	beq.n	80007f6 <char_is_endmessage+0x16>
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	d101      	bne.n	80007fa <char_is_endmessage+0x1a>
	{
		return 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <char_is_endmessage+0x1c>
	}
	else return 0;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <rx_has_data>:

// Reception
uint8_t rx_has_data()
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <rx_has_data+0x24>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <rx_has_data+0x28>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	429a      	cmp	r2, r3
 800081a:	d101      	bne.n	8000820 <rx_has_data+0x18>
	{
		return 0;
 800081c:	2300      	movs	r3, #0
 800081e:	e000      	b.n	8000822 <rx_has_data+0x1a>
	}
	else return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	200000d2 	.word	0x200000d2
 8000830:	200000d3 	.word	0x200000d3

08000834 <increase_rx_empty>:

void increase_rx_empty()
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	rx_empty++;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <increase_rx_empty+0x2c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	3301      	adds	r3, #1
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <increase_rx_empty+0x2c>)
 8000844:	701a      	strb	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <increase_rx_empty+0x2c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b31      	cmp	r3, #49	; 0x31
 800084e:	d902      	bls.n	8000856 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <increase_rx_empty+0x2c>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
	}
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	200000d2 	.word	0x200000d2

08000864 <increase_rx_busy>:

void increase_rx_busy()
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	rx_busy++;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <increase_rx_busy+0x2c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <increase_rx_busy+0x2c>)
 8000874:	701a      	strb	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <increase_rx_busy+0x2c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b31      	cmp	r3, #49	; 0x31
 800087e:	d902      	bls.n	8000886 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <increase_rx_busy+0x2c>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	}
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	200000d3 	.word	0x200000d3

08000894 <tx_has_data>:

// Transmission
uint8_t tx_has_data()
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <tx_has_data+0x24>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <tx_has_data+0x28>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d101      	bne.n	80008ac <tx_has_data+0x18>
	{
		return 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	e000      	b.n	80008ae <tx_has_data+0x1a>
	}
	else return 1;
 80008ac:	2301      	movs	r3, #1
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	20000106 	.word	0x20000106
 80008bc:	20000107 	.word	0x20000107

080008c0 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	tx_busy++;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <increase_tx_busy+0x2c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <increase_tx_busy+0x2c>)
 80008d0:	701a      	strb	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <increase_tx_busy+0x2c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b31      	cmp	r3, #49	; 0x31
 80008da:	d902      	bls.n	80008e2 <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <increase_tx_busy+0x2c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
	}
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	20000107 	.word	0x20000107

080008f0 <timer_delay>:

void timer_delay(uint16_t ms)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
	// Reset timer counter
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <timer_delay+0x30>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait for set period to pass
	while (__HAL_TIM_GET_COUNTER(&htim3) < ms);
 8000902:	bf00      	nop
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <timer_delay+0x30>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	429a      	cmp	r2, r3
 800090e:	d3f9      	bcc.n	8000904 <timer_delay+0x14>
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200001f4 	.word	0x200001f4

08000924 <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <get_char+0x24>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <get_char+0x28>)
 8000934:	5c9b      	ldrb	r3, [r3, r2]
 8000936:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000938:	f7ff ff94 	bl	8000864 <increase_rx_busy>
	return tmp;
 800093c:	79fb      	ldrb	r3, [r7, #7]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000d3 	.word	0x200000d3
 800094c:	200000a0 	.word	0x200000a0

08000950 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 800095c:	e041      	b.n	80009e2 <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <get_message+0xa8>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	461c      	mov	r4, r3
 8000964:	f7ff ffde 	bl	8000924 <get_char>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <get_message+0xac>)
 800096e:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <get_message+0xa8>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <get_message+0xac>)
 8000978:	5c9b      	ldrb	r3, [r3, r2]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff30 	bl	80007e0 <char_is_endmessage>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d021      	beq.n	80009ca <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <get_message+0xa8>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <get_message+0xac>)
 800098e:	2100      	movs	r1, #0
 8000990:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e009      	b.n	80009ac <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000998:	7bfa      	ldrb	r2, [r7, #15]
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	440b      	add	r3, r1
 80009a0:	4916      	ldr	r1, [pc, #88]	; (80009fc <get_message+0xac>)
 80009a2:	5c8a      	ldrb	r2, [r1, r2]
 80009a4:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	3301      	adds	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <get_message+0xa8>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3ef      	bcc.n	8000998 <get_message+0x48>
			}

			message_length = idx;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <get_message+0xa8>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <get_message+0xa8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
			return message_length;
 80009c4:	89bb      	ldrh	r3, [r7, #12]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	e011      	b.n	80009ee <get_message+0x9e>
		}
		else
		{
			idx++;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <get_message+0xa8>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <get_message+0xa8>)
 80009d4:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <get_message+0xa8>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	2b32      	cmp	r3, #50	; 0x32
 80009dc:	d901      	bls.n	80009e2 <get_message+0x92>
 80009de:	2300      	movs	r3, #0
 80009e0:	e005      	b.n	80009ee <get_message+0x9e>
	while(rx_has_data() == 1)
 80009e2:	f7ff ff11 	bl	8000808 <rx_has_data>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d0b8      	beq.n	800095e <get_message+0xe>
		}
	}
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001b6 	.word	0x200001b6
 80009fc:	200001b8 	.word	0x200001b8

08000a00 <send_response>:

// Send response from STM
void send_response(char *message, ...)
{
 8000a00:	b40f      	push	{r0, r1, r2, r3}
 8000a02:	b590      	push	{r4, r7, lr}
 8000a04:	b091      	sub	sp, #68	; 0x44
 8000a06:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 8000a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a0c:	607b      	str	r3, [r7, #4]
	vsprintf(response, message, arglist);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fb84 	bl	8006124 <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <send_response+0xc4>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000a28:	e012      	b.n	8000a50 <send_response+0x50>
	{
		tx_buffer[idx] = response[i];
 8000a2a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000a2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a2e:	3240      	adds	r2, #64	; 0x40
 8000a30:	443a      	add	r2, r7
 8000a32:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <send_response+0xc8>)
 8000a38:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000a3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e

		if (idx >= BUFFER_LENGTH)
 8000a40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a42:	2b31      	cmp	r3, #49	; 0x31
 8000a44:	d901      	bls.n	8000a4a <send_response+0x4a>
			idx = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	87fb      	strh	r3, [r7, #62]	; 0x3e
	for (uint16_t i=0; i<strlen(response); i++)
 8000a4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000a50:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fbf2 	bl	8000240 <strlen>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	d3e3      	bcc.n	8000a2a <send_response+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a62:	b672      	cpsid	i
}
 8000a64:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 8000a66:	f7ff ff15 	bl	8000894 <tx_has_data>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d118      	bne.n	8000aa2 <send_response+0xa2>
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <send_response+0xcc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	2b80      	cmp	r3, #128	; 0x80
 8000a7c:	d111      	bne.n	8000aa2 <send_response+0xa2>
	{
		tx_empty = idx;
 8000a7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <send_response+0xc4>)
 8000a84:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <send_response+0xd0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <send_response+0xc8>)
 8000a90:	4413      	add	r3, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <send_response+0xcc>)
 8000a98:	f003 fefa 	bl	8004890 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 8000a9c:	f7ff ff10 	bl	80008c0 <increase_tx_busy>
 8000aa0:	e003      	b.n	8000aaa <send_response+0xaa>
	}
	else
		tx_empty = idx;
 8000aa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <send_response+0xc4>)
 8000aa8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000aaa:	b662      	cpsie	i
}
 8000aac:	bf00      	nop

	__enable_irq();

	// Wait after re-enabling interrupts
	timer_delay(5);
 8000aae:	2005      	movs	r0, #5
 8000ab0:	f7ff ff1e 	bl	80008f0 <timer_delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	3744      	adds	r7, #68	; 0x44
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000abe:	b004      	add	sp, #16
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000106 	.word	0x20000106
 8000ac8:	200000d4 	.word	0x200000d4
 8000acc:	20000240 	.word	0x20000240
 8000ad0:	20000107 	.word	0x20000107

08000ad4 <turn_on_led>:

void turn_on_led()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <turn_on_led+0x14>)
 8000ade:	f001 fce9 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020400 	.word	0x40020400

08000aec <turn_off_led>:

void turn_off_led()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <turn_off_led+0x14>)
 8000af6:	f001 fcdd 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40020400 	.word	0x40020400
 8000b04:	00000000 	.word	0x00000000

08000b08 <calculate_delay>:

uint16_t calculate_delay(uint8_t blink_hz)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	float delay_f = 1800.0;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <calculate_delay+0x90>)
 8000b14:	60fb      	str	r3, [r7, #12]

	if (blink_hz == 1)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10b      	bne.n	8000b34 <calculate_delay+0x2c>
		delay_f = delay_f / blink_hz;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b26:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b2e:	edc7 7a03 	vstr	s15, [r7, #12]
 8000b32:	e012      	b.n	8000b5a <calculate_delay+0x52>
	else
		delay_f = delay_f / (blink_hz * 1.8);
 8000b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b38:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	ee07 3a90 	vmov	s15, r3
 8000b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b46:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000b90 <calculate_delay+0x88>
 8000b4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b4e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b56:	edc7 7a03 	vstr	s15, [r7, #12]

	delay_f = ceil(delay_f);
 8000b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b62:	eeb0 0b47 	vmov.f64	d0, d7
 8000b66:	f005 ff37 	bl	80069d8 <ceil>
 8000b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b72:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t delay_ms = (uint16_t)delay_f;
 8000b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b7e:	ee17 3a90 	vmov	r3, s15
 8000b82:	817b      	strh	r3, [r7, #10]
	return delay_ms;
 8000b84:	897b      	ldrh	r3, [r7, #10]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	cccccccd 	.word	0xcccccccd
 8000b94:	3ffccccc 	.word	0x3ffccccc
 8000b98:	44e10000 	.word	0x44e10000

08000b9c <validate_command>:

uint8_t validate_command(char *single_command_message)
{
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b092      	sub	sp, #72	; 0x48
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	uint8_t command_valid = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Command template arrays
	char led_on[] = "LED[ON]";
 8000baa:	4a46      	ldr	r2, [pc, #280]	; (8000cc4 <validate_command+0x128>)
 8000bac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb4:	e883 0003 	stmia.w	r3, {r0, r1}
	char led_off[] = "LED[OFF]";
 8000bb8:	4a43      	ldr	r2, [pc, #268]	; (8000cc8 <validate_command+0x12c>)
 8000bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bc0:	c303      	stmia	r3!, {r0, r1}
 8000bc2:	701a      	strb	r2, [r3, #0]
	char led_blink[] = "LED[BLINK,X]";
 8000bc4:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <validate_command+0x130>)
 8000bc6:	f107 0420 	add.w	r4, r7, #32
 8000bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bcc:	c407      	stmia	r4!, {r0, r1, r2}
 8000bce:	7023      	strb	r3, [r4, #0]
	char insert_delay[] = "INSERT[DELAY,XXXX]";
 8000bd0:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <validate_command+0x134>)
 8000bd2:	f107 040c 	add.w	r4, r7, #12
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	8022      	strh	r2, [r4, #0]
 8000be2:	3402      	adds	r4, #2
 8000be4:	0c1b      	lsrs	r3, r3, #16
 8000be6:	7023      	strb	r3, [r4, #0]

	// Compare command with templates
	if (strncmp(single_command_message, led_on, sizeof(led_on)) == 0)
 8000be8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bec:	2208      	movs	r2, #8
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f005 f9e0 	bl	8005fb6 <strncmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d103      	bne.n	8000c04 <validate_command+0x68>
	{
		command_valid = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c02:	e059      	b.n	8000cb8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_off, sizeof(led_off)) == 0)
 8000c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c08:	2209      	movs	r2, #9
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f005 f9d2 	bl	8005fb6 <strncmp>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d103      	bne.n	8000c20 <validate_command+0x84>
	{
		command_valid = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c1e:	e04b      	b.n	8000cb8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, led_blink, sizeof(led_blink)-3) == 0)
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	220a      	movs	r2, #10
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f005 f9c4 	bl	8005fb6 <strncmp>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d111      	bne.n	8000c58 <validate_command+0xbc>
	{
		if ((single_command_message[10] >= 0x30 && single_command_message[10] <= 0x39) && single_command[11] == ']')
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	330a      	adds	r3, #10
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000c3c:	d93c      	bls.n	8000cb8 <validate_command+0x11c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	330a      	adds	r3, #10
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b39      	cmp	r3, #57	; 0x39
 8000c46:	d837      	bhi.n	8000cb8 <validate_command+0x11c>
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <validate_command+0x138>)
 8000c4a:	7adb      	ldrb	r3, [r3, #11]
 8000c4c:	2b5d      	cmp	r3, #93	; 0x5d
 8000c4e:	d133      	bne.n	8000cb8 <validate_command+0x11c>
			command_valid = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c56:	e02f      	b.n	8000cb8 <validate_command+0x11c>
	}
	else if (strncmp(single_command_message, insert_delay, sizeof(insert_delay)-6) == 0)
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	220d      	movs	r2, #13
 8000c5e:	4619      	mov	r1, r3
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f005 f9a8 	bl	8005fb6 <strncmp>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d125      	bne.n	8000cb8 <validate_command+0x11c>
	{
		for (uint8_t y=0; y<4; y++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000c72:	e01d      	b.n	8000cb0 <validate_command+0x114>
			if ((single_command_message[12+y] >= 0x30 && single_command_message[12+y] <= 0x39) && single_command[17] == ']')
 8000c74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c78:	330c      	adds	r3, #12
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b2f      	cmp	r3, #47	; 0x2f
 8000c84:	d90f      	bls.n	8000ca6 <validate_command+0x10a>
 8000c86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000c8a:	330c      	adds	r3, #12
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b39      	cmp	r3, #57	; 0x39
 8000c96:	d806      	bhi.n	8000ca6 <validate_command+0x10a>
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <validate_command+0x138>)
 8000c9a:	7c5b      	ldrb	r3, [r3, #17]
 8000c9c:	2b5d      	cmp	r3, #93	; 0x5d
 8000c9e:	d102      	bne.n	8000ca6 <validate_command+0x10a>
				command_valid = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		for (uint8_t y=0; y<4; y++)
 8000ca6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000caa:	3301      	adds	r3, #1
 8000cac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000cb0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d9dd      	bls.n	8000c74 <validate_command+0xd8>
	}

	return command_valid;
 8000cb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3748      	adds	r7, #72	; 0x48
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc4:	08006ae0 	.word	0x08006ae0
 8000cc8:	08006ae8 	.word	0x08006ae8
 8000ccc:	08006af4 	.word	0x08006af4
 8000cd0:	08006b04 	.word	0x08006b04
 8000cd4:	2000017c 	.word	0x2000017c

08000cd8 <clear_array>:

void clear_array(char *array, uint16_t array_length)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	81fb      	strh	r3, [r7, #14]
	while (idx < array_length)
 8000ce8:	e007      	b.n	8000cfa <clear_array+0x22>
	{
		array[idx] = '\0';
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
		idx++;
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	81fb      	strh	r3, [r7, #14]
	while (idx < array_length)
 8000cfa:	89fa      	ldrh	r2, [r7, #14]
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d3f3      	bcc.n	8000cea <clear_array+0x12>
	}
	array_length = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	807b      	strh	r3, [r7, #2]
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b5b0      	push	{r4, r5, r7, lr}
 8000d16:	b0b0      	sub	sp, #192	; 0xc0
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d1a:	f000 fd37 	bl	800178c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d1e:	f7ff fcdd 	bl	80006dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d22:	f7ff fd01 	bl	8000728 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 ff78 	bl	8001c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 fc65 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f7ff fc61 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d32:	f000 feb1 	bl	8001a98 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000d36:	f000 fe13 	bl	8001960 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000d3a:	f7ff fcb1 	bl	80006a0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000d3e:	48aa      	ldr	r0, [pc, #680]	; (8000fe8 <main+0x2d4>)
 8000d40:	f002 fdae 	bl	80038a0 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	49a9      	ldr	r1, [pc, #676]	; (8000fec <main+0x2d8>)
 8000d48:	48a9      	ldr	r0, [pc, #676]	; (8000ff0 <main+0x2dc>)
 8000d4a:	f003 fdff 	bl	800494c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_print('>');
 8000d4e:	203e      	movs	r0, #62	; 0x3e
 8000d50:	f7ff fd2e 	bl	80007b0 <uart_print>
  uart_print('\r');
 8000d54:	200d      	movs	r0, #13
 8000d56:	f7ff fd2b 	bl	80007b0 <uart_print>
  uart_print('\n');
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f7ff fd28 	bl	80007b0 <uart_print>
  __IO uint16_t param_length;
  static uint16_t command_length;

  // LED command parameters
  __IO uint8_t led_action;
  char on_cmd[] = "ON";
 8000d60:	4aa4      	ldr	r2, [pc, #656]	; (8000ff4 <main+0x2e0>)
 8000d62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	8019      	strh	r1, [r3, #0]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	0c12      	lsrs	r2, r2, #16
 8000d70:	701a      	strb	r2, [r3, #0]
  char off_cmd[] = "OFF";
 8000d72:	4ba1      	ldr	r3, [pc, #644]	; (8000ff8 <main+0x2e4>)
 8000d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  char blink_cmd[] = "BLINK,";
 8000d78:	4aa0      	ldr	r2, [pc, #640]	; (8000ffc <main+0x2e8>)
 8000d7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d82:	6018      	str	r0, [r3, #0]
 8000d84:	3304      	adds	r3, #4
 8000d86:	8019      	strh	r1, [r3, #0]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	0c0a      	lsrs	r2, r1, #16
 8000d8c:	701a      	strb	r2, [r3, #0]

  // INSERT command parameters
  char delay_cmd[] = "DELAY,";
 8000d8e:	4a9c      	ldr	r2, [pc, #624]	; (8001000 <main+0x2ec>)
 8000d90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d98:	6018      	str	r0, [r3, #0]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	8019      	strh	r1, [r3, #0]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	0c0a      	lsrs	r2, r1, #16
 8000da2:	701a      	strb	r2, [r3, #0]

  // Error messages
  char invalid_command[] = "Error: Command not found\r\n";
 8000da4:	4b97      	ldr	r3, [pc, #604]	; (8001004 <main+0x2f0>)
 8000da6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000daa:	461d      	mov	r5, r3
 8000dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000db4:	c403      	stmia	r4!, {r0, r1}
 8000db6:	8022      	strh	r2, [r4, #0]
 8000db8:	3402      	adds	r4, #2
 8000dba:	0c13      	lsrs	r3, r2, #16
 8000dbc:	7023      	strb	r3, [r4, #0]
  char missing_separator[] = "Error: No command separator found\r\n";
 8000dbe:	4b92      	ldr	r3, [pc, #584]	; (8001008 <main+0x2f4>)
 8000dc0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000dc4:	461d      	mov	r5, r3
 8000dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dce:	682b      	ldr	r3, [r5, #0]
 8000dd0:	6023      	str	r3, [r4, #0]

  while (1)
  {
	if (character == '\n' || character == '\r')
 8000dd2:	4b86      	ldr	r3, [pc, #536]	; (8000fec <main+0x2d8>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b0a      	cmp	r3, #10
 8000dd8:	d003      	beq.n	8000de2 <main+0xce>
 8000dda:	4b84      	ldr	r3, [pc, #528]	; (8000fec <main+0x2d8>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b0d      	cmp	r3, #13
 8000de0:	d106      	bne.n	8000df0 <main+0xdc>
	{
		message_length = get_message(message);
 8000de2:	488a      	ldr	r0, [pc, #552]	; (800100c <main+0x2f8>)
 8000de4:	f7ff fdb4 	bl	8000950 <get_message>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b88      	ldr	r3, [pc, #544]	; (8001010 <main+0x2fc>)
 8000dee:	701a      	strb	r2, [r3, #0]
	}

	if (message_length > 0)
 8000df0:	4b87      	ldr	r3, [pc, #540]	; (8001010 <main+0x2fc>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 83a9 	beq.w	800154e <main+0x83a>
	{
		for (uint8_t i=0; i<message_length; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8000e02:	e394      	b.n	800152e <main+0x81a>
		{
			// Check for command separator character
			command_separator = strchr(message, ';');
 8000e04:	213b      	movs	r1, #59	; 0x3b
 8000e06:	4881      	ldr	r0, [pc, #516]	; (800100c <main+0x2f8>)
 8000e08:	f005 f8c8 	bl	8005f9c <strchr>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a81      	ldr	r2, [pc, #516]	; (8001014 <main+0x300>)
 8000e10:	6013      	str	r3, [r2, #0]

			// If separator char was not found
			if (command_separator == NULL)
 8000e12:	4b80      	ldr	r3, [pc, #512]	; (8001014 <main+0x300>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d111      	bne.n	8000e3e <main+0x12a>
			{
				while (i < message_length)
 8000e1a:	e004      	b.n	8000e26 <main+0x112>
					i++;
 8000e1c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e20:	3301      	adds	r3, #1
 8000e22:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (i < message_length)
 8000e26:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <main+0x2fc>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3f3      	bcc.n	8000e1c <main+0x108>
				send_response(missing_separator);
 8000e34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fde1 	bl	8000a00 <send_response>
			}

			// Enter the switch statement when first character is found
			if ((sw_state == 0 && message[i] == 'L') || (sw_state == 0 && message[i] == 'I'))
 8000e3e:	4b76      	ldr	r3, [pc, #472]	; (8001018 <main+0x304>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d105      	bne.n	8000e54 <main+0x140>
 8000e48:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e4c:	4a6f      	ldr	r2, [pc, #444]	; (800100c <main+0x2f8>)
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	2b4c      	cmp	r3, #76	; 0x4c
 8000e52:	d00a      	beq.n	8000e6a <main+0x156>
 8000e54:	4b70      	ldr	r3, [pc, #448]	; (8001018 <main+0x304>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d109      	bne.n	8000e72 <main+0x15e>
 8000e5e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e62:	4a6a      	ldr	r2, [pc, #424]	; (800100c <main+0x2f8>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	2b49      	cmp	r3, #73	; 0x49
 8000e68:	d103      	bne.n	8000e72 <main+0x15e>
				sw_state = 1;
 8000e6a:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <main+0x304>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e019      	b.n	8000ea6 <main+0x192>
			else if (sw_state == 0 && (message[i] != ';' && message[i] != '#' && message[i] != ','))
 8000e72:	4b69      	ldr	r3, [pc, #420]	; (8001018 <main+0x304>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d114      	bne.n	8000ea6 <main+0x192>
 8000e7c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e80:	4a62      	ldr	r2, [pc, #392]	; (800100c <main+0x2f8>)
 8000e82:	5cd3      	ldrb	r3, [r2, r3]
 8000e84:	2b3b      	cmp	r3, #59	; 0x3b
 8000e86:	d00e      	beq.n	8000ea6 <main+0x192>
 8000e88:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e8c:	4a5f      	ldr	r2, [pc, #380]	; (800100c <main+0x2f8>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	2b23      	cmp	r3, #35	; 0x23
 8000e92:	d008      	beq.n	8000ea6 <main+0x192>
 8000e94:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000e98:	4a5c      	ldr	r2, [pc, #368]	; (800100c <main+0x2f8>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	2b2c      	cmp	r3, #44	; 0x2c
 8000e9e:	d002      	beq.n	8000ea6 <main+0x192>
				error_found = 1;
 8000ea0:	4b5e      	ldr	r3, [pc, #376]	; (800101c <main+0x308>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]

			switch (sw_state)
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <main+0x304>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	f200 82ce 	bhi.w	8001450 <main+0x73c>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <main+0x1a8>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ed1 	.word	0x08000ed1
 8000ec0:	08000f67 	.word	0x08000f67
 8000ec4:	08000fa7 	.word	0x08000fa7
 8000ec8:	08001021 	.word	0x08001021
 8000ecc:	080010bd 	.word	0x080010bd
			{
			case 1:
				// Check for remaining command characters
				if (message[i+1] == 'E' && message[i+2] == 'D')
 8000ed0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	; (800100c <main+0x2f8>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	2b45      	cmp	r3, #69	; 0x45
 8000edc:	d10f      	bne.n	8000efe <main+0x1ea>
 8000ede:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	4a49      	ldr	r2, [pc, #292]	; (800100c <main+0x2f8>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	2b44      	cmp	r3, #68	; 0x44
 8000eea:	d108      	bne.n	8000efe <main+0x1ea>
				{
					i = i+2;
 8000eec:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000ef6:	4b48      	ldr	r3, [pc, #288]	; (8001018 <main+0x304>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e032      	b.n	8000f64 <main+0x250>
				}
				else if (message[i+1] == 'N' && message[i+2] == 'S' && message[i+3] == 'E' && message[i+4] == 'R' && message[i+5] == 'T')
 8000efe:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a41      	ldr	r2, [pc, #260]	; (800100c <main+0x2f8>)
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	2b4e      	cmp	r3, #78	; 0x4e
 8000f0a:	d124      	bne.n	8000f56 <main+0x242>
 8000f0c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f10:	3302      	adds	r3, #2
 8000f12:	4a3e      	ldr	r2, [pc, #248]	; (800100c <main+0x2f8>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	2b53      	cmp	r3, #83	; 0x53
 8000f18:	d11d      	bne.n	8000f56 <main+0x242>
 8000f1a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f1e:	3303      	adds	r3, #3
 8000f20:	4a3a      	ldr	r2, [pc, #232]	; (800100c <main+0x2f8>)
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	2b45      	cmp	r3, #69	; 0x45
 8000f26:	d116      	bne.n	8000f56 <main+0x242>
 8000f28:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	4a37      	ldr	r2, [pc, #220]	; (800100c <main+0x2f8>)
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	2b52      	cmp	r3, #82	; 0x52
 8000f34:	d10f      	bne.n	8000f56 <main+0x242>
 8000f36:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f3a:	3305      	adds	r3, #5
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <main+0x2f8>)
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	2b54      	cmp	r3, #84	; 0x54
 8000f42:	d108      	bne.n	8000f56 <main+0x242>
				{
					i = i+5;
 8000f44:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f48:	3305      	adds	r3, #5
 8000f4a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					sw_state = 2;
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <main+0x304>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e006      	b.n	8000f64 <main+0x250>
				}
				else
				{
					error_found = 1;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <main+0x308>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000f5c:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <main+0x304>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f62:	e275      	b.n	8001450 <main+0x73c>
 8000f64:	e274      	b.n	8001450 <main+0x73c>

			case 2:
				// Get opening bracket index
				open_bracket = strchr(message, '[');
 8000f66:	215b      	movs	r1, #91	; 0x5b
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <main+0x2f8>)
 8000f6a:	f005 f817 	bl	8005f9c <strchr>
 8000f6e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

				// Reset sw_state if opening bracket was not found
				if (open_bracket == NULL)
 8000f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10b      	bne.n	8000f92 <main+0x27e>
				{
					i = i+1;
 8000f7a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <main+0x308>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <main+0x304>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
				{
					// Get index of the opening bracket
					open_idx = (uint16_t)(open_bracket - message);
					sw_state = 3;
				}
				break;
 8000f90:	e25e      	b.n	8001450 <main+0x73c>
					open_idx = (uint16_t)(open_bracket - message);
 8000f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <main+0x2f8>)
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
					sw_state = 3;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <main+0x304>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	701a      	strb	r2, [r3, #0]
				break;
 8000fa4:	e254      	b.n	8001450 <main+0x73c>

			case 3:
				// Get closing bracket index
				close_bracket = strchr(message, ']');
 8000fa6:	215d      	movs	r1, #93	; 0x5d
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <main+0x2f8>)
 8000faa:	f004 fff7 	bl	8005f9c <strchr>
 8000fae:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

				// Reset sw_state if closing bracket was not found
				if (close_bracket == NULL)
 8000fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <main+0x2be>
				{
					i = i+1;
 8000fba:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
					error_found = 1;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <main+0x308>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
					sw_state = 0;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <main+0x304>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
				{
					// Get index of closing bracket
					close_idx = (uint16_t)(close_bracket - message);
					sw_state = 4;
				}
				break;
 8000fd0:	e23e      	b.n	8001450 <main+0x73c>
					close_idx = (uint16_t)(close_bracket - message);
 8000fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <main+0x2f8>)
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
					sw_state = 4;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <main+0x304>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	701a      	strb	r2, [r3, #0]
				break;
 8000fe4:	e234      	b.n	8001450 <main+0x73c>
 8000fe6:	bf00      	nop
 8000fe8:	200001f4 	.word	0x200001f4
 8000fec:	2000009c 	.word	0x2000009c
 8000ff0:	20000240 	.word	0x20000240
 8000ff4:	08006b20 	.word	0x08006b20
 8000ff8:	0046464f 	.word	0x0046464f
 8000ffc:	08006b24 	.word	0x08006b24
 8001000:	08006b2c 	.word	0x08006b2c
 8001004:	08006b34 	.word	0x08006b34
 8001008:	08006b50 	.word	0x08006b50
 800100c:	20000108 	.word	0x20000108
 8001010:	2000013a 	.word	0x2000013a
 8001014:	200001b0 	.word	0x200001b0
 8001018:	2000013b 	.word	0x2000013b
 800101c:	200001b4 	.word	0x200001b4

			case 4:
				// Calculate parameter length in chars - basic CRC
				param_length = (close_idx - open_idx) - 1;
 8001020:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8001024:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	3b01      	subs	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

				// Place chars between the brackets into temporary command array
				char command[BUFFER_LENGTH];
				command_length = 0;
 8001034:	4bb7      	ldr	r3, [pc, #732]	; (8001314 <main+0x600>)
 8001036:	2200      	movs	r2, #0
 8001038:	801a      	strh	r2, [r3, #0]
				uint8_t j = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8001040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001044:	3301      	adds	r3, #1
 8001046:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800104a:	e022      	b.n	8001092 <main+0x37e>
				{
					command[j] = message[y];
 800104c:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8001050:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001054:	49b0      	ldr	r1, [pc, #704]	; (8001318 <main+0x604>)
 8001056:	5c8a      	ldrb	r2, [r1, r2]
 8001058:	33c0      	adds	r3, #192	; 0xc0
 800105a:	443b      	add	r3, r7
 800105c:	f803 2cbc 	strb.w	r2, [r3, #-188]
					temp_command[j] = command[j];
 8001060:	f897 20ba 	ldrb.w	r2, [r7, #186]	; 0xba
 8001064:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001068:	32c0      	adds	r2, #192	; 0xc0
 800106a:	443a      	add	r2, r7
 800106c:	f812 1cbc 	ldrb.w	r1, [r2, #-188]
 8001070:	4aaa      	ldr	r2, [pc, #680]	; (800131c <main+0x608>)
 8001072:	54d1      	strb	r1, [r2, r3]
					j++;
 8001074:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001078:	3301      	adds	r3, #1
 800107a:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
					command_length = j;
 800107e:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001082:	b29a      	uxth	r2, r3
 8001084:	4ba3      	ldr	r3, [pc, #652]	; (8001314 <main+0x600>)
 8001086:	801a      	strh	r2, [r3, #0]
				for (uint16_t y=open_idx+1; y<close_idx; y++)
 8001088:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800108c:	3301      	adds	r3, #1
 800108e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8001092:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 8001096:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800109a:	429a      	cmp	r2, r3
 800109c:	d3d6      	bcc.n	800104c <main+0x338>
				}

				if (command_length == param_length)
 800109e:	4b9d      	ldr	r3, [pc, #628]	; (8001314 <main+0x600>)
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d103      	bne.n	80010b4 <main+0x3a0>
					sw_state = 5;
 80010ac:	4b9c      	ldr	r3, [pc, #624]	; (8001320 <main+0x60c>)
 80010ae:	2205      	movs	r2, #5
 80010b0:	701a      	strb	r2, [r3, #0]
				else
					sw_state = 0;
				break;
 80010b2:	e1cd      	b.n	8001450 <main+0x73c>
					sw_state = 0;
 80010b4:	4b9a      	ldr	r3, [pc, #616]	; (8001320 <main+0x60c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
				break;
 80010ba:	e1c9      	b.n	8001450 <main+0x73c>

			case 5:
				// Check for command separator
				if (message[close_idx+1] != ';')
 80010bc:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a95      	ldr	r2, [pc, #596]	; (8001318 <main+0x604>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	2b3b      	cmp	r3, #59	; 0x3b
 80010c8:	d008      	beq.n	80010dc <main+0x3c8>
				{
					send_response(missing_separator);
 80010ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc96 	bl	8000a00 <send_response>
					sw_state = 0;
 80010d4:	4b92      	ldr	r3, [pc, #584]	; (8001320 <main+0x60c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
					break;
 80010da:	e1b9      	b.n	8001450 <main+0x73c>
				}

				// Print executed command
				char CMD[] = "COMMAND: ";
 80010dc:	4a91      	ldr	r2, [pc, #580]	; (8001324 <main+0x610>)
 80010de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e4:	c303      	stmia	r3!, {r0, r1}
 80010e6:	801a      	strh	r2, [r3, #0]
				char NEWLINE[] = "\r\n";
 80010e8:	4a8f      	ldr	r2, [pc, #572]	; (8001328 <main+0x614>)
 80010ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	4611      	mov	r1, r2
 80010f2:	8019      	strh	r1, [r3, #0]
 80010f4:	3302      	adds	r3, #2
 80010f6:	0c12      	lsrs	r2, r2, #16
 80010f8:	701a      	strb	r2, [r3, #0]

				send_response(CMD);
 80010fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fc7e 	bl	8000a00 <send_response>
				send_response(temp_command);
 8001104:	4885      	ldr	r0, [pc, #532]	; (800131c <main+0x608>)
 8001106:	f7ff fc7b 	bl	8000a00 <send_response>
				send_response(NEWLINE);
 800110a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fc76 	bl	8000a00 <send_response>

				// Clear temp array
				for (uint8_t y=0; y<command_length; y++)
 8001114:	2300      	movs	r3, #0
 8001116:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800111a:	e009      	b.n	8001130 <main+0x41c>
					temp_command[y] = '\0';
 800111c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001120:	4a7e      	ldr	r2, [pc, #504]	; (800131c <main+0x608>)
 8001122:	2100      	movs	r1, #0
 8001124:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<command_length; y++)
 8001126:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800112a:	3301      	adds	r3, #1
 800112c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001130:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b77      	ldr	r3, [pc, #476]	; (8001314 <main+0x600>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3ee      	bcc.n	800111c <main+0x408>

				// Compare char arrays and execute the command
				__IO size_t len = param_length;
 800113e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001142:	b29b      	uxth	r3, r3
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
				if (strncmp(command, on_cmd, len) == 0)
 8001146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001148:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f004 ff31 	bl	8005fb6 <strncmp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d13b      	bne.n	80011d2 <main+0x4be>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<7; y++)
 800115a:	2300      	movs	r3, #0
 800115c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001160:	e010      	b.n	8001184 <main+0x470>
						single_command[y] = message[close_idx-6+y];
 8001162:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001166:	1f9a      	subs	r2, r3, #6
 8001168:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800116c:	441a      	add	r2, r3
 800116e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001172:	4969      	ldr	r1, [pc, #420]	; (8001318 <main+0x604>)
 8001174:	5c89      	ldrb	r1, [r1, r2]
 8001176:	4a6d      	ldr	r2, [pc, #436]	; (800132c <main+0x618>)
 8001178:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<7; y++)
 800117a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800117e:	3301      	adds	r3, #1
 8001180:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001184:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001188:	2b06      	cmp	r3, #6
 800118a:	d9ea      	bls.n	8001162 <main+0x44e>

					// Validate last command
					temp_check = validate_command(single_command);
 800118c:	4867      	ldr	r0, [pc, #412]	; (800132c <main+0x618>)
 800118e:	f7ff fd05 	bl	8000b9c <validate_command>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b66      	ldr	r3, [pc, #408]	; (8001330 <main+0x61c>)
 8001198:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 800119a:	4b65      	ldr	r3, [pc, #404]	; (8001330 <main+0x61c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10f      	bne.n	80011c4 <main+0x4b0>
					{
						i = i+param_length;
 80011a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80011b0:	4413      	add	r3, r2
 80011b2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 80011b6:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <main+0x620>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]

						// Turn on LED
						led_action = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80011c2:	e120      	b.n	8001406 <main+0x6f2>
					}
					else
					{
						error_found = 1;
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <main+0x620>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 80011ca:	4b55      	ldr	r3, [pc, #340]	; (8001320 <main+0x60c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e119      	b.n	8001406 <main+0x6f2>
					}
				}
				else if (strncmp(command, off_cmd, len) == 0)
 80011d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d4:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 feeb 	bl	8005fb6 <strncmp>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d13b      	bne.n	800125e <main+0x54a>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<8; y++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80011ec:	e010      	b.n	8001210 <main+0x4fc>
						single_command[y] = message[close_idx-7+y];
 80011ee:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80011f2:	1fda      	subs	r2, r3, #7
 80011f4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80011f8:	441a      	add	r2, r3
 80011fa:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80011fe:	4946      	ldr	r1, [pc, #280]	; (8001318 <main+0x604>)
 8001200:	5c89      	ldrb	r1, [r1, r2]
 8001202:	4a4a      	ldr	r2, [pc, #296]	; (800132c <main+0x618>)
 8001204:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<8; y++)
 8001206:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800120a:	3301      	adds	r3, #1
 800120c:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8001210:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001214:	2b07      	cmp	r3, #7
 8001216:	d9ea      	bls.n	80011ee <main+0x4da>

					// Validate last command
					temp_check = validate_command(single_command);
 8001218:	4844      	ldr	r0, [pc, #272]	; (800132c <main+0x618>)
 800121a:	f7ff fcbf 	bl	8000b9c <validate_command>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b43      	ldr	r3, [pc, #268]	; (8001330 <main+0x61c>)
 8001224:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <main+0x61c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10f      	bne.n	8001250 <main+0x53c>
					{
						i = i+param_length;
 8001230:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001234:	b29b      	uxth	r3, r3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800123c:	4413      	add	r3, r2
 800123e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <main+0x620>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

						// Turn off LED
						led_action = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 800124e:	e0da      	b.n	8001406 <main+0x6f2>
					}
					else
					{
						error_found = 1;
 8001250:	4b38      	ldr	r3, [pc, #224]	; (8001334 <main+0x620>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001256:	4b32      	ldr	r3, [pc, #200]	; (8001320 <main+0x60c>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e0d3      	b.n	8001406 <main+0x6f2>
					}
				}
				else if (strncmp(command, blink_cmd, len-1) == 0)
 800125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fea4 	bl	8005fb6 <strncmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d13f      	bne.n	80012f4 <main+0x5e0>
				{
					// Store last command in a separate array
					for (uint8_t y=0; y<12; y++)
 8001274:	2300      	movs	r3, #0
 8001276:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800127a:	e011      	b.n	80012a0 <main+0x58c>
						single_command[y] = message[close_idx-11+y];
 800127c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001280:	f1a3 020b 	sub.w	r2, r3, #11
 8001284:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001288:	441a      	add	r2, r3
 800128a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800128e:	4922      	ldr	r1, [pc, #136]	; (8001318 <main+0x604>)
 8001290:	5c89      	ldrb	r1, [r1, r2]
 8001292:	4a26      	ldr	r2, [pc, #152]	; (800132c <main+0x618>)
 8001294:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<12; y++)
 8001296:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800129a:	3301      	adds	r3, #1
 800129c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80012a0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80012a4:	2b0b      	cmp	r3, #11
 80012a6:	d9e9      	bls.n	800127c <main+0x568>

					// Validate last command
					temp_check = validate_command(single_command);
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <main+0x618>)
 80012aa:	f7ff fc77 	bl	8000b9c <validate_command>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <main+0x61c>)
 80012b4:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <main+0x61c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d112      	bne.n	80012e6 <main+0x5d2>
					{
						i = i+param_length;
 80012c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80012cc:	4413      	add	r3, r2
 80012ce:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <main+0x620>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

						// Enable LED blink
						blink_setup = 1;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <main+0x624>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
						led_action = 2;
 80012de:	2302      	movs	r3, #2
 80012e0:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80012e4:	e08f      	b.n	8001406 <main+0x6f2>
					}
					else
					{
						error_found = 1;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <main+0x620>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <main+0x60c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e088      	b.n	8001406 <main+0x6f2>
					}
				}
				else if (strncmp(command, delay_cmd, len-4) == 0)
 80012f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f6:	1f1a      	subs	r2, r3, #4
 80012f8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fe59 	bl	8005fb6 <strncmp>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d17d      	bne.n	8001406 <main+0x6f2>
				{
					// Check if delay is a digit
					for (uint8_t y=0; y<4; y++)
 800130a:	2300      	movs	r3, #0
 800130c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001310:	e039      	b.n	8001386 <main+0x672>
 8001312:	bf00      	nop
 8001314:	200001ea 	.word	0x200001ea
 8001318:	20000108 	.word	0x20000108
 800131c:	20000148 	.word	0x20000148
 8001320:	2000013b 	.word	0x2000013b
 8001324:	08006b74 	.word	0x08006b74
 8001328:	08006b80 	.word	0x08006b80
 800132c:	2000017c 	.word	0x2000017c
 8001330:	200001b5 	.word	0x200001b5
 8001334:	200001b4 	.word	0x200001b4
 8001338:	2000013c 	.word	0x2000013c
						if (message[close_idx-4+y] >= 0x30 && message[close_idx-4+y] <= 0x39)
 800133c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001340:	1f1a      	subs	r2, r3, #4
 8001342:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001346:	4413      	add	r3, r2
 8001348:	4a9d      	ldr	r2, [pc, #628]	; (80015c0 <main+0x8ac>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	2b2f      	cmp	r3, #47	; 0x2f
 800134e:	d91e      	bls.n	800138e <main+0x67a>
 8001350:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001354:	1f1a      	subs	r2, r3, #4
 8001356:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800135a:	4413      	add	r3, r2
 800135c:	4a98      	ldr	r2, [pc, #608]	; (80015c0 <main+0x8ac>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	2b39      	cmp	r3, #57	; 0x39
 8001362:	d814      	bhi.n	800138e <main+0x67a>
							// Assign delay to temporary array
							temp[y] = message[close_idx-4+y];
 8001364:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001368:	1f1a      	subs	r2, r3, #4
 800136a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800136e:	441a      	add	r2, r3
 8001370:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001374:	4992      	ldr	r1, [pc, #584]	; (80015c0 <main+0x8ac>)
 8001376:	5c89      	ldrb	r1, [r1, r2]
 8001378:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <main+0x8b0>)
 800137a:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<4; y++)
 800137c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001380:	3301      	adds	r3, #1
 8001382:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8001386:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800138a:	2b03      	cmp	r3, #3
 800138c:	d9d6      	bls.n	800133c <main+0x628>
						else
							break;

					// Store last command in a separate array
					for (uint8_t y=0; y<18; y++)
 800138e:	2300      	movs	r3, #0
 8001390:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8001394:	e011      	b.n	80013ba <main+0x6a6>
						single_command[y] = message[close_idx-17+y];
 8001396:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800139a:	f1a3 0211 	sub.w	r2, r3, #17
 800139e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80013a2:	441a      	add	r2, r3
 80013a4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80013a8:	4985      	ldr	r1, [pc, #532]	; (80015c0 <main+0x8ac>)
 80013aa:	5c89      	ldrb	r1, [r1, r2]
 80013ac:	4a86      	ldr	r2, [pc, #536]	; (80015c8 <main+0x8b4>)
 80013ae:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y=0; y<18; y++)
 80013b0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80013b4:	3301      	adds	r3, #1
 80013b6:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 80013ba:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80013be:	2b11      	cmp	r3, #17
 80013c0:	d9e9      	bls.n	8001396 <main+0x682>

					// Validate last command
					temp_check = validate_command(single_command);
 80013c2:	4881      	ldr	r0, [pc, #516]	; (80015c8 <main+0x8b4>)
 80013c4:	f7ff fbea 	bl	8000b9c <validate_command>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b7f      	ldr	r3, [pc, #508]	; (80015cc <main+0x8b8>)
 80013ce:	701a      	strb	r2, [r3, #0]
					if (temp_check == 1)
 80013d0:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <main+0x8b8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10f      	bne.n	80013fa <main+0x6e6>
					{
						i = i+param_length;
 80013da:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80013e6:	4413      	add	r3, r2
 80013e8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
						error_found = 0;
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <main+0x8bc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

						// Enable the delay
						led_action = 3;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80013f8:	e005      	b.n	8001406 <main+0x6f2>
					}
					else
					{
						error_found = 1;
 80013fa:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <main+0x8bc>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
						sw_state = 0;
 8001400:	4b74      	ldr	r3, [pc, #464]	; (80015d4 <main+0x8c0>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
					}
				}

				// Replace bracket chars at the current opening and closing indexes
				message[open_idx] = '#';
 8001406:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800140a:	4a6d      	ldr	r2, [pc, #436]	; (80015c0 <main+0x8ac>)
 800140c:	2123      	movs	r1, #35	; 0x23
 800140e:	54d1      	strb	r1, [r2, r3]
				message[close_idx] = '#';
 8001410:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001414:	4a6a      	ldr	r2, [pc, #424]	; (80015c0 <main+0x8ac>)
 8001416:	2123      	movs	r1, #35	; 0x23
 8001418:	54d1      	strb	r1, [r2, r3]

				// Clear the single_command array
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 800141a:	2300      	movs	r3, #0
 800141c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8001420:	e009      	b.n	8001436 <main+0x722>
					single_command[y] = '\0';
 8001422:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001426:	4a68      	ldr	r2, [pc, #416]	; (80015c8 <main+0x8b4>)
 8001428:	2100      	movs	r1, #0
 800142a:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y=0; y<BUFFER_LENGTH; y++)
 800142c:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001430:	3301      	adds	r3, #1
 8001432:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8001436:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800143a:	2b31      	cmp	r3, #49	; 0x31
 800143c:	d9f1      	bls.n	8001422 <main+0x70e>

				// Reset sw_state
				i = i-1;
 800143e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001442:	3b01      	subs	r3, #1
 8001444:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				sw_state = 0;
 8001448:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <main+0x8c0>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
				break;
 800144e:	bf00      	nop
			} /* sw_state switch end */

			// Display error alert
			if (error_found == 1)
 8001450:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <main+0x8bc>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d119      	bne.n	800148e <main+0x77a>
			{
				while (message[i] != ';')
 800145a:	e004      	b.n	8001466 <main+0x752>
					i++;
 800145c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001460:	3301      	adds	r3, #1
 8001462:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				while (message[i] != ';')
 8001466:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800146a:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <main+0x8ac>)
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	2b3b      	cmp	r3, #59	; 0x3b
 8001470:	d1f4      	bne.n	800145c <main+0x748>
				if (message[i] == ';')
 8001472:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001476:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <main+0x8ac>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	2b3b      	cmp	r3, #59	; 0x3b
 800147c:	d104      	bne.n	8001488 <main+0x774>
					send_response(invalid_command);
 800147e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fabc 	bl	8000a00 <send_response>
				error_found = 0;
 8001488:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <main+0x8bc>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
			}

			// Diode control switch
			switch (led_action)
 800148e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d83f      	bhi.n	8001518 <main+0x804>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <main+0x78c>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014b7 	.word	0x080014b7
 80014a8:	080014bd 	.word	0x080014bd
 80014ac:	08001507 	.word	0x08001507
			{
			case 0:
				// Turn off LED
				turn_off_led();
 80014b0:	f7ff fb1c 	bl	8000aec <turn_off_led>
				break;
 80014b4:	e030      	b.n	8001518 <main+0x804>

			case 1:
				// Turn on LED
				turn_on_led();
 80014b6:	f7ff fb0d 	bl	8000ad4 <turn_on_led>
				break;
 80014ba:	e02d      	b.n	8001518 <main+0x804>

			case 2:
				// Set blink interval
				if (blink_setup == 1)
 80014bc:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <main+0x8c4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d127      	bne.n	8001516 <main+0x802>
				{
					delay = message[close_idx-1] - '0';
 80014c6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80014ca:	3b01      	subs	r3, #1
 80014cc:	4a3c      	ldr	r2, [pc, #240]	; (80015c0 <main+0x8ac>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	3b30      	subs	r3, #48	; 0x30
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b41      	ldr	r3, [pc, #260]	; (80015dc <main+0x8c8>)
 80014d6:	701a      	strb	r2, [r3, #0]
					if (delay == 0)
 80014d8:	4b40      	ldr	r3, [pc, #256]	; (80015dc <main+0x8c8>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <main+0x7d6>
						blink_ms = 0;
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <main+0x8cc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	801a      	strh	r2, [r3, #0]
 80014e8:	e009      	b.n	80014fe <main+0x7ea>
					else
						 blink_ms = calculate_delay(delay);
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <main+0x8c8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fb09 	bl	8000b08 <calculate_delay>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <main+0x8cc>)
 80014fc:	801a      	strh	r2, [r3, #0]
					blink_setup = 0;
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <main+0x8c4>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001504:	e007      	b.n	8001516 <main+0x802>

			case 3:
				// Set delay interval
				loop_delay = atoi(temp);
 8001506:	482f      	ldr	r0, [pc, #188]	; (80015c4 <main+0x8b0>)
 8001508:	f004 fd11 	bl	8005f2e <atoi>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <main+0x8d0>)
 8001512:	801a      	strh	r2, [r3, #0]
				break;
 8001514:	e000      	b.n	8001518 <main+0x804>
				break;
 8001516:	bf00      	nop
			} /* control switch end */

			// Set the delay
			timer_delay(loop_delay);
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <main+0x8d0>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f9e6 	bl	80008f0 <timer_delay>
		for (uint8_t i=0; i<message_length; i++)
 8001524:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001528:	3301      	adds	r3, #1
 800152a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <main+0x8d4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 8001538:	429a      	cmp	r2, r3
 800153a:	f4ff ac63 	bcc.w	8000e04 <main+0xf0>
		} /* for loop end */

		// Clear the message array processing the commands
		clear_array(message, message_length);
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <main+0x8d4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	b29b      	uxth	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	481d      	ldr	r0, [pc, #116]	; (80015c0 <main+0x8ac>)
 800154a:	f7ff fbc5 	bl	8000cd8 <clear_array>
	} /* if statement end */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Command: LED[BLINK,x]
	if (blink_ms != 0 && (led_action == 2 || led_action == 3))
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <main+0x8cc>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d014      	beq.n	8001582 <main+0x86e>
 8001558:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d004      	beq.n	800156c <main+0x858>
 8001562:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b03      	cmp	r3, #3
 800156a:	d10a      	bne.n	8001582 <main+0x86e>
	{
		// Blink LED with delay
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	481f      	ldr	r0, [pc, #124]	; (80015ec <main+0x8d8>)
 8001570:	f000 ffb9 	bl	80024e6 <HAL_GPIO_TogglePin>
		timer_delay(blink_ms);
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <main+0x8cc>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9b8 	bl	80008f0 <timer_delay>
 8001580:	e00c      	b.n	800159c <main+0x888>
	}
	// Command: LED[ON] / LED[OFF]
	else if (led_action != 2 || led_action != 3)
 8001582:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d104      	bne.n	8001596 <main+0x882>
 800158c:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b03      	cmp	r3, #3
 8001594:	d002      	beq.n	800159c <main+0x888>
		// Disable LED blink with other commands
		blink_ms = 0;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <main+0x8cc>)
 8001598:	2200      	movs	r2, #0
 800159a:	801a      	strh	r2, [r3, #0]

	// Set the delay
	timer_delay(loop_delay);
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <main+0x8d0>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f9a4 	bl	80008f0 <timer_delay>

	HAL_Delay(8000);
 80015a8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80015ac:	f000 fb92 	bl	8001cd4 <HAL_Delay>
	send_response("TEST\r\n");
 80015b0:	480f      	ldr	r0, [pc, #60]	; (80015f0 <main+0x8dc>)
 80015b2:	f7ff fa25 	bl	8000a00 <send_response>

	// Refresh IWDG counter
	HAL_IWDG_Refresh(&hiwdg);
 80015b6:	480f      	ldr	r0, [pc, #60]	; (80015f4 <main+0x8e0>)
 80015b8:	f000 fffe 	bl	80025b8 <HAL_IWDG_Refresh>
	if (character == '\n' || character == '\r')
 80015bc:	e409      	b.n	8000dd2 <main+0xbe>
 80015be:	bf00      	nop
 80015c0:	20000108 	.word	0x20000108
 80015c4:	20000144 	.word	0x20000144
 80015c8:	2000017c 	.word	0x2000017c
 80015cc:	200001b5 	.word	0x200001b5
 80015d0:	200001b4 	.word	0x200001b4
 80015d4:	2000013b 	.word	0x2000013b
 80015d8:	2000013c 	.word	0x2000013c
 80015dc:	2000013d 	.word	0x2000013d
 80015e0:	2000013e 	.word	0x2000013e
 80015e4:	20000140 	.word	0x20000140
 80015e8:	2000013a 	.word	0x2000013a
 80015ec:	40020400 	.word	0x40020400
 80015f0:	08006b18 	.word	0x08006b18
 80015f4:	2000008c 	.word	0x2000008c

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2234      	movs	r2, #52	; 0x34
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f004 fcc0 	bl	8005f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <SystemClock_Config+0xe0>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <SystemClock_Config+0xe0>)
 8001622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <SystemClock_Config+0xe0>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <SystemClock_Config+0xe4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <SystemClock_Config+0xe4>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <SystemClock_Config+0xe4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001650:	230b      	movs	r3, #11
 8001652:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165a:	2301      	movs	r3, #1
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165e:	2310      	movs	r3, #16
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001662:	2301      	movs	r3, #1
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001666:	2302      	movs	r3, #2
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001670:	2319      	movs	r3, #25
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001674:	23d8      	movs	r3, #216	; 0xd8
 8001676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001678:	2302      	movs	r3, #2
 800167a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800167c:	2302      	movs	r3, #2
 800167e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001680:	2302      	movs	r3, #2
 8001682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fff5 	bl	8002678 <HAL_RCC_OscConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001694:	f000 f8a6 	bl	80017e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001698:	f000 ff9e 	bl	80025d8 <HAL_PWREx_EnableOverDrive>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016a2:	f000 f89f 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
 80016a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2302      	movs	r3, #2
 80016ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	2101      	movs	r1, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fa87 	bl	8002bd4 <HAL_RCC_ClockConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80016cc:	f000 f88a 	bl	80017e4 <Error_Handler>
  }
}
 80016d0:	bf00      	nop
 80016d2:	3750      	adds	r7, #80	; 0x50
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Reception callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	// Send character to terminal
	uart_print(character);
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_UART_RxCpltCallback+0x44>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff f85f 	bl	80007b0 <uart_print>

	// Handle USART3 reception callback
	if(huart->Instance == USART3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_UART_RxCpltCallback+0x48>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d10e      	bne.n	800171a <HAL_UART_RxCpltCallback+0x3a>
	{
		// Store character in reception buffer
		rx_buffer[rx_empty] = character;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_UART_RxCpltCallback+0x4c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_UART_RxCpltCallback+0x44>)
 8001706:	7819      	ldrb	r1, [r3, #0]
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_UART_RxCpltCallback+0x50>)
 800170a:	5499      	strb	r1, [r3, r2]

		// Increase empty index
		increase_rx_empty();
 800170c:	f7ff f892 	bl	8000834 <increase_rx_empty>

		// Await next character
		HAL_UART_Receive_IT(&huart3, &character, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	4904      	ldr	r1, [pc, #16]	; (8001724 <HAL_UART_RxCpltCallback+0x44>)
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <HAL_UART_RxCpltCallback+0x54>)
 8001716:	f003 f919 	bl	800494c <HAL_UART_Receive_IT>
	}
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000009c 	.word	0x2000009c
 8001728:	40004800 	.word	0x40004800
 800172c:	200000d2 	.word	0x200000d2
 8001730:	200000a0 	.word	0x200000a0
 8001734:	20000240 	.word	0x20000240

08001738 <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <HAL_UART_TxCpltCallback+0x44>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d113      	bne.n	8001772 <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 800174a:	f7ff f8a3 	bl	8000894 <tx_has_data>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10e      	bne.n	8001772 <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_UART_TxCpltCallback+0x48>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_UART_TxCpltCallback+0x4c>)
 800175e:	5c9a      	ldrb	r2, [r3, r2]
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_UART_TxCpltCallback+0x50>)
 8001762:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 8001764:	f7ff f8ac 	bl	80008c0 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	4907      	ldr	r1, [pc, #28]	; (8001788 <HAL_UART_TxCpltCallback+0x50>)
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f003 f88f 	bl	8004890 <HAL_UART_Transmit_IT>
		}
	}
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004800 	.word	0x40004800
 8001780:	20000107 	.word	0x20000107
 8001784:	200000d4 	.word	0x200000d4
 8001788:	200001ec 	.word	0x200001ec

0800178c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001792:	463b      	mov	r3, r7
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800179e:	f000 fbcf 	bl	8001f40 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80017ae:	231f      	movs	r3, #31
 80017b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80017b2:	2387      	movs	r3, #135	; 0x87
 80017b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017ba:	2300      	movs	r3, #0
 80017bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017ce:	463b      	mov	r3, r7
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fbed 	bl	8001fb0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017d6:	2004      	movs	r0, #4
 80017d8:	f000 fbca 	bl	8001f70 <HAL_MPU_Enable>

}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_MspInit+0x50>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_MspInit+0x50>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x50>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x50>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_MspInit+0x50>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_MspInit+0x50>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2005      	movs	r0, #5
 800182c:	f000 fb51 	bl	8001ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001830:	2005      	movs	r0, #5
 8001832:	f000 fb6a 	bl	8001f0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 fa00 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM3_IRQHandler+0x10>)
 80018ae:	f002 f8c8 	bl	8003a42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
  /* USER CODE END TIM3_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200001f4 	.word	0x200001f4

080018bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <USART3_IRQHandler+0x10>)
 80018c2:	f003 f887 	bl	80049d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000240 	.word	0x20000240

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f004 fb1a 	bl	8005f38 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20080000 	.word	0x20080000
 8001930:	00000400 	.word	0x00000400
 8001934:	200001f0 	.word	0x200001f0
 8001938:	200002e0 	.word	0x200002e0

0800193c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <SystemInit+0x20>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <SystemInit+0x20>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <MX_TIM3_Init+0xe4>)
 8001994:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <MX_TIM3_Init+0xe8>)
 8001996:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <MX_TIM3_Init+0xe4>)
 800199a:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800199e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <MX_TIM3_Init+0xe4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80019a6:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <MX_TIM3_Init+0xe4>)
 80019a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80019ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <MX_TIM3_Init+0xe4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <MX_TIM3_Init+0xe4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ba:	4822      	ldr	r0, [pc, #136]	; (8001a44 <MX_TIM3_Init+0xe4>)
 80019bc:	f001 ff18 	bl	80037f0 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80019c6:	f7ff ff0d 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d4:	4619      	mov	r1, r3
 80019d6:	481b      	ldr	r0, [pc, #108]	; (8001a44 <MX_TIM3_Init+0xe4>)
 80019d8:	f002 f9cc 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80019e2:	f7ff feff 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80019e6:	4817      	ldr	r0, [pc, #92]	; (8001a44 <MX_TIM3_Init+0xe4>)
 80019e8:	f001 ffca 	bl	8003980 <HAL_TIM_OC_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80019f2:	f7ff fef7 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	480f      	ldr	r0, [pc, #60]	; (8001a44 <MX_TIM3_Init+0xe4>)
 8001a06:	f002 fe49 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a10:	f7ff fee8 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a14:	2300      	movs	r3, #0
 8001a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_TIM3_Init+0xe4>)
 8001a2c:	f002 f928 	bl	8003c80 <HAL_TIM_OC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001a36:	f7ff fed5 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200001f4 	.word	0x200001f4
 8001a48:	40000400 	.word	0x40000400

08001a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <HAL_TIM_Base_MspInit+0x44>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d113      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	201d      	movs	r0, #29
 8001a7c:	f000 fa29 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a80:	201d      	movs	r0, #29
 8001a82:	f000 fa42 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40023800 	.word	0x40023800

08001a98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <MX_USART3_UART_Init+0x5c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001adc:	f002 fe8a 	bl	80047f4 <HAL_UART_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ae6:	f7ff fe7d 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000240 	.word	0x20000240
 8001af4:	40004800 	.word	0x40004800

08001af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b0ae      	sub	sp, #184	; 0xb8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2290      	movs	r2, #144	; 0x90
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fa37 	bl	8005f8c <memset>
  if(uartHandle->Instance==USART3)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <HAL_UART_MspInit+0xc4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d144      	bne.n	8001bb2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fa32 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b42:	f7ff fe4f 	bl	80017e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_UART_MspInit+0xc8>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_UART_MspInit+0xc8>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_UART_MspInit+0xc8>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_UART_MspInit+0xc8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0xc8>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_UART_MspInit+0xc8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b90:	2307      	movs	r3, #7
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <HAL_UART_MspInit+0xcc>)
 8001b9e:	f000 fadd 	bl	800215c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2027      	movs	r0, #39	; 0x27
 8001ba8:	f000 f993 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bac:	2027      	movs	r0, #39	; 0x27
 8001bae:	f000 f9ac 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	37b8      	adds	r7, #184	; 0xb8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40004800 	.word	0x40004800
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020c00 	.word	0x40020c00

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be4:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf2:	f7ff fea3 	bl	800193c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f004 f9a5 	bl	8005f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff f88b 	bl	8000d14 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c0c:	08006ce0 	.word	0x08006ce0
  ldr r2, =_sbss
 8001c10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c14:	200002dc 	.word	0x200002dc

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>

08001c1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f000 f94c 	bl	8001ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c24:	200f      	movs	r0, #15
 8001c26:	f000 f805 	bl	8001c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2a:	f7ff fde1 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x54>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x58>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f967 	bl	8001f26 <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f000 f92f 	bl	8001ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x5c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	200002c8 	.word	0x200002c8

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	200002c8 	.word	0x200002c8

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <__NVIC_SetPriorityGrouping>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <__NVIC_SetPriorityGrouping+0x40>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x40>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	05fa0000 	.word	0x05fa0000

08001d64 <__NVIC_GetPriorityGrouping>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <__NVIC_EnableIRQ+0x38>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e88:	d301      	bcc.n	8001e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00f      	b.n	8001eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <SysTick_Config+0x40>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e96:	210f      	movs	r1, #15
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f7ff ff8e 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010

08001ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff29 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff3e 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ff8e 	bl	8001e10 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff5d 	bl	8001dbc <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff31 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffa2 	bl	8001e78 <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f44:	f3bf 8f5f 	dmb	sy
}
 8001f48:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_MPU_Disable+0x28>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <HAL_MPU_Disable+0x28>)
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f54:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_MPU_Disable+0x2c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00
 8001f6c:	e000ed90 	.word	0xe000ed90

08001f70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_MPU_Enable+0x38>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_MPU_Enable+0x3c>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_MPU_Enable+0x3c>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8e:	f3bf 8f4f 	dsb	sy
}
 8001f92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f94:	f3bf 8f6f 	isb	sy
}
 8001f98:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed90 	.word	0xe000ed90
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	785a      	ldrb	r2, [r3, #1]
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_MPU_ConfigRegion+0x84>)
 8001fbe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d029      	beq.n	800201c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_MPU_ConfigRegion+0x84>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
 8001fd4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7adb      	ldrb	r3, [r3, #11]
 8001fda:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7a9b      	ldrb	r3, [r3, #10]
 8001fe2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fe4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7b5b      	ldrb	r3, [r3, #13]
 8001fea:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7b9b      	ldrb	r3, [r3, #14]
 8001ff2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ff4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7bdb      	ldrb	r3, [r3, #15]
 8001ffa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ffc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7a5b      	ldrb	r3, [r3, #9]
 8002002:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002004:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7a1b      	ldrb	r3, [r3, #8]
 800200a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800200c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002016:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002018:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800201a:	e005      	b.n	8002028 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_MPU_ConfigRegion+0x84>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_MPU_ConfigRegion+0x84>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed90 	.word	0xe000ed90

08002038 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002046:	f7ff fe39 	bl	8001cbc <HAL_GetTick>
 800204a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d008      	beq.n	800206a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e052      	b.n	8002110 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0216 	bic.w	r2, r2, #22
 8002078:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002088:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <HAL_DMA_Abort+0x62>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0208 	bic.w	r2, r2, #8
 80020a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ba:	e013      	b.n	80020e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020bc:	f7ff fdfe 	bl	8001cbc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d90c      	bls.n	80020e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2203      	movs	r2, #3
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e015      	b.n	8002110 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1e4      	bne.n	80020bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	223f      	movs	r2, #63	; 0x3f
 80020f8:	409a      	lsls	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d004      	beq.n	8002136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00c      	b.n	8002150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e175      	b.n	8002468 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8164 	bne.w	8002462 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d005      	beq.n	80021b2 <HAL_GPIO_Init+0x56>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d130      	bne.n	8002214 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80be 	beq.w	8002462 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_GPIO_Init+0x324>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a65      	ldr	r2, [pc, #404]	; (8002480 <HAL_GPIO_Init+0x324>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_GPIO_Init+0x324>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022fe:	4a61      	ldr	r2, [pc, #388]	; (8002484 <HAL_GPIO_Init+0x328>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_GPIO_Init+0x32c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d037      	beq.n	800239a <HAL_GPIO_Init+0x23e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_GPIO_Init+0x330>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d031      	beq.n	8002396 <HAL_GPIO_Init+0x23a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <HAL_GPIO_Init+0x334>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02b      	beq.n	8002392 <HAL_GPIO_Init+0x236>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a55      	ldr	r2, [pc, #340]	; (8002494 <HAL_GPIO_Init+0x338>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d025      	beq.n	800238e <HAL_GPIO_Init+0x232>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a54      	ldr	r2, [pc, #336]	; (8002498 <HAL_GPIO_Init+0x33c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <HAL_GPIO_Init+0x22e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a53      	ldr	r2, [pc, #332]	; (800249c <HAL_GPIO_Init+0x340>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x22a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_Init+0x344>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x226>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <HAL_GPIO_Init+0x348>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x222>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a50      	ldr	r2, [pc, #320]	; (80024a8 <HAL_GPIO_Init+0x34c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x21e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <HAL_GPIO_Init+0x350>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x21a>
 8002372:	2309      	movs	r3, #9
 8002374:	e012      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002376:	230a      	movs	r3, #10
 8002378:	e010      	b.n	800239c <HAL_GPIO_Init+0x240>
 800237a:	2308      	movs	r3, #8
 800237c:	e00e      	b.n	800239c <HAL_GPIO_Init+0x240>
 800237e:	2307      	movs	r3, #7
 8002380:	e00c      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002382:	2306      	movs	r3, #6
 8002384:	e00a      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x240>
 800238a:	2304      	movs	r3, #4
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x240>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x240>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x240>
 800239a:	2300      	movs	r3, #0
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	; (8002484 <HAL_GPIO_Init+0x328>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_GPIO_Init+0x354>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023de:	4a34      	ldr	r2, [pc, #208]	; (80024b0 <HAL_GPIO_Init+0x354>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e4:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_GPIO_Init+0x354>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_GPIO_Init+0x354>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_GPIO_Init+0x354>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002432:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <HAL_GPIO_Init+0x354>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_GPIO_Init+0x354>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_GPIO_Init+0x354>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	f67f ae86 	bls.w	800217c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40021400 	.word	0x40021400
 80024a0:	40021800 	.word	0x40021800
 80024a4:	40021c00 	.word	0x40021c00
 80024a8:	40022000 	.word	0x40022000
 80024ac:	40022400 	.word	0x40022400
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	041a      	lsls	r2, r3, #16
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43d9      	mvns	r1, r3
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	400b      	ands	r3, r1
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e041      	b.n	80025b0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002534:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f245 5255 	movw	r2, #21845	; 0x5555
 800253e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6852      	ldr	r2, [r2, #4]
 8002548:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6892      	ldr	r2, [r2, #8]
 8002552:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002554:	f7ff fbb2 	bl	8001cbc <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800255a:	e00f      	b.n	800257c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800255c:	f7ff fbae 	bl	8001cbc <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b31      	cmp	r3, #49	; 0x31
 8002568:	d908      	bls.n	800257c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e019      	b.n	80025b0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e8      	bne.n	800255c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d005      	beq.n	80025a4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68d2      	ldr	r2, [r2, #12]
 80025a0:	611a      	str	r2, [r3, #16]
 80025a2:	e004      	b.n	80025ae <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80025c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_PWREx_EnableOverDrive+0x98>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a22      	ldr	r2, [pc, #136]	; (8002670 <HAL_PWREx_EnableOverDrive+0x98>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_PWREx_EnableOverDrive+0x98>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002606:	f7ff fb59 	bl	8001cbc <HAL_GetTick>
 800260a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800260c:	e009      	b.n	8002622 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800260e:	f7ff fb55 	bl	8001cbc <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800261c:	d901      	bls.n	8002622 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e022      	b.n	8002668 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d1ee      	bne.n	800260e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800263c:	f7ff fb3e 	bl	8001cbc <HAL_GetTick>
 8002640:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002642:	e009      	b.n	8002658 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002644:	f7ff fb3a 	bl	8001cbc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002652:	d901      	bls.n	8002658 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e007      	b.n	8002668 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_PWREx_EnableOverDrive+0x9c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002664:	d1ee      	bne.n	8002644 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000

08002678 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e29b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269c:	4b96      	ldr	r3, [pc, #600]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a8:	4b93      	ldr	r3, [pc, #588]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d112      	bne.n	80026da <HAL_RCC_OscConfig+0x62>
 80026b4:	4b90      	ldr	r3, [pc, #576]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c0:	d10b      	bne.n	80026da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c2:	4b8d      	ldr	r3, [pc, #564]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d06c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x130>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d168      	bne.n	80027a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e275      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x7a>
 80026e4:	4b84      	ldr	r3, [pc, #528]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a83      	ldr	r2, [pc, #524]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e02e      	b.n	8002750 <HAL_RCC_OscConfig+0xd8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x9c>
 80026fa:	4b7f      	ldr	r3, [pc, #508]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7e      	ldr	r2, [pc, #504]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b7c      	ldr	r3, [pc, #496]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7b      	ldr	r2, [pc, #492]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xd8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0xc0>
 800271e:	4b76      	ldr	r3, [pc, #472]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a72      	ldr	r2, [pc, #456]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xd8>
 8002738:	4b6f      	ldr	r3, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6e      	ldr	r2, [pc, #440]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7ff fab0 	bl	8001cbc <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7ff faac 	bl	8001cbc <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e229      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xe8>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7ff fa9c 	bl	8001cbc <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff fa98 	bl	8001cbc <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e215      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x110>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d069      	beq.n	800288a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c2:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x190>
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x17a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1e9      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	493d      	ldr	r1, [pc, #244]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e040      	b.n	800288a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a38      	ldr	r2, [pc, #224]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff fa4e 	bl	8001cbc <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002824:	f7ff fa4a 	bl	8001cbc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1c7      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4929      	ldr	r1, [pc, #164]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7ff fa2a 	bl	8001cbc <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286c:	f7ff fa26 	bl	8001cbc <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1a3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d038      	beq.n	8002908 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d019      	beq.n	80028d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a2:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7ff fa07 	bl	8001cbc <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7ff fa03 	bl	8001cbc <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e180      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x23a>
 80028d0:	e01a      	b.n	8002908 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <HAL_RCC_OscConfig+0x280>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7ff f9ed 	bl	8001cbc <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e6:	f7ff f9e9 	bl	8001cbc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d903      	bls.n	80028fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e166      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
 80028f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ee      	bne.n	80028e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a4 	beq.w	8002a5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10d      	bne.n	800293e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	4b89      	ldr	r3, [pc, #548]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a88      	ldr	r2, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b86      	ldr	r3, [pc, #536]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	4b83      	ldr	r3, [pc, #524]	; (8002b4c <HAL_RCC_OscConfig+0x4d4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d118      	bne.n	800297c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800294a:	4b80      	ldr	r3, [pc, #512]	; (8002b4c <HAL_RCC_OscConfig+0x4d4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7f      	ldr	r2, [pc, #508]	; (8002b4c <HAL_RCC_OscConfig+0x4d4>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7ff f9b1 	bl	8001cbc <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7ff f9ad 	bl	8001cbc <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	; 0x64
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e12a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002970:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <HAL_RCC_OscConfig+0x4d4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x31a>
 8002984:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	e02d      	b.n	80029ee <HAL_RCC_OscConfig+0x376>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x33c>
 800299a:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	e01c      	b.n	80029ee <HAL_RCC_OscConfig+0x376>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d10c      	bne.n	80029d6 <HAL_RCC_OscConfig+0x35e>
 80029bc:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a61      	ldr	r2, [pc, #388]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	4a5e      	ldr	r2, [pc, #376]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6713      	str	r3, [r2, #112]	; 0x70
 80029d4:	e00b      	b.n	80029ee <HAL_RCC_OscConfig+0x376>
 80029d6:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a5b      	ldr	r2, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
 80029e2:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d015      	beq.n	8002a22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7ff f961 	bl	8001cbc <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7ff f95d 	bl	8001cbc <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e0d8      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ee      	beq.n	80029fe <HAL_RCC_OscConfig+0x386>
 8002a20:	e014      	b.n	8002a4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7ff f94b 	bl	8001cbc <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7ff f947 	bl	8001cbc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0c2      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a40:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ee      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80ae 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a68:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d06d      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d14b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7c:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7ff f918 	bl	8001cbc <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a90:	f7ff f914 	bl	8001cbc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e091      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	041b      	lsls	r3, r3, #16
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	071b      	lsls	r3, r3, #28
 8002ada:	491b      	ldr	r1, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7ff f8e6 	bl	8001cbc <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff f8e2 	bl	8001cbc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e05f      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x47c>
 8002b12:	e057      	b.n	8002bc4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff f8cc 	bl	8001cbc <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7ff f8c8 	bl	8001cbc <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e045      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_RCC_OscConfig+0x4d0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4b0>
 8002b46:	e03d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x54c>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <HAL_RCC_OscConfig+0x558>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d030      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d129      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d122      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d119      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0d0      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d910      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 020f 	bic.w	r2, r3, #15
 8002c02:	4965      	ldr	r1, [pc, #404]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0b8      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	494d      	ldr	r1, [pc, #308]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d040      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d115      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e073      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06b      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4936      	ldr	r1, [pc, #216]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fff8 	bl	8001cbc <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fff4 	bl	8001cbc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e053      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d210      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 020f 	bic.w	r2, r3, #15
 8002d0e:	4922      	ldr	r1, [pc, #136]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e032      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4916      	ldr	r1, [pc, #88]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	490e      	ldr	r1, [pc, #56]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d66:	f000 f821 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	490a      	ldr	r1, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_ClockConfig+0x1d4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe ff54 	bl	8001c34 <HAL_InitTick>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023c00 	.word	0x40023c00
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08006b84 	.word	0x08006b84
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000004 	.word	0x20000004

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b090      	sub	sp, #64	; 0x40
 8002db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
 8002db8:	2300      	movs	r3, #0
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc4:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d00d      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x40>
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	f200 80a1 	bhi.w	8002f18 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dde:	e09b      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002de4:	e09b      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de6:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002de8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dea:	e098      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dec:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002df6:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d028      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	2200      	movs	r2, #0
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e14:	2100      	movs	r1, #0
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e18:	fb03 f201 	mul.w	r2, r3, r1
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	4a43      	ldr	r2, [pc, #268]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e26:	fba0 1202 	umull	r1, r2, r0, r2
 8002e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e32:	4413      	add	r3, r2
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	2200      	movs	r2, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	61fa      	str	r2, [r7, #28]
 8002e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e46:	f7fd fa53 	bl	80002f0 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e52:	e053      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e54:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	617a      	str	r2, [r7, #20]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e66:	f04f 0b00 	mov.w	fp, #0
 8002e6a:	4652      	mov	r2, sl
 8002e6c:	465b      	mov	r3, fp
 8002e6e:	f04f 0000 	mov.w	r0, #0
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	0159      	lsls	r1, r3, #5
 8002e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7c:	0150      	lsls	r0, r2, #5
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	ebb2 080a 	subs.w	r8, r2, sl
 8002e86:	eb63 090b 	sbc.w	r9, r3, fp
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002ea2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	00eb      	lsls	r3, r5, #3
 8002eb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb4:	00e2      	lsls	r2, r4, #3
 8002eb6:	4614      	mov	r4, r2
 8002eb8:	461d      	mov	r5, r3
 8002eba:	eb14 030a 	adds.w	r3, r4, sl
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	eb45 030b 	adc.w	r3, r5, fp
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	028b      	lsls	r3, r1, #10
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002edc:	4621      	mov	r1, r4
 8002ede:	028a      	lsls	r2, r1, #10
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	60fa      	str	r2, [r7, #12]
 8002eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef0:	f7fd f9fe 	bl	80002f0 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	3301      	adds	r3, #1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3740      	adds	r7, #64	; 0x40
 8002f24:	46bd      	mov	sp, r7
 8002f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	017d7840 	.word	0x017d7840

08002f38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000000 	.word	0x20000000

08002f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f54:	f7ff fff0 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	08006b94 	.word	0x08006b94

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f7c:	f7ff ffdc 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0b5b      	lsrs	r3, r3, #13
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4903      	ldr	r1, [pc, #12]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	08006b94 	.word	0x08006b94

08002fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fc8:	4b69      	ldr	r3, [pc, #420]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a68      	ldr	r2, [pc, #416]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fd2:	6093      	str	r3, [r2, #8]
 8002fd4:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	4964      	ldr	r1, [pc, #400]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d017      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	4959      	ldr	r1, [pc, #356]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003018:	d101      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003026:	2301      	movs	r3, #1
 8003028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d017      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003036:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	494a      	ldr	r1, [pc, #296]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003054:	d101      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003056:	2301      	movs	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 808b 	beq.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a39      	ldr	r2, [pc, #228]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
 8003090:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a34      	ldr	r2, [pc, #208]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a8:	f7fe fe08 	bl	8001cbc <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b0:	f7fe fe04 	bl	8001cbc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e38f      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d035      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d02e      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003102:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d114      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fdcc 	bl	8001cbc <HAL_GetTick>
 8003124:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe fdc8 	bl	8001cbc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e351      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003156:	d111      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003166:	400b      	ands	r3, r1
 8003168:	4901      	ldr	r1, [pc, #4]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
 800316e:	e00b      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003170:	40023800 	.word	0x40023800
 8003174:	40007000 	.word	0x40007000
 8003178:	0ffffcff 	.word	0x0ffffcff
 800317c:	4bac      	ldr	r3, [pc, #688]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4aab      	ldr	r2, [pc, #684]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003186:	6093      	str	r3, [r2, #8]
 8003188:	4ba9      	ldr	r3, [pc, #676]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003194:	49a6      	ldr	r1, [pc, #664]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003196:	4313      	orrs	r3, r2
 8003198:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d010      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031a6:	4ba2      	ldr	r3, [pc, #648]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ac:	4aa0      	ldr	r2, [pc, #640]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031b6:	4b9e      	ldr	r3, [pc, #632]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	499b      	ldr	r1, [pc, #620]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d4:	4b96      	ldr	r3, [pc, #600]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e2:	4993      	ldr	r1, [pc, #588]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f6:	4b8e      	ldr	r3, [pc, #568]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003204:	498a      	ldr	r1, [pc, #552]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003218:	4b85      	ldr	r3, [pc, #532]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003226:	4982      	ldr	r1, [pc, #520]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800323a:	4b7d      	ldr	r3, [pc, #500]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4979      	ldr	r1, [pc, #484]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325c:	4b74      	ldr	r3, [pc, #464]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4971      	ldr	r1, [pc, #452]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800327e:	4b6c      	ldr	r3, [pc, #432]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f023 020c 	bic.w	r2, r3, #12
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	4968      	ldr	r1, [pc, #416]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a0:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	4960      	ldr	r1, [pc, #384]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c2:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	4957      	ldr	r1, [pc, #348]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032e4:	4b52      	ldr	r3, [pc, #328]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	494f      	ldr	r1, [pc, #316]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	4946      	ldr	r1, [pc, #280]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003328:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	493e      	ldr	r1, [pc, #248]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003358:	4935      	ldr	r1, [pc, #212]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337a:	492d      	ldr	r1, [pc, #180]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d011      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800338e:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800339c:	4924      	ldr	r1, [pc, #144]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d101      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	4914      	ldr	r1, [pc, #80]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003400:	490b      	ldr	r1, [pc, #44]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003424:	4902      	ldr	r1, [pc, #8]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003440:	4b8a      	ldr	r3, [pc, #552]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003446:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	4986      	ldr	r1, [pc, #536]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003464:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800346a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003474:	497d      	ldr	r1, [pc, #500]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d006      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80d6 	beq.w	800363c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003490:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a75      	ldr	r2, [pc, #468]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800349a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349c:	f7fe fc0e 	bl	8001cbc <HAL_GetTick>
 80034a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034a4:	f7fe fc0a 	bl	8001cbc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e195      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d021      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11d      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034d6:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ea:	0e1b      	lsrs	r3, r3, #24
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	019a      	lsls	r2, r3, #6
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	061b      	lsls	r3, r3, #24
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	071b      	lsls	r3, r3, #28
 800350a:	4958      	ldr	r1, [pc, #352]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003526:	d00a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02e      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353c:	d129      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800353e:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800354c:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800354e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003552:	0f1b      	lsrs	r3, r3, #28
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	019a      	lsls	r2, r3, #6
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	071b      	lsls	r3, r3, #28
 8003572:	493e      	ldr	r1, [pc, #248]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800357a:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800357c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003580:	f023 021f 	bic.w	r2, r3, #31
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	3b01      	subs	r3, #1
 800358a:	4938      	ldr	r1, [pc, #224]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01d      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a4:	0e1b      	lsrs	r3, r3, #24
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035ac:	4b2f      	ldr	r3, [pc, #188]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b2:	0f1b      	lsrs	r3, r3, #28
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	019a      	lsls	r2, r3, #6
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	071b      	lsls	r3, r3, #28
 80035d2:	4926      	ldr	r1, [pc, #152]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d011      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	019a      	lsls	r2, r3, #6
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	071b      	lsls	r3, r3, #28
 8003602:	491a      	ldr	r1, [pc, #104]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800360a:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003616:	f7fe fb51 	bl	8001cbc <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800361e:	f7fe fb4d 	bl	8001cbc <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b64      	cmp	r3, #100	; 0x64
 800362a:	d901      	bls.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0d8      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	f040 80ce 	bne.w	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fe fb34 	bl	8001cbc <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003656:	e00b      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003658:	f7fe fb30 	bl	8001cbc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d904      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0bb      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003670:	4b5e      	ldr	r3, [pc, #376]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800367c:	d0ec      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d12a      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036a6:	4b51      	ldr	r3, [pc, #324]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036b4:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	0f1b      	lsrs	r3, r3, #28
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	019a      	lsls	r2, r3, #6
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	061b      	lsls	r3, r3, #24
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	071b      	lsls	r3, r3, #28
 80036da:	4944      	ldr	r1, [pc, #272]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036e2:	4b42      	ldr	r3, [pc, #264]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	493d      	ldr	r1, [pc, #244]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d022      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800370c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003710:	d11d      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	0e1b      	lsrs	r3, r3, #24
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	0f1b      	lsrs	r3, r3, #28
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	019a      	lsls	r2, r3, #6
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	041b      	lsls	r3, r3, #16
 800373a:	431a      	orrs	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	071b      	lsls	r3, r3, #28
 8003746:	4929      	ldr	r1, [pc, #164]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d028      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	0e1b      	lsrs	r3, r3, #24
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	019a      	lsls	r2, r3, #6
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	431a      	orrs	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	071b      	lsls	r3, r3, #28
 800378e:	4917      	ldr	r1, [pc, #92]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	4911      	ldr	r1, [pc, #68]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b8:	f7fe fa80 	bl	8001cbc <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037c0:	f7fe fa7c 	bl	8001cbc <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e007      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037de:	d1ef      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800

080037f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e049      	b.n	8003896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe f918 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f000 fb9c 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d001      	beq.n	80038b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e04c      	b.n	8003952 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a26      	ldr	r2, [pc, #152]	; (8003960 <HAL_TIM_Base_Start+0xc0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <HAL_TIM_Base_Start+0x70>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d01d      	beq.n	8003910 <HAL_TIM_Base_Start+0x70>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a22      	ldr	r2, [pc, #136]	; (8003964 <HAL_TIM_Base_Start+0xc4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <HAL_TIM_Base_Start+0x70>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a21      	ldr	r2, [pc, #132]	; (8003968 <HAL_TIM_Base_Start+0xc8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <HAL_TIM_Base_Start+0x70>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_TIM_Base_Start+0xcc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_TIM_Base_Start+0x70>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_TIM_Base_Start+0xd0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_TIM_Base_Start+0x70>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <HAL_TIM_Base_Start+0xd4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_TIM_Base_Start+0x70>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <HAL_TIM_Base_Start+0xd8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d115      	bne.n	800393c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <HAL_TIM_Base_Start+0xdc>)
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b06      	cmp	r3, #6
 8003920:	d015      	beq.n	800394e <HAL_TIM_Base_Start+0xae>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d011      	beq.n	800394e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393a:	e008      	b.n	800394e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e000      	b.n	8003950 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40010400 	.word	0x40010400
 8003974:	40014000 	.word	0x40014000
 8003978:	40001800 	.word	0x40001800
 800397c:	00010007 	.word	0x00010007

08003980 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e049      	b.n	8003a26 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f841 	bl	8003a2e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fad4 	bl	8003f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d122      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d11b      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0202 	mvn.w	r2, #2
 8003a6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa53 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003a8a:	e005      	b.n	8003a98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fa45 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa56 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d122      	bne.n	8003af2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d11b      	bne.n	8003af2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0204 	mvn.w	r2, #4
 8003ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fa29 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003ade:	e005      	b.n	8003aec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fa1b 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa2c 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d122      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f06f 0208 	mvn.w	r2, #8
 8003b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f9ff 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003b32:	e005      	b.n	8003b40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f9f1 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fa02 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d122      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d11b      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0210 	mvn.w	r2, #16
 8003b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f9d5 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003b86:	e005      	b.n	8003b94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f9c7 	bl	8003f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f9d8 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0201 	mvn.w	r2, #1
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f9a1 	bl	8003f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b80      	cmp	r3, #128	; 0x80
 8003be0:	d107      	bne.n	8003bf2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fded 	bl	80047cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c00:	d10e      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d107      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fde0 	bl	80047e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d10e      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d107      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f986 	bl	8003f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d10e      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d107      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0220 	mvn.w	r2, #32
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fda0 	bl	80047b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_OC_ConfigChannel+0x1e>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e066      	b.n	8003d6c <HAL_TIM_OC_ConfigChannel+0xec>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b14      	cmp	r3, #20
 8003caa:	d857      	bhi.n	8003d5c <HAL_TIM_OC_ConfigChannel+0xdc>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003d5d 	.word	0x08003d5d
 8003cbc:	08003d5d 	.word	0x08003d5d
 8003cc0:	08003d5d 	.word	0x08003d5d
 8003cc4:	08003d17 	.word	0x08003d17
 8003cc8:	08003d5d 	.word	0x08003d5d
 8003ccc:	08003d5d 	.word	0x08003d5d
 8003cd0:	08003d5d 	.word	0x08003d5d
 8003cd4:	08003d25 	.word	0x08003d25
 8003cd8:	08003d5d 	.word	0x08003d5d
 8003cdc:	08003d5d 	.word	0x08003d5d
 8003ce0:	08003d5d 	.word	0x08003d5d
 8003ce4:	08003d33 	.word	0x08003d33
 8003ce8:	08003d5d 	.word	0x08003d5d
 8003cec:	08003d5d 	.word	0x08003d5d
 8003cf0:	08003d5d 	.word	0x08003d5d
 8003cf4:	08003d41 	.word	0x08003d41
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003d5d 	.word	0x08003d5d
 8003d00:	08003d5d 	.word	0x08003d5d
 8003d04:	08003d4f 	.word	0x08003d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f9cc 	bl	80040ac <TIM_OC1_SetConfig>
      break;
 8003d14:	e025      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fa37 	bl	8004190 <TIM_OC2_SetConfig>
      break;
 8003d22:	e01e      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 faa8 	bl	8004280 <TIM_OC3_SetConfig>
      break;
 8003d30:	e017      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fb17 	bl	800436c <TIM_OC4_SetConfig>
      break;
 8003d3e:	e010      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fb68 	bl	800441c <TIM_OC5_SetConfig>
      break;
 8003d4c:	e009      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fbb3 	bl	80044c0 <TIM_OC6_SetConfig>
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0b4      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x186>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <HAL_TIM_ConfigClockSource+0x190>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc8:	d03e      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0xd4>
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	f200 8087 	bhi.w	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_TIM_ConfigClockSource+0x172>
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dde:	d87f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b70      	cmp	r3, #112	; 0x70
 8003de2:	d01a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xa6>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d87b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b60      	cmp	r3, #96	; 0x60
 8003dea:	d050      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x11a>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d877      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b50      	cmp	r3, #80	; 0x50
 8003df2:	d03c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xfa>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d873      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d058      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x13a>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e00:	2b30      	cmp	r3, #48	; 0x30
 8003e02:	d064      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d05a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	e062      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f000 fc17 	bl	800465c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
      break;
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f000 fc00 	bl	800465c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fb74 	bl	8004568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	; 0x50
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fbcd 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 fb93 	bl	80045c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	; 0x60
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fbbd 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fb54 	bl	8004568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fbad 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 fba4 	bl	8004626 <TIM_ITRx_SetConfig>
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	fffeff88 	.word	0xfffeff88

08003f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a40      	ldr	r2, [pc, #256]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d013      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d00f      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3d      	ldr	r2, [pc, #244]	; (8004084 <TIM_Base_SetConfig+0x118>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00b      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <TIM_Base_SetConfig+0x11c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3b      	ldr	r2, [pc, #236]	; (800408c <TIM_Base_SetConfig+0x120>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d108      	bne.n	8003fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d027      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2c      	ldr	r2, [pc, #176]	; (8004084 <TIM_Base_SetConfig+0x118>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d023      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <TIM_Base_SetConfig+0x11c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01f      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <TIM_Base_SetConfig+0x120>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d017      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a28      	ldr	r2, [pc, #160]	; (8004094 <TIM_Base_SetConfig+0x128>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a27      	ldr	r2, [pc, #156]	; (8004098 <TIM_Base_SetConfig+0x12c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00f      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a26      	ldr	r2, [pc, #152]	; (800409c <TIM_Base_SetConfig+0x130>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <TIM_Base_SetConfig+0x134>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <TIM_Base_SetConfig+0x138>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <TIM_Base_SetConfig+0x13c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <TIM_Base_SetConfig+0x114>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_Base_SetConfig+0xf8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <TIM_Base_SetConfig+0x124>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800
 800408c:	40000c00 	.word	0x40000c00
 8004090:	40010400 	.word	0x40010400
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800
 80040a0:	40001800 	.word	0x40001800
 80040a4:	40001c00 	.word	0x40001c00
 80040a8:	40002000 	.word	0x40002000

080040ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <TIM_OC1_SetConfig+0xd8>)
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 0302 	bic.w	r3, r3, #2
 80040f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a21      	ldr	r2, [pc, #132]	; (8004188 <TIM_OC1_SetConfig+0xdc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_OC1_SetConfig+0x64>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a20      	ldr	r2, [pc, #128]	; (800418c <TIM_OC1_SetConfig+0xe0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10c      	bne.n	800412a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0308 	bic.w	r3, r3, #8
 8004116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 0304 	bic.w	r3, r3, #4
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <TIM_OC1_SetConfig+0xdc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC1_SetConfig+0x8e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <TIM_OC1_SetConfig+0xe0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d111      	bne.n	800415e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	fffeff8f 	.word	0xfffeff8f
 8004188:	40010000 	.word	0x40010000
 800418c:	40010400 	.word	0x40010400

08004190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <TIM_OC2_SetConfig+0xe4>)
 80041bc:	4013      	ands	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a23      	ldr	r2, [pc, #140]	; (8004278 <TIM_OC2_SetConfig+0xe8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_OC2_SetConfig+0x68>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <TIM_OC2_SetConfig+0xec>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d10d      	bne.n	8004214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <TIM_OC2_SetConfig+0xe8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_OC2_SetConfig+0x94>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <TIM_OC2_SetConfig+0xec>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d113      	bne.n	800424c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800422a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	feff8fff 	.word	0xfeff8fff
 8004278:	40010000 	.word	0x40010000
 800427c:	40010400 	.word	0x40010400

08004280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <TIM_OC3_SetConfig+0xe0>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a22      	ldr	r2, [pc, #136]	; (8004364 <TIM_OC3_SetConfig+0xe4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC3_SetConfig+0x66>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a21      	ldr	r2, [pc, #132]	; (8004368 <TIM_OC3_SetConfig+0xe8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10d      	bne.n	8004302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a17      	ldr	r2, [pc, #92]	; (8004364 <TIM_OC3_SetConfig+0xe4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC3_SetConfig+0x92>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a16      	ldr	r2, [pc, #88]	; (8004368 <TIM_OC3_SetConfig+0xe8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	fffeff8f 	.word	0xfffeff8f
 8004364:	40010000 	.word	0x40010000
 8004368:	40010400 	.word	0x40010400

0800436c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <TIM_OC4_SetConfig+0xa4>)
 8004398:	4013      	ands	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <TIM_OC4_SetConfig+0xa8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_OC4_SetConfig+0x68>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a12      	ldr	r2, [pc, #72]	; (8004418 <TIM_OC4_SetConfig+0xac>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d109      	bne.n	80043e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	019b      	lsls	r3, r3, #6
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	feff8fff 	.word	0xfeff8fff
 8004414:	40010000 	.word	0x40010000
 8004418:	40010400 	.word	0x40010400

0800441c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <TIM_OC5_SetConfig+0x98>)
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800445c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <TIM_OC5_SetConfig+0x9c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_OC5_SetConfig+0x5e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <TIM_OC5_SetConfig+0xa0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d109      	bne.n	800448e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004480:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	621a      	str	r2, [r3, #32]
}
 80044a8:	bf00      	nop
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	fffeff8f 	.word	0xfffeff8f
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40010400 	.word	0x40010400

080044c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <TIM_OC6_SetConfig+0x9c>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	051b      	lsls	r3, r3, #20
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a13      	ldr	r2, [pc, #76]	; (8004560 <TIM_OC6_SetConfig+0xa0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_OC6_SetConfig+0x60>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <TIM_OC6_SetConfig+0xa4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d109      	bne.n	8004534 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	029b      	lsls	r3, r3, #10
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	feff8fff 	.word	0xfeff8fff
 8004560:	40010000 	.word	0x40010000
 8004564:	40010400 	.word	0x40010400

08004568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f023 030a 	bic.w	r3, r3, #10
 80045a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b087      	sub	sp, #28
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0210 	bic.w	r2, r3, #16
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	031b      	lsls	r3, r3, #12
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004602:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	f043 0307 	orr.w	r3, r3, #7
 8004648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	431a      	orrs	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4313      	orrs	r3, r2
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e06d      	b.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a30      	ldr	r2, [pc, #192]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d108      	bne.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d01d      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10c      	bne.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	4313      	orrs	r3, r2
 8004774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800

080047b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e040      	b.n	8004888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd f96e 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	; 0x24
 8004820:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fbd6 	bl	8004fe4 <UART_SetConfig>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e022      	b.n	8004888 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fe2e 	bl	80054ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 feb5 	bl	80055f0 <UART_CheckIdleState>
 8004886:	4603      	mov	r3, r0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004890:	b480      	push	{r7}
 8004892:	b08b      	sub	sp, #44	; 0x2c
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d147      	bne.n	8004936 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_UART_Transmit_IT+0x22>
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e040      	b.n	8004938 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2221      	movs	r2, #33	; 0x21
 80048de:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e8:	d107      	bne.n	80048fa <HAL_UART_Transmit_IT+0x6a>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a13      	ldr	r2, [pc, #76]	; (8004944 <HAL_UART_Transmit_IT+0xb4>)
 80048f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80048f8:	e002      	b.n	8004900 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a12      	ldr	r2, [pc, #72]	; (8004948 <HAL_UART_Transmit_IT+0xb8>)
 80048fe:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	613b      	str	r3, [r7, #16]
   return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	69f9      	ldr	r1, [r7, #28]
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	61bb      	str	r3, [r7, #24]
   return(result);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e6      	bne.n	8004900 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e000      	b.n	8004938 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004936:	2302      	movs	r3, #2
  }
}
 8004938:	4618      	mov	r0, r3
 800493a:	372c      	adds	r7, #44	; 0x2c
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	08005b4f 	.word	0x08005b4f
 8004948:	08005a99 	.word	0x08005a99

0800494c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004960:	2b20      	cmp	r3, #32
 8004962:	d132      	bne.n	80049ca <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Receive_IT+0x24>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e02b      	b.n	80049cc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d018      	beq.n	80049ba <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	613b      	str	r3, [r7, #16]
   return(result);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	69f9      	ldr	r1, [r7, #28]
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e6      	bne.n	8004988 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	461a      	mov	r2, r3
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 ff29 	bl	8005818 <UART_Start_Receive_IT>
 80049c6:	4603      	mov	r3, r0
 80049c8:	e000      	b.n	80049cc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
  }
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	; 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b0ba      	sub	sp, #232	; 0xe8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a02:	4013      	ands	r3, r2
 8004a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d115      	bne.n	8004a3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00f      	beq.n	8004a3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 82ac 	beq.w	8004f8a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
      }
      return;
 8004a3a:	e2a6      	b.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8117 	beq.w	8004c74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a56:	4b85      	ldr	r3, [pc, #532]	; (8004c6c <HAL_UART_IRQHandler+0x298>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 810a 	beq.w	8004c74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d011      	beq.n	8004a90 <HAL_UART_IRQHandler+0xbc>
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	f043 0201 	orr.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d011      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xec>
 8004a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2202      	movs	r2, #2
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d011      	beq.n	8004af0 <HAL_UART_IRQHandler+0x11c>
 8004acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2204      	movs	r2, #4
 8004ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	f043 0202 	orr.w	r2, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d017      	beq.n	8004b2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00b      	beq.n	8004b2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b22:	f043 0208 	orr.w	r2, r3, #8
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d012      	beq.n	8004b5e <HAL_UART_IRQHandler+0x18a>
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00c      	beq.n	8004b5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8212 	beq.w	8004f8e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00d      	beq.n	8004b92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d005      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04f      	beq.n	8004c56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fef4 	bl	80059a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d141      	bne.n	8004c4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1d9      	bne.n	8004bca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d013      	beq.n	8004c46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c22:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <HAL_UART_IRQHandler+0x29c>)
 8004c24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fa74 	bl	8002118 <HAL_DMA_Abort_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d017      	beq.n	8004c66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c40:	4610      	mov	r0, r2
 8004c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	e00f      	b.n	8004c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9ac 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	e00b      	b.n	8004c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9a8 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e007      	b.n	8004c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9a4 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004c64:	e193      	b.n	8004f8e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c66:	bf00      	nop
    return;
 8004c68:	e191      	b.n	8004f8e <HAL_UART_IRQHandler+0x5ba>
 8004c6a:	bf00      	nop
 8004c6c:	04000120 	.word	0x04000120
 8004c70:	08005a6d 	.word	0x08005a6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 814c 	bne.w	8004f16 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8145 	beq.w	8004f16 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 813e 	beq.w	8004f16 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	f040 80b6 	bne.w	8004e1e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8165 	beq.w	8004f92 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	f080 815d 	bcs.w	8004f92 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cec:	f000 8086 	beq.w	8004dfc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1da      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e1      	bne.n	8004d3a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3308      	adds	r3, #8
 8004d96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e3      	bne.n	8004d76 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	f023 0310 	bic.w	r3, r3, #16
 8004dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e4      	bne.n	8004dbc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd f91e 	bl	8002038 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8ce 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e1c:	e0b9      	b.n	8004f92 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80ab 	beq.w	8004f96 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80a6 	beq.w	8004f96 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e4      	bne.n	8004e4a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3308      	adds	r3, #8
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ea4:	633a      	str	r2, [r7, #48]	; 0x30
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e3      	bne.n	8004e80 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f023 0310 	bic.w	r3, r3, #16
 8004ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	69b9      	ldr	r1, [r7, #24]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	617b      	str	r3, [r7, #20]
   return(result);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e4      	bne.n	8004ecc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f852 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f14:	e03f      	b.n	8004f96 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00e      	beq.n	8004f40 <HAL_UART_IRQHandler+0x56c>
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f849 	bl	8004fd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f3e:	e02d      	b.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01c      	beq.n	8004f9a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
    }
    return;
 8004f68:	e017      	b.n	8004f9a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d012      	beq.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fe43 	bl	8005c0e <UART_EndTransmit_IT>
    return;
 8004f88:	e008      	b.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004f8a:	bf00      	nop
 8004f8c:	e006      	b.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004f9a:	bf00      	nop
  }

}
 8004f9c:	37e8      	adds	r7, #232	; 0xe8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop

08004fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4ba6      	ldr	r3, [pc, #664]	; (80052a8 <UART_SetConfig+0x2c4>)
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	6979      	ldr	r1, [r7, #20]
 8005018:	430b      	orrs	r3, r1
 800501a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a94      	ldr	r2, [pc, #592]	; (80052ac <UART_SetConfig+0x2c8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d120      	bne.n	80050a2 <UART_SetConfig+0xbe>
 8005060:	4b93      	ldr	r3, [pc, #588]	; (80052b0 <UART_SetConfig+0x2cc>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b03      	cmp	r3, #3
 800506c:	d816      	bhi.n	800509c <UART_SetConfig+0xb8>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <UART_SetConfig+0x90>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	08005085 	.word	0x08005085
 8005078:	08005091 	.word	0x08005091
 800507c:	0800508b 	.word	0x0800508b
 8005080:	08005097 	.word	0x08005097
 8005084:	2301      	movs	r3, #1
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e150      	b.n	800532c <UART_SetConfig+0x348>
 800508a:	2302      	movs	r3, #2
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e14d      	b.n	800532c <UART_SetConfig+0x348>
 8005090:	2304      	movs	r3, #4
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e14a      	b.n	800532c <UART_SetConfig+0x348>
 8005096:	2308      	movs	r3, #8
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e147      	b.n	800532c <UART_SetConfig+0x348>
 800509c:	2310      	movs	r3, #16
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e144      	b.n	800532c <UART_SetConfig+0x348>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a83      	ldr	r2, [pc, #524]	; (80052b4 <UART_SetConfig+0x2d0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d132      	bne.n	8005112 <UART_SetConfig+0x12e>
 80050ac:	4b80      	ldr	r3, [pc, #512]	; (80052b0 <UART_SetConfig+0x2cc>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	d828      	bhi.n	800510c <UART_SetConfig+0x128>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0xdc>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	0800510d 	.word	0x0800510d
 80050c8:	0800510d 	.word	0x0800510d
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	08005101 	.word	0x08005101
 80050d4:	0800510d 	.word	0x0800510d
 80050d8:	0800510d 	.word	0x0800510d
 80050dc:	0800510d 	.word	0x0800510d
 80050e0:	080050fb 	.word	0x080050fb
 80050e4:	0800510d 	.word	0x0800510d
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	0800510d 	.word	0x0800510d
 80050f0:	08005107 	.word	0x08005107
 80050f4:	2300      	movs	r3, #0
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e118      	b.n	800532c <UART_SetConfig+0x348>
 80050fa:	2302      	movs	r3, #2
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e115      	b.n	800532c <UART_SetConfig+0x348>
 8005100:	2304      	movs	r3, #4
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e112      	b.n	800532c <UART_SetConfig+0x348>
 8005106:	2308      	movs	r3, #8
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e10f      	b.n	800532c <UART_SetConfig+0x348>
 800510c:	2310      	movs	r3, #16
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e10c      	b.n	800532c <UART_SetConfig+0x348>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a68      	ldr	r2, [pc, #416]	; (80052b8 <UART_SetConfig+0x2d4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d120      	bne.n	800515e <UART_SetConfig+0x17a>
 800511c:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <UART_SetConfig+0x2cc>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005126:	2b30      	cmp	r3, #48	; 0x30
 8005128:	d013      	beq.n	8005152 <UART_SetConfig+0x16e>
 800512a:	2b30      	cmp	r3, #48	; 0x30
 800512c:	d814      	bhi.n	8005158 <UART_SetConfig+0x174>
 800512e:	2b20      	cmp	r3, #32
 8005130:	d009      	beq.n	8005146 <UART_SetConfig+0x162>
 8005132:	2b20      	cmp	r3, #32
 8005134:	d810      	bhi.n	8005158 <UART_SetConfig+0x174>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <UART_SetConfig+0x15c>
 800513a:	2b10      	cmp	r3, #16
 800513c:	d006      	beq.n	800514c <UART_SetConfig+0x168>
 800513e:	e00b      	b.n	8005158 <UART_SetConfig+0x174>
 8005140:	2300      	movs	r3, #0
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e0f2      	b.n	800532c <UART_SetConfig+0x348>
 8005146:	2302      	movs	r3, #2
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e0ef      	b.n	800532c <UART_SetConfig+0x348>
 800514c:	2304      	movs	r3, #4
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e0ec      	b.n	800532c <UART_SetConfig+0x348>
 8005152:	2308      	movs	r3, #8
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e0e9      	b.n	800532c <UART_SetConfig+0x348>
 8005158:	2310      	movs	r3, #16
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e0e6      	b.n	800532c <UART_SetConfig+0x348>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a56      	ldr	r2, [pc, #344]	; (80052bc <UART_SetConfig+0x2d8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d120      	bne.n	80051aa <UART_SetConfig+0x1c6>
 8005168:	4b51      	ldr	r3, [pc, #324]	; (80052b0 <UART_SetConfig+0x2cc>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005172:	2bc0      	cmp	r3, #192	; 0xc0
 8005174:	d013      	beq.n	800519e <UART_SetConfig+0x1ba>
 8005176:	2bc0      	cmp	r3, #192	; 0xc0
 8005178:	d814      	bhi.n	80051a4 <UART_SetConfig+0x1c0>
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d009      	beq.n	8005192 <UART_SetConfig+0x1ae>
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d810      	bhi.n	80051a4 <UART_SetConfig+0x1c0>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <UART_SetConfig+0x1a8>
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d006      	beq.n	8005198 <UART_SetConfig+0x1b4>
 800518a:	e00b      	b.n	80051a4 <UART_SetConfig+0x1c0>
 800518c:	2300      	movs	r3, #0
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e0cc      	b.n	800532c <UART_SetConfig+0x348>
 8005192:	2302      	movs	r3, #2
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e0c9      	b.n	800532c <UART_SetConfig+0x348>
 8005198:	2304      	movs	r3, #4
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e0c6      	b.n	800532c <UART_SetConfig+0x348>
 800519e:	2308      	movs	r3, #8
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e0c3      	b.n	800532c <UART_SetConfig+0x348>
 80051a4:	2310      	movs	r3, #16
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e0c0      	b.n	800532c <UART_SetConfig+0x348>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a44      	ldr	r2, [pc, #272]	; (80052c0 <UART_SetConfig+0x2dc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d125      	bne.n	8005200 <UART_SetConfig+0x21c>
 80051b4:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <UART_SetConfig+0x2cc>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c2:	d017      	beq.n	80051f4 <UART_SetConfig+0x210>
 80051c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c8:	d817      	bhi.n	80051fa <UART_SetConfig+0x216>
 80051ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ce:	d00b      	beq.n	80051e8 <UART_SetConfig+0x204>
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d4:	d811      	bhi.n	80051fa <UART_SetConfig+0x216>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <UART_SetConfig+0x1fe>
 80051da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051de:	d006      	beq.n	80051ee <UART_SetConfig+0x20a>
 80051e0:	e00b      	b.n	80051fa <UART_SetConfig+0x216>
 80051e2:	2300      	movs	r3, #0
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e0a1      	b.n	800532c <UART_SetConfig+0x348>
 80051e8:	2302      	movs	r3, #2
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e09e      	b.n	800532c <UART_SetConfig+0x348>
 80051ee:	2304      	movs	r3, #4
 80051f0:	77fb      	strb	r3, [r7, #31]
 80051f2:	e09b      	b.n	800532c <UART_SetConfig+0x348>
 80051f4:	2308      	movs	r3, #8
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e098      	b.n	800532c <UART_SetConfig+0x348>
 80051fa:	2310      	movs	r3, #16
 80051fc:	77fb      	strb	r3, [r7, #31]
 80051fe:	e095      	b.n	800532c <UART_SetConfig+0x348>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2f      	ldr	r2, [pc, #188]	; (80052c4 <UART_SetConfig+0x2e0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d125      	bne.n	8005256 <UART_SetConfig+0x272>
 800520a:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <UART_SetConfig+0x2cc>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005218:	d017      	beq.n	800524a <UART_SetConfig+0x266>
 800521a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800521e:	d817      	bhi.n	8005250 <UART_SetConfig+0x26c>
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005224:	d00b      	beq.n	800523e <UART_SetConfig+0x25a>
 8005226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522a:	d811      	bhi.n	8005250 <UART_SetConfig+0x26c>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <UART_SetConfig+0x254>
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005234:	d006      	beq.n	8005244 <UART_SetConfig+0x260>
 8005236:	e00b      	b.n	8005250 <UART_SetConfig+0x26c>
 8005238:	2301      	movs	r3, #1
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e076      	b.n	800532c <UART_SetConfig+0x348>
 800523e:	2302      	movs	r3, #2
 8005240:	77fb      	strb	r3, [r7, #31]
 8005242:	e073      	b.n	800532c <UART_SetConfig+0x348>
 8005244:	2304      	movs	r3, #4
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	e070      	b.n	800532c <UART_SetConfig+0x348>
 800524a:	2308      	movs	r3, #8
 800524c:	77fb      	strb	r3, [r7, #31]
 800524e:	e06d      	b.n	800532c <UART_SetConfig+0x348>
 8005250:	2310      	movs	r3, #16
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e06a      	b.n	800532c <UART_SetConfig+0x348>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <UART_SetConfig+0x2e4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d138      	bne.n	80052d2 <UART_SetConfig+0x2ee>
 8005260:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <UART_SetConfig+0x2cc>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800526a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800526e:	d017      	beq.n	80052a0 <UART_SetConfig+0x2bc>
 8005270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005274:	d82a      	bhi.n	80052cc <UART_SetConfig+0x2e8>
 8005276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527a:	d00b      	beq.n	8005294 <UART_SetConfig+0x2b0>
 800527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005280:	d824      	bhi.n	80052cc <UART_SetConfig+0x2e8>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <UART_SetConfig+0x2aa>
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528a:	d006      	beq.n	800529a <UART_SetConfig+0x2b6>
 800528c:	e01e      	b.n	80052cc <UART_SetConfig+0x2e8>
 800528e:	2300      	movs	r3, #0
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e04b      	b.n	800532c <UART_SetConfig+0x348>
 8005294:	2302      	movs	r3, #2
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e048      	b.n	800532c <UART_SetConfig+0x348>
 800529a:	2304      	movs	r3, #4
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e045      	b.n	800532c <UART_SetConfig+0x348>
 80052a0:	2308      	movs	r3, #8
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e042      	b.n	800532c <UART_SetConfig+0x348>
 80052a6:	bf00      	nop
 80052a8:	efff69f3 	.word	0xefff69f3
 80052ac:	40011000 	.word	0x40011000
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40004400 	.word	0x40004400
 80052b8:	40004800 	.word	0x40004800
 80052bc:	40004c00 	.word	0x40004c00
 80052c0:	40005000 	.word	0x40005000
 80052c4:	40011400 	.word	0x40011400
 80052c8:	40007800 	.word	0x40007800
 80052cc:	2310      	movs	r3, #16
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e02c      	b.n	800532c <UART_SetConfig+0x348>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a72      	ldr	r2, [pc, #456]	; (80054a0 <UART_SetConfig+0x4bc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d125      	bne.n	8005328 <UART_SetConfig+0x344>
 80052dc:	4b71      	ldr	r3, [pc, #452]	; (80054a4 <UART_SetConfig+0x4c0>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80052e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052ea:	d017      	beq.n	800531c <UART_SetConfig+0x338>
 80052ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052f0:	d817      	bhi.n	8005322 <UART_SetConfig+0x33e>
 80052f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f6:	d00b      	beq.n	8005310 <UART_SetConfig+0x32c>
 80052f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fc:	d811      	bhi.n	8005322 <UART_SetConfig+0x33e>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <UART_SetConfig+0x326>
 8005302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005306:	d006      	beq.n	8005316 <UART_SetConfig+0x332>
 8005308:	e00b      	b.n	8005322 <UART_SetConfig+0x33e>
 800530a:	2300      	movs	r3, #0
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e00d      	b.n	800532c <UART_SetConfig+0x348>
 8005310:	2302      	movs	r3, #2
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e00a      	b.n	800532c <UART_SetConfig+0x348>
 8005316:	2304      	movs	r3, #4
 8005318:	77fb      	strb	r3, [r7, #31]
 800531a:	e007      	b.n	800532c <UART_SetConfig+0x348>
 800531c:	2308      	movs	r3, #8
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	e004      	b.n	800532c <UART_SetConfig+0x348>
 8005322:	2310      	movs	r3, #16
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e001      	b.n	800532c <UART_SetConfig+0x348>
 8005328:	2310      	movs	r3, #16
 800532a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005334:	d15b      	bne.n	80053ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005336:	7ffb      	ldrb	r3, [r7, #31]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d828      	bhi.n	800538e <UART_SetConfig+0x3aa>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x360>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005369 	.word	0x08005369
 8005348:	08005371 	.word	0x08005371
 800534c:	08005379 	.word	0x08005379
 8005350:	0800538f 	.word	0x0800538f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800538f 	.word	0x0800538f
 800535c:	0800538f 	.word	0x0800538f
 8005360:	0800538f 	.word	0x0800538f
 8005364:	08005387 	.word	0x08005387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005368:	f7fd fdf2 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 800536c:	61b8      	str	r0, [r7, #24]
        break;
 800536e:	e013      	b.n	8005398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fd fe02 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8005374:	61b8      	str	r0, [r7, #24]
        break;
 8005376:	e00f      	b.n	8005398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005378:	4b4b      	ldr	r3, [pc, #300]	; (80054a8 <UART_SetConfig+0x4c4>)
 800537a:	61bb      	str	r3, [r7, #24]
        break;
 800537c:	e00c      	b.n	8005398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537e:	f7fd fd15 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8005382:	61b8      	str	r0, [r7, #24]
        break;
 8005384:	e008      	b.n	8005398 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	61bb      	str	r3, [r7, #24]
        break;
 800538c:	e004      	b.n	8005398 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	77bb      	strb	r3, [r7, #30]
        break;
 8005396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d074      	beq.n	8005488 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	005a      	lsls	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	441a      	add	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b0f      	cmp	r3, #15
 80053b8:	d916      	bls.n	80053e8 <UART_SetConfig+0x404>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c0:	d212      	bcs.n	80053e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f023 030f 	bic.w	r3, r3, #15
 80053ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	4313      	orrs	r3, r2
 80053dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	89fa      	ldrh	r2, [r7, #14]
 80053e4:	60da      	str	r2, [r3, #12]
 80053e6:	e04f      	b.n	8005488 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	77bb      	strb	r3, [r7, #30]
 80053ec:	e04c      	b.n	8005488 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053ee:	7ffb      	ldrb	r3, [r7, #31]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d828      	bhi.n	8005446 <UART_SetConfig+0x462>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x418>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	08005447 	.word	0x08005447
 800540c:	08005437 	.word	0x08005437
 8005410:	08005447 	.word	0x08005447
 8005414:	08005447 	.word	0x08005447
 8005418:	08005447 	.word	0x08005447
 800541c:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fd fd96 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 8005424:	61b8      	str	r0, [r7, #24]
        break;
 8005426:	e013      	b.n	8005450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fd fda6 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 800542c:	61b8      	str	r0, [r7, #24]
        break;
 800542e:	e00f      	b.n	8005450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <UART_SetConfig+0x4c4>)
 8005432:	61bb      	str	r3, [r7, #24]
        break;
 8005434:	e00c      	b.n	8005450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7fd fcb9 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 800543a:	61b8      	str	r0, [r7, #24]
        break;
 800543c:	e008      	b.n	8005450 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	61bb      	str	r3, [r7, #24]
        break;
 8005444:	e004      	b.n	8005450 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	77bb      	strb	r3, [r7, #30]
        break;
 800544e:	bf00      	nop
    }

    if (pclk != 0U)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d018      	beq.n	8005488 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	085a      	lsrs	r2, r3, #1
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	441a      	add	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d909      	bls.n	8005484 <UART_SetConfig+0x4a0>
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005476:	d205      	bcs.n	8005484 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	e001      	b.n	8005488 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005494:	7fbb      	ldrb	r3, [r7, #30]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40007c00 	.word	0x40007c00
 80054a4:	40023800 	.word	0x40023800
 80054a8:	00f42400 	.word	0x00f42400

080054ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055aa:	d10a      	bne.n	80055c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005600:	f7fc fb5c 	bl	8001cbc <HAL_GetTick>
 8005604:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d10e      	bne.n	8005632 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f831 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e027      	b.n	8005682 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d10e      	bne.n	800565e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f81b 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e011      	b.n	8005682 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b09c      	sub	sp, #112	; 0x70
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	e0a7      	b.n	80057ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	f000 80a3 	beq.w	80057ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fc fb09 	bl	8001cbc <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <UART_WaitOnFlagUntilTimeout+0x32>
 80056b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d13f      	bne.n	800573c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d0:	667b      	str	r3, [r7, #100]	; 0x64
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	663b      	str	r3, [r7, #96]	; 0x60
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800570e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e068      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d050      	beq.n	80057ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005758:	d148      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005762:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
 8005784:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	613b      	str	r3, [r7, #16]
   return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057b6:	623a      	str	r2, [r7, #32]
 80057b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	69f9      	ldr	r1, [r7, #28]
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e010      	b.n	800580e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	429a      	cmp	r2, r3
 8005808:	f43f af48 	beq.w	800569c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3770      	adds	r7, #112	; 0x70
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005818:	b480      	push	{r7}
 800581a:	b097      	sub	sp, #92	; 0x5c
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	88fa      	ldrh	r2, [r7, #6]
 8005830:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584a:	d10e      	bne.n	800586a <UART_Start_Receive_IT+0x52>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <UART_Start_Receive_IT+0x48>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f240 12ff 	movw	r2, #511	; 0x1ff
 800585a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800585e:	e02d      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005868:	e028      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <UART_Start_Receive_IT+0x76>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <UART_Start_Receive_IT+0x6c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	22ff      	movs	r2, #255	; 0xff
 800587e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005882:	e01b      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	227f      	movs	r2, #127	; 0x7f
 8005888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800588c:	e016      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005896:	d10d      	bne.n	80058b4 <UART_Start_Receive_IT+0x9c>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <UART_Start_Receive_IT+0x92>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	227f      	movs	r2, #127	; 0x7f
 80058a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058a8:	e008      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	223f      	movs	r2, #63	; 0x3f
 80058ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058b2:	e003      	b.n	80058bc <UART_Start_Receive_IT+0xa4>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2222      	movs	r2, #34	; 0x22
 80058c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	657b      	str	r3, [r7, #84]	; 0x54
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80058ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005908:	d107      	bne.n	800591a <UART_Start_Receive_IT+0x102>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a21      	ldr	r2, [pc, #132]	; (800599c <UART_Start_Receive_IT+0x184>)
 8005916:	669a      	str	r2, [r3, #104]	; 0x68
 8005918:	e002      	b.n	8005920 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a20      	ldr	r2, [pc, #128]	; (80059a0 <UART_Start_Receive_IT+0x188>)
 800591e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d019      	beq.n	800595c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800593c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
 8005948:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800594c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e6      	bne.n	8005928 <UART_Start_Receive_IT+0x110>
 800595a:	e018      	b.n	800598e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	613b      	str	r3, [r7, #16]
   return(result);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	653b      	str	r3, [r7, #80]	; 0x50
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	69f9      	ldr	r1, [r7, #28]
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	61bb      	str	r3, [r7, #24]
   return(result);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e6      	bne.n	800595c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	375c      	adds	r7, #92	; 0x5c
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	08005dc9 	.word	0x08005dc9
 80059a0:	08005c63 	.word	0x08005c63

080059a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b095      	sub	sp, #84	; 0x54
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
 80059cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d118      	bne.n	8005a4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f023 0310 	bic.w	r3, r3, #16
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	613b      	str	r3, [r7, #16]
   return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a60:	bf00      	nop
 8005a62:	3754      	adds	r7, #84	; 0x54
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff fa8a 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b08f      	sub	sp, #60	; 0x3c
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa4:	2b21      	cmp	r3, #33	; 0x21
 8005aa6:	d14c      	bne.n	8005b42 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d132      	bne.n	8005b1a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e6      	bne.n	8005ae6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b18:	e013      	b.n	8005b42 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b42:	bf00      	nop
 8005b44:	373c      	adds	r7, #60	; 0x3c
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b091      	sub	sp, #68	; 0x44
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5a:	2b21      	cmp	r3, #33	; 0x21
 8005b5c:	d151      	bne.n	8005c02 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d132      	bne.n	8005bd0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	623b      	str	r3, [r7, #32]
   return(result);
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	69b9      	ldr	r1, [r7, #24]
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005bce:	e018      	b.n	8005c02 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005c02:	bf00      	nop
 8005c04:	3744      	adds	r7, #68	; 0x44
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b088      	sub	sp, #32
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6979      	ldr	r1, [r7, #20]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	613b      	str	r3, [r7, #16]
   return(result);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e6      	bne.n	8005c16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fb fd6f 	bl	8001738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5a:	bf00      	nop
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b096      	sub	sp, #88	; 0x58
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c7a:	2b22      	cmp	r3, #34	; 0x22
 8005c7c:	f040 8098 	bne.w	8005db0 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005c8e:	b2d9      	uxtb	r1, r3
 8005c90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d17b      	bne.n	8005dc0 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	623b      	str	r3, [r7, #32]
   return(result);
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3308      	adds	r3, #8
 8005d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e5      	bne.n	8005cfa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d12e      	bne.n	8005da8 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	69b9      	ldr	r1, [r7, #24]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d103      	bne.n	8005d98 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2210      	movs	r2, #16
 8005d96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff f909 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005da6:	e00b      	b.n	8005dc0 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7fb fc99 	bl	80016e0 <HAL_UART_RxCpltCallback>
}
 8005dae:	e007      	b.n	8005dc0 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0208 	orr.w	r2, r2, #8
 8005dbe:	619a      	str	r2, [r3, #24]
}
 8005dc0:	bf00      	nop
 8005dc2:	3758      	adds	r7, #88	; 0x58
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b096      	sub	sp, #88	; 0x58
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dd6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de0:	2b22      	cmp	r3, #34	; 0x22
 8005de2:	f040 8098 	bne.w	8005f16 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005df6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005dfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dfe:	4013      	ands	r3, r2
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d17b      	bne.n	8005f26 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3308      	adds	r3, #8
 8005e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d12e      	bne.n	8005f0e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f023 0310 	bic.w	r3, r3, #16
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6979      	ldr	r1, [r7, #20]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e6      	bne.n	8005eb6 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d103      	bne.n	8005efe <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2210      	movs	r2, #16
 8005efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff f856 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f0c:	e00b      	b.n	8005f26 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fb fbe6 	bl	80016e0 <HAL_UART_RxCpltCallback>
}
 8005f14:	e007      	b.n	8005f26 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699a      	ldr	r2, [r3, #24]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0208 	orr.w	r2, r2, #8
 8005f24:	619a      	str	r2, [r3, #24]
}
 8005f26:	bf00      	nop
 8005f28:	3758      	adds	r7, #88	; 0x58
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <atoi>:
 8005f2e:	220a      	movs	r2, #10
 8005f30:	2100      	movs	r1, #0
 8005f32:	f000 b8d7 	b.w	80060e4 <strtol>
	...

08005f38 <__errno>:
 8005f38:	4b01      	ldr	r3, [pc, #4]	; (8005f40 <__errno+0x8>)
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	2000000c 	.word	0x2000000c

08005f44 <__libc_init_array>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4d0d      	ldr	r5, [pc, #52]	; (8005f7c <__libc_init_array+0x38>)
 8005f48:	4c0d      	ldr	r4, [pc, #52]	; (8005f80 <__libc_init_array+0x3c>)
 8005f4a:	1b64      	subs	r4, r4, r5
 8005f4c:	10a4      	asrs	r4, r4, #2
 8005f4e:	2600      	movs	r6, #0
 8005f50:	42a6      	cmp	r6, r4
 8005f52:	d109      	bne.n	8005f68 <__libc_init_array+0x24>
 8005f54:	4d0b      	ldr	r5, [pc, #44]	; (8005f84 <__libc_init_array+0x40>)
 8005f56:	4c0c      	ldr	r4, [pc, #48]	; (8005f88 <__libc_init_array+0x44>)
 8005f58:	f000 fdb6 	bl	8006ac8 <_init>
 8005f5c:	1b64      	subs	r4, r4, r5
 8005f5e:	10a4      	asrs	r4, r4, #2
 8005f60:	2600      	movs	r6, #0
 8005f62:	42a6      	cmp	r6, r4
 8005f64:	d105      	bne.n	8005f72 <__libc_init_array+0x2e>
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6c:	4798      	blx	r3
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7ee      	b.n	8005f50 <__libc_init_array+0xc>
 8005f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f76:	4798      	blx	r3
 8005f78:	3601      	adds	r6, #1
 8005f7a:	e7f2      	b.n	8005f62 <__libc_init_array+0x1e>
 8005f7c:	08006cd8 	.word	0x08006cd8
 8005f80:	08006cd8 	.word	0x08006cd8
 8005f84:	08006cd8 	.word	0x08006cd8
 8005f88:	08006cdc 	.word	0x08006cdc

08005f8c <memset>:
 8005f8c:	4402      	add	r2, r0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d100      	bne.n	8005f96 <memset+0xa>
 8005f94:	4770      	bx	lr
 8005f96:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9a:	e7f9      	b.n	8005f90 <memset+0x4>

08005f9c <strchr>:
 8005f9c:	b2c9      	uxtb	r1, r1
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fa4:	b11a      	cbz	r2, 8005fae <strchr+0x12>
 8005fa6:	428a      	cmp	r2, r1
 8005fa8:	d1f9      	bne.n	8005f9e <strchr+0x2>
 8005faa:	4618      	mov	r0, r3
 8005fac:	4770      	bx	lr
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	bf18      	it	ne
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	e7f9      	b.n	8005faa <strchr+0xe>

08005fb6 <strncmp>:
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	b17a      	cbz	r2, 8005fda <strncmp+0x24>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	3901      	subs	r1, #1
 8005fbe:	1884      	adds	r4, r0, r2
 8005fc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005fc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005fc8:	4290      	cmp	r0, r2
 8005fca:	d101      	bne.n	8005fd0 <strncmp+0x1a>
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d101      	bne.n	8005fd4 <strncmp+0x1e>
 8005fd0:	1a80      	subs	r0, r0, r2
 8005fd2:	bd10      	pop	{r4, pc}
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d1f3      	bne.n	8005fc0 <strncmp+0xa>
 8005fd8:	e7fa      	b.n	8005fd0 <strncmp+0x1a>
 8005fda:	4610      	mov	r0, r2
 8005fdc:	e7f9      	b.n	8005fd2 <strncmp+0x1c>
	...

08005fe0 <_strtol_l.constprop.0>:
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe6:	d001      	beq.n	8005fec <_strtol_l.constprop.0+0xc>
 8005fe8:	2b24      	cmp	r3, #36	; 0x24
 8005fea:	d906      	bls.n	8005ffa <_strtol_l.constprop.0+0x1a>
 8005fec:	f7ff ffa4 	bl	8005f38 <__errno>
 8005ff0:	2316      	movs	r3, #22
 8005ff2:	6003      	str	r3, [r0, #0]
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80060e0 <_strtol_l.constprop.0+0x100>
 8005ffe:	460d      	mov	r5, r1
 8006000:	462e      	mov	r6, r5
 8006002:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006006:	f814 700c 	ldrb.w	r7, [r4, ip]
 800600a:	f017 0708 	ands.w	r7, r7, #8
 800600e:	d1f7      	bne.n	8006000 <_strtol_l.constprop.0+0x20>
 8006010:	2c2d      	cmp	r4, #45	; 0x2d
 8006012:	d132      	bne.n	800607a <_strtol_l.constprop.0+0x9a>
 8006014:	782c      	ldrb	r4, [r5, #0]
 8006016:	2701      	movs	r7, #1
 8006018:	1cb5      	adds	r5, r6, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d05b      	beq.n	80060d6 <_strtol_l.constprop.0+0xf6>
 800601e:	2b10      	cmp	r3, #16
 8006020:	d109      	bne.n	8006036 <_strtol_l.constprop.0+0x56>
 8006022:	2c30      	cmp	r4, #48	; 0x30
 8006024:	d107      	bne.n	8006036 <_strtol_l.constprop.0+0x56>
 8006026:	782c      	ldrb	r4, [r5, #0]
 8006028:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800602c:	2c58      	cmp	r4, #88	; 0x58
 800602e:	d14d      	bne.n	80060cc <_strtol_l.constprop.0+0xec>
 8006030:	786c      	ldrb	r4, [r5, #1]
 8006032:	2310      	movs	r3, #16
 8006034:	3502      	adds	r5, #2
 8006036:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800603a:	f108 38ff 	add.w	r8, r8, #4294967295
 800603e:	f04f 0c00 	mov.w	ip, #0
 8006042:	fbb8 f9f3 	udiv	r9, r8, r3
 8006046:	4666      	mov	r6, ip
 8006048:	fb03 8a19 	mls	sl, r3, r9, r8
 800604c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006050:	f1be 0f09 	cmp.w	lr, #9
 8006054:	d816      	bhi.n	8006084 <_strtol_l.constprop.0+0xa4>
 8006056:	4674      	mov	r4, lr
 8006058:	42a3      	cmp	r3, r4
 800605a:	dd24      	ble.n	80060a6 <_strtol_l.constprop.0+0xc6>
 800605c:	f1bc 0f00 	cmp.w	ip, #0
 8006060:	db1e      	blt.n	80060a0 <_strtol_l.constprop.0+0xc0>
 8006062:	45b1      	cmp	r9, r6
 8006064:	d31c      	bcc.n	80060a0 <_strtol_l.constprop.0+0xc0>
 8006066:	d101      	bne.n	800606c <_strtol_l.constprop.0+0x8c>
 8006068:	45a2      	cmp	sl, r4
 800606a:	db19      	blt.n	80060a0 <_strtol_l.constprop.0+0xc0>
 800606c:	fb06 4603 	mla	r6, r6, r3, r4
 8006070:	f04f 0c01 	mov.w	ip, #1
 8006074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006078:	e7e8      	b.n	800604c <_strtol_l.constprop.0+0x6c>
 800607a:	2c2b      	cmp	r4, #43	; 0x2b
 800607c:	bf04      	itt	eq
 800607e:	782c      	ldrbeq	r4, [r5, #0]
 8006080:	1cb5      	addeq	r5, r6, #2
 8006082:	e7ca      	b.n	800601a <_strtol_l.constprop.0+0x3a>
 8006084:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006088:	f1be 0f19 	cmp.w	lr, #25
 800608c:	d801      	bhi.n	8006092 <_strtol_l.constprop.0+0xb2>
 800608e:	3c37      	subs	r4, #55	; 0x37
 8006090:	e7e2      	b.n	8006058 <_strtol_l.constprop.0+0x78>
 8006092:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006096:	f1be 0f19 	cmp.w	lr, #25
 800609a:	d804      	bhi.n	80060a6 <_strtol_l.constprop.0+0xc6>
 800609c:	3c57      	subs	r4, #87	; 0x57
 800609e:	e7db      	b.n	8006058 <_strtol_l.constprop.0+0x78>
 80060a0:	f04f 3cff 	mov.w	ip, #4294967295
 80060a4:	e7e6      	b.n	8006074 <_strtol_l.constprop.0+0x94>
 80060a6:	f1bc 0f00 	cmp.w	ip, #0
 80060aa:	da05      	bge.n	80060b8 <_strtol_l.constprop.0+0xd8>
 80060ac:	2322      	movs	r3, #34	; 0x22
 80060ae:	6003      	str	r3, [r0, #0]
 80060b0:	4646      	mov	r6, r8
 80060b2:	b942      	cbnz	r2, 80060c6 <_strtol_l.constprop.0+0xe6>
 80060b4:	4630      	mov	r0, r6
 80060b6:	e79e      	b.n	8005ff6 <_strtol_l.constprop.0+0x16>
 80060b8:	b107      	cbz	r7, 80060bc <_strtol_l.constprop.0+0xdc>
 80060ba:	4276      	negs	r6, r6
 80060bc:	2a00      	cmp	r2, #0
 80060be:	d0f9      	beq.n	80060b4 <_strtol_l.constprop.0+0xd4>
 80060c0:	f1bc 0f00 	cmp.w	ip, #0
 80060c4:	d000      	beq.n	80060c8 <_strtol_l.constprop.0+0xe8>
 80060c6:	1e69      	subs	r1, r5, #1
 80060c8:	6011      	str	r1, [r2, #0]
 80060ca:	e7f3      	b.n	80060b4 <_strtol_l.constprop.0+0xd4>
 80060cc:	2430      	movs	r4, #48	; 0x30
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1b1      	bne.n	8006036 <_strtol_l.constprop.0+0x56>
 80060d2:	2308      	movs	r3, #8
 80060d4:	e7af      	b.n	8006036 <_strtol_l.constprop.0+0x56>
 80060d6:	2c30      	cmp	r4, #48	; 0x30
 80060d8:	d0a5      	beq.n	8006026 <_strtol_l.constprop.0+0x46>
 80060da:	230a      	movs	r3, #10
 80060dc:	e7ab      	b.n	8006036 <_strtol_l.constprop.0+0x56>
 80060de:	bf00      	nop
 80060e0:	08006b9d 	.word	0x08006b9d

080060e4 <strtol>:
 80060e4:	4613      	mov	r3, r2
 80060e6:	460a      	mov	r2, r1
 80060e8:	4601      	mov	r1, r0
 80060ea:	4802      	ldr	r0, [pc, #8]	; (80060f4 <strtol+0x10>)
 80060ec:	6800      	ldr	r0, [r0, #0]
 80060ee:	f7ff bf77 	b.w	8005fe0 <_strtol_l.constprop.0>
 80060f2:	bf00      	nop
 80060f4:	2000000c 	.word	0x2000000c

080060f8 <_vsiprintf_r>:
 80060f8:	b500      	push	{lr}
 80060fa:	b09b      	sub	sp, #108	; 0x6c
 80060fc:	9100      	str	r1, [sp, #0]
 80060fe:	9104      	str	r1, [sp, #16]
 8006100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006104:	9105      	str	r1, [sp, #20]
 8006106:	9102      	str	r1, [sp, #8]
 8006108:	4905      	ldr	r1, [pc, #20]	; (8006120 <_vsiprintf_r+0x28>)
 800610a:	9103      	str	r1, [sp, #12]
 800610c:	4669      	mov	r1, sp
 800610e:	f000 f86f 	bl	80061f0 <_svfiprintf_r>
 8006112:	9b00      	ldr	r3, [sp, #0]
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	b01b      	add	sp, #108	; 0x6c
 800611a:	f85d fb04 	ldr.w	pc, [sp], #4
 800611e:	bf00      	nop
 8006120:	ffff0208 	.word	0xffff0208

08006124 <vsiprintf>:
 8006124:	4613      	mov	r3, r2
 8006126:	460a      	mov	r2, r1
 8006128:	4601      	mov	r1, r0
 800612a:	4802      	ldr	r0, [pc, #8]	; (8006134 <vsiprintf+0x10>)
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	f7ff bfe3 	b.w	80060f8 <_vsiprintf_r>
 8006132:	bf00      	nop
 8006134:	2000000c 	.word	0x2000000c

08006138 <__ssputs_r>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	688e      	ldr	r6, [r1, #8]
 800613e:	429e      	cmp	r6, r3
 8006140:	4682      	mov	sl, r0
 8006142:	460c      	mov	r4, r1
 8006144:	4690      	mov	r8, r2
 8006146:	461f      	mov	r7, r3
 8006148:	d838      	bhi.n	80061bc <__ssputs_r+0x84>
 800614a:	898a      	ldrh	r2, [r1, #12]
 800614c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006150:	d032      	beq.n	80061b8 <__ssputs_r+0x80>
 8006152:	6825      	ldr	r5, [r4, #0]
 8006154:	6909      	ldr	r1, [r1, #16]
 8006156:	eba5 0901 	sub.w	r9, r5, r1
 800615a:	6965      	ldr	r5, [r4, #20]
 800615c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006164:	3301      	adds	r3, #1
 8006166:	444b      	add	r3, r9
 8006168:	106d      	asrs	r5, r5, #1
 800616a:	429d      	cmp	r5, r3
 800616c:	bf38      	it	cc
 800616e:	461d      	movcc	r5, r3
 8006170:	0553      	lsls	r3, r2, #21
 8006172:	d531      	bpl.n	80061d8 <__ssputs_r+0xa0>
 8006174:	4629      	mov	r1, r5
 8006176:	f000 fb63 	bl	8006840 <_malloc_r>
 800617a:	4606      	mov	r6, r0
 800617c:	b950      	cbnz	r0, 8006194 <__ssputs_r+0x5c>
 800617e:	230c      	movs	r3, #12
 8006180:	f8ca 3000 	str.w	r3, [sl]
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	6921      	ldr	r1, [r4, #16]
 8006196:	464a      	mov	r2, r9
 8006198:	f000 fabe 	bl	8006718 <memcpy>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	6126      	str	r6, [r4, #16]
 80061aa:	6165      	str	r5, [r4, #20]
 80061ac:	444e      	add	r6, r9
 80061ae:	eba5 0509 	sub.w	r5, r5, r9
 80061b2:	6026      	str	r6, [r4, #0]
 80061b4:	60a5      	str	r5, [r4, #8]
 80061b6:	463e      	mov	r6, r7
 80061b8:	42be      	cmp	r6, r7
 80061ba:	d900      	bls.n	80061be <__ssputs_r+0x86>
 80061bc:	463e      	mov	r6, r7
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	4632      	mov	r2, r6
 80061c2:	4641      	mov	r1, r8
 80061c4:	f000 fab6 	bl	8006734 <memmove>
 80061c8:	68a3      	ldr	r3, [r4, #8]
 80061ca:	1b9b      	subs	r3, r3, r6
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	4433      	add	r3, r6
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	2000      	movs	r0, #0
 80061d6:	e7db      	b.n	8006190 <__ssputs_r+0x58>
 80061d8:	462a      	mov	r2, r5
 80061da:	f000 fba5 	bl	8006928 <_realloc_r>
 80061de:	4606      	mov	r6, r0
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d1e1      	bne.n	80061a8 <__ssputs_r+0x70>
 80061e4:	6921      	ldr	r1, [r4, #16]
 80061e6:	4650      	mov	r0, sl
 80061e8:	f000 fabe 	bl	8006768 <_free_r>
 80061ec:	e7c7      	b.n	800617e <__ssputs_r+0x46>
	...

080061f0 <_svfiprintf_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	4698      	mov	r8, r3
 80061f6:	898b      	ldrh	r3, [r1, #12]
 80061f8:	061b      	lsls	r3, r3, #24
 80061fa:	b09d      	sub	sp, #116	; 0x74
 80061fc:	4607      	mov	r7, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	4614      	mov	r4, r2
 8006202:	d50e      	bpl.n	8006222 <_svfiprintf_r+0x32>
 8006204:	690b      	ldr	r3, [r1, #16]
 8006206:	b963      	cbnz	r3, 8006222 <_svfiprintf_r+0x32>
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	f000 fb19 	bl	8006840 <_malloc_r>
 800620e:	6028      	str	r0, [r5, #0]
 8006210:	6128      	str	r0, [r5, #16]
 8006212:	b920      	cbnz	r0, 800621e <_svfiprintf_r+0x2e>
 8006214:	230c      	movs	r3, #12
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e0d1      	b.n	80063c2 <_svfiprintf_r+0x1d2>
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	616b      	str	r3, [r5, #20]
 8006222:	2300      	movs	r3, #0
 8006224:	9309      	str	r3, [sp, #36]	; 0x24
 8006226:	2320      	movs	r3, #32
 8006228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800622c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006230:	2330      	movs	r3, #48	; 0x30
 8006232:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063dc <_svfiprintf_r+0x1ec>
 8006236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800623a:	f04f 0901 	mov.w	r9, #1
 800623e:	4623      	mov	r3, r4
 8006240:	469a      	mov	sl, r3
 8006242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006246:	b10a      	cbz	r2, 800624c <_svfiprintf_r+0x5c>
 8006248:	2a25      	cmp	r2, #37	; 0x25
 800624a:	d1f9      	bne.n	8006240 <_svfiprintf_r+0x50>
 800624c:	ebba 0b04 	subs.w	fp, sl, r4
 8006250:	d00b      	beq.n	800626a <_svfiprintf_r+0x7a>
 8006252:	465b      	mov	r3, fp
 8006254:	4622      	mov	r2, r4
 8006256:	4629      	mov	r1, r5
 8006258:	4638      	mov	r0, r7
 800625a:	f7ff ff6d 	bl	8006138 <__ssputs_r>
 800625e:	3001      	adds	r0, #1
 8006260:	f000 80aa 	beq.w	80063b8 <_svfiprintf_r+0x1c8>
 8006264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006266:	445a      	add	r2, fp
 8006268:	9209      	str	r2, [sp, #36]	; 0x24
 800626a:	f89a 3000 	ldrb.w	r3, [sl]
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80a2 	beq.w	80063b8 <_svfiprintf_r+0x1c8>
 8006274:	2300      	movs	r3, #0
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800627e:	f10a 0a01 	add.w	sl, sl, #1
 8006282:	9304      	str	r3, [sp, #16]
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800628a:	931a      	str	r3, [sp, #104]	; 0x68
 800628c:	4654      	mov	r4, sl
 800628e:	2205      	movs	r2, #5
 8006290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006294:	4851      	ldr	r0, [pc, #324]	; (80063dc <_svfiprintf_r+0x1ec>)
 8006296:	f7f9 ffdb 	bl	8000250 <memchr>
 800629a:	9a04      	ldr	r2, [sp, #16]
 800629c:	b9d8      	cbnz	r0, 80062d6 <_svfiprintf_r+0xe6>
 800629e:	06d0      	lsls	r0, r2, #27
 80062a0:	bf44      	itt	mi
 80062a2:	2320      	movmi	r3, #32
 80062a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a8:	0711      	lsls	r1, r2, #28
 80062aa:	bf44      	itt	mi
 80062ac:	232b      	movmi	r3, #43	; 0x2b
 80062ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b2:	f89a 3000 	ldrb.w	r3, [sl]
 80062b6:	2b2a      	cmp	r3, #42	; 0x2a
 80062b8:	d015      	beq.n	80062e6 <_svfiprintf_r+0xf6>
 80062ba:	9a07      	ldr	r2, [sp, #28]
 80062bc:	4654      	mov	r4, sl
 80062be:	2000      	movs	r0, #0
 80062c0:	f04f 0c0a 	mov.w	ip, #10
 80062c4:	4621      	mov	r1, r4
 80062c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ca:	3b30      	subs	r3, #48	; 0x30
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	d94e      	bls.n	800636e <_svfiprintf_r+0x17e>
 80062d0:	b1b0      	cbz	r0, 8006300 <_svfiprintf_r+0x110>
 80062d2:	9207      	str	r2, [sp, #28]
 80062d4:	e014      	b.n	8006300 <_svfiprintf_r+0x110>
 80062d6:	eba0 0308 	sub.w	r3, r0, r8
 80062da:	fa09 f303 	lsl.w	r3, r9, r3
 80062de:	4313      	orrs	r3, r2
 80062e0:	9304      	str	r3, [sp, #16]
 80062e2:	46a2      	mov	sl, r4
 80062e4:	e7d2      	b.n	800628c <_svfiprintf_r+0x9c>
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	1d19      	adds	r1, r3, #4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	9103      	str	r1, [sp, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfbb      	ittet	lt
 80062f2:	425b      	neglt	r3, r3
 80062f4:	f042 0202 	orrlt.w	r2, r2, #2
 80062f8:	9307      	strge	r3, [sp, #28]
 80062fa:	9307      	strlt	r3, [sp, #28]
 80062fc:	bfb8      	it	lt
 80062fe:	9204      	strlt	r2, [sp, #16]
 8006300:	7823      	ldrb	r3, [r4, #0]
 8006302:	2b2e      	cmp	r3, #46	; 0x2e
 8006304:	d10c      	bne.n	8006320 <_svfiprintf_r+0x130>
 8006306:	7863      	ldrb	r3, [r4, #1]
 8006308:	2b2a      	cmp	r3, #42	; 0x2a
 800630a:	d135      	bne.n	8006378 <_svfiprintf_r+0x188>
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	9203      	str	r2, [sp, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	bfb8      	it	lt
 8006318:	f04f 33ff 	movlt.w	r3, #4294967295
 800631c:	3402      	adds	r4, #2
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063ec <_svfiprintf_r+0x1fc>
 8006324:	7821      	ldrb	r1, [r4, #0]
 8006326:	2203      	movs	r2, #3
 8006328:	4650      	mov	r0, sl
 800632a:	f7f9 ff91 	bl	8000250 <memchr>
 800632e:	b140      	cbz	r0, 8006342 <_svfiprintf_r+0x152>
 8006330:	2340      	movs	r3, #64	; 0x40
 8006332:	eba0 000a 	sub.w	r0, r0, sl
 8006336:	fa03 f000 	lsl.w	r0, r3, r0
 800633a:	9b04      	ldr	r3, [sp, #16]
 800633c:	4303      	orrs	r3, r0
 800633e:	3401      	adds	r4, #1
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006346:	4826      	ldr	r0, [pc, #152]	; (80063e0 <_svfiprintf_r+0x1f0>)
 8006348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800634c:	2206      	movs	r2, #6
 800634e:	f7f9 ff7f 	bl	8000250 <memchr>
 8006352:	2800      	cmp	r0, #0
 8006354:	d038      	beq.n	80063c8 <_svfiprintf_r+0x1d8>
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <_svfiprintf_r+0x1f4>)
 8006358:	bb1b      	cbnz	r3, 80063a2 <_svfiprintf_r+0x1b2>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	3307      	adds	r3, #7
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	3308      	adds	r3, #8
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	4433      	add	r3, r6
 800636a:	9309      	str	r3, [sp, #36]	; 0x24
 800636c:	e767      	b.n	800623e <_svfiprintf_r+0x4e>
 800636e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006372:	460c      	mov	r4, r1
 8006374:	2001      	movs	r0, #1
 8006376:	e7a5      	b.n	80062c4 <_svfiprintf_r+0xd4>
 8006378:	2300      	movs	r3, #0
 800637a:	3401      	adds	r4, #1
 800637c:	9305      	str	r3, [sp, #20]
 800637e:	4619      	mov	r1, r3
 8006380:	f04f 0c0a 	mov.w	ip, #10
 8006384:	4620      	mov	r0, r4
 8006386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800638a:	3a30      	subs	r2, #48	; 0x30
 800638c:	2a09      	cmp	r2, #9
 800638e:	d903      	bls.n	8006398 <_svfiprintf_r+0x1a8>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0c5      	beq.n	8006320 <_svfiprintf_r+0x130>
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	e7c3      	b.n	8006320 <_svfiprintf_r+0x130>
 8006398:	fb0c 2101 	mla	r1, ip, r1, r2
 800639c:	4604      	mov	r4, r0
 800639e:	2301      	movs	r3, #1
 80063a0:	e7f0      	b.n	8006384 <_svfiprintf_r+0x194>
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462a      	mov	r2, r5
 80063a8:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <_svfiprintf_r+0x1f8>)
 80063aa:	a904      	add	r1, sp, #16
 80063ac:	4638      	mov	r0, r7
 80063ae:	f3af 8000 	nop.w
 80063b2:	1c42      	adds	r2, r0, #1
 80063b4:	4606      	mov	r6, r0
 80063b6:	d1d6      	bne.n	8006366 <_svfiprintf_r+0x176>
 80063b8:	89ab      	ldrh	r3, [r5, #12]
 80063ba:	065b      	lsls	r3, r3, #25
 80063bc:	f53f af2c 	bmi.w	8006218 <_svfiprintf_r+0x28>
 80063c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063c2:	b01d      	add	sp, #116	; 0x74
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	ab03      	add	r3, sp, #12
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <_svfiprintf_r+0x1f8>)
 80063d0:	a904      	add	r1, sp, #16
 80063d2:	4638      	mov	r0, r7
 80063d4:	f000 f87a 	bl	80064cc <_printf_i>
 80063d8:	e7eb      	b.n	80063b2 <_svfiprintf_r+0x1c2>
 80063da:	bf00      	nop
 80063dc:	08006c9d 	.word	0x08006c9d
 80063e0:	08006ca7 	.word	0x08006ca7
 80063e4:	00000000 	.word	0x00000000
 80063e8:	08006139 	.word	0x08006139
 80063ec:	08006ca3 	.word	0x08006ca3

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006400:	4293      	cmp	r3, r2
 8006402:	bfb8      	it	lt
 8006404:	4613      	movlt	r3, r2
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800640c:	4607      	mov	r7, r0
 800640e:	460c      	mov	r4, r1
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc26      	bgt.n	8006486 <_printf_common+0x96>
 8006438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800643c:	1e13      	subs	r3, r2, #0
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d42b      	bmi.n	80064a0 <_printf_common+0xb0>
 8006448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d01e      	beq.n	8006494 <_printf_common+0xa4>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	68e5      	ldr	r5, [r4, #12]
 800645a:	6832      	ldr	r2, [r6, #0]
 800645c:	f003 0306 	and.w	r3, r3, #6
 8006460:	2b04      	cmp	r3, #4
 8006462:	bf08      	it	eq
 8006464:	1aad      	subeq	r5, r5, r2
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	bf0c      	ite	eq
 800646c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006470:	2500      	movne	r5, #0
 8006472:	4293      	cmp	r3, r2
 8006474:	bfc4      	itt	gt
 8006476:	1a9b      	subgt	r3, r3, r2
 8006478:	18ed      	addgt	r5, r5, r3
 800647a:	2600      	movs	r6, #0
 800647c:	341a      	adds	r4, #26
 800647e:	42b5      	cmp	r5, r6
 8006480:	d11a      	bne.n	80064b8 <_printf_common+0xc8>
 8006482:	2000      	movs	r0, #0
 8006484:	e008      	b.n	8006498 <_printf_common+0xa8>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4649      	mov	r1, r9
 800648c:	4638      	mov	r0, r7
 800648e:	47c0      	blx	r8
 8006490:	3001      	adds	r0, #1
 8006492:	d103      	bne.n	800649c <_printf_common+0xac>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	3501      	adds	r5, #1
 800649e:	e7c6      	b.n	800642e <_printf_common+0x3e>
 80064a0:	18e1      	adds	r1, r4, r3
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	2030      	movs	r0, #48	; 0x30
 80064a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064aa:	4422      	add	r2, r4
 80064ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b4:	3302      	adds	r3, #2
 80064b6:	e7c7      	b.n	8006448 <_printf_common+0x58>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4622      	mov	r2, r4
 80064bc:	4649      	mov	r1, r9
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0e6      	beq.n	8006494 <_printf_common+0xa4>
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7d9      	b.n	800647e <_printf_common+0x8e>
	...

080064cc <_printf_i>:
 80064cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	7e0f      	ldrb	r7, [r1, #24]
 80064d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d4:	2f78      	cmp	r7, #120	; 0x78
 80064d6:	4691      	mov	r9, r2
 80064d8:	4680      	mov	r8, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	469a      	mov	sl, r3
 80064de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e2:	d807      	bhi.n	80064f4 <_printf_i+0x28>
 80064e4:	2f62      	cmp	r7, #98	; 0x62
 80064e6:	d80a      	bhi.n	80064fe <_printf_i+0x32>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	f000 80d8 	beq.w	800669e <_printf_i+0x1d2>
 80064ee:	2f58      	cmp	r7, #88	; 0x58
 80064f0:	f000 80a3 	beq.w	800663a <_printf_i+0x16e>
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064fc:	e03a      	b.n	8006574 <_printf_i+0xa8>
 80064fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006502:	2b15      	cmp	r3, #21
 8006504:	d8f6      	bhi.n	80064f4 <_printf_i+0x28>
 8006506:	a101      	add	r1, pc, #4	; (adr r1, 800650c <_printf_i+0x40>)
 8006508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800650c:	08006565 	.word	0x08006565
 8006510:	08006579 	.word	0x08006579
 8006514:	080064f5 	.word	0x080064f5
 8006518:	080064f5 	.word	0x080064f5
 800651c:	080064f5 	.word	0x080064f5
 8006520:	080064f5 	.word	0x080064f5
 8006524:	08006579 	.word	0x08006579
 8006528:	080064f5 	.word	0x080064f5
 800652c:	080064f5 	.word	0x080064f5
 8006530:	080064f5 	.word	0x080064f5
 8006534:	080064f5 	.word	0x080064f5
 8006538:	08006685 	.word	0x08006685
 800653c:	080065a9 	.word	0x080065a9
 8006540:	08006667 	.word	0x08006667
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	080066a7 	.word	0x080066a7
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080064f5 	.word	0x080064f5
 800655c:	080064f5 	.word	0x080064f5
 8006560:	0800666f 	.word	0x0800666f
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006574:	2301      	movs	r3, #1
 8006576:	e0a3      	b.n	80066c0 <_printf_i+0x1f4>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	6829      	ldr	r1, [r5, #0]
 800657c:	0606      	lsls	r6, r0, #24
 800657e:	f101 0304 	add.w	r3, r1, #4
 8006582:	d50a      	bpl.n	800659a <_printf_i+0xce>
 8006584:	680e      	ldr	r6, [r1, #0]
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	2e00      	cmp	r6, #0
 800658a:	da03      	bge.n	8006594 <_printf_i+0xc8>
 800658c:	232d      	movs	r3, #45	; 0x2d
 800658e:	4276      	negs	r6, r6
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006594:	485e      	ldr	r0, [pc, #376]	; (8006710 <_printf_i+0x244>)
 8006596:	230a      	movs	r3, #10
 8006598:	e019      	b.n	80065ce <_printf_i+0x102>
 800659a:	680e      	ldr	r6, [r1, #0]
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065a2:	bf18      	it	ne
 80065a4:	b236      	sxthne	r6, r6
 80065a6:	e7ef      	b.n	8006588 <_printf_i+0xbc>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	0601      	lsls	r1, r0, #24
 80065b2:	d501      	bpl.n	80065b8 <_printf_i+0xec>
 80065b4:	681e      	ldr	r6, [r3, #0]
 80065b6:	e002      	b.n	80065be <_printf_i+0xf2>
 80065b8:	0646      	lsls	r6, r0, #25
 80065ba:	d5fb      	bpl.n	80065b4 <_printf_i+0xe8>
 80065bc:	881e      	ldrh	r6, [r3, #0]
 80065be:	4854      	ldr	r0, [pc, #336]	; (8006710 <_printf_i+0x244>)
 80065c0:	2f6f      	cmp	r7, #111	; 0x6f
 80065c2:	bf0c      	ite	eq
 80065c4:	2308      	moveq	r3, #8
 80065c6:	230a      	movne	r3, #10
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ce:	6865      	ldr	r5, [r4, #4]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	bfa2      	ittt	ge
 80065d6:	6821      	ldrge	r1, [r4, #0]
 80065d8:	f021 0104 	bicge.w	r1, r1, #4
 80065dc:	6021      	strge	r1, [r4, #0]
 80065de:	b90e      	cbnz	r6, 80065e4 <_printf_i+0x118>
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	d04d      	beq.n	8006680 <_printf_i+0x1b4>
 80065e4:	4615      	mov	r5, r2
 80065e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ea:	fb03 6711 	mls	r7, r3, r1, r6
 80065ee:	5dc7      	ldrb	r7, [r0, r7]
 80065f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f4:	4637      	mov	r7, r6
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	460e      	mov	r6, r1
 80065fa:	d9f4      	bls.n	80065e6 <_printf_i+0x11a>
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d10b      	bne.n	8006618 <_printf_i+0x14c>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07de      	lsls	r6, r3, #31
 8006604:	d508      	bpl.n	8006618 <_printf_i+0x14c>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	bfde      	ittt	le
 800660e:	2330      	movle	r3, #48	; 0x30
 8006610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006614:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006618:	1b52      	subs	r2, r2, r5
 800661a:	6122      	str	r2, [r4, #16]
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	464b      	mov	r3, r9
 8006622:	aa03      	add	r2, sp, #12
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fee2 	bl	80063f0 <_printf_common>
 800662c:	3001      	adds	r0, #1
 800662e:	d14c      	bne.n	80066ca <_printf_i+0x1fe>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	4835      	ldr	r0, [pc, #212]	; (8006710 <_printf_i+0x244>)
 800663c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	f851 6b04 	ldr.w	r6, [r1], #4
 8006648:	6029      	str	r1, [r5, #0]
 800664a:	061d      	lsls	r5, r3, #24
 800664c:	d514      	bpl.n	8006678 <_printf_i+0x1ac>
 800664e:	07df      	lsls	r7, r3, #31
 8006650:	bf44      	itt	mi
 8006652:	f043 0320 	orrmi.w	r3, r3, #32
 8006656:	6023      	strmi	r3, [r4, #0]
 8006658:	b91e      	cbnz	r6, 8006662 <_printf_i+0x196>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f023 0320 	bic.w	r3, r3, #32
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	2310      	movs	r3, #16
 8006664:	e7b0      	b.n	80065c8 <_printf_i+0xfc>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	f043 0320 	orr.w	r3, r3, #32
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	2378      	movs	r3, #120	; 0x78
 8006670:	4828      	ldr	r0, [pc, #160]	; (8006714 <_printf_i+0x248>)
 8006672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006676:	e7e3      	b.n	8006640 <_printf_i+0x174>
 8006678:	0659      	lsls	r1, r3, #25
 800667a:	bf48      	it	mi
 800667c:	b2b6      	uxthmi	r6, r6
 800667e:	e7e6      	b.n	800664e <_printf_i+0x182>
 8006680:	4615      	mov	r5, r2
 8006682:	e7bb      	b.n	80065fc <_printf_i+0x130>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	6826      	ldr	r6, [r4, #0]
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	1d18      	adds	r0, r3, #4
 800668c:	6028      	str	r0, [r5, #0]
 800668e:	0635      	lsls	r5, r6, #24
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	d501      	bpl.n	8006698 <_printf_i+0x1cc>
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	e002      	b.n	800669e <_printf_i+0x1d2>
 8006698:	0670      	lsls	r0, r6, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0x1c8>
 800669c:	8019      	strh	r1, [r3, #0]
 800669e:	2300      	movs	r3, #0
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	4615      	mov	r5, r2
 80066a4:	e7ba      	b.n	800661c <_printf_i+0x150>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	681d      	ldr	r5, [r3, #0]
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	2100      	movs	r1, #0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7f9 fdcc 	bl	8000250 <memchr>
 80066b8:	b108      	cbz	r0, 80066be <_printf_i+0x1f2>
 80066ba:	1b40      	subs	r0, r0, r5
 80066bc:	6060      	str	r0, [r4, #4]
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	2300      	movs	r3, #0
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	e7a8      	b.n	800661c <_printf_i+0x150>
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	462a      	mov	r2, r5
 80066ce:	4649      	mov	r1, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	47d0      	blx	sl
 80066d4:	3001      	adds	r0, #1
 80066d6:	d0ab      	beq.n	8006630 <_printf_i+0x164>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	079b      	lsls	r3, r3, #30
 80066dc:	d413      	bmi.n	8006706 <_printf_i+0x23a>
 80066de:	68e0      	ldr	r0, [r4, #12]
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	4298      	cmp	r0, r3
 80066e4:	bfb8      	it	lt
 80066e6:	4618      	movlt	r0, r3
 80066e8:	e7a4      	b.n	8006634 <_printf_i+0x168>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4632      	mov	r2, r6
 80066ee:	4649      	mov	r1, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	47d0      	blx	sl
 80066f4:	3001      	adds	r0, #1
 80066f6:	d09b      	beq.n	8006630 <_printf_i+0x164>
 80066f8:	3501      	adds	r5, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	9903      	ldr	r1, [sp, #12]
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	42ab      	cmp	r3, r5
 8006702:	dcf2      	bgt.n	80066ea <_printf_i+0x21e>
 8006704:	e7eb      	b.n	80066de <_printf_i+0x212>
 8006706:	2500      	movs	r5, #0
 8006708:	f104 0619 	add.w	r6, r4, #25
 800670c:	e7f5      	b.n	80066fa <_printf_i+0x22e>
 800670e:	bf00      	nop
 8006710:	08006cae 	.word	0x08006cae
 8006714:	08006cbf 	.word	0x08006cbf

08006718 <memcpy>:
 8006718:	440a      	add	r2, r1
 800671a:	4291      	cmp	r1, r2
 800671c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006720:	d100      	bne.n	8006724 <memcpy+0xc>
 8006722:	4770      	bx	lr
 8006724:	b510      	push	{r4, lr}
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672e:	4291      	cmp	r1, r2
 8006730:	d1f9      	bne.n	8006726 <memcpy+0xe>
 8006732:	bd10      	pop	{r4, pc}

08006734 <memmove>:
 8006734:	4288      	cmp	r0, r1
 8006736:	b510      	push	{r4, lr}
 8006738:	eb01 0402 	add.w	r4, r1, r2
 800673c:	d902      	bls.n	8006744 <memmove+0x10>
 800673e:	4284      	cmp	r4, r0
 8006740:	4623      	mov	r3, r4
 8006742:	d807      	bhi.n	8006754 <memmove+0x20>
 8006744:	1e43      	subs	r3, r0, #1
 8006746:	42a1      	cmp	r1, r4
 8006748:	d008      	beq.n	800675c <memmove+0x28>
 800674a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800674e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006752:	e7f8      	b.n	8006746 <memmove+0x12>
 8006754:	4402      	add	r2, r0
 8006756:	4601      	mov	r1, r0
 8006758:	428a      	cmp	r2, r1
 800675a:	d100      	bne.n	800675e <memmove+0x2a>
 800675c:	bd10      	pop	{r4, pc}
 800675e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006766:	e7f7      	b.n	8006758 <memmove+0x24>

08006768 <_free_r>:
 8006768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800676a:	2900      	cmp	r1, #0
 800676c:	d044      	beq.n	80067f8 <_free_r+0x90>
 800676e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006772:	9001      	str	r0, [sp, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f1a1 0404 	sub.w	r4, r1, #4
 800677a:	bfb8      	it	lt
 800677c:	18e4      	addlt	r4, r4, r3
 800677e:	f000 f913 	bl	80069a8 <__malloc_lock>
 8006782:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <_free_r+0x94>)
 8006784:	9801      	ldr	r0, [sp, #4]
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	b933      	cbnz	r3, 8006798 <_free_r+0x30>
 800678a:	6063      	str	r3, [r4, #4]
 800678c:	6014      	str	r4, [r2, #0]
 800678e:	b003      	add	sp, #12
 8006790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006794:	f000 b90e 	b.w	80069b4 <__malloc_unlock>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d908      	bls.n	80067ae <_free_r+0x46>
 800679c:	6825      	ldr	r5, [r4, #0]
 800679e:	1961      	adds	r1, r4, r5
 80067a0:	428b      	cmp	r3, r1
 80067a2:	bf01      	itttt	eq
 80067a4:	6819      	ldreq	r1, [r3, #0]
 80067a6:	685b      	ldreq	r3, [r3, #4]
 80067a8:	1949      	addeq	r1, r1, r5
 80067aa:	6021      	streq	r1, [r4, #0]
 80067ac:	e7ed      	b.n	800678a <_free_r+0x22>
 80067ae:	461a      	mov	r2, r3
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	b10b      	cbz	r3, 80067b8 <_free_r+0x50>
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	d9fa      	bls.n	80067ae <_free_r+0x46>
 80067b8:	6811      	ldr	r1, [r2, #0]
 80067ba:	1855      	adds	r5, r2, r1
 80067bc:	42a5      	cmp	r5, r4
 80067be:	d10b      	bne.n	80067d8 <_free_r+0x70>
 80067c0:	6824      	ldr	r4, [r4, #0]
 80067c2:	4421      	add	r1, r4
 80067c4:	1854      	adds	r4, r2, r1
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	6011      	str	r1, [r2, #0]
 80067ca:	d1e0      	bne.n	800678e <_free_r+0x26>
 80067cc:	681c      	ldr	r4, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	6053      	str	r3, [r2, #4]
 80067d2:	4421      	add	r1, r4
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	e7da      	b.n	800678e <_free_r+0x26>
 80067d8:	d902      	bls.n	80067e0 <_free_r+0x78>
 80067da:	230c      	movs	r3, #12
 80067dc:	6003      	str	r3, [r0, #0]
 80067de:	e7d6      	b.n	800678e <_free_r+0x26>
 80067e0:	6825      	ldr	r5, [r4, #0]
 80067e2:	1961      	adds	r1, r4, r5
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf04      	itt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	6063      	str	r3, [r4, #4]
 80067ee:	bf04      	itt	eq
 80067f0:	1949      	addeq	r1, r1, r5
 80067f2:	6021      	streq	r1, [r4, #0]
 80067f4:	6054      	str	r4, [r2, #4]
 80067f6:	e7ca      	b.n	800678e <_free_r+0x26>
 80067f8:	b003      	add	sp, #12
 80067fa:	bd30      	pop	{r4, r5, pc}
 80067fc:	200002cc 	.word	0x200002cc

08006800 <sbrk_aligned>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4e0e      	ldr	r6, [pc, #56]	; (800683c <sbrk_aligned+0x3c>)
 8006804:	460c      	mov	r4, r1
 8006806:	6831      	ldr	r1, [r6, #0]
 8006808:	4605      	mov	r5, r0
 800680a:	b911      	cbnz	r1, 8006812 <sbrk_aligned+0x12>
 800680c:	f000 f8bc 	bl	8006988 <_sbrk_r>
 8006810:	6030      	str	r0, [r6, #0]
 8006812:	4621      	mov	r1, r4
 8006814:	4628      	mov	r0, r5
 8006816:	f000 f8b7 	bl	8006988 <_sbrk_r>
 800681a:	1c43      	adds	r3, r0, #1
 800681c:	d00a      	beq.n	8006834 <sbrk_aligned+0x34>
 800681e:	1cc4      	adds	r4, r0, #3
 8006820:	f024 0403 	bic.w	r4, r4, #3
 8006824:	42a0      	cmp	r0, r4
 8006826:	d007      	beq.n	8006838 <sbrk_aligned+0x38>
 8006828:	1a21      	subs	r1, r4, r0
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f8ac 	bl	8006988 <_sbrk_r>
 8006830:	3001      	adds	r0, #1
 8006832:	d101      	bne.n	8006838 <sbrk_aligned+0x38>
 8006834:	f04f 34ff 	mov.w	r4, #4294967295
 8006838:	4620      	mov	r0, r4
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	200002d0 	.word	0x200002d0

08006840 <_malloc_r>:
 8006840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006844:	1ccd      	adds	r5, r1, #3
 8006846:	f025 0503 	bic.w	r5, r5, #3
 800684a:	3508      	adds	r5, #8
 800684c:	2d0c      	cmp	r5, #12
 800684e:	bf38      	it	cc
 8006850:	250c      	movcc	r5, #12
 8006852:	2d00      	cmp	r5, #0
 8006854:	4607      	mov	r7, r0
 8006856:	db01      	blt.n	800685c <_malloc_r+0x1c>
 8006858:	42a9      	cmp	r1, r5
 800685a:	d905      	bls.n	8006868 <_malloc_r+0x28>
 800685c:	230c      	movs	r3, #12
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	2600      	movs	r6, #0
 8006862:	4630      	mov	r0, r6
 8006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006868:	4e2e      	ldr	r6, [pc, #184]	; (8006924 <_malloc_r+0xe4>)
 800686a:	f000 f89d 	bl	80069a8 <__malloc_lock>
 800686e:	6833      	ldr	r3, [r6, #0]
 8006870:	461c      	mov	r4, r3
 8006872:	bb34      	cbnz	r4, 80068c2 <_malloc_r+0x82>
 8006874:	4629      	mov	r1, r5
 8006876:	4638      	mov	r0, r7
 8006878:	f7ff ffc2 	bl	8006800 <sbrk_aligned>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	4604      	mov	r4, r0
 8006880:	d14d      	bne.n	800691e <_malloc_r+0xde>
 8006882:	6834      	ldr	r4, [r6, #0]
 8006884:	4626      	mov	r6, r4
 8006886:	2e00      	cmp	r6, #0
 8006888:	d140      	bne.n	800690c <_malloc_r+0xcc>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	4631      	mov	r1, r6
 800688e:	4638      	mov	r0, r7
 8006890:	eb04 0803 	add.w	r8, r4, r3
 8006894:	f000 f878 	bl	8006988 <_sbrk_r>
 8006898:	4580      	cmp	r8, r0
 800689a:	d13a      	bne.n	8006912 <_malloc_r+0xd2>
 800689c:	6821      	ldr	r1, [r4, #0]
 800689e:	3503      	adds	r5, #3
 80068a0:	1a6d      	subs	r5, r5, r1
 80068a2:	f025 0503 	bic.w	r5, r5, #3
 80068a6:	3508      	adds	r5, #8
 80068a8:	2d0c      	cmp	r5, #12
 80068aa:	bf38      	it	cc
 80068ac:	250c      	movcc	r5, #12
 80068ae:	4629      	mov	r1, r5
 80068b0:	4638      	mov	r0, r7
 80068b2:	f7ff ffa5 	bl	8006800 <sbrk_aligned>
 80068b6:	3001      	adds	r0, #1
 80068b8:	d02b      	beq.n	8006912 <_malloc_r+0xd2>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	442b      	add	r3, r5
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	e00e      	b.n	80068e0 <_malloc_r+0xa0>
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	1b52      	subs	r2, r2, r5
 80068c6:	d41e      	bmi.n	8006906 <_malloc_r+0xc6>
 80068c8:	2a0b      	cmp	r2, #11
 80068ca:	d916      	bls.n	80068fa <_malloc_r+0xba>
 80068cc:	1961      	adds	r1, r4, r5
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	6025      	str	r5, [r4, #0]
 80068d2:	bf18      	it	ne
 80068d4:	6059      	strne	r1, [r3, #4]
 80068d6:	6863      	ldr	r3, [r4, #4]
 80068d8:	bf08      	it	eq
 80068da:	6031      	streq	r1, [r6, #0]
 80068dc:	5162      	str	r2, [r4, r5]
 80068de:	604b      	str	r3, [r1, #4]
 80068e0:	4638      	mov	r0, r7
 80068e2:	f104 060b 	add.w	r6, r4, #11
 80068e6:	f000 f865 	bl	80069b4 <__malloc_unlock>
 80068ea:	f026 0607 	bic.w	r6, r6, #7
 80068ee:	1d23      	adds	r3, r4, #4
 80068f0:	1af2      	subs	r2, r6, r3
 80068f2:	d0b6      	beq.n	8006862 <_malloc_r+0x22>
 80068f4:	1b9b      	subs	r3, r3, r6
 80068f6:	50a3      	str	r3, [r4, r2]
 80068f8:	e7b3      	b.n	8006862 <_malloc_r+0x22>
 80068fa:	6862      	ldr	r2, [r4, #4]
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	bf0c      	ite	eq
 8006900:	6032      	streq	r2, [r6, #0]
 8006902:	605a      	strne	r2, [r3, #4]
 8006904:	e7ec      	b.n	80068e0 <_malloc_r+0xa0>
 8006906:	4623      	mov	r3, r4
 8006908:	6864      	ldr	r4, [r4, #4]
 800690a:	e7b2      	b.n	8006872 <_malloc_r+0x32>
 800690c:	4634      	mov	r4, r6
 800690e:	6876      	ldr	r6, [r6, #4]
 8006910:	e7b9      	b.n	8006886 <_malloc_r+0x46>
 8006912:	230c      	movs	r3, #12
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4638      	mov	r0, r7
 8006918:	f000 f84c 	bl	80069b4 <__malloc_unlock>
 800691c:	e7a1      	b.n	8006862 <_malloc_r+0x22>
 800691e:	6025      	str	r5, [r4, #0]
 8006920:	e7de      	b.n	80068e0 <_malloc_r+0xa0>
 8006922:	bf00      	nop
 8006924:	200002cc 	.word	0x200002cc

08006928 <_realloc_r>:
 8006928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692c:	4680      	mov	r8, r0
 800692e:	4614      	mov	r4, r2
 8006930:	460e      	mov	r6, r1
 8006932:	b921      	cbnz	r1, 800693e <_realloc_r+0x16>
 8006934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	4611      	mov	r1, r2
 800693a:	f7ff bf81 	b.w	8006840 <_malloc_r>
 800693e:	b92a      	cbnz	r2, 800694c <_realloc_r+0x24>
 8006940:	f7ff ff12 	bl	8006768 <_free_r>
 8006944:	4625      	mov	r5, r4
 8006946:	4628      	mov	r0, r5
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	f000 f838 	bl	80069c0 <_malloc_usable_size_r>
 8006950:	4284      	cmp	r4, r0
 8006952:	4607      	mov	r7, r0
 8006954:	d802      	bhi.n	800695c <_realloc_r+0x34>
 8006956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800695a:	d812      	bhi.n	8006982 <_realloc_r+0x5a>
 800695c:	4621      	mov	r1, r4
 800695e:	4640      	mov	r0, r8
 8006960:	f7ff ff6e 	bl	8006840 <_malloc_r>
 8006964:	4605      	mov	r5, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0ed      	beq.n	8006946 <_realloc_r+0x1e>
 800696a:	42bc      	cmp	r4, r7
 800696c:	4622      	mov	r2, r4
 800696e:	4631      	mov	r1, r6
 8006970:	bf28      	it	cs
 8006972:	463a      	movcs	r2, r7
 8006974:	f7ff fed0 	bl	8006718 <memcpy>
 8006978:	4631      	mov	r1, r6
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fef4 	bl	8006768 <_free_r>
 8006980:	e7e1      	b.n	8006946 <_realloc_r+0x1e>
 8006982:	4635      	mov	r5, r6
 8006984:	e7df      	b.n	8006946 <_realloc_r+0x1e>
	...

08006988 <_sbrk_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	; (80069a4 <_sbrk_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fa ff9c 	bl	80018d0 <_sbrk>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_sbrk_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_sbrk_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	200002d4 	.word	0x200002d4

080069a8 <__malloc_lock>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__malloc_lock+0x8>)
 80069aa:	f000 b811 	b.w	80069d0 <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	200002d8 	.word	0x200002d8

080069b4 <__malloc_unlock>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__malloc_unlock+0x8>)
 80069b6:	f000 b80c 	b.w	80069d2 <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	200002d8 	.word	0x200002d8

080069c0 <_malloc_usable_size_r>:
 80069c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c4:	1f18      	subs	r0, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfbc      	itt	lt
 80069ca:	580b      	ldrlt	r3, [r1, r0]
 80069cc:	18c0      	addlt	r0, r0, r3
 80069ce:	4770      	bx	lr

080069d0 <__retarget_lock_acquire_recursive>:
 80069d0:	4770      	bx	lr

080069d2 <__retarget_lock_release_recursive>:
 80069d2:	4770      	bx	lr
 80069d4:	0000      	movs	r0, r0
	...

080069d8 <ceil>:
 80069d8:	ee10 1a90 	vmov	r1, s1
 80069dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80069e4:	2b13      	cmp	r3, #19
 80069e6:	b530      	push	{r4, r5, lr}
 80069e8:	ee10 0a10 	vmov	r0, s0
 80069ec:	ee10 5a10 	vmov	r5, s0
 80069f0:	dc2f      	bgt.n	8006a52 <ceil+0x7a>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	da13      	bge.n	8006a1e <ceil+0x46>
 80069f6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006ab8 <ceil+0xe0>
 80069fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80069fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a06:	dd05      	ble.n	8006a14 <ceil+0x3c>
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	db4c      	blt.n	8006aa6 <ceil+0xce>
 8006a0c:	4301      	orrs	r1, r0
 8006a0e:	d04e      	beq.n	8006aae <ceil+0xd6>
 8006a10:	492b      	ldr	r1, [pc, #172]	; (8006ac0 <ceil+0xe8>)
 8006a12:	2000      	movs	r0, #0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4602      	mov	r2, r0
 8006a18:	ec43 2b10 	vmov	d0, r2, r3
 8006a1c:	e020      	b.n	8006a60 <ceil+0x88>
 8006a1e:	4a29      	ldr	r2, [pc, #164]	; (8006ac4 <ceil+0xec>)
 8006a20:	411a      	asrs	r2, r3
 8006a22:	ea01 0402 	and.w	r4, r1, r2
 8006a26:	4304      	orrs	r4, r0
 8006a28:	d01a      	beq.n	8006a60 <ceil+0x88>
 8006a2a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8006ab8 <ceil+0xe0>
 8006a2e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006a32:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3a:	ddeb      	ble.n	8006a14 <ceil+0x3c>
 8006a3c:	2900      	cmp	r1, #0
 8006a3e:	bfc2      	ittt	gt
 8006a40:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8006a44:	fa40 f303 	asrgt.w	r3, r0, r3
 8006a48:	18c9      	addgt	r1, r1, r3
 8006a4a:	ea21 0102 	bic.w	r1, r1, r2
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e7e0      	b.n	8006a14 <ceil+0x3c>
 8006a52:	2b33      	cmp	r3, #51	; 0x33
 8006a54:	dd05      	ble.n	8006a62 <ceil+0x8a>
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d101      	bne.n	8006a60 <ceil+0x88>
 8006a5c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006a60:	bd30      	pop	{r4, r5, pc}
 8006a62:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006a66:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6a:	40e2      	lsrs	r2, r4
 8006a6c:	4202      	tst	r2, r0
 8006a6e:	d0f7      	beq.n	8006a60 <ceil+0x88>
 8006a70:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8006ab8 <ceil+0xe0>
 8006a74:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006a78:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a80:	ddc8      	ble.n	8006a14 <ceil+0x3c>
 8006a82:	2900      	cmp	r1, #0
 8006a84:	dd02      	ble.n	8006a8c <ceil+0xb4>
 8006a86:	2b14      	cmp	r3, #20
 8006a88:	d103      	bne.n	8006a92 <ceil+0xba>
 8006a8a:	3101      	adds	r1, #1
 8006a8c:	ea20 0002 	bic.w	r0, r0, r2
 8006a90:	e7c0      	b.n	8006a14 <ceil+0x3c>
 8006a92:	2401      	movs	r4, #1
 8006a94:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a98:	fa04 f303 	lsl.w	r3, r4, r3
 8006a9c:	4418      	add	r0, r3
 8006a9e:	42a8      	cmp	r0, r5
 8006aa0:	bf38      	it	cc
 8006aa2:	1909      	addcc	r1, r1, r4
 8006aa4:	e7f2      	b.n	8006a8c <ceil+0xb4>
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006aac:	e7b2      	b.n	8006a14 <ceil+0x3c>
 8006aae:	4608      	mov	r0, r1
 8006ab0:	e7b0      	b.n	8006a14 <ceil+0x3c>
 8006ab2:	bf00      	nop
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	8800759c 	.word	0x8800759c
 8006abc:	7e37e43c 	.word	0x7e37e43c
 8006ac0:	3ff00000 	.word	0x3ff00000
 8006ac4:	000fffff 	.word	0x000fffff

08006ac8 <_init>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr

08006ad4 <_fini>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr
