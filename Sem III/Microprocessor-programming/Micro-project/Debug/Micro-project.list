
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce0  08003ce0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ce8  08003ce8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000010  08003d00  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08003d00  00020330  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3b9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a35  00000000  00000000  0002b3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c03  00000000  00000000  0002ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa2c  00000000  00000000  000549bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1272  00000000  00000000  0005f3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc0  00000000  00000000  001506ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003cb0 	.word	0x08003cb0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003cb0 	.word	0x08003cb0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Print single character to terminal
void uart_print(unsigned char x)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	USART3->TDR = (x);
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <uart_print+0x2c>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 800054c:	bf00      	nop
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <uart_print+0x2c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <uart_print+0x12>
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40004800 	.word	0x40004800

0800056c <char_is_endmessage>:

// --- Reception ---
uint8_t char_is_endmessage(char c)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b0d      	cmp	r3, #13
 800057a:	d002      	beq.n	8000582 <char_is_endmessage+0x16>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b0a      	cmp	r3, #10
 8000580:	d101      	bne.n	8000586 <char_is_endmessage+0x1a>
	{
		return 1;
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <char_is_endmessage+0x1c>
	}
	else return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <rx_has_data>:

uint8_t rx_has_data()
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <rx_has_data+0x24>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <rx_has_data+0x28>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d101      	bne.n	80005ac <rx_has_data+0x18>
	{
		return 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e000      	b.n	80005ae <rx_has_data+0x1a>
	}
	else return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	20000306 	.word	0x20000306
 80005bc:	20000308 	.word	0x20000308

080005c0 <increase_rx_empty>:

void increase_rx_empty()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	rx_empty++;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <increase_rx_empty+0x2c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <increase_rx_empty+0x2c>)
 80005d0:	801a      	strh	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <increase_rx_empty+0x2c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	2b1e      	cmp	r3, #30
 80005da:	d902      	bls.n	80005e2 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <increase_rx_empty+0x2c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	}
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	20000306 	.word	0x20000306

080005f0 <increase_rx_busy>:

void increase_rx_busy()
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	rx_busy++;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <increase_rx_busy+0x2c>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	3301      	adds	r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <increase_rx_busy+0x2c>)
 8000600:	801a      	strh	r2, [r3, #0]
	if(rx_busy>BUFFER_LENGTH)
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <increase_rx_busy+0x2c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	2b1e      	cmp	r3, #30
 800060a:	d902      	bls.n	8000612 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <increase_rx_busy+0x2c>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
	}
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000308 	.word	0x20000308

08000620 <get_char>:

// Get character from the reception buffer
uint8_t get_char()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <get_char+0x24>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <get_char+0x28>)
 8000630:	5c9b      	ldrb	r3, [r3, r2]
 8000632:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000634:	f7ff ffdc 	bl	80005f0 <increase_rx_busy>
	return tmp;
 8000638:	79fb      	ldrb	r3, [r7, #7]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000308 	.word	0x20000308
 8000648:	200002e8 	.word	0x200002e8

0800064c <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000658:	e041      	b.n	80006de <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <get_message+0xa8>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	461c      	mov	r4, r3
 8000660:	f7ff ffde 	bl	8000620 <get_char>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <get_message+0xac>)
 800066a:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <get_message+0xa8>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <get_message+0xac>)
 8000674:	5c9b      	ldrb	r3, [r3, r2]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff78 	bl	800056c <char_is_endmessage>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d021      	beq.n	80006c6 <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <get_message+0xa8>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <get_message+0xac>)
 800068a:	2100      	movs	r1, #0
 800068c:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e009      	b.n	80006a8 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	440b      	add	r3, r1
 800069c:	4916      	ldr	r1, [pc, #88]	; (80006f8 <get_message+0xac>)
 800069e:	5c8a      	ldrb	r2, [r1, r2]
 80006a0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <get_message+0xa8>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3ef      	bcc.n	8000694 <get_message+0x48>
			}

			message_length = idx;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <get_message+0xa8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <get_message+0xa8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	801a      	strh	r2, [r3, #0]
			return message_length;
 80006c0:	89bb      	ldrh	r3, [r7, #12]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	e011      	b.n	80006ea <get_message+0x9e>
		}
		else
		{
			idx++;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <get_message+0xa8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <get_message+0xa8>)
 80006d0:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <get_message+0xa8>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	2b1e      	cmp	r3, #30
 80006d8:	d901      	bls.n	80006de <get_message+0x92>
 80006da:	2300      	movs	r3, #0
 80006dc:	e005      	b.n	80006ea <get_message+0x9e>
	while(rx_has_data() == 1)
 80006de:	f7ff ff59 	bl	8000594 <rx_has_data>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d0b8      	beq.n	800065a <get_message+0xe>
		}
	}
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000030a 	.word	0x2000030a
 80006f8:	2000030c 	.word	0x2000030c

080006fc <get_frame>:

// Collect & validate frame content
uint16_t get_frame(uint8_t *message)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	uint8_t frame[BUFFER_LENGTH];
	// Store last analyzed char position
	// Set index to 1 to skip starting char
	uint16_t collection_index = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Get sender
	for (uint8_t i=0; i<sizeof(sender); i++)
 8000708:	2300      	movs	r3, #0
 800070a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800070e:	e00f      	b.n	8000730 <get_frame+0x34>
	{
		sender[i] = message[collection_index];
 8000710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	441a      	add	r2, r3
 8000716:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800071a:	7811      	ldrb	r1, [r2, #0]
 800071c:	4a48      	ldr	r2, [pc, #288]	; (8000840 <get_frame+0x144>)
 800071e:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000720:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000722:	3301      	adds	r3, #1
 8000724:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint8_t i=0; i<sizeof(sender); i++)
 8000726:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800072a:	3301      	adds	r3, #1
 800072c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000730:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000734:	2b02      	cmp	r3, #2
 8000736:	d9eb      	bls.n	8000710 <get_frame+0x14>
	}

	// Get receiver
	for (uint8_t i=0; i<sizeof(receiver); i++)
 8000738:	2300      	movs	r3, #0
 800073a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800073e:	e00f      	b.n	8000760 <get_frame+0x64>
	{
		receiver[i] = message[collection_index];
 8000740:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	441a      	add	r2, r3
 8000746:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800074a:	7811      	ldrb	r1, [r2, #0]
 800074c:	4a3d      	ldr	r2, [pc, #244]	; (8000844 <get_frame+0x148>)
 800074e:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000750:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000752:	3301      	adds	r3, #1
 8000754:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint8_t i=0; i<sizeof(receiver); i++)
 8000756:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800075a:	3301      	adds	r3, #1
 800075c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000764:	2b02      	cmp	r3, #2
 8000766:	d9eb      	bls.n	8000740 <get_frame+0x44>
	}

	// Get command length
	for (uint8_t i=0; i<sizeof(command_length); i++)
 8000768:	2300      	movs	r3, #0
 800076a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800076e:	e00f      	b.n	8000790 <get_frame+0x94>
	{
		command_length[i] = message[collection_index];
 8000770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	441a      	add	r2, r3
 8000776:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800077a:	7811      	ldrb	r1, [r2, #0]
 800077c:	4a32      	ldr	r2, [pc, #200]	; (8000848 <get_frame+0x14c>)
 800077e:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000780:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000782:	3301      	adds	r3, #1
 8000784:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint8_t i=0; i<sizeof(command_length); i++)
 8000786:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800078a:	3301      	adds	r3, #1
 800078c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000790:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000794:	2b02      	cmp	r3, #2
 8000796:	d9eb      	bls.n	8000770 <get_frame+0x74>
	}
	// Return command length
	// Use length to get characters from 'data' array in next step

	// Get data
	for (uint16_t i=0; i<sizeof(command_length); i++)
 8000798:	2300      	movs	r3, #0
 800079a:	853b      	strh	r3, [r7, #40]	; 0x28
 800079c:	e00c      	b.n	80007b8 <get_frame+0xbc>
	{
		data[i] = message[collection_index];
 800079e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	441a      	add	r2, r3
 80007a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007a6:	7811      	ldrb	r1, [r2, #0]
 80007a8:	4a28      	ldr	r2, [pc, #160]	; (800084c <get_frame+0x150>)
 80007aa:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 80007ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007ae:	3301      	adds	r3, #1
 80007b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t i=0; i<sizeof(command_length); i++)
 80007b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007b4:	3301      	adds	r3, #1
 80007b6:	853b      	strh	r3, [r7, #40]	; 0x28
 80007b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d9ef      	bls.n	800079e <get_frame+0xa2>
	}

	// Get checksum
	for (uint8_t i=0; i<sizeof(checksum); i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007c4:	e00f      	b.n	80007e6 <get_frame+0xea>
	{
		checksum[i] = message[collection_index];
 80007c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	441a      	add	r2, r3
 80007cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d0:	7811      	ldrb	r1, [r2, #0]
 80007d2:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <get_frame+0x154>)
 80007d4:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 80007d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007d8:	3301      	adds	r3, #1
 80007da:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint8_t i=0; i<sizeof(checksum); i++)
 80007dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e0:	3301      	adds	r3, #1
 80007e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d9eb      	bls.n	80007c6 <get_frame+0xca>
	}

	if (message[0] == '#' && message[collection_index] == ';')
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b23      	cmp	r3, #35	; 0x23
 80007f4:	d11e      	bne.n	8000834 <get_frame+0x138>
 80007f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b3b      	cmp	r3, #59	; 0x3b
 8000800:	d118      	bne.n	8000834 <get_frame+0x138>
	{
		/* --- DEBUG --- */
		switch (led_state)
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <get_frame+0x158>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <get_frame+0x114>
 800080a:	2b01      	cmp	r3, #1
 800080c:	d009      	beq.n	8000822 <get_frame+0x126>
 800080e:	e012      	b.n	8000836 <get_frame+0x13a>
		{
		case 0:
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	4810      	ldr	r0, [pc, #64]	; (8000858 <get_frame+0x15c>)
 8000816:	f000 fe2b 	bl	8001470 <HAL_GPIO_WritePin>
			led_state = 1;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <get_frame+0x158>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
			break;
 8000820:	e009      	b.n	8000836 <get_frame+0x13a>

		case 1:
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <get_frame+0x15c>)
 8000828:	f000 fe22 	bl	8001470 <HAL_GPIO_WritePin>
			led_state = 0;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <get_frame+0x158>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			break;
 8000832:	e000      	b.n	8000836 <get_frame+0x13a>
		}
	}
 8000834:	bf00      	nop

	return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000d8 	.word	0x200000d8
 8000844:	200000dc 	.word	0x200000dc
 8000848:	200000e0 	.word	0x200000e0
 800084c:	200000e4 	.word	0x200000e4
 8000850:	200002e4 	.word	0x200002e4
 8000854:	20000000 	.word	0x20000000
 8000858:	40020400 	.word	0x40020400

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f000 fa59 	bl	8000d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f824 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f000 f8c0 	bl	80009ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800086c:	f000 f88e 	bl	800098c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	490b      	ldr	r1, [pc, #44]	; (80008a0 <main+0x44>)
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <main+0x48>)
 8000876:	f001 ffaf 	bl	80027d8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Retrieve the message
	  if (char_is_endmessage(character))
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <main+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe74 	bl	800056c <char_is_endmessage>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f7      	beq.n	800087a <main+0x1e>
	  {
		  message_length = get_message(message);
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <main+0x4c>)
 800088c:	f7ff fede 	bl	800064c <get_message>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <main+0x50>)
 8000896:	801a      	strh	r2, [r3, #0]
		  get_frame(message);
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <main+0x4c>)
 800089a:	f7ff ff2f 	bl	80006fc <get_frame>
	  if (char_is_endmessage(character))
 800089e:	e7ec      	b.n	800087a <main+0x1e>
 80008a0:	200000b4 	.word	0x200000b4
 80008a4:	2000002c 	.word	0x2000002c
 80008a8:	200000b8 	.word	0x200000b8
 80008ac:	200000d6 	.word	0x200000d6

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2234      	movs	r2, #52	; 0x34
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 f9ee 	bl	8003ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <SystemClock_Config+0xd4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <SystemClock_Config+0xd4>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <SystemClock_Config+0xd4>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <SystemClock_Config+0xd8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a25      	ldr	r2, [pc, #148]	; (8000988 <SystemClock_Config+0xd8>)
 80008f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <SystemClock_Config+0xd8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	2310      	movs	r3, #16
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000918:	2308      	movs	r3, #8
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800091c:	23d8      	movs	r3, #216	; 0xd8
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fe07 	bl	8001544 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800093c:	f000 f8da 	bl	8000af4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000940:	f000 fdb0 	bl	80014a4 <HAL_PWREx_EnableOverDrive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800094a:	f000 f8d3 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2107      	movs	r1, #7
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f897 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000978:	f000 f8bc 	bl	8000af4 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	; 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART3_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009d0:	f001 feb4 	bl	800273c <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f88b 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000002c 	.word	0x2000002c
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_GPIO_Init+0xa8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	4812      	ldr	r0, [pc, #72]	; (8000a98 <MX_GPIO_Init+0xac>)
 8000a50:	f000 fd0e 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_GPIO_Init+0xb0>)
 8000a6a:	f000 fb55 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_GPIO_Init+0xac>)
 8000a86:	f000 fb47 	bl	8001118 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	// Print character to terminal
	uart_print(character);
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_UART_RxCpltCallback+0x44>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd45 	bl	800053c <uart_print>

	// Check for correct USART port
	if(huart->Instance == USART3)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <HAL_UART_RxCpltCallback+0x48>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d10e      	bne.n	8000ada <HAL_UART_RxCpltCallback+0x3a>
	{
		// Collect character to reception buffer
		rx_buffer[rx_empty] = character;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_UART_RxCpltCallback+0x4c>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_UART_RxCpltCallback+0x44>)
 8000ac6:	7819      	ldrb	r1, [r3, #0]
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_UART_RxCpltCallback+0x50>)
 8000aca:	5499      	strb	r1, [r3, r2]

		// Increase rx_empty index
		increase_rx_empty();
 8000acc:	f7ff fd78 	bl	80005c0 <increase_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &character, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4904      	ldr	r1, [pc, #16]	; (8000ae4 <HAL_UART_RxCpltCallback+0x44>)
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f001 fe7f 	bl	80027d8 <HAL_UART_Receive_IT>
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000b4 	.word	0x200000b4
 8000ae8:	40004800 	.word	0x40004800
 8000aec:	20000306 	.word	0x20000306
 8000af0:	200002e8 	.word	0x200002e8

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_MspInit+0x54>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <HAL_MspInit+0x54>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x54>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_MspInit+0x54>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x54>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fa1a 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2005      	movs	r0, #5
 8000b42:	f000 fa20 	bl	8000f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b46:	2005      	movs	r0, #5
 8000b48:	f000 fa39 	bl	8000fbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ae      	sub	sp, #184	; 0xb8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2290      	movs	r2, #144	; 0x90
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 f891 	bl	8003ca0 <memset>
  if(huart->Instance==USART3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_UART_MspInit+0xc4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d144      	bne.n	8000c12 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 f9a8 	bl	8001eec <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ba2:	f7ff ffa7 	bl	8000af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <HAL_UART_MspInit+0xcc>)
 8000bfe:	f000 fa8b 	bl	8001118 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2027      	movs	r0, #39	; 0x27
 8000c08:	f000 f9bd 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c0c:	2027      	movs	r0, #39	; 0x27
 8000c0e:	f000 f9d6 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	37b8      	adds	r7, #184	; 0xb8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f88c 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <USART3_IRQHandler+0x10>)
 8000c92:	f001 fde5 	bl	8002860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000002c 	.word	0x2000002c

08000ca0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffd7 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f002 ffb1 	bl	8003c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fdb1 	bl	800085c <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d08:	08003cf0 	.word	0x08003cf0
  ldr r2, =_sbss
 8000d0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d10:	20000330 	.word	0x20000330

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>

08000d16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f928 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f805 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d26:	f7ff feeb 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f943 	bl	8000fda <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f90b 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000004 	.word	0x20000004
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	2000032c 	.word	0x2000032c

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000032c 	.word	0x2000032c

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x40>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	05fa0000 	.word	0x05fa0000

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff29 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff3e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff31 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff feda 	bl	8000db8 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d008      	beq.n	8001024 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e052      	b.n	80010ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0216 	bic.w	r2, r2, #22
 8001032:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001042:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <HAL_DMA_Abort+0x62>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0208 	bic.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001074:	e013      	b.n	800109e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001076:	f7ff fe9f 	bl	8000db8 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b05      	cmp	r3, #5
 8001082:	d90c      	bls.n	800109e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2220      	movs	r2, #32
 8001088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e015      	b.n	80010ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e4      	bne.n	8001076 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	223f      	movs	r2, #63	; 0x3f
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d004      	beq.n	80010f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e00c      	b.n	800110a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2205      	movs	r2, #5
 80010f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e175      	b.n	8001424 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8164 	bne.w	800141e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x56>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80be 	beq.w	800141e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b66      	ldr	r3, [pc, #408]	; (800143c <HAL_GPIO_Init+0x324>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a65      	ldr	r2, [pc, #404]	; (800143c <HAL_GPIO_Init+0x324>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_GPIO_Init+0x324>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ba:	4a61      	ldr	r2, [pc, #388]	; (8001440 <HAL_GPIO_Init+0x328>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_GPIO_Init+0x32c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d037      	beq.n	8001356 <HAL_GPIO_Init+0x23e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a57      	ldr	r2, [pc, #348]	; (8001448 <HAL_GPIO_Init+0x330>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d031      	beq.n	8001352 <HAL_GPIO_Init+0x23a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a56      	ldr	r2, [pc, #344]	; (800144c <HAL_GPIO_Init+0x334>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02b      	beq.n	800134e <HAL_GPIO_Init+0x236>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a55      	ldr	r2, [pc, #340]	; (8001450 <HAL_GPIO_Init+0x338>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d025      	beq.n	800134a <HAL_GPIO_Init+0x232>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a54      	ldr	r2, [pc, #336]	; (8001454 <HAL_GPIO_Init+0x33c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x22e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a53      	ldr	r2, [pc, #332]	; (8001458 <HAL_GPIO_Init+0x340>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x22a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	; (800145c <HAL_GPIO_Init+0x344>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x226>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a51      	ldr	r2, [pc, #324]	; (8001460 <HAL_GPIO_Init+0x348>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x222>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a50      	ldr	r2, [pc, #320]	; (8001464 <HAL_GPIO_Init+0x34c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x21e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4f      	ldr	r2, [pc, #316]	; (8001468 <HAL_GPIO_Init+0x350>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x21a>
 800132e:	2309      	movs	r3, #9
 8001330:	e012      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001332:	230a      	movs	r3, #10
 8001334:	e010      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001336:	2308      	movs	r3, #8
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800133a:	2307      	movs	r3, #7
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x328>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_GPIO_Init+0x354>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a34      	ldr	r2, [pc, #208]	; (800146c <HAL_GPIO_Init+0x354>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <HAL_GPIO_Init+0x354>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a29      	ldr	r2, [pc, #164]	; (800146c <HAL_GPIO_Init+0x354>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_GPIO_Init+0x354>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_GPIO_Init+0x354>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_GPIO_Init+0x354>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_GPIO_Init+0x354>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae86 	bls.w	8001138 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40022000 	.word	0x40022000
 8001468:	40022400 	.word	0x40022400
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <HAL_PWREx_EnableOverDrive+0x98>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_PWREx_EnableOverDrive+0x98>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_PWREx_EnableOverDrive+0x98>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d2:	f7ff fc71 	bl	8000db8 <HAL_GetTick>
 80014d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014d8:	e009      	b.n	80014ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014da:	f7ff fc6d 	bl	8000db8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e8:	d901      	bls.n	80014ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e022      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fa:	d1ee      	bne.n	80014da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001506:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001508:	f7ff fc56 	bl	8000db8 <HAL_GetTick>
 800150c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800150e:	e009      	b.n	8001524 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001510:	f7ff fc52 	bl	8000db8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151e:	d901      	bls.n	8001524 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e007      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001530:	d1ee      	bne.n	8001510 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e29b      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8087 	beq.w	8001676 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001568:	4b96      	ldr	r3, [pc, #600]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b04      	cmp	r3, #4
 8001572:	d00c      	beq.n	800158e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001574:	4b93      	ldr	r3, [pc, #588]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b08      	cmp	r3, #8
 800157e:	d112      	bne.n	80015a6 <HAL_RCC_OscConfig+0x62>
 8001580:	4b90      	ldr	r3, [pc, #576]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158c:	d10b      	bne.n	80015a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158e:	4b8d      	ldr	r3, [pc, #564]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d06c      	beq.n	8001674 <HAL_RCC_OscConfig+0x130>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d168      	bne.n	8001674 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e275      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x7a>
 80015b0:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a83      	ldr	r2, [pc, #524]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e02e      	b.n	800161c <HAL_RCC_OscConfig+0xd8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x9c>
 80015c6:	4b7f      	ldr	r3, [pc, #508]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a7e      	ldr	r2, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b7c      	ldr	r3, [pc, #496]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7b      	ldr	r2, [pc, #492]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0xd8>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0xc0>
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b73      	ldr	r3, [pc, #460]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a72      	ldr	r2, [pc, #456]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0xd8>
 8001604:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b6c      	ldr	r3, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6b      	ldr	r2, [pc, #428]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fbc8 	bl	8000db8 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fbc4 	bl	8000db8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e229      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0xe8>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fbb4 	bl	8000db8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fbb0 	bl	8000db8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e215      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x110>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d069      	beq.n	8001756 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001682:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168e:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b08      	cmp	r3, #8
 8001698:	d11c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x190>
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d116      	bne.n	80016d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_RCC_OscConfig+0x17a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e1e9      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	493d      	ldr	r1, [pc, #244]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	e040      	b.n	8001756 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d023      	beq.n	8001724 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016dc:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a38      	ldr	r2, [pc, #224]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb66 	bl	8000db8 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f0:	f7ff fb62 	bl	8000db8 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e1c7      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4929      	ldr	r1, [pc, #164]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fb42 	bl	8000db8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fb3e 	bl	8000db8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1a3      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d038      	beq.n	80017d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d019      	beq.n	800179e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001776:	f7ff fb1f 	bl	8000db8 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177e:	f7ff fb1b 	bl	8000db8 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e180      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 8001792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x23a>
 800179c:	e01a      	b.n	80017d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb05 	bl	8000db8 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fb01 	bl	8000db8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d903      	bls.n	80017c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e166      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
 80017c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80017ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ee      	bne.n	80017b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a4 	beq.w	800192a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b8c      	ldr	r3, [pc, #560]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10d      	bne.n	800180a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b89      	ldr	r3, [pc, #548]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a88      	ldr	r2, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b86      	ldr	r3, [pc, #536]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180a:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <HAL_RCC_OscConfig+0x4d4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d118      	bne.n	8001848 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001816:	4b80      	ldr	r3, [pc, #512]	; (8001a18 <HAL_RCC_OscConfig+0x4d4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7f      	ldr	r2, [pc, #508]	; (8001a18 <HAL_RCC_OscConfig+0x4d4>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001822:	f7ff fac9 	bl	8000db8 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182a:	f7ff fac5 	bl	8000db8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e12a      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183c:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_RCC_OscConfig+0x4d4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x31a>
 8001850:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a6f      	ldr	r2, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
 800185c:	e02d      	b.n	80018ba <HAL_RCC_OscConfig+0x376>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x33c>
 8001866:	4b6b      	ldr	r3, [pc, #428]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a6a      	ldr	r2, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a67      	ldr	r2, [pc, #412]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	e01c      	b.n	80018ba <HAL_RCC_OscConfig+0x376>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x35e>
 8001888:	4b62      	ldr	r3, [pc, #392]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a61      	ldr	r2, [pc, #388]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	e00b      	b.n	80018ba <HAL_RCC_OscConfig+0x376>
 80018a2:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d015      	beq.n	80018ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fa79 	bl	8000db8 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fa75 	bl	8000db8 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0d8      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ee      	beq.n	80018ca <HAL_RCC_OscConfig+0x386>
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fa63 	bl	8000db8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff fa5f 	bl	8000db8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e0c2      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ee      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d105      	bne.n	800192a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80ae 	beq.w	8001a90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001934:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d06d      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d14b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a31      	ldr	r2, [pc, #196]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 800194e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fa30 	bl	8000db8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fa2c 	bl	8000db8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e091      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	3b01      	subs	r3, #1
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	071b      	lsls	r3, r3, #28
 80019a6:	491b      	ldr	r1, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff f9fe 	bl	8000db8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f9fa 	bl	8000db8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e05f      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x47c>
 80019de:	e057      	b.n	8001a90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f9e4 	bl	8000db8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f9e0 	bl	8000db8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e045      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4b0>
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x54c>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <HAL_RCC_OscConfig+0x558>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d030      	beq.n	8001a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d129      	bne.n	8001a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d122      	bne.n	8001a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d119      	bne.n	8001a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d10f      	bne.n	8001a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0d0      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 020f 	bic.w	r2, r3, #15
 8001ace:	4965      	ldr	r1, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d040      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d115      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e073      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06b      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4936      	ldr	r1, [pc, #216]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b94:	f7ff f910 	bl	8000db8 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff f90c 	bl	8000db8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e053      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d210      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 020f 	bic.w	r2, r3, #15
 8001bda:	4922      	ldr	r1, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 f821 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1cc>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1d0>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1d4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f86c 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08003cc8 	.word	0x08003cc8
 8001c70:	20000004 	.word	0x20000004
 8001c74:	20000008 	.word	0x20000008

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	b094      	sub	sp, #80	; 0x50
 8001c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
 8001c84:	2300      	movs	r3, #0
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c88:	2300      	movs	r3, #0
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c90:	4b79      	ldr	r3, [pc, #484]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	f200 80e1 	bhi.w	8001e64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x34>
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001caa:	e0db      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cb0:	e0db      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cb6:	e0d8      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cce:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cea:	4622      	mov	r2, r4
 8001cec:	462b      	mov	r3, r5
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	0159      	lsls	r1, r3, #5
 8001cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfc:	0150      	lsls	r0, r2, #5
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4621      	mov	r1, r4
 8001d04:	1a51      	subs	r1, r2, r1
 8001d06:	6139      	str	r1, [r7, #16]
 8001d08:	4629      	mov	r1, r5
 8001d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	018b      	lsls	r3, r1, #6
 8001d20:	4651      	mov	r1, sl
 8001d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d26:	4651      	mov	r1, sl
 8001d28:	018a      	lsls	r2, r1, #6
 8001d2a:	4651      	mov	r1, sl
 8001d2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d30:	4659      	mov	r1, fp
 8001d32:	eb63 0901 	sbc.w	r9, r3, r1
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	eb18 0303 	adds.w	r3, r8, r3
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	462b      	mov	r3, r5
 8001d58:	eb49 0303 	adc.w	r3, r9, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	024b      	lsls	r3, r1, #9
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d74:	4621      	mov	r1, r4
 8001d76:	024a      	lsls	r2, r1, #9
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d88:	f7fe fa56 	bl	8000238 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4613      	mov	r3, r2
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d94:	e058      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	4611      	mov	r1, r2
 8001da2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001db0:	4642      	mov	r2, r8
 8001db2:	464b      	mov	r3, r9
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0159      	lsls	r1, r3, #5
 8001dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc2:	0150      	lsls	r0, r2, #5
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4641      	mov	r1, r8
 8001dca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dce:	4649      	mov	r1, r9
 8001dd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001de0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001de4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dec:	eb63 050b 	sbc.w	r5, r3, fp
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	00eb      	lsls	r3, r5, #3
 8001dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfe:	00e2      	lsls	r2, r4, #3
 8001e00:	4614      	mov	r4, r2
 8001e02:	461d      	mov	r5, r3
 8001e04:	4643      	mov	r3, r8
 8001e06:	18e3      	adds	r3, r4, r3
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	eb45 0303 	adc.w	r3, r5, r3
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e1e:	4629      	mov	r1, r5
 8001e20:	028b      	lsls	r3, r1, #10
 8001e22:	4621      	mov	r1, r4
 8001e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e28:	4621      	mov	r1, r4
 8001e2a:	028a      	lsls	r2, r1, #10
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e32:	2200      	movs	r2, #0
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	61fa      	str	r2, [r7, #28]
 8001e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3c:	f7fe f9fc 	bl	8000238 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4613      	mov	r3, r2
 8001e46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	3301      	adds	r3, #1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3750      	adds	r7, #80	; 0x50
 8001e70:	46bd      	mov	sp, r7
 8001e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200

08001e84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea0:	f7ff fff0 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a9b      	lsrs	r3, r3, #10
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08003cd8 	.word	0x08003cd8

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec8:	f7ff ffdc 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0b5b      	lsrs	r3, r3, #13
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08003cd8 	.word	0x08003cd8

08001eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d012      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f14:	4b69      	ldr	r3, [pc, #420]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a68      	ldr	r2, [pc, #416]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f1e:	6093      	str	r3, [r2, #8]
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f28:	4964      	ldr	r1, [pc, #400]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d017      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	4959      	ldr	r1, [pc, #356]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f64:	d101      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d017      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f82:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	494a      	ldr	r1, [pc, #296]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 808b 	beq.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a39      	ldr	r2, [pc, #228]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fee0 	bl	8000db8 <HAL_GetTick>
 8001ff8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7fe fedc 	bl	8000db8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e38f      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d035      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d02e      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002040:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d114      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe fea4 	bl	8000db8 <HAL_GetTick>
 8002070:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe fea0 	bl	8000db8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e351      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ee      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020a2:	d111      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020b2:	400b      	ands	r3, r1
 80020b4:	4901      	ldr	r1, [pc, #4]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
 80020ba:	e00b      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40007000 	.word	0x40007000
 80020c4:	0ffffcff 	.word	0x0ffffcff
 80020c8:	4bac      	ldr	r3, [pc, #688]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4aab      	ldr	r2, [pc, #684]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020d2:	6093      	str	r3, [r2, #8]
 80020d4:	4ba9      	ldr	r3, [pc, #676]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	49a6      	ldr	r1, [pc, #664]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d010      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020f2:	4ba2      	ldr	r3, [pc, #648]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f8:	4aa0      	ldr	r2, [pc, #640]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002102:	4b9e      	ldr	r3, [pc, #632]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002104:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	499b      	ldr	r1, [pc, #620]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002120:	4b96      	ldr	r3, [pc, #600]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800212e:	4993      	ldr	r1, [pc, #588]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002142:	4b8e      	ldr	r3, [pc, #568]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002150:	498a      	ldr	r1, [pc, #552]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002164:	4b85      	ldr	r3, [pc, #532]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002172:	4982      	ldr	r1, [pc, #520]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002186:	4b7d      	ldr	r3, [pc, #500]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4979      	ldr	r1, [pc, #484]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a8:	4b74      	ldr	r3, [pc, #464]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4971      	ldr	r1, [pc, #452]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ca:	4b6c      	ldr	r3, [pc, #432]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	f023 020c 	bic.w	r2, r3, #12
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	4968      	ldr	r1, [pc, #416]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4960      	ldr	r1, [pc, #384]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800220e:	4b5b      	ldr	r3, [pc, #364]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221c:	4957      	ldr	r1, [pc, #348]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002230:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	494f      	ldr	r1, [pc, #316]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002252:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	4946      	ldr	r1, [pc, #280]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002274:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	493e      	ldr	r1, [pc, #248]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a4:	4935      	ldr	r1, [pc, #212]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022b8:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c6:	492d      	ldr	r1, [pc, #180]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d011      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e8:	4924      	ldr	r1, [pc, #144]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f8:	d101      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	4914      	ldr	r1, [pc, #80]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00b      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800234c:	490b      	ldr	r1, [pc, #44]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00f      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002370:	4902      	ldr	r1, [pc, #8]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002378:	e002      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800238c:	4b8a      	ldr	r3, [pc, #552]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002392:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	4986      	ldr	r1, [pc, #536]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c0:	497d      	ldr	r1, [pc, #500]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d006      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80d6 	beq.w	8002588 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023dc:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e8:	f7fe fce6 	bl	8000db8 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023f0:	f7fe fce2 	bl	8000db8 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e195      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d021      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11d      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002436:	0e1b      	lsrs	r3, r3, #24
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	019a      	lsls	r2, r3, #6
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	071b      	lsls	r3, r3, #28
 8002456:	4958      	ldr	r1, [pc, #352]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800247c:	2b00      	cmp	r3, #0
 800247e:	d02e      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002488:	d129      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800248a:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249e:	0f1b      	lsrs	r3, r3, #28
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	019a      	lsls	r2, r3, #6
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	493e      	ldr	r1, [pc, #248]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	f023 021f 	bic.w	r2, r3, #31
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	3b01      	subs	r3, #1
 80024d6:	4938      	ldr	r1, [pc, #224]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01d      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024f8:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fe:	0f1b      	lsrs	r3, r3, #28
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	4926      	ldr	r1, [pc, #152]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d011      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	019a      	lsls	r2, r3, #6
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	071b      	lsls	r3, r3, #28
 800254e:	491a      	ldr	r1, [pc, #104]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002562:	f7fe fc29 	bl	8000db8 <HAL_GetTick>
 8002566:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800256a:	f7fe fc25 	bl	8000db8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	; 0x64
 8002576:	d901      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0d8      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 80ce 	bne.w	800272c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259c:	f7fe fc0c 	bl	8000db8 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025a2:	e00b      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025a4:	f7fe fc08 	bl	8000db8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d904      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0bb      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025bc:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c8:	d0ec      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02e      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d12a      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025f2:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002600:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	0f1b      	lsrs	r3, r3, #28
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	019a      	lsls	r2, r3, #6
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	431a      	orrs	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	071b      	lsls	r3, r3, #28
 8002626:	4944      	ldr	r1, [pc, #272]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002634:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	493d      	ldr	r1, [pc, #244]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d022      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265c:	d11d      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	0e1b      	lsrs	r3, r3, #24
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	0f1b      	lsrs	r3, r3, #28
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	019a      	lsls	r2, r3, #6
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	431a      	orrs	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	061b      	lsls	r3, r3, #24
 800268c:	431a      	orrs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	071b      	lsls	r3, r3, #28
 8002692:	4929      	ldr	r1, [pc, #164]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d028      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	0e1b      	lsrs	r3, r3, #24
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	019a      	lsls	r2, r3, #6
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	431a      	orrs	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	071b      	lsls	r3, r3, #28
 80026da:	4917      	ldr	r1, [pc, #92]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4911      	ldr	r1, [pc, #68]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002704:	f7fe fb58 	bl	8000db8 <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800270c:	f7fe fb54 	bl	8000db8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e007      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800272a:	d1ef      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e040      	b.n	80027d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f9fa 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fb82 	bl	8002e84 <UART_SetConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e022      	b.n	80027d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fdda 	bl	800334c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fe61 	bl	8003490 <UART_CheckIdleState>
 80027ce:	4603      	mov	r3, r0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d132      	bne.n	8002856 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_UART_Receive_IT+0x24>
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e02b      	b.n	8002858 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d018      	beq.n	8002846 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	613b      	str	r3, [r7, #16]
   return(result);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	69f9      	ldr	r1, [r7, #28]
 8002838:	6a3a      	ldr	r2, [r7, #32]
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e6      	bne.n	8002814 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	461a      	mov	r2, r3
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 ff33 	bl	80036b8 <UART_Start_Receive_IT>
 8002852:	4603      	mov	r3, r0
 8002854:	e000      	b.n	8002858 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0ba      	sub	sp, #232	; 0xe8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002886:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800288a:	f640 030f 	movw	r3, #2063	; 0x80f
 800288e:	4013      	ands	r3, r2
 8002890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d115      	bne.n	80028c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800289c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00f      	beq.n	80028c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 82ac 	beq.w	8002e16 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
      }
      return;
 80028c6:	e2a6      	b.n	8002e16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8117 	beq.w	8002b00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028e2:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <HAL_UART_IRQHandler+0x298>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 810a 	beq.w	8002b00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d011      	beq.n	800291c <HAL_UART_IRQHandler+0xbc>
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2201      	movs	r2, #1
 800290a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800291c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d011      	beq.n	800294c <HAL_UART_IRQHandler+0xec>
 8002928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2202      	movs	r2, #2
 800293a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d011      	beq.n	800297c <HAL_UART_IRQHandler+0x11c>
 8002958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2204      	movs	r2, #4
 800296a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800297c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002998:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2208      	movs	r2, #8
 80029a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ae:	f043 0208 	orr.w	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <HAL_UART_IRQHandler+0x18a>
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8212 	beq.w	8002e1a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d005      	beq.n	8002a42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04f      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fefe 	bl	8003844 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d141      	bne.n	8002ada <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1d9      	bne.n	8002a56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d013      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_UART_IRQHandler+0x29c>)
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fb0b 	bl	80010d2 <HAL_DMA_Abort_IT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d017      	beq.n	8002af2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002acc:	4610      	mov	r0, r2
 8002ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	e00f      	b.n	8002af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f9b6 	bl	8002e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	e00b      	b.n	8002af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f9b2 	bl	8002e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	e007      	b.n	8002af2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f9ae 	bl	8002e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002af0:	e193      	b.n	8002e1a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af2:	bf00      	nop
    return;
 8002af4:	e191      	b.n	8002e1a <HAL_UART_IRQHandler+0x5ba>
 8002af6:	bf00      	nop
 8002af8:	04000120 	.word	0x04000120
 8002afc:	0800390d 	.word	0x0800390d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 814c 	bne.w	8002da2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8145 	beq.w	8002da2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 813e 	beq.w	8002da2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	f040 80b6 	bne.w	8002caa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8165 	beq.w	8002e1e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	f080 815d 	bcs.w	8002e1e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b78:	f000 8086 	beq.w	8002c88 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ba6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002baa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1da      	bne.n	8002b7c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3308      	adds	r3, #8
 8002be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e1      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3308      	adds	r3, #8
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3308      	adds	r3, #8
 8002c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c58:	f023 0310 	bic.w	r3, r3, #16
 8002c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e4      	bne.n	8002c48 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f9b5 	bl	8000ff2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8d8 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ca8:	e0b9      	b.n	8002e1e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80ab 	beq.w	8002e22 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a6 	beq.w	8002e22 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e4      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3308      	adds	r3, #8
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d30:	633a      	str	r2, [r7, #48]	; 0x30
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e3      	bne.n	8002d0c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f023 0310 	bic.w	r3, r3, #16
 8002d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	617b      	str	r3, [r7, #20]
   return(result);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e4      	bne.n	8002d58 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f85c 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002da0:	e03f      	b.n	8002e22 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00e      	beq.n	8002dcc <HAL_UART_IRQHandler+0x56c>
 8002dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f853 	bl	8002e70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dca:	e02d      	b.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00e      	beq.n	8002df6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
    }
    return;
 8002df4:	e017      	b.n	8002e26 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
 8002e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fd92 	bl	8003938 <UART_EndTransmit_IT>
    return;
 8002e14:	e008      	b.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002e16:	bf00      	nop
 8002e18:	e006      	b.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002e1a:	bf00      	nop
 8002e1c:	e004      	b.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002e26:	bf00      	nop
  }

}
 8002e28:	37e8      	adds	r7, #232	; 0xe8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop

08002e30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4ba6      	ldr	r3, [pc, #664]	; (8003148 <UART_SetConfig+0x2c4>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a94      	ldr	r2, [pc, #592]	; (800314c <UART_SetConfig+0x2c8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d120      	bne.n	8002f42 <UART_SetConfig+0xbe>
 8002f00:	4b93      	ldr	r3, [pc, #588]	; (8003150 <UART_SetConfig+0x2cc>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d816      	bhi.n	8002f3c <UART_SetConfig+0xb8>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <UART_SetConfig+0x90>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f31 	.word	0x08002f31
 8002f1c:	08002f2b 	.word	0x08002f2b
 8002f20:	08002f37 	.word	0x08002f37
 8002f24:	2301      	movs	r3, #1
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e150      	b.n	80031cc <UART_SetConfig+0x348>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	e14d      	b.n	80031cc <UART_SetConfig+0x348>
 8002f30:	2304      	movs	r3, #4
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e14a      	b.n	80031cc <UART_SetConfig+0x348>
 8002f36:	2308      	movs	r3, #8
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e147      	b.n	80031cc <UART_SetConfig+0x348>
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e144      	b.n	80031cc <UART_SetConfig+0x348>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a83      	ldr	r2, [pc, #524]	; (8003154 <UART_SetConfig+0x2d0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d132      	bne.n	8002fb2 <UART_SetConfig+0x12e>
 8002f4c:	4b80      	ldr	r3, [pc, #512]	; (8003150 <UART_SetConfig+0x2cc>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d828      	bhi.n	8002fac <UART_SetConfig+0x128>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <UART_SetConfig+0xdc>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002fad 	.word	0x08002fad
 8002f68:	08002fad 	.word	0x08002fad
 8002f6c:	08002fad 	.word	0x08002fad
 8002f70:	08002fa1 	.word	0x08002fa1
 8002f74:	08002fad 	.word	0x08002fad
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	08002fad 	.word	0x08002fad
 8002f80:	08002f9b 	.word	0x08002f9b
 8002f84:	08002fad 	.word	0x08002fad
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fad 	.word	0x08002fad
 8002f90:	08002fa7 	.word	0x08002fa7
 8002f94:	2300      	movs	r3, #0
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e118      	b.n	80031cc <UART_SetConfig+0x348>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e115      	b.n	80031cc <UART_SetConfig+0x348>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e112      	b.n	80031cc <UART_SetConfig+0x348>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e10f      	b.n	80031cc <UART_SetConfig+0x348>
 8002fac:	2310      	movs	r3, #16
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e10c      	b.n	80031cc <UART_SetConfig+0x348>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a68      	ldr	r2, [pc, #416]	; (8003158 <UART_SetConfig+0x2d4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d120      	bne.n	8002ffe <UART_SetConfig+0x17a>
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <UART_SetConfig+0x2cc>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fc6:	2b30      	cmp	r3, #48	; 0x30
 8002fc8:	d013      	beq.n	8002ff2 <UART_SetConfig+0x16e>
 8002fca:	2b30      	cmp	r3, #48	; 0x30
 8002fcc:	d814      	bhi.n	8002ff8 <UART_SetConfig+0x174>
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d009      	beq.n	8002fe6 <UART_SetConfig+0x162>
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d810      	bhi.n	8002ff8 <UART_SetConfig+0x174>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <UART_SetConfig+0x15c>
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d006      	beq.n	8002fec <UART_SetConfig+0x168>
 8002fde:	e00b      	b.n	8002ff8 <UART_SetConfig+0x174>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e0f2      	b.n	80031cc <UART_SetConfig+0x348>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	e0ef      	b.n	80031cc <UART_SetConfig+0x348>
 8002fec:	2304      	movs	r3, #4
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e0ec      	b.n	80031cc <UART_SetConfig+0x348>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e0e9      	b.n	80031cc <UART_SetConfig+0x348>
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e0e6      	b.n	80031cc <UART_SetConfig+0x348>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a56      	ldr	r2, [pc, #344]	; (800315c <UART_SetConfig+0x2d8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d120      	bne.n	800304a <UART_SetConfig+0x1c6>
 8003008:	4b51      	ldr	r3, [pc, #324]	; (8003150 <UART_SetConfig+0x2cc>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003012:	2bc0      	cmp	r3, #192	; 0xc0
 8003014:	d013      	beq.n	800303e <UART_SetConfig+0x1ba>
 8003016:	2bc0      	cmp	r3, #192	; 0xc0
 8003018:	d814      	bhi.n	8003044 <UART_SetConfig+0x1c0>
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d009      	beq.n	8003032 <UART_SetConfig+0x1ae>
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d810      	bhi.n	8003044 <UART_SetConfig+0x1c0>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <UART_SetConfig+0x1a8>
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d006      	beq.n	8003038 <UART_SetConfig+0x1b4>
 800302a:	e00b      	b.n	8003044 <UART_SetConfig+0x1c0>
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e0cc      	b.n	80031cc <UART_SetConfig+0x348>
 8003032:	2302      	movs	r3, #2
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e0c9      	b.n	80031cc <UART_SetConfig+0x348>
 8003038:	2304      	movs	r3, #4
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e0c6      	b.n	80031cc <UART_SetConfig+0x348>
 800303e:	2308      	movs	r3, #8
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e0c3      	b.n	80031cc <UART_SetConfig+0x348>
 8003044:	2310      	movs	r3, #16
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e0c0      	b.n	80031cc <UART_SetConfig+0x348>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a44      	ldr	r2, [pc, #272]	; (8003160 <UART_SetConfig+0x2dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d125      	bne.n	80030a0 <UART_SetConfig+0x21c>
 8003054:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <UART_SetConfig+0x2cc>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003062:	d017      	beq.n	8003094 <UART_SetConfig+0x210>
 8003064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003068:	d817      	bhi.n	800309a <UART_SetConfig+0x216>
 800306a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306e:	d00b      	beq.n	8003088 <UART_SetConfig+0x204>
 8003070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003074:	d811      	bhi.n	800309a <UART_SetConfig+0x216>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <UART_SetConfig+0x1fe>
 800307a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307e:	d006      	beq.n	800308e <UART_SetConfig+0x20a>
 8003080:	e00b      	b.n	800309a <UART_SetConfig+0x216>
 8003082:	2300      	movs	r3, #0
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e0a1      	b.n	80031cc <UART_SetConfig+0x348>
 8003088:	2302      	movs	r3, #2
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e09e      	b.n	80031cc <UART_SetConfig+0x348>
 800308e:	2304      	movs	r3, #4
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e09b      	b.n	80031cc <UART_SetConfig+0x348>
 8003094:	2308      	movs	r3, #8
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e098      	b.n	80031cc <UART_SetConfig+0x348>
 800309a:	2310      	movs	r3, #16
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e095      	b.n	80031cc <UART_SetConfig+0x348>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <UART_SetConfig+0x2e0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d125      	bne.n	80030f6 <UART_SetConfig+0x272>
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <UART_SetConfig+0x2cc>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b8:	d017      	beq.n	80030ea <UART_SetConfig+0x266>
 80030ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030be:	d817      	bhi.n	80030f0 <UART_SetConfig+0x26c>
 80030c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c4:	d00b      	beq.n	80030de <UART_SetConfig+0x25a>
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ca:	d811      	bhi.n	80030f0 <UART_SetConfig+0x26c>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <UART_SetConfig+0x254>
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	d006      	beq.n	80030e4 <UART_SetConfig+0x260>
 80030d6:	e00b      	b.n	80030f0 <UART_SetConfig+0x26c>
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e076      	b.n	80031cc <UART_SetConfig+0x348>
 80030de:	2302      	movs	r3, #2
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e073      	b.n	80031cc <UART_SetConfig+0x348>
 80030e4:	2304      	movs	r3, #4
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e070      	b.n	80031cc <UART_SetConfig+0x348>
 80030ea:	2308      	movs	r3, #8
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e06d      	b.n	80031cc <UART_SetConfig+0x348>
 80030f0:	2310      	movs	r3, #16
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e06a      	b.n	80031cc <UART_SetConfig+0x348>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <UART_SetConfig+0x2e4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d138      	bne.n	8003172 <UART_SetConfig+0x2ee>
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <UART_SetConfig+0x2cc>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800310a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800310e:	d017      	beq.n	8003140 <UART_SetConfig+0x2bc>
 8003110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003114:	d82a      	bhi.n	800316c <UART_SetConfig+0x2e8>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	d00b      	beq.n	8003134 <UART_SetConfig+0x2b0>
 800311c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003120:	d824      	bhi.n	800316c <UART_SetConfig+0x2e8>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <UART_SetConfig+0x2aa>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d006      	beq.n	800313a <UART_SetConfig+0x2b6>
 800312c:	e01e      	b.n	800316c <UART_SetConfig+0x2e8>
 800312e:	2300      	movs	r3, #0
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e04b      	b.n	80031cc <UART_SetConfig+0x348>
 8003134:	2302      	movs	r3, #2
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e048      	b.n	80031cc <UART_SetConfig+0x348>
 800313a:	2304      	movs	r3, #4
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e045      	b.n	80031cc <UART_SetConfig+0x348>
 8003140:	2308      	movs	r3, #8
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e042      	b.n	80031cc <UART_SetConfig+0x348>
 8003146:	bf00      	nop
 8003148:	efff69f3 	.word	0xefff69f3
 800314c:	40011000 	.word	0x40011000
 8003150:	40023800 	.word	0x40023800
 8003154:	40004400 	.word	0x40004400
 8003158:	40004800 	.word	0x40004800
 800315c:	40004c00 	.word	0x40004c00
 8003160:	40005000 	.word	0x40005000
 8003164:	40011400 	.word	0x40011400
 8003168:	40007800 	.word	0x40007800
 800316c:	2310      	movs	r3, #16
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e02c      	b.n	80031cc <UART_SetConfig+0x348>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a72      	ldr	r2, [pc, #456]	; (8003340 <UART_SetConfig+0x4bc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d125      	bne.n	80031c8 <UART_SetConfig+0x344>
 800317c:	4b71      	ldr	r3, [pc, #452]	; (8003344 <UART_SetConfig+0x4c0>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003186:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800318a:	d017      	beq.n	80031bc <UART_SetConfig+0x338>
 800318c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003190:	d817      	bhi.n	80031c2 <UART_SetConfig+0x33e>
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d00b      	beq.n	80031b0 <UART_SetConfig+0x32c>
 8003198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319c:	d811      	bhi.n	80031c2 <UART_SetConfig+0x33e>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <UART_SetConfig+0x326>
 80031a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a6:	d006      	beq.n	80031b6 <UART_SetConfig+0x332>
 80031a8:	e00b      	b.n	80031c2 <UART_SetConfig+0x33e>
 80031aa:	2300      	movs	r3, #0
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e00d      	b.n	80031cc <UART_SetConfig+0x348>
 80031b0:	2302      	movs	r3, #2
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e00a      	b.n	80031cc <UART_SetConfig+0x348>
 80031b6:	2304      	movs	r3, #4
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e007      	b.n	80031cc <UART_SetConfig+0x348>
 80031bc:	2308      	movs	r3, #8
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e004      	b.n	80031cc <UART_SetConfig+0x348>
 80031c2:	2310      	movs	r3, #16
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e001      	b.n	80031cc <UART_SetConfig+0x348>
 80031c8:	2310      	movs	r3, #16
 80031ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d4:	d15b      	bne.n	800328e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80031d6:	7ffb      	ldrb	r3, [r7, #31]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d828      	bhi.n	800322e <UART_SetConfig+0x3aa>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x360>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003219 	.word	0x08003219
 80031f0:	0800322f 	.word	0x0800322f
 80031f4:	0800321f 	.word	0x0800321f
 80031f8:	0800322f 	.word	0x0800322f
 80031fc:	0800322f 	.word	0x0800322f
 8003200:	0800322f 	.word	0x0800322f
 8003204:	08003227 	.word	0x08003227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7fe fe48 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 800320c:	61b8      	str	r0, [r7, #24]
        break;
 800320e:	e013      	b.n	8003238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7fe fe58 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e00f      	b.n	8003238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003218:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <UART_SetConfig+0x4c4>)
 800321a:	61bb      	str	r3, [r7, #24]
        break;
 800321c:	e00c      	b.n	8003238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321e:	f7fe fd2b 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8003222:	61b8      	str	r0, [r7, #24]
        break;
 8003224:	e008      	b.n	8003238 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	61bb      	str	r3, [r7, #24]
        break;
 800322c:	e004      	b.n	8003238 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	77bb      	strb	r3, [r7, #30]
        break;
 8003236:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d074      	beq.n	8003328 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	005a      	lsls	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	d916      	bls.n	8003288 <UART_SetConfig+0x404>
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003260:	d212      	bcs.n	8003288 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	b29b      	uxth	r3, r3
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b29a      	uxth	r2, r3
 8003278:	89fb      	ldrh	r3, [r7, #14]
 800327a:	4313      	orrs	r3, r2
 800327c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	89fa      	ldrh	r2, [r7, #14]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e04f      	b.n	8003328 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	77bb      	strb	r3, [r7, #30]
 800328c:	e04c      	b.n	8003328 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800328e:	7ffb      	ldrb	r3, [r7, #31]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d828      	bhi.n	80032e6 <UART_SetConfig+0x462>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <UART_SetConfig+0x418>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032c1 	.word	0x080032c1
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032d1 	.word	0x080032d1
 80032a8:	080032e7 	.word	0x080032e7
 80032ac:	080032d7 	.word	0x080032d7
 80032b0:	080032e7 	.word	0x080032e7
 80032b4:	080032e7 	.word	0x080032e7
 80032b8:	080032e7 	.word	0x080032e7
 80032bc:	080032df 	.word	0x080032df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c0:	f7fe fdec 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 80032c4:	61b8      	str	r0, [r7, #24]
        break;
 80032c6:	e013      	b.n	80032f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c8:	f7fe fdfc 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 80032cc:	61b8      	str	r0, [r7, #24]
        break;
 80032ce:	e00f      	b.n	80032f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <UART_SetConfig+0x4c4>)
 80032d2:	61bb      	str	r3, [r7, #24]
        break;
 80032d4:	e00c      	b.n	80032f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d6:	f7fe fccf 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 80032da:	61b8      	str	r0, [r7, #24]
        break;
 80032dc:	e008      	b.n	80032f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e2:	61bb      	str	r3, [r7, #24]
        break;
 80032e4:	e004      	b.n	80032f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	77bb      	strb	r3, [r7, #30]
        break;
 80032ee:	bf00      	nop
    }

    if (pclk != 0U)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d018      	beq.n	8003328 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	085a      	lsrs	r2, r3, #1
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	441a      	add	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d909      	bls.n	8003324 <UART_SetConfig+0x4a0>
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003316:	d205      	bcs.n	8003324 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e001      	b.n	8003328 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003334:	7fbb      	ldrb	r3, [r7, #30]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40007c00 	.word	0x40007c00
 8003344:	40023800 	.word	0x40023800
 8003348:	00f42400 	.word	0x00f42400

0800334c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01a      	beq.n	8003462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344a:	d10a      	bne.n	8003462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a0:	f7fd fc8a 	bl	8000db8 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d10e      	bne.n	80034d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f831 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e027      	b.n	8003522 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d10e      	bne.n	80034fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f81b 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e011      	b.n	8003522 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b09c      	sub	sp, #112	; 0x70
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	e0a7      	b.n	800368c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	f000 80a3 	beq.w	800368c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fd fc37 	bl	8000db8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <UART_WaitOnFlagUntilTimeout+0x32>
 8003556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003558:	2b00      	cmp	r3, #0
 800355a:	d13f      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800356a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003570:	667b      	str	r3, [r7, #100]	; 0x64
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800357c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e6      	bne.n	800355c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3308      	adds	r3, #8
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	663b      	str	r3, [r7, #96]	; 0x60
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80035b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e068      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d050      	beq.n	800368c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f8:	d148      	bne.n	800368c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003602:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	637b      	str	r3, [r7, #52]	; 0x34
 8003624:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e6      	bne.n	8003604 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	613b      	str	r3, [r7, #16]
   return(result);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	66bb      	str	r3, [r7, #104]	; 0x68
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3308      	adds	r3, #8
 8003654:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003656:	623a      	str	r2, [r7, #32]
 8003658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	69f9      	ldr	r1, [r7, #28]
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	61bb      	str	r3, [r7, #24]
   return(result);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e5      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e010      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	f43f af48 	beq.w	800353c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3770      	adds	r7, #112	; 0x70
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b097      	sub	sp, #92	; 0x5c
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	4613      	mov	r3, r2
 80036c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	d10e      	bne.n	800370a <UART_Start_Receive_IT+0x52>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <UART_Start_Receive_IT+0x48>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036fe:	e02d      	b.n	800375c <UART_Start_Receive_IT+0xa4>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003708:	e028      	b.n	800375c <UART_Start_Receive_IT+0xa4>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <UART_Start_Receive_IT+0x76>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <UART_Start_Receive_IT+0x6c>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003722:	e01b      	b.n	800375c <UART_Start_Receive_IT+0xa4>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	227f      	movs	r2, #127	; 0x7f
 8003728:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800372c:	e016      	b.n	800375c <UART_Start_Receive_IT+0xa4>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003736:	d10d      	bne.n	8003754 <UART_Start_Receive_IT+0x9c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <UART_Start_Receive_IT+0x92>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	227f      	movs	r2, #127	; 0x7f
 8003744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003748:	e008      	b.n	800375c <UART_Start_Receive_IT+0xa4>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	223f      	movs	r2, #63	; 0x3f
 800374e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003752:	e003      	b.n	800375c <UART_Start_Receive_IT+0xa4>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2222      	movs	r2, #34	; 0x22
 8003768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3308      	adds	r3, #8
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	657b      	str	r3, [r7, #84]	; 0x54
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800378c:	64ba      	str	r2, [r7, #72]	; 0x48
 800378e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800379a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a8:	d107      	bne.n	80037ba <UART_Start_Receive_IT+0x102>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <UART_Start_Receive_IT+0x184>)
 80037b6:	669a      	str	r2, [r3, #104]	; 0x68
 80037b8:	e002      	b.n	80037c0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <UART_Start_Receive_IT+0x188>)
 80037be:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d019      	beq.n	80037fc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80037dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
 80037e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e6      	bne.n	80037c8 <UART_Start_Receive_IT+0x110>
 80037fa:	e018      	b.n	800382e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	613b      	str	r3, [r7, #16]
   return(result);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	653b      	str	r3, [r7, #80]	; 0x50
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	69f9      	ldr	r1, [r7, #28]
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	61bb      	str	r3, [r7, #24]
   return(result);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e6      	bne.n	80037fc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	375c      	adds	r7, #92	; 0x5c
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	08003af3 	.word	0x08003af3
 8003840:	0800398d 	.word	0x0800398d

08003844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b095      	sub	sp, #84	; 0x54
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386a:	643b      	str	r3, [r7, #64]	; 0x40
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e6      	bne.n	800384c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3308      	adds	r3, #8
 8003884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	61fb      	str	r3, [r7, #28]
   return(result);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3308      	adds	r3, #8
 800389c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e5      	bne.n	800387e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d118      	bne.n	80038ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 0310 	bic.w	r3, r3, #16
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6979      	ldr	r1, [r7, #20]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	613b      	str	r3, [r7, #16]
   return(result);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e6      	bne.n	80038ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003900:	bf00      	nop
 8003902:	3754      	adds	r7, #84	; 0x54
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff fa8a 	bl	8002e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	60bb      	str	r3, [r7, #8]
   return(result);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e6      	bne.n	8003940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fa56 	bl	8002e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b096      	sub	sp, #88	; 0x58
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800399a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a4:	2b22      	cmp	r3, #34	; 0x22
 80039a6:	f040 8098 	bne.w	8003ada <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039b8:	b2d9      	uxtb	r1, r3
 80039ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	400a      	ands	r2, r1
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d17b      	bne.n	8003aea <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
 8003a12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e6      	bne.n	80039f2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	623b      	str	r3, [r7, #32]
   return(result);
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a44:	633a      	str	r2, [r7, #48]	; 0x30
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d12e      	bne.n	8003ad2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0310 	bic.w	r3, r3, #16
 8003a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	69b9      	ldr	r1, [r7, #24]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e6      	bne.n	8003a7a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d103      	bne.n	8003ac2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff f9c4 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ad0:	e00b      	b.n	8003aea <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fc ffe4 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8003ad8:	e007      	b.n	8003aea <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0208 	orr.w	r2, r2, #8
 8003ae8:	619a      	str	r2, [r3, #24]
}
 8003aea:	bf00      	nop
 8003aec:	3758      	adds	r7, #88	; 0x58
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b096      	sub	sp, #88	; 0x58
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0a:	2b22      	cmp	r3, #34	; 0x22
 8003b0c:	f040 8098 	bne.w	8003c40 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b20:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b28:	4013      	ands	r3, r2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d17b      	bne.n	8003c50 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b76:	643b      	str	r3, [r7, #64]	; 0x40
 8003b78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e6      	bne.n	8003b58 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e5      	bne.n	8003b8a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d12e      	bne.n	8003c38 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f023 0310 	bic.w	r3, r3, #16
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6979      	ldr	r1, [r7, #20]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e6      	bne.n	8003be0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d103      	bne.n	8003c28 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff f911 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c36:	e00b      	b.n	8003c50 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fc ff31 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8003c3e:	e007      	b.n	8003c50 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0208 	orr.w	r2, r2, #8
 8003c4e:	619a      	str	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	3758      	adds	r7, #88	; 0x58
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <__libc_init_array>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	4d0d      	ldr	r5, [pc, #52]	; (8003c90 <__libc_init_array+0x38>)
 8003c5c:	4c0d      	ldr	r4, [pc, #52]	; (8003c94 <__libc_init_array+0x3c>)
 8003c5e:	1b64      	subs	r4, r4, r5
 8003c60:	10a4      	asrs	r4, r4, #2
 8003c62:	2600      	movs	r6, #0
 8003c64:	42a6      	cmp	r6, r4
 8003c66:	d109      	bne.n	8003c7c <__libc_init_array+0x24>
 8003c68:	4d0b      	ldr	r5, [pc, #44]	; (8003c98 <__libc_init_array+0x40>)
 8003c6a:	4c0c      	ldr	r4, [pc, #48]	; (8003c9c <__libc_init_array+0x44>)
 8003c6c:	f000 f820 	bl	8003cb0 <_init>
 8003c70:	1b64      	subs	r4, r4, r5
 8003c72:	10a4      	asrs	r4, r4, #2
 8003c74:	2600      	movs	r6, #0
 8003c76:	42a6      	cmp	r6, r4
 8003c78:	d105      	bne.n	8003c86 <__libc_init_array+0x2e>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c80:	4798      	blx	r3
 8003c82:	3601      	adds	r6, #1
 8003c84:	e7ee      	b.n	8003c64 <__libc_init_array+0xc>
 8003c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8a:	4798      	blx	r3
 8003c8c:	3601      	adds	r6, #1
 8003c8e:	e7f2      	b.n	8003c76 <__libc_init_array+0x1e>
 8003c90:	08003ce8 	.word	0x08003ce8
 8003c94:	08003ce8 	.word	0x08003ce8
 8003c98:	08003ce8 	.word	0x08003ce8
 8003c9c:	08003cec 	.word	0x08003cec

08003ca0 <memset>:
 8003ca0:	4402      	add	r2, r0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <_init>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr

08003cbc <_fini>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr
