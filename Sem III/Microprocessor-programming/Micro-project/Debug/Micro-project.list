
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b10  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d20  08003d20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d28  08003d28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000000c  08003d3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08003d3c  00020350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b498  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9a  00000000  00000000  0002b4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002d798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cab  00000000  00000000  0002df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa38  00000000  00000000  00054bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f13c4  00000000  00000000  0005f60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001509cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  00150a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003cf0 	.word	0x08003cf0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003cf0 	.word	0x08003cf0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <tx_has_data>:

/* --- TRANSMISSION --- */

// Check transmission buffer state
uint8_t tx_has_data()
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <tx_has_data+0x24>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <tx_has_data+0x28>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	429a      	cmp	r2, r3
 800054e:	d101      	bne.n	8000554 <tx_has_data+0x18>
		return 0;
 8000550:	2300      	movs	r3, #0
 8000552:	e000      	b.n	8000556 <tx_has_data+0x1a>
	else
		return 1;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	20000346 	.word	0x20000346
 8000564:	20000348 	.word	0x20000348

08000568 <increment_tx_busy>:
	if(tx_empty >= buffer_length)
		tx_empty = 0;
}

void increment_tx_busy()
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	tx_busy++;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <increment_tx_busy+0x30>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	b29b      	uxth	r3, r3
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <increment_tx_busy+0x30>)
 8000578:	801a      	strh	r2, [r3, #0]

	// Reset tx_busy back to idx 0, if value >= buffer_length
	if(tx_busy >= buffer_length)
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <increment_tx_busy+0x30>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8000584:	d302      	bcc.n	800058c <increment_tx_busy+0x24>
		tx_busy = 0;
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <increment_tx_busy+0x30>)
 8000588:	2200      	movs	r2, #0
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000348 	.word	0x20000348

0800059c <increment_rx_empty>:
	else
		return 1;
}

void increment_rx_empty()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	rx_empty++;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <increment_rx_empty+0x30>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	3301      	adds	r3, #1
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <increment_rx_empty+0x30>)
 80005ac:	801a      	strh	r2, [r3, #0]

	// Reset rx_empty back to idx 0, if value >= buffer_length
	if(rx_empty >= buffer_length)
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <increment_rx_empty+0x30>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80005b8:	d302      	bcc.n	80005c0 <increment_rx_empty+0x24>
		rx_empty = 0;
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <increment_rx_empty+0x30>)
 80005bc:	2200      	movs	r2, #0
 80005be:	801a      	strh	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200001fa 	.word	0x200001fa

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 faae 	bl	8000b36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f82f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8cb 	bl	8000778 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e2:	f000 f899 	bl	8000718 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  for(int i=0; i<100; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	e011      	b.n	8000610 <main+0x40>
  {
	  buffer_rx[rx_empty] = i;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0x60>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	b2d9      	uxtb	r1, r3
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <main+0x64>)
 80005fa:	5499      	strb	r1, [r3, r2]
	  rx_empty++;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <main+0x60>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x60>)
 8000608:	801a      	strh	r2, [r3, #0]
  for(int i=0; i<100; i++)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b63      	cmp	r3, #99	; 0x63
 8000614:	ddea      	ble.n	80005ec <main+0x1c>
  }

  HAL_UART_Receive_IT(&huart3, &buffer_rx[rx_empty], 1);
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <main+0x60>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b29b      	uxth	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <main+0x64>)
 8000620:	4413      	add	r3, r2
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <main+0x68>)
 8000628:	f002 f844 	bl	80026b4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x5c>
 800062e:	bf00      	nop
 8000630:	200001fa 	.word	0x200001fa
 8000634:	200000b0 	.word	0x200000b0
 8000638:	20000028 	.word	0x20000028

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fb48 	bl	8003ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <SystemClock_Config+0xd4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <SystemClock_Config+0xd4>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a25      	ldr	r2, [pc, #148]	; (8000714 <SystemClock_Config+0xd8>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xd8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006a8:	23d8      	movs	r3, #216	; 0xd8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fe51 	bl	8001364 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006c8:	f000 f924 	bl	8000914 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006cc:	f000 fdfa 	bl	80012c4 <HAL_PWREx_EnableOverDrive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f91d 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2107      	movs	r1, #7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f8e1 	bl	80018c0 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000704:	f000 f906 	bl	8000914 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f001 fefe 	bl	800255c <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8d5 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000028 	.word	0x20000028
 8000774:	40004800 	.word	0x40004800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b39      	ldr	r3, [pc, #228]	; (8000874 <MX_GPIO_Init+0xfc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a38      	ldr	r2, [pc, #224]	; (8000874 <MX_GPIO_Init+0xfc>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b36      	ldr	r3, [pc, #216]	; (8000874 <MX_GPIO_Init+0xfc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a32      	ldr	r2, [pc, #200]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a26      	ldr	r2, [pc, #152]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_GPIO_Init+0xfc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	4821      	ldr	r0, [pc, #132]	; (8000878 <MX_GPIO_Init+0x100>)
 80007f4:	f000 fd4c 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	481f      	ldr	r0, [pc, #124]	; (800087c <MX_GPIO_Init+0x104>)
 80007fe:	f000 fd47 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	481a      	ldr	r0, [pc, #104]	; (8000880 <MX_GPIO_Init+0x108>)
 8000818:	f000 fb8e 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800081c:	2320      	movs	r3, #32
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_GPIO_Init+0x100>)
 8000834:	f000 fb80 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x100>)
 800084c:	f000 fb74 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x104>)
 8000868:	f000 fb66 	bl	8000f38 <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40020c00 	.word	0x40020c00
 800087c:	40020400 	.word	0x40020400
 8000880:	40020800 	.word	0x40020800

08000884 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	// Check for correct huart port
	if(huart == &huart3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_UART_TxCpltCallback+0x40>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d113      	bne.n	80008bc <HAL_UART_TxCpltCallback+0x38>
	{
		// Check, if collection buffer had and data to transmit
		if(tx_has_data() == 1)
 8000894:	f7ff fe52 	bl	800053c <tx_has_data>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10e      	bne.n	80008bc <HAL_UART_TxCpltCallback+0x38>
		{
			static uint8_t tmp;
			tmp = buffer_tx[tx_busy];
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <HAL_UART_TxCpltCallback+0x44>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_UART_TxCpltCallback+0x48>)
 80008a8:	5c9a      	ldrb	r2, [r3, r2]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_UART_TxCpltCallback+0x4c>)
 80008ac:	701a      	strb	r2, [r3, #0]

			// Increment busy idx
			increment_tx_busy();
 80008ae:	f7ff fe5b 	bl	8000568 <increment_tx_busy>

			// Send character
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	4906      	ldr	r1, [pc, #24]	; (80008d0 <HAL_UART_TxCpltCallback+0x4c>)
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f001 fe9e 	bl	80025f8 <HAL_UART_Transmit_IT>
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000028 	.word	0x20000028
 80008c8:	20000348 	.word	0x20000348
 80008cc:	200001fc 	.word	0x200001fc
 80008d0:	2000034a 	.word	0x2000034a

080008d4 <HAL_UART_RxCpltCallback>:

// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	// Check for correct huart port
	if(huart == &huart3)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_UART_RxCpltCallback+0x34>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d10c      	bne.n	80008fe <HAL_UART_RxCpltCallback+0x2a>
	{
		increment_rx_empty();
 80008e4:	f7ff fe5a 	bl	800059c <increment_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &buffer_rx[rx_empty], 1);
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_UART_RxCpltCallback+0x38>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_UART_RxCpltCallback+0x3c>)
 80008f2:	4413      	add	r3, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	4619      	mov	r1, r3
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f001 fedb 	bl	80026b4 <HAL_UART_Receive_IT>
	}
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000028 	.word	0x20000028
 800090c:	200001fa 	.word	0x200001fa
 8000910:	200000b0 	.word	0x200000b0

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_MspInit+0x54>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x54>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_MspInit+0x54>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_MspInit+0x54>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000956:	2007      	movs	r0, #7
 8000958:	f000 fa1a 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2005      	movs	r0, #5
 8000962:	f000 fa20 	bl	8000da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000966:	2005      	movs	r0, #5
 8000968:	f000 fa39 	bl	8000dde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ae      	sub	sp, #184	; 0xb8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2290      	movs	r2, #144	; 0x90
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f003 f9a1 	bl	8003ce0 <memset>
  if(huart->Instance==USART3)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <HAL_UART_MspInit+0xc4>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d144      	bne.n	8000a32 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80009ae:	2310      	movs	r3, #16
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f9a8 	bl	8001d0c <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009c2:	f7ff ffa7 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_UART_MspInit+0xc8>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <HAL_UART_MspInit+0xc8>)
 80009cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_UART_MspInit+0xc8>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_UART_MspInit+0xc8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_UART_MspInit+0xc8>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_UART_MspInit+0xc8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <HAL_UART_MspInit+0xcc>)
 8000a1e:	f000 fa8b 	bl	8000f38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2027      	movs	r0, #39	; 0x27
 8000a28:	f000 f9bd 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a2c:	2027      	movs	r0, #39	; 0x27
 8000a2e:	f000 f9d6 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	37b8      	adds	r7, #184	; 0xb8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40004800 	.word	0x40004800
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f88c 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <USART3_IRQHandler+0x10>)
 8000ab2:	f001 fe43 	bl	800273c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000028 	.word	0x20000028

08000ac0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aea:	490e      	ldr	r1, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b00:	4c0b      	ldr	r4, [pc, #44]	; (8000b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b0e:	f7ff ffd7 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f003 f8c1 	bl	8003c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd5b 	bl	80005d0 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b28:	08003d30 	.word	0x08003d30
  ldr r2, =_sbss
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b30:	20000350 	.word	0x20000350

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>

08000b36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 f928 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f805 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b46:	f7ff feeb 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f943 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f90b 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	2000034c 	.word	0x2000034c

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000034c 	.word	0x2000034c

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__NVIC_SetPriorityGrouping+0x40>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x40>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00
 8000c34:	05fa0000 	.word	0x05fa0000

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff feda 	bl	8000bd8 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d008      	beq.n	8000e44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e052      	b.n	8000eea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0216 	bic.w	r2, r2, #22
 8000e52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <HAL_DMA_Abort+0x62>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0208 	bic.w	r2, r2, #8
 8000e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e94:	e013      	b.n	8000ebe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e96:	f7ff fe9f 	bl	8000bd8 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d90c      	bls.n	8000ebe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e015      	b.n	8000eea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e4      	bne.n	8000e96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed0:	223f      	movs	r2, #63	; 0x3f
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d004      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e00c      	b.n	8000f2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2205      	movs	r2, #5
 8000f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e175      	b.n	8001244 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8164 	bne.w	800123e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x56>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80be 	beq.w	800123e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b66      	ldr	r3, [pc, #408]	; (800125c <HAL_GPIO_Init+0x324>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a65      	ldr	r2, [pc, #404]	; (800125c <HAL_GPIO_Init+0x324>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010da:	4a61      	ldr	r2, [pc, #388]	; (8001260 <HAL_GPIO_Init+0x328>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_GPIO_Init+0x32c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d037      	beq.n	8001176 <HAL_GPIO_Init+0x23e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a57      	ldr	r2, [pc, #348]	; (8001268 <HAL_GPIO_Init+0x330>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d031      	beq.n	8001172 <HAL_GPIO_Init+0x23a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a56      	ldr	r2, [pc, #344]	; (800126c <HAL_GPIO_Init+0x334>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x236>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a55      	ldr	r2, [pc, #340]	; (8001270 <HAL_GPIO_Init+0x338>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x232>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a54      	ldr	r2, [pc, #336]	; (8001274 <HAL_GPIO_Init+0x33c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x22e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a53      	ldr	r2, [pc, #332]	; (8001278 <HAL_GPIO_Init+0x340>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x22a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_GPIO_Init+0x344>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x226>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a51      	ldr	r2, [pc, #324]	; (8001280 <HAL_GPIO_Init+0x348>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x222>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a50      	ldr	r2, [pc, #320]	; (8001284 <HAL_GPIO_Init+0x34c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x21e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4f      	ldr	r2, [pc, #316]	; (8001288 <HAL_GPIO_Init+0x350>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x21a>
 800114e:	2309      	movs	r3, #9
 8001150:	e012      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001152:	230a      	movs	r3, #10
 8001154:	e010      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001156:	2308      	movs	r3, #8
 8001158:	e00e      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800115a:	2307      	movs	r3, #7
 800115c:	e00c      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800115e:	2306      	movs	r3, #6
 8001160:	e00a      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001162:	2305      	movs	r3, #5
 8001164:	e008      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001166:	2304      	movs	r3, #4
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800116a:	2303      	movs	r3, #3
 800116c:	e004      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800116e:	2302      	movs	r3, #2
 8001170:	e002      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001176:	2300      	movs	r3, #0
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f002 0203 	and.w	r2, r2, #3
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	4093      	lsls	r3, r2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001188:	4935      	ldr	r1, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x328>)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_GPIO_Init+0x354>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ba:	4a34      	ldr	r2, [pc, #208]	; (800128c <HAL_GPIO_Init+0x354>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c0:	4b32      	ldr	r3, [pc, #200]	; (800128c <HAL_GPIO_Init+0x354>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <HAL_GPIO_Init+0x354>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <HAL_GPIO_Init+0x354>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <HAL_GPIO_Init+0x354>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_GPIO_Init+0x354>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_GPIO_Init+0x354>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	f67f ae86 	bls.w	8000f58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40013800 	.word	0x40013800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40021000 	.word	0x40021000
 8001278:	40021400 	.word	0x40021400
 800127c:	40021800 	.word	0x40021800
 8001280:	40021c00 	.word	0x40021c00
 8001284:	40022000 	.word	0x40022000
 8001288:	40022400 	.word	0x40022400
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_PWREx_EnableOverDrive+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a22      	ldr	r2, [pc, #136]	; (800135c <HAL_PWREx_EnableOverDrive+0x98>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_PWREx_EnableOverDrive+0x98>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f2:	f7ff fc71 	bl	8000bd8 <HAL_GetTick>
 80012f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012f8:	e009      	b.n	800130e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012fa:	f7ff fc6d 	bl	8000bd8 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001308:	d901      	bls.n	800130e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e022      	b.n	8001354 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131a:	d1ee      	bne.n	80012fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_PWREx_EnableOverDrive+0x9c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001328:	f7ff fc56 	bl	8000bd8 <HAL_GetTick>
 800132c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800132e:	e009      	b.n	8001344 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001330:	f7ff fc52 	bl	8000bd8 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800133e:	d901      	bls.n	8001344 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e007      	b.n	8001354 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001350:	d1ee      	bne.n	8001330 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e29b      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8087 	beq.w	8001496 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001388:	4b96      	ldr	r3, [pc, #600]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b04      	cmp	r3, #4
 8001392:	d00c      	beq.n	80013ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001394:	4b93      	ldr	r3, [pc, #588]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d112      	bne.n	80013c6 <HAL_RCC_OscConfig+0x62>
 80013a0:	4b90      	ldr	r3, [pc, #576]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ac:	d10b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ae:	4b8d      	ldr	r3, [pc, #564]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d06c      	beq.n	8001494 <HAL_RCC_OscConfig+0x130>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d168      	bne.n	8001494 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e275      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x7a>
 80013d0:	4b84      	ldr	r3, [pc, #528]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a83      	ldr	r2, [pc, #524]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x9c>
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7e      	ldr	r2, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7b      	ldr	r2, [pc, #492]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80013f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0xc0>
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a75      	ldr	r2, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a72      	ldr	r2, [pc, #456]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xd8>
 8001424:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6e      	ldr	r2, [pc, #440]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6b      	ldr	r2, [pc, #428]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fbc8 	bl	8000bd8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fbc4 	bl	8000bd8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e229      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xe8>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fbb4 	bl	8000bd8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fbb0 	bl	8000bd8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e215      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x110>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d069      	beq.n	8001576 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a2:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b4d      	ldr	r3, [pc, #308]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x190>
 80014ba:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x17a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1e9      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	493d      	ldr	r1, [pc, #244]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	e040      	b.n	8001576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d023      	beq.n	8001544 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fb66 	bl	8000bd8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fb62 	bl	8000bd8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1c7      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4929      	ldr	r1, [pc, #164]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
 8001542:	e018      	b.n	8001576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fb42 	bl	8000bd8 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fb3e 	bl	8000bd8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1a3      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d038      	beq.n	80015f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d019      	beq.n	80015be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 800158c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff fb1f 	bl	8000bd8 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fb1b 	bl	8000bd8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e180      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80015b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x23a>
 80015bc:	e01a      	b.n	80015f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb05 	bl	8000bd8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb01 	bl	8000bd8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d903      	bls.n	80015e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e166      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
 80015e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a4 	beq.w	800174a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b89      	ldr	r3, [pc, #548]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a88      	ldr	r2, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b86      	ldr	r3, [pc, #536]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HAL_RCC_OscConfig+0x4d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d118      	bne.n	8001668 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001636:	4b80      	ldr	r3, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x4d4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7f      	ldr	r2, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x4d4>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001642:	f7ff fac9 	bl	8000bd8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164a:	f7ff fac5 	bl	8000bd8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e12a      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165c:	4b76      	ldr	r3, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x4d4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x31a>
 8001670:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a6f      	ldr	r2, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	e02d      	b.n	80016da <HAL_RCC_OscConfig+0x376>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x33c>
 8001686:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	4a6a      	ldr	r2, [pc, #424]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6713      	str	r3, [r2, #112]	; 0x70
 8001692:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	4a67      	ldr	r2, [pc, #412]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	6713      	str	r3, [r2, #112]	; 0x70
 800169e:	e01c      	b.n	80016da <HAL_RCC_OscConfig+0x376>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x35e>
 80016a8:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a61      	ldr	r2, [pc, #388]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x376>
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a5b      	ldr	r2, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff fa79 	bl	8000bd8 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff fa75 	bl	8000bd8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0d8      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ee      	beq.n	80016ea <HAL_RCC_OscConfig+0x386>
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fa63 	bl	8000bd8 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff fa5f 	bl	8000bd8 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	; 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0c2      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172c:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d105      	bne.n	800174a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a3c      	ldr	r2, [pc, #240]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80ae 	beq.w	80018b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001754:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d06d      	beq.n	800183c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d14b      	bne.n	8001800 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a31      	ldr	r2, [pc, #196]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fa30 	bl	8000bd8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fa2c 	bl	8000bd8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e091      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	019b      	lsls	r3, r3, #6
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	071b      	lsls	r3, r3, #28
 80017c6:	491b      	ldr	r1, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff f9fe 	bl	8000bd8 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff f9fa 	bl	8000bd8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e05f      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x47c>
 80017fe:	e057      	b.n	80018b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff f9e4 	bl	8000bd8 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f9e0 	bl	8000bd8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e045      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x4b0>
 8001832:	e03d      	b.n	80018b0 <HAL_RCC_OscConfig+0x54c>
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_RCC_OscConfig+0x558>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d030      	beq.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d129      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d122      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800186c:	4013      	ands	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001872:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001874:	4293      	cmp	r3, r2
 8001876:	d119      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d10f      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0d0      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d910      	bls.n	8001908 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 020f 	bic.w	r2, r3, #15
 80018ee:	4965      	ldr	r1, [pc, #404]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800192a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 800193e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001942:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d040      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e073      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4936      	ldr	r1, [pc, #216]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b4:	f7ff f910 	bl	8000bd8 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f90c 	bl	8000bd8 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e053      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d210      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 020f 	bic.w	r2, r3, #15
 80019fa:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1cc>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1d0>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1d4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f86c 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08003d08 	.word	0x08003d08
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9c:	b094      	sub	sp, #80	; 0x50
 8001a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab0:	4b79      	ldr	r3, [pc, #484]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d00d      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	f200 80e1 	bhi.w	8001c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aca:	e0db      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad0:	e0db      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad2:	4b73      	ldr	r3, [pc, #460]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad6:	e0d8      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ae2:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d063      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	2200      	movs	r2, #0
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001af8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
 8001b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b0a:	4622      	mov	r2, r4
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	0159      	lsls	r1, r3, #5
 8001b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b1c:	0150      	lsls	r0, r2, #5
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4621      	mov	r1, r4
 8001b24:	1a51      	subs	r1, r2, r1
 8001b26:	6139      	str	r1, [r7, #16]
 8001b28:	4629      	mov	r1, r5
 8001b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b3c:	4659      	mov	r1, fp
 8001b3e:	018b      	lsls	r3, r1, #6
 8001b40:	4651      	mov	r1, sl
 8001b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b46:	4651      	mov	r1, sl
 8001b48:	018a      	lsls	r2, r1, #6
 8001b4a:	4651      	mov	r1, sl
 8001b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b50:	4659      	mov	r1, fp
 8001b52:	eb63 0901 	sbc.w	r9, r3, r1
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	4623      	mov	r3, r4
 8001b70:	eb18 0303 	adds.w	r3, r8, r3
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	462b      	mov	r3, r5
 8001b78:	eb49 0303 	adc.w	r3, r9, r3
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	024b      	lsls	r3, r1, #9
 8001b8e:	4621      	mov	r1, r4
 8001b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b94:	4621      	mov	r1, r4
 8001b96:	024a      	lsls	r2, r1, #9
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ba8:	f7fe fb46 	bl	8000238 <__aeabi_uldivmod>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb4:	e058      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0159      	lsls	r1, r3, #5
 8001bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be2:	0150      	lsls	r0, r2, #5
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4641      	mov	r1, r8
 8001bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bee:	4649      	mov	r1, r9
 8001bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c08:	ebb2 040a 	subs.w	r4, r2, sl
 8001c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	00eb      	lsls	r3, r5, #3
 8001c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c1e:	00e2      	lsls	r2, r4, #3
 8001c20:	4614      	mov	r4, r2
 8001c22:	461d      	mov	r5, r3
 8001c24:	4643      	mov	r3, r8
 8001c26:	18e3      	adds	r3, r4, r3
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	eb45 0303 	adc.w	r3, r5, r3
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c3e:	4629      	mov	r1, r5
 8001c40:	028b      	lsls	r3, r1, #10
 8001c42:	4621      	mov	r1, r4
 8001c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c48:	4621      	mov	r1, r4
 8001c4a:	028a      	lsls	r2, r1, #10
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c52:	2200      	movs	r2, #0
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	61fa      	str	r2, [r7, #28]
 8001c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c5c:	f7fe faec 	bl	8000238 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	3301      	adds	r3, #1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3750      	adds	r7, #80	; 0x50
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0a9b      	lsrs	r3, r3, #10
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08003d18 	.word	0x08003d18

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce8:	f7ff ffdc 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08003d18 	.word	0x08003d18

08001d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a68      	ldr	r2, [pc, #416]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d3e:	6093      	str	r3, [r2, #8]
 8001d40:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	4964      	ldr	r1, [pc, #400]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d017      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	4959      	ldr	r1, [pc, #356]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d84:	d101      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d017      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001da2:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	494a      	ldr	r1, [pc, #296]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 808b 	beq.w	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a39      	ldr	r2, [pc, #228]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfc:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e14:	f7fe fee0 	bl	8000bd8 <HAL_GetTick>
 8001e18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1c:	f7fe fedc 	bl	8000bd8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e38f      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d035      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d02e      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e7a:	4a18      	ldr	r2, [pc, #96]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d114      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fea4 	bl	8000bd8 <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7fe fea0 	bl	8000bd8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e351      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0ee      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ec2:	d111      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	4901      	ldr	r1, [pc, #4]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	0ffffcff 	.word	0x0ffffcff
 8001ee8:	4bac      	ldr	r3, [pc, #688]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4aab      	ldr	r2, [pc, #684]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ef2:	6093      	str	r3, [r2, #8]
 8001ef4:	4ba9      	ldr	r3, [pc, #676]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	49a6      	ldr	r1, [pc, #664]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f12:	4ba2      	ldr	r3, [pc, #648]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f18:	4aa0      	ldr	r2, [pc, #640]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f22:	4b9e      	ldr	r3, [pc, #632]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	499b      	ldr	r1, [pc, #620]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f40:	4b96      	ldr	r3, [pc, #600]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4e:	4993      	ldr	r1, [pc, #588]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f62:	4b8e      	ldr	r3, [pc, #568]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f70:	498a      	ldr	r1, [pc, #552]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f84:	4b85      	ldr	r3, [pc, #532]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f92:	4982      	ldr	r1, [pc, #520]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fa6:	4b7d      	ldr	r3, [pc, #500]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4979      	ldr	r1, [pc, #484]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc8:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4971      	ldr	r1, [pc, #452]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fea:	4b6c      	ldr	r3, [pc, #432]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f023 020c 	bic.w	r2, r3, #12
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	4968      	ldr	r1, [pc, #416]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800200c:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4960      	ldr	r1, [pc, #384]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800202e:	4b5b      	ldr	r3, [pc, #364]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203c:	4957      	ldr	r1, [pc, #348]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002050:	4b52      	ldr	r3, [pc, #328]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	494f      	ldr	r1, [pc, #316]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002072:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4946      	ldr	r1, [pc, #280]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002094:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	493e      	ldr	r1, [pc, #248]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	4935      	ldr	r1, [pc, #212]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020e6:	492d      	ldr	r1, [pc, #180]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d011      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020fa:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002108:	4924      	ldr	r1, [pc, #144]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002118:	d101      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002148:	4914      	ldr	r1, [pc, #80]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216c:	490b      	ldr	r1, [pc, #44]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00f      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002190:	4902      	ldr	r1, [pc, #8]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002198:	e002      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021ac:	4b8a      	ldr	r3, [pc, #552]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	4986      	ldr	r1, [pc, #536]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021d0:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e0:	497d      	ldr	r1, [pc, #500]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d006      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80d6 	beq.w	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021fc:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a75      	ldr	r2, [pc, #468]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002208:	f7fe fce6 	bl	8000bd8 <HAL_GetTick>
 800220c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002210:	f7fe fce2 	bl	8000bd8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e195      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002222:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d021      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11d      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002242:	4b65      	ldr	r3, [pc, #404]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002250:	4b61      	ldr	r3, [pc, #388]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002256:	0e1b      	lsrs	r3, r3, #24
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	019a      	lsls	r2, r3, #6
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	071b      	lsls	r3, r3, #28
 8002276:	4958      	ldr	r1, [pc, #352]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800229c:	2b00      	cmp	r3, #0
 800229e:	d02e      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a8:	d129      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022aa:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022b8:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022be:	0f1b      	lsrs	r3, r3, #28
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	019a      	lsls	r2, r3, #6
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	061b      	lsls	r3, r3, #24
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	493e      	ldr	r1, [pc, #248]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022e6:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ec:	f023 021f 	bic.w	r2, r3, #31
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	3b01      	subs	r3, #1
 80022f6:	4938      	ldr	r1, [pc, #224]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01d      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	0e1b      	lsrs	r3, r3, #24
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231e:	0f1b      	lsrs	r3, r3, #28
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	071b      	lsls	r3, r3, #28
 800233e:	4926      	ldr	r1, [pc, #152]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d011      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	019a      	lsls	r2, r3, #6
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	071b      	lsls	r3, r3, #28
 800236e:	491a      	ldr	r1, [pc, #104]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002382:	f7fe fc29 	bl	8000bd8 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800238a:	f7fe fc25 	bl	8000bd8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0d8      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	f040 80ce 	bne.w	800254c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023bc:	f7fe fc0c 	bl	8000bd8 <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023c2:	e00b      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023c4:	f7fe fc08 	bl	8000bd8 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d904      	bls.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0bb      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023dc:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023e8:	d0ec      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02e      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d12a      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002412:	4b51      	ldr	r3, [pc, #324]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002420:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	0f1b      	lsrs	r3, r3, #28
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	019a      	lsls	r2, r3, #6
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	061b      	lsls	r3, r3, #24
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	071b      	lsls	r3, r3, #28
 8002446:	4944      	ldr	r1, [pc, #272]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800244e:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002454:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	493d      	ldr	r1, [pc, #244]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d022      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247c:	d11d      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	0e1b      	lsrs	r3, r3, #24
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800248c:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	0f1b      	lsrs	r3, r3, #28
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	019a      	lsls	r2, r3, #6
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	071b      	lsls	r3, r3, #28
 80024b2:	4929      	ldr	r1, [pc, #164]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d028      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	0e1b      	lsrs	r3, r3, #24
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	019a      	lsls	r2, r3, #6
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	431a      	orrs	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	061b      	lsls	r3, r3, #24
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	071b      	lsls	r3, r3, #28
 80024fa:	4917      	ldr	r1, [pc, #92]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	4911      	ldr	r1, [pc, #68]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe fb58 	bl	8000bd8 <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800252c:	f7fe fb54 	bl	8000bd8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e007      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254a:	d1ef      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e040      	b.n	80025f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe f9fa 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	; 0x24
 8002588:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0201 	bic.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fbd6 	bl	8002d4c <UART_SetConfig>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e022      	b.n	80025f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fe2e 	bl	8003214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 feb5 	bl	8003358 <UART_CheckIdleState>
 80025ee:	4603      	mov	r3, r0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b08b      	sub	sp, #44	; 0x2c
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800260a:	2b20      	cmp	r3, #32
 800260c:	d147      	bne.n	800269e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_UART_Transmit_IT+0x22>
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e040      	b.n	80026a0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2221      	movs	r2, #33	; 0x21
 8002646:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002650:	d107      	bne.n	8002662 <HAL_UART_Transmit_IT+0x6a>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <HAL_UART_Transmit_IT+0xb4>)
 800265e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002660:	e002      	b.n	8002668 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_UART_Transmit_IT+0xb8>)
 8002666:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	613b      	str	r3, [r7, #16]
   return(result);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	69f9      	ldr	r1, [r7, #28]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	e841 2300 	strex	r3, r2, [r1]
 8002692:	61bb      	str	r3, [r7, #24]
   return(result);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1e6      	bne.n	8002668 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	372c      	adds	r7, #44	; 0x2c
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	080038b7 	.word	0x080038b7
 80026b0:	08003801 	.word	0x08003801

080026b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	4613      	mov	r3, r2
 80026c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d132      	bne.n	8002732 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_UART_Receive_IT+0x24>
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e02b      	b.n	8002734 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d018      	beq.n	8002722 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	613b      	str	r3, [r7, #16]
   return(result);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	69f9      	ldr	r1, [r7, #28]
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	e841 2300 	strex	r3, r2, [r1]
 800271a:	61bb      	str	r3, [r7, #24]
   return(result);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1e6      	bne.n	80026f0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	461a      	mov	r2, r3
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 ff29 	bl	8003580 <UART_Start_Receive_IT>
 800272e:	4603      	mov	r3, r0
 8002730:	e000      	b.n	8002734 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0ba      	sub	sp, #232	; 0xe8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002762:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002766:	f640 030f 	movw	r3, #2063	; 0x80f
 800276a:	4013      	ands	r3, r2
 800276c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d115      	bne.n	80027a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d009      	beq.n	80027a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 82ac 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
      }
      return;
 80027a2:	e2a6      	b.n	8002cf2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8117 	beq.w	80029dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80027ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80027be:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_UART_IRQHandler+0x298>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 810a 	beq.w	80029dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d011      	beq.n	80027f8 <HAL_UART_IRQHandler+0xbc>
 80027d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2201      	movs	r2, #1
 80027e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d011      	beq.n	8002828 <HAL_UART_IRQHandler+0xec>
 8002804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00b      	beq.n	8002828 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2202      	movs	r2, #2
 8002816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d011      	beq.n	8002858 <HAL_UART_IRQHandler+0x11c>
 8002834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00b      	beq.n	8002858 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2204      	movs	r2, #4
 8002846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d017      	beq.n	8002894 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002874:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2208      	movs	r2, #8
 8002882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288a:	f043 0208 	orr.w	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <HAL_UART_IRQHandler+0x18a>
 80028a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8212 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80028d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00d      	beq.n	80028fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d005      	beq.n	800291e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002916:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04f      	beq.n	80029be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fef4 	bl	800370c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d141      	bne.n	80029b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3308      	adds	r3, #8
 8002938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3308      	adds	r3, #8
 800295a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800295e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800296a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1d9      	bne.n	8002932 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	2b00      	cmp	r3, #0
 8002984:	d013      	beq.n	80029ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_UART_IRQHandler+0x29c>)
 800298c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe faad 	bl	8000ef2 <HAL_DMA_Abort_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d017      	beq.n	80029ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029a8:	4610      	mov	r0, r2
 80029aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	e00f      	b.n	80029ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f9ac 	bl	8002d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	e00b      	b.n	80029ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f9a8 	bl	8002d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	e007      	b.n	80029ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9a4 	bl	8002d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80029cc:	e193      	b.n	8002cf6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ce:	bf00      	nop
    return;
 80029d0:	e191      	b.n	8002cf6 <HAL_UART_IRQHandler+0x5ba>
 80029d2:	bf00      	nop
 80029d4:	04000120 	.word	0x04000120
 80029d8:	080037d5 	.word	0x080037d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	f040 814c 	bne.w	8002c7e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8145 	beq.w	8002c7e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 813e 	beq.w	8002c7e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2210      	movs	r2, #16
 8002a08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	f040 80b6 	bne.w	8002b86 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8165 	beq.w	8002cfa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f080 815d 	bcs.w	8002cfa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a54:	f000 8086 	beq.w	8002b64 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1da      	bne.n	8002a58 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002aca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002acc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e1      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3308      	adds	r3, #8
 8002afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e3      	bne.n	8002ade <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	f023 0310 	bic.w	r3, r3, #16
 8002b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b46:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1e4      	bne.n	8002b24 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe f957 	bl	8000e12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8ce 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b84:	e0b9      	b.n	8002cfa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80ab 	beq.w	8002cfe <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a6 	beq.w	8002cfe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e4      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3308      	adds	r3, #8
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3308      	adds	r3, #8
 8002c08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c0c:	633a      	str	r2, [r7, #48]	; 0x30
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e3      	bne.n	8002be8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f023 0310 	bic.w	r3, r3, #16
 8002c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	617b      	str	r3, [r7, #20]
   return(result);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e4      	bne.n	8002c34 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c74:	4619      	mov	r1, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f852 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c7c:	e03f      	b.n	8002cfe <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00e      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x56c>
 8002c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f849 	bl	8002d38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ca6:	e02d      	b.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01c      	beq.n	8002d02 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
    }
    return;
 8002cd0:	e017      	b.n	8002d02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d012      	beq.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
 8002cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fe43 	bl	8003976 <UART_EndTransmit_IT>
    return;
 8002cf0:	e008      	b.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002cf2:	bf00      	nop
 8002cf4:	e006      	b.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002cf6:	bf00      	nop
 8002cf8:	e004      	b.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002cfa:	bf00      	nop
 8002cfc:	e002      	b.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002cfe:	bf00      	nop
 8002d00:	e000      	b.n	8002d04 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002d02:	bf00      	nop
  }

}
 8002d04:	37e8      	adds	r7, #232	; 0xe8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop

08002d0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4ba6      	ldr	r3, [pc, #664]	; (8003010 <UART_SetConfig+0x2c4>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a94      	ldr	r2, [pc, #592]	; (8003014 <UART_SetConfig+0x2c8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d120      	bne.n	8002e0a <UART_SetConfig+0xbe>
 8002dc8:	4b93      	ldr	r3, [pc, #588]	; (8003018 <UART_SetConfig+0x2cc>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d816      	bhi.n	8002e04 <UART_SetConfig+0xb8>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <UART_SetConfig+0x90>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002df9 	.word	0x08002df9
 8002de4:	08002df3 	.word	0x08002df3
 8002de8:	08002dff 	.word	0x08002dff
 8002dec:	2301      	movs	r3, #1
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e150      	b.n	8003094 <UART_SetConfig+0x348>
 8002df2:	2302      	movs	r3, #2
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e14d      	b.n	8003094 <UART_SetConfig+0x348>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e14a      	b.n	8003094 <UART_SetConfig+0x348>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e147      	b.n	8003094 <UART_SetConfig+0x348>
 8002e04:	2310      	movs	r3, #16
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e144      	b.n	8003094 <UART_SetConfig+0x348>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a83      	ldr	r2, [pc, #524]	; (800301c <UART_SetConfig+0x2d0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d132      	bne.n	8002e7a <UART_SetConfig+0x12e>
 8002e14:	4b80      	ldr	r3, [pc, #512]	; (8003018 <UART_SetConfig+0x2cc>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d828      	bhi.n	8002e74 <UART_SetConfig+0x128>
 8002e22:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0xdc>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002e5d 	.word	0x08002e5d
 8002e2c:	08002e75 	.word	0x08002e75
 8002e30:	08002e75 	.word	0x08002e75
 8002e34:	08002e75 	.word	0x08002e75
 8002e38:	08002e69 	.word	0x08002e69
 8002e3c:	08002e75 	.word	0x08002e75
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002e75 	.word	0x08002e75
 8002e48:	08002e63 	.word	0x08002e63
 8002e4c:	08002e75 	.word	0x08002e75
 8002e50:	08002e75 	.word	0x08002e75
 8002e54:	08002e75 	.word	0x08002e75
 8002e58:	08002e6f 	.word	0x08002e6f
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e118      	b.n	8003094 <UART_SetConfig+0x348>
 8002e62:	2302      	movs	r3, #2
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	e115      	b.n	8003094 <UART_SetConfig+0x348>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	e112      	b.n	8003094 <UART_SetConfig+0x348>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	e10f      	b.n	8003094 <UART_SetConfig+0x348>
 8002e74:	2310      	movs	r3, #16
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	e10c      	b.n	8003094 <UART_SetConfig+0x348>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a68      	ldr	r2, [pc, #416]	; (8003020 <UART_SetConfig+0x2d4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d120      	bne.n	8002ec6 <UART_SetConfig+0x17a>
 8002e84:	4b64      	ldr	r3, [pc, #400]	; (8003018 <UART_SetConfig+0x2cc>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e8e:	2b30      	cmp	r3, #48	; 0x30
 8002e90:	d013      	beq.n	8002eba <UART_SetConfig+0x16e>
 8002e92:	2b30      	cmp	r3, #48	; 0x30
 8002e94:	d814      	bhi.n	8002ec0 <UART_SetConfig+0x174>
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d009      	beq.n	8002eae <UART_SetConfig+0x162>
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d810      	bhi.n	8002ec0 <UART_SetConfig+0x174>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <UART_SetConfig+0x15c>
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d006      	beq.n	8002eb4 <UART_SetConfig+0x168>
 8002ea6:	e00b      	b.n	8002ec0 <UART_SetConfig+0x174>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e0f2      	b.n	8003094 <UART_SetConfig+0x348>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e0ef      	b.n	8003094 <UART_SetConfig+0x348>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e0ec      	b.n	8003094 <UART_SetConfig+0x348>
 8002eba:	2308      	movs	r3, #8
 8002ebc:	77fb      	strb	r3, [r7, #31]
 8002ebe:	e0e9      	b.n	8003094 <UART_SetConfig+0x348>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e0e6      	b.n	8003094 <UART_SetConfig+0x348>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a56      	ldr	r2, [pc, #344]	; (8003024 <UART_SetConfig+0x2d8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d120      	bne.n	8002f12 <UART_SetConfig+0x1c6>
 8002ed0:	4b51      	ldr	r3, [pc, #324]	; (8003018 <UART_SetConfig+0x2cc>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002eda:	2bc0      	cmp	r3, #192	; 0xc0
 8002edc:	d013      	beq.n	8002f06 <UART_SetConfig+0x1ba>
 8002ede:	2bc0      	cmp	r3, #192	; 0xc0
 8002ee0:	d814      	bhi.n	8002f0c <UART_SetConfig+0x1c0>
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d009      	beq.n	8002efa <UART_SetConfig+0x1ae>
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d810      	bhi.n	8002f0c <UART_SetConfig+0x1c0>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <UART_SetConfig+0x1a8>
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d006      	beq.n	8002f00 <UART_SetConfig+0x1b4>
 8002ef2:	e00b      	b.n	8002f0c <UART_SetConfig+0x1c0>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e0cc      	b.n	8003094 <UART_SetConfig+0x348>
 8002efa:	2302      	movs	r3, #2
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e0c9      	b.n	8003094 <UART_SetConfig+0x348>
 8002f00:	2304      	movs	r3, #4
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e0c6      	b.n	8003094 <UART_SetConfig+0x348>
 8002f06:	2308      	movs	r3, #8
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e0c3      	b.n	8003094 <UART_SetConfig+0x348>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e0c0      	b.n	8003094 <UART_SetConfig+0x348>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a44      	ldr	r2, [pc, #272]	; (8003028 <UART_SetConfig+0x2dc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d125      	bne.n	8002f68 <UART_SetConfig+0x21c>
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <UART_SetConfig+0x2cc>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2a:	d017      	beq.n	8002f5c <UART_SetConfig+0x210>
 8002f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f30:	d817      	bhi.n	8002f62 <UART_SetConfig+0x216>
 8002f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f36:	d00b      	beq.n	8002f50 <UART_SetConfig+0x204>
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3c:	d811      	bhi.n	8002f62 <UART_SetConfig+0x216>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <UART_SetConfig+0x1fe>
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f46:	d006      	beq.n	8002f56 <UART_SetConfig+0x20a>
 8002f48:	e00b      	b.n	8002f62 <UART_SetConfig+0x216>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e0a1      	b.n	8003094 <UART_SetConfig+0x348>
 8002f50:	2302      	movs	r3, #2
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e09e      	b.n	8003094 <UART_SetConfig+0x348>
 8002f56:	2304      	movs	r3, #4
 8002f58:	77fb      	strb	r3, [r7, #31]
 8002f5a:	e09b      	b.n	8003094 <UART_SetConfig+0x348>
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	77fb      	strb	r3, [r7, #31]
 8002f60:	e098      	b.n	8003094 <UART_SetConfig+0x348>
 8002f62:	2310      	movs	r3, #16
 8002f64:	77fb      	strb	r3, [r7, #31]
 8002f66:	e095      	b.n	8003094 <UART_SetConfig+0x348>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2f      	ldr	r2, [pc, #188]	; (800302c <UART_SetConfig+0x2e0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d125      	bne.n	8002fbe <UART_SetConfig+0x272>
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <UART_SetConfig+0x2cc>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f80:	d017      	beq.n	8002fb2 <UART_SetConfig+0x266>
 8002f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f86:	d817      	bhi.n	8002fb8 <UART_SetConfig+0x26c>
 8002f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8c:	d00b      	beq.n	8002fa6 <UART_SetConfig+0x25a>
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f92:	d811      	bhi.n	8002fb8 <UART_SetConfig+0x26c>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <UART_SetConfig+0x254>
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9c:	d006      	beq.n	8002fac <UART_SetConfig+0x260>
 8002f9e:	e00b      	b.n	8002fb8 <UART_SetConfig+0x26c>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e076      	b.n	8003094 <UART_SetConfig+0x348>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e073      	b.n	8003094 <UART_SetConfig+0x348>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e070      	b.n	8003094 <UART_SetConfig+0x348>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e06d      	b.n	8003094 <UART_SetConfig+0x348>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e06a      	b.n	8003094 <UART_SetConfig+0x348>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <UART_SetConfig+0x2e4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d138      	bne.n	800303a <UART_SetConfig+0x2ee>
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <UART_SetConfig+0x2cc>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fd6:	d017      	beq.n	8003008 <UART_SetConfig+0x2bc>
 8002fd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fdc:	d82a      	bhi.n	8003034 <UART_SetConfig+0x2e8>
 8002fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe2:	d00b      	beq.n	8002ffc <UART_SetConfig+0x2b0>
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe8:	d824      	bhi.n	8003034 <UART_SetConfig+0x2e8>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <UART_SetConfig+0x2aa>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	d006      	beq.n	8003002 <UART_SetConfig+0x2b6>
 8002ff4:	e01e      	b.n	8003034 <UART_SetConfig+0x2e8>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e04b      	b.n	8003094 <UART_SetConfig+0x348>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e048      	b.n	8003094 <UART_SetConfig+0x348>
 8003002:	2304      	movs	r3, #4
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e045      	b.n	8003094 <UART_SetConfig+0x348>
 8003008:	2308      	movs	r3, #8
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e042      	b.n	8003094 <UART_SetConfig+0x348>
 800300e:	bf00      	nop
 8003010:	efff69f3 	.word	0xefff69f3
 8003014:	40011000 	.word	0x40011000
 8003018:	40023800 	.word	0x40023800
 800301c:	40004400 	.word	0x40004400
 8003020:	40004800 	.word	0x40004800
 8003024:	40004c00 	.word	0x40004c00
 8003028:	40005000 	.word	0x40005000
 800302c:	40011400 	.word	0x40011400
 8003030:	40007800 	.word	0x40007800
 8003034:	2310      	movs	r3, #16
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e02c      	b.n	8003094 <UART_SetConfig+0x348>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a72      	ldr	r2, [pc, #456]	; (8003208 <UART_SetConfig+0x4bc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d125      	bne.n	8003090 <UART_SetConfig+0x344>
 8003044:	4b71      	ldr	r3, [pc, #452]	; (800320c <UART_SetConfig+0x4c0>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800304e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003052:	d017      	beq.n	8003084 <UART_SetConfig+0x338>
 8003054:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003058:	d817      	bhi.n	800308a <UART_SetConfig+0x33e>
 800305a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305e:	d00b      	beq.n	8003078 <UART_SetConfig+0x32c>
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003064:	d811      	bhi.n	800308a <UART_SetConfig+0x33e>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <UART_SetConfig+0x326>
 800306a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800306e:	d006      	beq.n	800307e <UART_SetConfig+0x332>
 8003070:	e00b      	b.n	800308a <UART_SetConfig+0x33e>
 8003072:	2300      	movs	r3, #0
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e00d      	b.n	8003094 <UART_SetConfig+0x348>
 8003078:	2302      	movs	r3, #2
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e00a      	b.n	8003094 <UART_SetConfig+0x348>
 800307e:	2304      	movs	r3, #4
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e007      	b.n	8003094 <UART_SetConfig+0x348>
 8003084:	2308      	movs	r3, #8
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e004      	b.n	8003094 <UART_SetConfig+0x348>
 800308a:	2310      	movs	r3, #16
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e001      	b.n	8003094 <UART_SetConfig+0x348>
 8003090:	2310      	movs	r3, #16
 8003092:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	d15b      	bne.n	8003156 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800309e:	7ffb      	ldrb	r3, [r7, #31]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d828      	bhi.n	80030f6 <UART_SetConfig+0x3aa>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0x360>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030d1 	.word	0x080030d1
 80030b0:	080030d9 	.word	0x080030d9
 80030b4:	080030e1 	.word	0x080030e1
 80030b8:	080030f7 	.word	0x080030f7
 80030bc:	080030e7 	.word	0x080030e7
 80030c0:	080030f7 	.word	0x080030f7
 80030c4:	080030f7 	.word	0x080030f7
 80030c8:	080030f7 	.word	0x080030f7
 80030cc:	080030ef 	.word	0x080030ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d0:	f7fe fdf4 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 80030d4:	61b8      	str	r0, [r7, #24]
        break;
 80030d6:	e013      	b.n	8003100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d8:	f7fe fe04 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 80030dc:	61b8      	str	r0, [r7, #24]
        break;
 80030de:	e00f      	b.n	8003100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e0:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <UART_SetConfig+0x4c4>)
 80030e2:	61bb      	str	r3, [r7, #24]
        break;
 80030e4:	e00c      	b.n	8003100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e6:	f7fe fcd7 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 80030ea:	61b8      	str	r0, [r7, #24]
        break;
 80030ec:	e008      	b.n	8003100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f2:	61bb      	str	r3, [r7, #24]
        break;
 80030f4:	e004      	b.n	8003100 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	77bb      	strb	r3, [r7, #30]
        break;
 80030fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d074      	beq.n	80031f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	005a      	lsls	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	d916      	bls.n	8003150 <UART_SetConfig+0x404>
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d212      	bcs.n	8003150 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f023 030f 	bic.w	r3, r3, #15
 8003132:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	b29b      	uxth	r3, r3
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	b29a      	uxth	r2, r3
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	4313      	orrs	r3, r2
 8003144:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	89fa      	ldrh	r2, [r7, #14]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	e04f      	b.n	80031f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	77bb      	strb	r3, [r7, #30]
 8003154:	e04c      	b.n	80031f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d828      	bhi.n	80031ae <UART_SetConfig+0x462>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x418>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003189 	.word	0x08003189
 8003168:	08003191 	.word	0x08003191
 800316c:	08003199 	.word	0x08003199
 8003170:	080031af 	.word	0x080031af
 8003174:	0800319f 	.word	0x0800319f
 8003178:	080031af 	.word	0x080031af
 800317c:	080031af 	.word	0x080031af
 8003180:	080031af 	.word	0x080031af
 8003184:	080031a7 	.word	0x080031a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7fe fd98 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 800318c:	61b8      	str	r0, [r7, #24]
        break;
 800318e:	e013      	b.n	80031b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7fe fda8 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8003194:	61b8      	str	r0, [r7, #24]
        break;
 8003196:	e00f      	b.n	80031b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <UART_SetConfig+0x4c4>)
 800319a:	61bb      	str	r3, [r7, #24]
        break;
 800319c:	e00c      	b.n	80031b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7fe fc7b 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 80031a2:	61b8      	str	r0, [r7, #24]
        break;
 80031a4:	e008      	b.n	80031b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031aa:	61bb      	str	r3, [r7, #24]
        break;
 80031ac:	e004      	b.n	80031b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77bb      	strb	r3, [r7, #30]
        break;
 80031b6:	bf00      	nop
    }

    if (pclk != 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d018      	beq.n	80031f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	085a      	lsrs	r2, r3, #1
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	441a      	add	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d909      	bls.n	80031ec <UART_SetConfig+0x4a0>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d205      	bcs.n	80031ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e001      	b.n	80031f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40007c00 	.word	0x40007c00
 800320c:	40023800 	.word	0x40023800
 8003210:	00f42400 	.word	0x00f42400

08003214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01a      	beq.n	800332a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003312:	d10a      	bne.n	800332a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003368:	f7fd fc36 	bl	8000bd8 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d10e      	bne.n	800339a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f831 	bl	80033f2 <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e027      	b.n	80033ea <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d10e      	bne.n	80033c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f81b 	bl	80033f2 <UART_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e011      	b.n	80033ea <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b09c      	sub	sp, #112	; 0x70
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	4613      	mov	r3, r2
 8003400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003402:	e0a7      	b.n	8003554 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	f000 80a3 	beq.w	8003554 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fd fbe3 	bl	8000bd8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <UART_WaitOnFlagUntilTimeout+0x32>
 800341e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003420:	2b00      	cmp	r3, #0
 8003422:	d13f      	bne.n	80034a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003438:	667b      	str	r3, [r7, #100]	; 0x64
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003444:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e6      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3308      	adds	r3, #8
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	663b      	str	r3, [r7, #96]	; 0x60
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3308      	adds	r3, #8
 8003474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003476:	64ba      	str	r2, [r7, #72]	; 0x48
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800347c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e5      	bne.n	8003456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e068      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d050      	beq.n	8003554 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c0:	d148      	bne.n	8003554 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
 80034ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e6      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	613b      	str	r3, [r7, #16]
   return(result);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	66bb      	str	r3, [r7, #104]	; 0x68
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3308      	adds	r3, #8
 800351c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800351e:	623a      	str	r2, [r7, #32]
 8003520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	69f9      	ldr	r1, [r7, #28]
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	61bb      	str	r3, [r7, #24]
   return(result);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e5      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e010      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	429a      	cmp	r2, r3
 8003570:	f43f af48 	beq.w	8003404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3770      	adds	r7, #112	; 0x70
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003580:	b480      	push	{r7}
 8003582:	b097      	sub	sp, #92	; 0x5c
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d10e      	bne.n	80035d2 <UART_Start_Receive_IT+0x52>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <UART_Start_Receive_IT+0x48>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c6:	e02d      	b.n	8003624 <UART_Start_Receive_IT+0xa4>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	22ff      	movs	r2, #255	; 0xff
 80035cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d0:	e028      	b.n	8003624 <UART_Start_Receive_IT+0xa4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <UART_Start_Receive_IT+0x76>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <UART_Start_Receive_IT+0x6c>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	22ff      	movs	r2, #255	; 0xff
 80035e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ea:	e01b      	b.n	8003624 <UART_Start_Receive_IT+0xa4>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	227f      	movs	r2, #127	; 0x7f
 80035f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035f4:	e016      	b.n	8003624 <UART_Start_Receive_IT+0xa4>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035fe:	d10d      	bne.n	800361c <UART_Start_Receive_IT+0x9c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <UART_Start_Receive_IT+0x92>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	227f      	movs	r2, #127	; 0x7f
 800360c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003610:	e008      	b.n	8003624 <UART_Start_Receive_IT+0xa4>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	223f      	movs	r2, #63	; 0x3f
 8003616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800361a:	e003      	b.n	8003624 <UART_Start_Receive_IT+0xa4>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2222      	movs	r2, #34	; 0x22
 8003630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	657b      	str	r3, [r7, #84]	; 0x54
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003654:	64ba      	str	r2, [r7, #72]	; 0x48
 8003656:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800365a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d107      	bne.n	8003682 <UART_Start_Receive_IT+0x102>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a21      	ldr	r2, [pc, #132]	; (8003704 <UART_Start_Receive_IT+0x184>)
 800367e:	669a      	str	r2, [r3, #104]	; 0x68
 8003680:	e002      	b.n	8003688 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <UART_Start_Receive_IT+0x188>)
 8003686:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d019      	beq.n	80036c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80036a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
 80036b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e6      	bne.n	8003690 <UART_Start_Receive_IT+0x110>
 80036c2:	e018      	b.n	80036f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	613b      	str	r3, [r7, #16]
   return(result);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f043 0320 	orr.w	r3, r3, #32
 80036d8:	653b      	str	r3, [r7, #80]	; 0x50
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	69f9      	ldr	r1, [r7, #28]
 80036e8:	6a3a      	ldr	r2, [r7, #32]
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e6      	bne.n	80036c4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	375c      	adds	r7, #92	; 0x5c
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	08003b31 	.word	0x08003b31
 8003708:	080039cb 	.word	0x080039cb

0800370c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b095      	sub	sp, #84	; 0x54
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003732:	643b      	str	r3, [r7, #64]	; 0x40
 8003734:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e6      	bne.n	8003714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3308      	adds	r3, #8
 800374c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	61fb      	str	r3, [r7, #28]
   return(result);
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e5      	bne.n	8003746 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377e:	2b01      	cmp	r3, #1
 8003780:	d118      	bne.n	80037b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f023 0310 	bic.w	r3, r3, #16
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6979      	ldr	r1, [r7, #20]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	613b      	str	r3, [r7, #16]
   return(result);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e6      	bne.n	8003782 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037c8:	bf00      	nop
 80037ca:	3754      	adds	r7, #84	; 0x54
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff fa8a 	bl	8002d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b08f      	sub	sp, #60	; 0x3c
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380c:	2b21      	cmp	r3, #33	; 0x21
 800380e:	d14c      	bne.n	80038aa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d132      	bne.n	8003882 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	61fb      	str	r3, [r7, #28]
   return(result);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e6      	bne.n	800381c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	60bb      	str	r3, [r7, #8]
   return(result);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003862:	633b      	str	r3, [r7, #48]	; 0x30
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e6      	bne.n	800384e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003880:	e013      	b.n	80038aa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80038aa:	bf00      	nop
 80038ac:	373c      	adds	r7, #60	; 0x3c
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b091      	sub	sp, #68	; 0x44
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c2:	2b21      	cmp	r3, #33	; 0x21
 80038c4:	d151      	bne.n	800396a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d132      	bne.n	8003938 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	623b      	str	r3, [r7, #32]
   return(result);
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30
 80038f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e6      	bne.n	80038d2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	60fb      	str	r3, [r7, #12]
   return(result);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	617b      	str	r3, [r7, #20]
   return(result);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e6      	bne.n	8003904 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003936:	e018      	b.n	800396a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	1c9a      	adds	r2, r3, #2
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800396a:	bf00      	nop
 800396c:	3744      	adds	r7, #68	; 0x44
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b088      	sub	sp, #32
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	60bb      	str	r3, [r7, #8]
   return(result);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6979      	ldr	r1, [r7, #20]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	613b      	str	r3, [r7, #16]
   return(result);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e6      	bne.n	800397e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fc ff61 	bl	8000884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c2:	bf00      	nop
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b096      	sub	sp, #88	; 0x58
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e2:	2b22      	cmp	r3, #34	; 0x22
 80039e4:	f040 8098 	bne.w	8003b18 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80039f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039f6:	b2d9      	uxtb	r1, r3
 80039f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	400a      	ands	r2, r1
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d17b      	bne.n	8003b28 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a44:	653b      	str	r3, [r7, #80]	; 0x50
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e6      	bne.n	8003a30 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3308      	adds	r3, #8
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	623b      	str	r3, [r7, #32]
   return(result);
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a82:	633a      	str	r2, [r7, #48]	; 0x30
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d12e      	bne.n	8003b10 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 0310 	bic.w	r3, r3, #16
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	69b9      	ldr	r1, [r7, #24]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e6      	bne.n	8003ab8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d103      	bne.n	8003b00 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2210      	movs	r2, #16
 8003afe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff f909 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b0e:	e00b      	b.n	8003b28 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fc fedf 	bl	80008d4 <HAL_UART_RxCpltCallback>
}
 8003b16:	e007      	b.n	8003b28 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	619a      	str	r2, [r3, #24]
}
 8003b28:	bf00      	nop
 8003b2a:	3758      	adds	r7, #88	; 0x58
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b096      	sub	sp, #88	; 0x58
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b48:	2b22      	cmp	r3, #34	; 0x22
 8003b4a:	f040 8098 	bne.w	8003c7e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b5e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d17b      	bne.n	8003c8e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e6      	bne.n	8003b96 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e5      	bne.n	8003bc8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d12e      	bne.n	8003c76 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	647b      	str	r3, [r7, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6979      	ldr	r1, [r7, #20]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d103      	bne.n	8003c66 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2210      	movs	r2, #16
 8003c64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff f856 	bl	8002d20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c74:	e00b      	b.n	8003c8e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fc fe2c 	bl	80008d4 <HAL_UART_RxCpltCallback>
}
 8003c7c:	e007      	b.n	8003c8e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0208 	orr.w	r2, r2, #8
 8003c8c:	619a      	str	r2, [r3, #24]
}
 8003c8e:	bf00      	nop
 8003c90:	3758      	adds	r7, #88	; 0x58
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <__libc_init_array>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	4d0d      	ldr	r5, [pc, #52]	; (8003cd0 <__libc_init_array+0x38>)
 8003c9c:	4c0d      	ldr	r4, [pc, #52]	; (8003cd4 <__libc_init_array+0x3c>)
 8003c9e:	1b64      	subs	r4, r4, r5
 8003ca0:	10a4      	asrs	r4, r4, #2
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	42a6      	cmp	r6, r4
 8003ca6:	d109      	bne.n	8003cbc <__libc_init_array+0x24>
 8003ca8:	4d0b      	ldr	r5, [pc, #44]	; (8003cd8 <__libc_init_array+0x40>)
 8003caa:	4c0c      	ldr	r4, [pc, #48]	; (8003cdc <__libc_init_array+0x44>)
 8003cac:	f000 f820 	bl	8003cf0 <_init>
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	42a6      	cmp	r6, r4
 8003cb8:	d105      	bne.n	8003cc6 <__libc_init_array+0x2e>
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc0:	4798      	blx	r3
 8003cc2:	3601      	adds	r6, #1
 8003cc4:	e7ee      	b.n	8003ca4 <__libc_init_array+0xc>
 8003cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cca:	4798      	blx	r3
 8003ccc:	3601      	adds	r6, #1
 8003cce:	e7f2      	b.n	8003cb6 <__libc_init_array+0x1e>
 8003cd0:	08003d28 	.word	0x08003d28
 8003cd4:	08003d28 	.word	0x08003d28
 8003cd8:	08003d28 	.word	0x08003d28
 8003cdc:	08003d2c 	.word	0x08003d2c

08003ce0 <memset>:
 8003ce0:	4402      	add	r2, r0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d100      	bne.n	8003cea <memset+0xa>
 8003ce8:	4770      	bx	lr
 8003cea:	f803 1b01 	strb.w	r1, [r3], #1
 8003cee:	e7f9      	b.n	8003ce4 <memset+0x4>

08003cf0 <_init>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr

08003cfc <_fini>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr
