
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800521c  0800521c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005224  08005224  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800522c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  0800529c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800529c  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b98a  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7c  00000000  00000000  0002ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027087  00000000  00000000  0002e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b262  00000000  00000000  00055667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1ae6  00000000  00000000  000608c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001523af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  00152400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005048 	.word	0x08005048

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005048 	.word	0x08005048

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Print single character to terminal
void uart_print(unsigned char x)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	USART3->TDR = (x);
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <uart_print+0x2c>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000604:	bf00      	nop
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <uart_print+0x2c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <uart_print+0x12>
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40004800 	.word	0x40004800

08000624 <char_is_endmessage>:
	}
	else return 0;
}

uint8_t char_is_endmessage(char c)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d002      	beq.n	800063a <char_is_endmessage+0x16>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d101      	bne.n	800063e <char_is_endmessage+0x1a>
	{
		return 1;
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <char_is_endmessage+0x1c>
	}
	else return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <rx_has_data>:

// --- Reception ---
uint8_t rx_has_data()
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <rx_has_data+0x24>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <rx_has_data+0x28>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	429a      	cmp	r2, r3
 800065e:	d101      	bne.n	8000664 <rx_has_data+0x18>
	{
		return 0;
 8000660:	2300      	movs	r3, #0
 8000662:	e000      	b.n	8000666 <rx_has_data+0x1a>
	}
	else return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	200003ac 	.word	0x200003ac
 8000674:	200003ae 	.word	0x200003ae

08000678 <increase_rx_empty>:

void increase_rx_empty()
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	rx_empty++;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <increase_rx_empty+0x2c>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	3301      	adds	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <increase_rx_empty+0x2c>)
 8000688:	801a      	strh	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <increase_rx_empty+0x2c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	2b3b      	cmp	r3, #59	; 0x3b
 8000692:	d902      	bls.n	800069a <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <increase_rx_empty+0x2c>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
	}
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	200003ac 	.word	0x200003ac

080006a8 <increase_rx_busy>:

void increase_rx_busy()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	rx_busy++;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <increase_rx_busy+0x2c>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <increase_rx_busy+0x2c>)
 80006b8:	801a      	strh	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <increase_rx_busy+0x2c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	2b3b      	cmp	r3, #59	; 0x3b
 80006c2:	d902      	bls.n	80006ca <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <increase_rx_busy+0x2c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	801a      	strh	r2, [r3, #0]
	}
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	200003ae 	.word	0x200003ae

080006d8 <tx_has_data>:

// --- Transmission ---
uint8_t tx_has_data()
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <tx_has_data+0x24>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <tx_has_data+0x28>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d101      	bne.n	80006f0 <tx_has_data+0x18>
	{
		return 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	e000      	b.n	80006f2 <tx_has_data+0x1a>
	}
	else return 1;
 80006f0:	2301      	movs	r3, #1
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200003ec 	.word	0x200003ec
 8000700:	200003ee 	.word	0x200003ee

08000704 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	tx_busy++;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <increase_tx_busy+0x2c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	b29b      	uxth	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <increase_tx_busy+0x2c>)
 8000714:	801a      	strh	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <increase_tx_busy+0x2c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	b29b      	uxth	r3, r3
 800071c:	2b3b      	cmp	r3, #59	; 0x3b
 800071e:	d902      	bls.n	8000726 <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <increase_tx_busy+0x2c>)
 8000722:	2200      	movs	r2, #0
 8000724:	801a      	strh	r2, [r3, #0]
	}
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	200003ee 	.word	0x200003ee

08000734 <char_is_frame_start_end>:

// Check for frame start and frame end characters
uint8_t char_is_frame_start_end(char c)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if (c == '#' || c == ';')
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b23      	cmp	r3, #35	; 0x23
 8000742:	d002      	beq.n	800074a <char_is_frame_start_end+0x16>
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b3b      	cmp	r3, #59	; 0x3b
 8000748:	d101      	bne.n	800074e <char_is_frame_start_end+0x1a>
	{
		return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <char_is_frame_start_end+0x1c>
	}
	else return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <get_char+0x24>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <get_char+0x28>)
 800076c:	5c9b      	ldrb	r3, [r3, r2]
 800076e:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000770:	f7ff ff9a 	bl	80006a8 <increase_rx_busy>
	return tmp;
 8000774:	79fb      	ldrb	r3, [r7, #7]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200003ae 	.word	0x200003ae
 8000784:	20000370 	.word	0x20000370

08000788 <get_message>:

// Get message from the reception buffer
uint16_t get_message(char *array)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000794:	e041      	b.n	800081a <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <get_message+0xa8>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	461c      	mov	r4, r3
 800079c:	f7ff ffde 	bl	800075c <get_char>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <get_message+0xac>)
 80007a6:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <get_message+0xa8>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <get_message+0xac>)
 80007b0:	5c9b      	ldrb	r3, [r3, r2]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff36 	bl	8000624 <char_is_endmessage>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d021      	beq.n	8000802 <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <get_message+0xa8>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <get_message+0xac>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e009      	b.n	80007e4 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	440b      	add	r3, r1
 80007d8:	4916      	ldr	r1, [pc, #88]	; (8000834 <get_message+0xac>)
 80007da:	5c8a      	ldrb	r2, [r1, r2]
 80007dc:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3301      	adds	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <get_message+0xa8>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3ef      	bcc.n	80007d0 <get_message+0x48>
			}

			message_length = idx;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <get_message+0xa8>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <get_message+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	801a      	strh	r2, [r3, #0]
			return message_length;
 80007fc:	89bb      	ldrh	r3, [r7, #12]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	e011      	b.n	8000826 <get_message+0x9e>
		}
		else
		{
			idx++;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <get_message+0xa8>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <get_message+0xa8>)
 800080c:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <get_message+0xa8>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	2b3c      	cmp	r3, #60	; 0x3c
 8000814:	d901      	bls.n	800081a <get_message+0x92>
 8000816:	2300      	movs	r3, #0
 8000818:	e005      	b.n	8000826 <get_message+0x9e>
	while(rx_has_data() == 1)
 800081a:	f7ff ff17 	bl	800064c <rx_has_data>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d0b8      	beq.n	8000796 <get_message+0xe>
		}
	}
	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bd90      	pop	{r4, r7, pc}
 800082e:	bf00      	nop
 8000830:	200003f0 	.word	0x200003f0
 8000834:	200003f4 	.word	0x200003f4

08000838 <return_message>:

// Send response from STM
void return_message(char *message, ...)
{
 8000838:	b40f      	push	{r0, r1, r2, r3}
 800083a:	b590      	push	{r4, r7, lr}
 800083c:	b093      	sub	sp, #76	; 0x4c
 800083e:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 8000840:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000844:	607b      	str	r3, [r7, #4]
	vsprintf(response, message, arglist);
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800084e:	4618      	mov	r0, r3
 8000850:	f003 ffa2 	bl	8004798 <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <return_message+0xd0>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 800085c:	2300      	movs	r3, #0
 800085e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000862:	e01a      	b.n	800089a <return_message+0x62>
	{
		tx_buffer[idx] = response[i];
 8000864:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000868:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800086c:	3248      	adds	r2, #72	; 0x48
 800086e:	443a      	add	r2, r7
 8000870:	f812 1c40 	ldrb.w	r1, [r2, #-64]
 8000874:	4a25      	ldr	r2, [pc, #148]	; (800090c <return_message+0xd4>)
 8000876:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000878:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800087c:	3301      	adds	r3, #1
 800087e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if (idx >= BUFFER_LENGTH)
 8000882:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000886:	2b3b      	cmp	r3, #59	; 0x3b
 8000888:	d902      	bls.n	8000890 <return_message+0x58>
			idx = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	for (uint16_t i=0; i<strlen(response); i++)
 8000890:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000894:	3301      	adds	r3, #1
 8000896:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800089a:	f8b7 4044 	ldrh.w	r4, [r7, #68]	; 0x44
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fccc 	bl	8000240 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	429c      	cmp	r4, r3
 80008ac:	d3da      	bcc.n	8000864 <return_message+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ae:	b672      	cpsid	i
}
 80008b0:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 80008b2:	f7ff ff11 	bl	80006d8 <tx_has_data>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d118      	bne.n	80008ee <return_message+0xb6>
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <return_message+0xd8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	2b80      	cmp	r3, #128	; 0x80
 80008c8:	d111      	bne.n	80008ee <return_message+0xb6>
	{
		tx_empty = idx;
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <return_message+0xd0>)
 80008cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80008d0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <return_message+0xdc>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <return_message+0xd4>)
 80008dc:	4413      	add	r3, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <return_message+0xd8>)
 80008e4:	f002 fb22 	bl	8002f2c <HAL_UART_Transmit_IT>
		increase_tx_busy();
 80008e8:	f7ff ff0c 	bl	8000704 <increase_tx_busy>
 80008ec:	e003      	b.n	80008f6 <return_message+0xbe>
	}
	else
		tx_empty = idx;
 80008ee:	4a06      	ldr	r2, [pc, #24]	; (8000908 <return_message+0xd0>)
 80008f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80008f4:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008f6:	b662      	cpsie	i
}
 80008f8:	bf00      	nop

	__enable_irq();
}
 80008fa:	bf00      	nop
 80008fc:	374c      	adds	r7, #76	; 0x4c
 80008fe:	46bd      	mov	sp, r7
 8000900:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000904:	b004      	add	sp, #16
 8000906:	4770      	bx	lr
 8000908:	200003ec 	.word	0x200003ec
 800090c:	200003b0 	.word	0x200003b0
 8000910:	2000008c 	.word	0x2000008c
 8000914:	200003ee 	.word	0x200003ee

08000918 <analyze_frame>:

// Analyze frame content
uint8_t analyze_frame(char *message)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b0a3      	sub	sp, #140	; 0x8c
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	// Store last analyzed char position
	__IO uint16_t collection_index = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	// Save frame-check state
	__IO uint8_t sw_state = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

	// Check for '#' and ';' characters in received message
	char *frame_begin;
	char *frame_end;

	frame_begin = strchr(message, '#');
 800092c:	2123      	movs	r1, #35	; 0x23
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f003 fe82 	bl	8004638 <strchr>
 8000934:	67f8      	str	r0, [r7, #124]	; 0x7c
	frame_end = strchr(message, ';');
 8000936:	213b      	movs	r1, #59	; 0x3b
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f003 fe7d 	bl	8004638 <strchr>
 800093e:	67b8      	str	r0, [r7, #120]	; 0x78

	if (frame_begin == NULL || frame_end == NULL)
 8000940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <analyze_frame+0x34>
 8000946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <analyze_frame+0x3e>
	{
		uart_print('%');
 800094c:	2025      	movs	r0, #37	; 0x25
 800094e:	f7ff fe51 	bl	80005f4 <uart_print>
		return 0;
 8000952:	2300      	movs	r3, #0
 8000954:	e293      	b.n	8000e7e <analyze_frame+0x566>
	}

	uint8_t frame_collected = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	while (frame_collected != 1)
 800095c:	e283      	b.n	8000e66 <analyze_frame+0x54e>
	{
		switch (sw_state)
 800095e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b06      	cmp	r3, #6
 8000966:	f200 827e 	bhi.w	8000e66 <analyze_frame+0x54e>
 800096a:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <analyze_frame+0x58>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	0800099b 	.word	0x0800099b
 8000974:	080009d7 	.word	0x080009d7
 8000978:	08000aa1 	.word	0x08000aa1
 800097c:	08000b6b 	.word	0x08000b6b
 8000980:	08000c8f 	.word	0x08000c8f
 8000984:	08000d7b 	.word	0x08000d7b
 8000988:	08000e3b 	.word	0x08000e3b
		{
		case 0:
			// Skip any character before '#' is found
			while (message[collection_index] != '#')
				collection_index++;
 800098c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000990:	b29b      	uxth	r3, r3
 8000992:	3301      	adds	r3, #1
 8000994:	b29b      	uxth	r3, r3
 8000996:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			while (message[collection_index] != '#')
 800099a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800099e:	b29b      	uxth	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b23      	cmp	r3, #35	; 0x23
 80009aa:	d1ef      	bne.n	800098c <analyze_frame+0x74>

			// Get frame start char ( '#' )
			while (message[collection_index] == '#')
 80009ac:	e006      	b.n	80009bc <analyze_frame+0xa4>
				collection_index++;
 80009ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3301      	adds	r3, #1
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			while (message[collection_index] == '#')
 80009bc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b23      	cmp	r3, #35	; 0x23
 80009cc:	d0ef      	beq.n	80009ae <analyze_frame+0x96>

			// Change sw_state
			sw_state = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 80009d4:	e247      	b.n	8000e66 <analyze_frame+0x54e>

		case 1:
			// Get sender
			for (uint8_t i=0; i<3; i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80009dc:	e052      	b.n	8000a84 <analyze_frame+0x16c>
			{
				if (char_is_frame_start_end(message[collection_index]) == 1 || message[collection_index] == ' ')
 80009de:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fea1 	bl	8000734 <char_is_frame_start_end>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d008      	beq.n	8000a0a <analyze_frame+0xf2>
 80009f8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4413      	add	r3, r2
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d10b      	bne.n	8000a22 <analyze_frame+0x10a>
				{
					// Send [CHECKSENDER] message
					char CHECKSENDER[] = "CHECKSENDER\r\n";
 8000a0a:	4baf      	ldr	r3, [pc, #700]	; (8000cc8 <analyze_frame+0x3b0>)
 8000a0c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a12:	c407      	stmia	r4!, {r0, r1, r2}
 8000a14:	8023      	strh	r3, [r4, #0]
					return_message(CHECKSENDER);
 8000a16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff0c 	bl	8000838 <return_message>
				{
 8000a20:	e02b      	b.n	8000a7a <analyze_frame+0x162>
//					return_message(message[collection_index]);
//					return 0;
				}
				else if (i == 2)
 8000a22:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d115      	bne.n	8000a56 <analyze_frame+0x13e>
				{
					sender[i] = message[collection_index];
 8000a2a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	441a      	add	r2, r3
 8000a36:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000a3a:	7811      	ldrb	r1, [r2, #0]
 8000a3c:	4aa3      	ldr	r2, [pc, #652]	; (8000ccc <analyze_frame+0x3b4>)
 8000a3e:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000a40:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3301      	adds	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
					sw_state = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000a54:	e011      	b.n	8000a7a <analyze_frame+0x162>
				}
				else
				{
					sender[i] = message[collection_index];
 8000a56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	441a      	add	r2, r3
 8000a62:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000a66:	7811      	ldrb	r1, [r2, #0]
 8000a68:	4a98      	ldr	r2, [pc, #608]	; (8000ccc <analyze_frame+0x3b4>)
 8000a6a:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000a6c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	3301      	adds	r3, #1
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			for (uint8_t i=0; i<3; i++)
 8000a7a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000a7e:	3301      	adds	r3, #1
 8000a80:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000a84:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d9a8      	bls.n	80009de <analyze_frame+0xc6>
				}
			}

			if (sw_state == 1)
 8000a8c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	f040 81e7 	bne.w	8000e66 <analyze_frame+0x54e>
				// Reset sw_state
				sw_state = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 8000a9e:	e1e2      	b.n	8000e66 <analyze_frame+0x54e>

		case 2:
			// Get receiver
			for (uint8_t i=0; i<3; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8000aa6:	e052      	b.n	8000b4e <analyze_frame+0x236>
			{
				if (char_is_frame_start_end(message[collection_index]) == 1 || message[collection_index] == ' ')
 8000aa8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fe3c 	bl	8000734 <char_is_frame_start_end>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d008      	beq.n	8000ad4 <analyze_frame+0x1bc>
 8000ac2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b20      	cmp	r3, #32
 8000ad2:	d10b      	bne.n	8000aec <analyze_frame+0x1d4>
				{
					// Send [CHECKRECEIVER] message
					char CHECKRECEIVER[] = "CHECKRECEIVER\r\n";
 8000ad4:	4b7e      	ldr	r3, [pc, #504]	; (8000cd0 <analyze_frame+0x3b8>)
 8000ad6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					return_message(CHECKRECEIVER);
 8000ae0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fea7 	bl	8000838 <return_message>
				{
 8000aea:	e02b      	b.n	8000b44 <analyze_frame+0x22c>
//					return_message(message[collection_index]);
//					return 0;
				}
				else if (i == 2)
 8000aec:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d115      	bne.n	8000b20 <analyze_frame+0x208>
				{
					receiver[i] = message[collection_index];
 8000af4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	441a      	add	r2, r3
 8000b00:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000b04:	7811      	ldrb	r1, [r2, #0]
 8000b06:	4a73      	ldr	r2, [pc, #460]	; (8000cd4 <analyze_frame+0x3bc>)
 8000b08:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000b0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3301      	adds	r3, #1
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
					sw_state = 3;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000b1e:	e011      	b.n	8000b44 <analyze_frame+0x22c>
				}
				else
				{
					receiver[i] = message[collection_index];
 8000b20:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	441a      	add	r2, r3
 8000b2c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000b30:	7811      	ldrb	r1, [r2, #0]
 8000b32:	4a68      	ldr	r2, [pc, #416]	; (8000cd4 <analyze_frame+0x3bc>)
 8000b34:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000b36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			for (uint8_t i=0; i<3; i++)
 8000b44:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8000b4e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d9a8      	bls.n	8000aa8 <analyze_frame+0x190>
				}

			}

			if (sw_state == 2)
 8000b56:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	f040 8182 	bne.w	8000e66 <analyze_frame+0x54e>
				// Reset sw_state
				sw_state = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 8000b68:	e17d      	b.n	8000e66 <analyze_frame+0x54e>

		case 3:
			// Get command length
			for (uint8_t i=0; i<3; i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000b70:	e04e      	b.n	8000c10 <analyze_frame+0x2f8>
			{
				if (!(message[collection_index] >= 0x30 && message[collection_index] <= 0x39))
 8000b72:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b2f      	cmp	r3, #47	; 0x2f
 8000b82:	d908      	bls.n	8000b96 <analyze_frame+0x27e>
 8000b84:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b39      	cmp	r3, #57	; 0x39
 8000b94:	d90b      	bls.n	8000bae <analyze_frame+0x296>
				{
					// Send [CHECKLENGTH] message
					char CHECKLENGTH[] = "CHECKLENGTH\r\n";
 8000b96:	4b50      	ldr	r3, [pc, #320]	; (8000cd8 <analyze_frame+0x3c0>)
 8000b98:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000ba0:	8023      	strh	r3, [r4, #0]
					return_message(CHECKLENGTH);
 8000ba2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe46 	bl	8000838 <return_message>
				{
 8000bac:	e02b      	b.n	8000c06 <analyze_frame+0x2ee>
//					return 0;
				}
				else if (i == 2)
 8000bae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d115      	bne.n	8000be2 <analyze_frame+0x2ca>
				{
					command_chars[i] = message[collection_index];
 8000bb6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000bc6:	7811      	ldrb	r1, [r2, #0]
 8000bc8:	4a44      	ldr	r2, [pc, #272]	; (8000cdc <analyze_frame+0x3c4>)
 8000bca:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000bcc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
					sw_state = 4;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000be0:	e011      	b.n	8000c06 <analyze_frame+0x2ee>
				}
				else
				{
					command_chars[i] = message[collection_index];
 8000be2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	441a      	add	r2, r3
 8000bee:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000bf2:	7811      	ldrb	r1, [r2, #0]
 8000bf4:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <analyze_frame+0x3c4>)
 8000bf6:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000bf8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			for (uint8_t i=0; i<3; i++)
 8000c06:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000c10:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d9ac      	bls.n	8000b72 <analyze_frame+0x25a>
				}
			}

			// Get data field length as integer value
			// Use length to get characters from 'data' array in next step
			command_length = atoi(command_chars);
 8000c18:	4830      	ldr	r0, [pc, #192]	; (8000cdc <analyze_frame+0x3c4>)
 8000c1a:	f003 fcd6 	bl	80045ca <atoi>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <analyze_frame+0x3c8>)
 8000c24:	801a      	strh	r2, [r3, #0]

			// Check declared message length
			if (command_length == 0)
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <analyze_frame+0x3c8>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10c      	bne.n	8000c48 <analyze_frame+0x330>
			{
				// Send [FRAMEEMPTY] message
				char FRAMEEMPTY[] = "FRAMEEMPTY\r\n";
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <analyze_frame+0x3cc>)
 8000c30:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c36:	c407      	stmia	r4!, {r0, r1, r2}
 8000c38:	7023      	strb	r3, [r4, #0]
				return_message(FRAMEEMPTY);
 8000c3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fdfa 	bl	8000838 <return_message>
				return 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	e11a      	b.n	8000e7e <analyze_frame+0x566>
			}
			else if (command_length > MAX_DATA_LENGTH)
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <analyze_frame+0x3c8>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c50:	d90f      	bls.n	8000c72 <analyze_frame+0x35a>
			{
				// Send [DATAOVERFLOW] message
				char DATAOVERFLOW[] = "DATAOVERFLOW\r\n";
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <analyze_frame+0x3d0>)
 8000c54:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5a:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5c:	8023      	strh	r3, [r4, #0]
 8000c5e:	3402      	adds	r4, #2
 8000c60:	0c1b      	lsrs	r3, r3, #16
 8000c62:	7023      	strb	r3, [r4, #0]
				return_message(DATAOVERFLOW);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fde5 	bl	8000838 <return_message>
				return 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e105      	b.n	8000e7e <analyze_frame+0x566>
			}

			// Pass command length to the variable outside the function
			data_len = command_length;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <analyze_frame+0x3c8>)
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <analyze_frame+0x3d4>)
 8000c78:	801a      	strh	r2, [r3, #0]

			if (sw_state == 3)
 8000c7a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	f040 80f0 	bne.w	8000e66 <analyze_frame+0x54e>
				// Reset sw_state
				sw_state = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 8000c8c:	e0eb      	b.n	8000e66 <analyze_frame+0x54e>

		case 4:
			// Get data
			for (uint16_t i=0; i<command_length; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8000c94:	e062      	b.n	8000d5c <analyze_frame+0x444>
			{
				if (char_is_frame_start_end(message[collection_index]) == 1)
 8000c96:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fd45 	bl	8000734 <char_is_frame_start_end>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d121      	bne.n	8000cf4 <analyze_frame+0x3dc>
				{
					// Send [CHECKDATA] message
					char CHECKDATA[] = "CHECKDATA\r\n";
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <analyze_frame+0x3d8>)
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					return_message(CHECKDATA);
 8000cbc:	f107 0318 	add.w	r3, r7, #24
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fdb9 	bl	8000838 <return_message>
 8000cc6:	e044      	b.n	8000d52 <analyze_frame+0x43a>
 8000cc8:	08005060 	.word	0x08005060
 8000ccc:	20000158 	.word	0x20000158
 8000cd0:	08005070 	.word	0x08005070
 8000cd4:	2000015c 	.word	0x2000015c
 8000cd8:	08005080 	.word	0x08005080
 8000cdc:	20000160 	.word	0x20000160
 8000ce0:	20000164 	.word	0x20000164
 8000ce4:	08005090 	.word	0x08005090
 8000ce8:	080050a0 	.word	0x080050a0
 8000cec:	2000036c 	.word	0x2000036c
 8000cf0:	080050b0 	.word	0x080050b0
//					return 0;
				}
				else if (i == (command_length-1))
 8000cf4:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8000cf8:	4b63      	ldr	r3, [pc, #396]	; (8000e88 <analyze_frame+0x570>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d115      	bne.n	8000d2e <analyze_frame+0x416>
				{
					data[i] = message[collection_index];
 8000d02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	441a      	add	r2, r3
 8000d0e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000d12:	7811      	ldrb	r1, [r2, #0]
 8000d14:	4a5d      	ldr	r2, [pc, #372]	; (8000e8c <analyze_frame+0x574>)
 8000d16:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000d18:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
					sw_state = 5;
 8000d26:	2305      	movs	r3, #5
 8000d28:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000d2c:	e011      	b.n	8000d52 <analyze_frame+0x43a>
				}
				else
				{
					data[i] = message[collection_index];
 8000d2e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	441a      	add	r2, r3
 8000d3a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000d3e:	7811      	ldrb	r1, [r2, #0]
 8000d40:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <analyze_frame+0x574>)
 8000d42:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000d44:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			for (uint16_t i=0; i<command_length; i++)
 8000d52:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000d56:	3301      	adds	r3, #1
 8000d58:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <analyze_frame+0x570>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d396      	bcc.n	8000c96 <analyze_frame+0x37e>
				}
			}

			if (sw_state == 4)
 8000d68:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d179      	bne.n	8000e66 <analyze_frame+0x54e>
				// Reset sw_state
				sw_state = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 8000d78:	e075      	b.n	8000e66 <analyze_frame+0x54e>

		case 5:
			// Get checksum
			for (uint8_t i=0; i<3; i++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8000d80:	e04e      	b.n	8000e20 <analyze_frame+0x508>
			{
				if (!(message[collection_index] >= 0x30 && message[collection_index] <= 0x39))
 8000d82:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b2f      	cmp	r3, #47	; 0x2f
 8000d92:	d908      	bls.n	8000da6 <analyze_frame+0x48e>
 8000d94:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b39      	cmp	r3, #57	; 0x39
 8000da4:	d90b      	bls.n	8000dbe <analyze_frame+0x4a6>
				{
					// Send [CHECKCSUM] message
					char CHECKCSUM[] = "CHECKCSUM\r\n";
 8000da6:	4a3a      	ldr	r2, [pc, #232]	; (8000e90 <analyze_frame+0x578>)
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					return_message(CHECKCSUM);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fd3e 	bl	8000838 <return_message>
				{
 8000dbc:	e02b      	b.n	8000e16 <analyze_frame+0x4fe>
//					return 0;
				}
				else if (i == 2)
 8000dbe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d115      	bne.n	8000df2 <analyze_frame+0x4da>
				{
					checksum[i] = message[collection_index];
 8000dc6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000dd6:	7811      	ldrb	r1, [r2, #0]
 8000dd8:	4a2e      	ldr	r2, [pc, #184]	; (8000e94 <analyze_frame+0x57c>)
 8000dda:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000ddc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
					sw_state = 6;
 8000dea:	2306      	movs	r3, #6
 8000dec:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000df0:	e011      	b.n	8000e16 <analyze_frame+0x4fe>
				}
				else
				{
					checksum[i] = message[collection_index];
 8000df2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	441a      	add	r2, r3
 8000dfe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000e02:	7811      	ldrb	r1, [r2, #0]
 8000e04:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <analyze_frame+0x57c>)
 8000e06:	54d1      	strb	r1, [r2, r3]
					collection_index++;
 8000e08:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			for (uint8_t i=0; i<3; i++)
 8000e16:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8000e20:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d9ac      	bls.n	8000d82 <analyze_frame+0x46a>
				}
			}

			if (sw_state == 5)
 8000e28:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d119      	bne.n	8000e66 <analyze_frame+0x54e>
				// Reset sw_state
				sw_state = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 8000e38:	e015      	b.n	8000e66 <analyze_frame+0x54e>

		case 6:
			// Get frame end char ( ';' )
			if (message[collection_index] == ';')
 8000e3a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b3b      	cmp	r3, #59	; 0x3b
 8000e4a:	d103      	bne.n	8000e54 <analyze_frame+0x53c>
			{
				frame_collected = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				break;
 8000e52:	e008      	b.n	8000e66 <analyze_frame+0x54e>
			}

			if (sw_state == 6)
 8000e54:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d102      	bne.n	8000e64 <analyze_frame+0x54c>
				// Reset sw_state
				sw_state = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			break;
 8000e64:	bf00      	nop
	while (frame_collected != 1)
 8000e66:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	f47f ad77 	bne.w	800095e <analyze_frame+0x46>
		} /* switch end */
	} /* while end */

	if (frame_collected == 1)
 8000e70:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <analyze_frame+0x564>
		return 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <analyze_frame+0x566>
	else
		return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	378c      	adds	r7, #140	; 0x8c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000164 	.word	0x20000164
 8000e8c:	20000168 	.word	0x20000168
 8000e90:	080050bc 	.word	0x080050bc
 8000e94:	20000368 	.word	0x20000368

08000e98 <execute_command>:

// Execute command
void execute_command(char *frame_command, uint16_t frame_command_length)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
//	{
//		// Return empty command message
//		for (uint16_t i=0; i<(sizeof(frameempty)-2); i++)
//			uart_print(frameempty[i]);
//	}
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 fad9 	bl	800146a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f844 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f8e0 	bl	8001080 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ec0:	f000 f8ae 	bl	8001020 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4917      	ldr	r1, [pc, #92]	; (8000f24 <main+0x74>)
 8000ec8:	4817      	ldr	r0, [pc, #92]	; (8000f28 <main+0x78>)
 8000eca:	f002 f88d 	bl	8002fe8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Retrieve the message
	  if (char_is_endmessage(character))
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <main+0x74>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fba6 	bl	8000624 <char_is_endmessage>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <main+0x3c>
		  message_length = get_message(message);
 8000ede:	4813      	ldr	r0, [pc, #76]	; (8000f2c <main+0x7c>)
 8000ee0:	f7ff fc52 	bl	8000788 <get_message>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <main+0x80>)
 8000eea:	801a      	strh	r2, [r3, #0]

	  // Analyze frame if message had any content
	  if (message_length > 0 && analyze_frame(message) == 1)
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <main+0x80>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0eb      	beq.n	8000ece <main+0x1e>
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <main+0x7c>)
 8000ef8:	f7ff fd0e 	bl	8000918 <analyze_frame>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d1e5      	bne.n	8000ece <main+0x1e>
	  {
		  // Print received message
		  return_message(data);
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <main+0x84>)
 8000f04:	f7ff fc98 	bl	8000838 <return_message>
		  return_message("\r");
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <main+0x88>)
 8000f0a:	f7ff fc95 	bl	8000838 <return_message>
		  return_message("\n");
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <main+0x8c>)
 8000f10:	f7ff fc92 	bl	8000838 <return_message>

		  // Run sent command
		  execute_command(data, data_len);
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <main+0x90>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <main+0x84>)
 8000f1c:	f7ff ffbc 	bl	8000e98 <execute_command>
	  if (char_is_endmessage(character))
 8000f20:	e7d5      	b.n	8000ece <main+0x1e>
 8000f22:	bf00      	nop
 8000f24:	20000114 	.word	0x20000114
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	20000118 	.word	0x20000118
 8000f30:	20000154 	.word	0x20000154
 8000f34:	20000168 	.word	0x20000168
 8000f38:	080050c8 	.word	0x080050c8
 8000f3c:	080050cc 	.word	0x080050cc
 8000f40:	2000036c 	.word	0x2000036c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	2234      	movs	r2, #52	; 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fb68 	bl	8004628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <SystemClock_Config+0xd4>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a2a      	ldr	r2, [pc, #168]	; (8001018 <SystemClock_Config+0xd4>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xd4>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <SystemClock_Config+0xd8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a25      	ldr	r2, [pc, #148]	; (800101c <SystemClock_Config+0xd8>)
 8000f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <SystemClock_Config+0xd8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fac:	2308      	movs	r3, #8
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fb0:	23d8      	movs	r3, #216	; 0xd8
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fe67 	bl	8001c98 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fd0:	f000 f904 	bl	80011dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fd4:	f000 fe10 	bl	8001bf8 <HAL_PWREx_EnableOverDrive>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fde:	f000 f8fd 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2107      	movs	r1, #7
 8001000:	4618      	mov	r0, r3
 8001002:	f001 f8f7 	bl	80021f4 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800100c:	f000 f8e6 	bl	80011dc <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	; 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <MX_USART3_UART_Init+0x5c>)
 8001028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART3_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_USART3_UART_Init+0x58>)
 8001064:	f001 ff14 	bl	8002e90 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 f8b5 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000008c 	.word	0x2000008c
 800107c:	40004800 	.word	0x40004800

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_GPIO_Init+0xa8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a23      	ldr	r2, [pc, #140]	; (8001128 <MX_GPIO_Init+0xa8>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_GPIO_Init+0xa8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_GPIO_Init+0xa8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <MX_GPIO_Init+0xa8>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_GPIO_Init+0xa8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_GPIO_Init+0xa8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <MX_GPIO_Init+0xa8>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_GPIO_Init+0xa8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_GPIO_Init+0xac>)
 80010e4:	f000 fd6e 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 80010e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_GPIO_Init+0xb0>)
 80010fe:	f000 fbb5 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_GPIO_Init+0xac>)
 800111a:	f000 fba7 	bl	800186c <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800

08001134 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	// Print character to terminal
	uart_print(character);
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_RxCpltCallback+0x44>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa57 	bl	80005f4 <uart_print>

	// Check for correct USART port
	if(huart->Instance == USART3)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_UART_RxCpltCallback+0x48>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d10e      	bne.n	800116e <HAL_UART_RxCpltCallback+0x3a>
	{
		// Collect character to reception buffer
		rx_buffer[rx_empty] = character;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_UART_RxCpltCallback+0x4c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_UART_RxCpltCallback+0x44>)
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_UART_RxCpltCallback+0x50>)
 800115e:	5499      	strb	r1, [r3, r2]

		// Increase rx_empty index
		increase_rx_empty();
 8001160:	f7ff fa8a 	bl	8000678 <increase_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &character, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	4904      	ldr	r1, [pc, #16]	; (8001178 <HAL_UART_RxCpltCallback+0x44>)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 ff3d 	bl	8002fe8 <HAL_UART_Receive_IT>
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000114 	.word	0x20000114
 800117c:	40004800 	.word	0x40004800
 8001180:	200003ac 	.word	0x200003ac
 8001184:	20000370 	.word	0x20000370

08001188 <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_UART_TxCpltCallback+0x44>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d113      	bne.n	80011c2 <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 800119a:	f7ff fa9d 	bl	80006d8 <tx_has_data>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10e      	bne.n	80011c2 <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_UART_TxCpltCallback+0x48>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_UART_TxCpltCallback+0x4c>)
 80011ae:	5c9a      	ldrb	r2, [r3, r2]
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_UART_TxCpltCallback+0x50>)
 80011b2:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 80011b4:	f7ff faa6 	bl	8000704 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <HAL_UART_TxCpltCallback+0x50>)
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f001 feb5 	bl	8002f2c <HAL_UART_Transmit_IT>
		}
	}
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004800 	.word	0x40004800
 80011d0:	200003ee 	.word	0x200003ee
 80011d4:	200003b0 	.word	0x200003b0
 80011d8:	20000430 	.word	0x20000430

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_MspInit+0x54>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <HAL_MspInit+0x54>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_MspInit+0x54>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_MspInit+0x54>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_MspInit+0x54>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_MspInit+0x54>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800121e:	2007      	movs	r0, #7
 8001220:	f000 fa50 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2005      	movs	r0, #5
 800122a:	f000 fa56 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800122e:	2005      	movs	r0, #5
 8001230:	f000 fa6f 	bl	8001712 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0ae      	sub	sp, #184	; 0xb8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2290      	movs	r2, #144	; 0x90
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f9e1 	bl	8004628 <memset>
  if(huart->Instance==USART3)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a26      	ldr	r2, [pc, #152]	; (8001304 <HAL_UART_MspInit+0xc4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d144      	bne.n	80012fa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001274:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001276:	2310      	movs	r3, #16
 8001278:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4618      	mov	r0, r3
 8001280:	f001 f9de 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128a:	f7ff ffa7 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <HAL_UART_MspInit+0xc8>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_UART_MspInit+0xc8>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_UART_MspInit+0xc8>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_UART_MspInit+0xc8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_UART_MspInit+0xc8>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_UART_MspInit+0xc8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d8:	2307      	movs	r3, #7
 80012da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <HAL_UART_MspInit+0xcc>)
 80012e6:	f000 fac1 	bl	800186c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2027      	movs	r0, #39	; 0x27
 80012f0:	f000 f9f3 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012f4:	2027      	movs	r0, #39	; 0x27
 80012f6:	f000 fa0c 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	37b8      	adds	r7, #184	; 0xb8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40004800 	.word	0x40004800
 8001308:	40023800 	.word	0x40023800
 800130c:	40020c00 	.word	0x40020c00

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f8c2 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <USART3_IRQHandler+0x10>)
 800137a:	f001 fe79 	bl	8003070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000008c 	.word	0x2000008c

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001390:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <_sbrk+0x5c>)
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <_sbrk+0x60>)
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <_sbrk+0x64>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <_sbrk+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d207      	bcs.n	80013c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b8:	f003 f90c 	bl	80045d4 <__errno>
 80013bc:	4603      	mov	r3, r0
 80013be:	220c      	movs	r2, #12
 80013c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e009      	b.n	80013dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <_sbrk+0x64>)
 80013d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20080000 	.word	0x20080000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	20000434 	.word	0x20000434
 80013f0:	20000450 	.word	0x20000450

080013f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141e:	490e      	ldr	r1, [pc, #56]	; (8001458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001434:	4c0b      	ldr	r4, [pc, #44]	; (8001464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001442:	f7ff ffd7 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f003 f8cb 	bl	80045e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff fd31 	bl	8000eb0 <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800145c:	0800522c 	.word	0x0800522c
  ldr r2, =_sbss
 8001460:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001464:	2000044c 	.word	0x2000044c

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>

0800146a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f928 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f805 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff feb5 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f943 	bl	800172e <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f90b 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008
 8001508:	20000438 	.word	0x20000438

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000438 	.word	0x20000438

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <__NVIC_SetPriorityGrouping+0x40>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	4313      	orrs	r3, r2
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x40>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	05fa0000 	.word	0x05fa0000

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff feda 	bl	800150c <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d008      	beq.n	8001778 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e052      	b.n	800181e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0216 	bic.w	r2, r2, #22
 8001786:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001796:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <HAL_DMA_Abort+0x62>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0208 	bic.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c8:	e013      	b.n	80017f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ca:	f7ff fe9f 	bl	800150c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d90c      	bls.n	80017f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2220      	movs	r2, #32
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e015      	b.n	800181e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e4      	bne.n	80017ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	223f      	movs	r2, #63	; 0x3f
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d004      	beq.n	8001844 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e00c      	b.n	800185e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2205      	movs	r2, #5
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e175      	b.n	8001b78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 8164 	bne.w	8001b72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d005      	beq.n	80018c2 <HAL_GPIO_Init+0x56>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d130      	bne.n	8001924 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 0201 	and.w	r2, r3, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b03      	cmp	r3, #3
 800192e:	d017      	beq.n	8001960 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80be 	beq.w	8001b72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_GPIO_Init+0x324>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_GPIO_Init+0x324>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_GPIO_Init+0x324>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a0e:	4a61      	ldr	r2, [pc, #388]	; (8001b94 <HAL_GPIO_Init+0x328>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_GPIO_Init+0x32c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d037      	beq.n	8001aaa <HAL_GPIO_Init+0x23e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <HAL_GPIO_Init+0x330>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d031      	beq.n	8001aa6 <HAL_GPIO_Init+0x23a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <HAL_GPIO_Init+0x334>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d02b      	beq.n	8001aa2 <HAL_GPIO_Init+0x236>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a55      	ldr	r2, [pc, #340]	; (8001ba4 <HAL_GPIO_Init+0x338>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d025      	beq.n	8001a9e <HAL_GPIO_Init+0x232>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a54      	ldr	r2, [pc, #336]	; (8001ba8 <HAL_GPIO_Init+0x33c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01f      	beq.n	8001a9a <HAL_GPIO_Init+0x22e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a53      	ldr	r2, [pc, #332]	; (8001bac <HAL_GPIO_Init+0x340>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x22a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_GPIO_Init+0x344>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x226>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a51      	ldr	r2, [pc, #324]	; (8001bb4 <HAL_GPIO_Init+0x348>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x222>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a50      	ldr	r2, [pc, #320]	; (8001bb8 <HAL_GPIO_Init+0x34c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x21e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <HAL_GPIO_Init+0x350>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x21a>
 8001a82:	2309      	movs	r3, #9
 8001a84:	e012      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001a86:	230a      	movs	r3, #10
 8001a88:	e010      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	e00e      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001a92:	2306      	movs	r3, #6
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x240>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	; (8001b94 <HAL_GPIO_Init+0x328>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_GPIO_Init+0x354>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f ae86 	bls.w	800188c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40021400 	.word	0x40021400
 8001bb0:	40021800 	.word	0x40021800
 8001bb4:	40021c00 	.word	0x40021c00
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	40022400 	.word	0x40022400
 8001bc0:	40013c00 	.word	0x40013c00

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001be0:	e003      	b.n	8001bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	619a      	str	r2, [r3, #24]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a22      	ldr	r2, [pc, #136]	; (8001c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c26:	f7ff fc71 	bl	800150c <HAL_GetTick>
 8001c2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c2c:	e009      	b.n	8001c42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c2e:	f7ff fc6d 	bl	800150c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c3c:	d901      	bls.n	8001c42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e022      	b.n	8001c88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c5c:	f7ff fc56 	bl	800150c <HAL_GetTick>
 8001c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c62:	e009      	b.n	8001c78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c64:	f7ff fc52 	bl	800150c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c72:	d901      	bls.n	8001c78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e007      	b.n	8001c88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c84:	d1ee      	bne.n	8001c64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e29b      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8087 	beq.w	8001dca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cbc:	4b96      	ldr	r3, [pc, #600]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc8:	4b93      	ldr	r3, [pc, #588]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d112      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62>
 8001cd4:	4b90      	ldr	r3, [pc, #576]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	4b8d      	ldr	r3, [pc, #564]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d06c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x130>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d168      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e275      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x7a>
 8001d04:	4b84      	ldr	r3, [pc, #528]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a83      	ldr	r2, [pc, #524]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e02e      	b.n	8001d70 <HAL_RCC_OscConfig+0xd8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x9c>
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7b      	ldr	r2, [pc, #492]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xd8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0xc0>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a72      	ldr	r2, [pc, #456]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xd8>
 8001d58:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6b      	ldr	r2, [pc, #428]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fbc8 	bl	800150c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fbc4 	bl	800150c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e229      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xe8>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fbb4 	bl	800150c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fbb0 	bl	800150c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e215      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b57      	ldr	r3, [pc, #348]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x110>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d069      	beq.n	8001eaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd6:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de2:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d11c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x190>
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x17a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1e9      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	493d      	ldr	r1, [pc, #244]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e040      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a38      	ldr	r2, [pc, #224]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fb66 	bl	800150c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff fb62 	bl	800150c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1c7      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4929      	ldr	r1, [pc, #164]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
 8001e76:	e018      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff fb42 	bl	800150c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fb3e 	bl	800150c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1a3      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d038      	beq.n	8001f28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec2:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff fb1f 	bl	800150c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fb1b 	bl	800150c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e180      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x23a>
 8001ef0:	e01a      	b.n	8001f28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efe:	f7ff fb05 	bl	800150c <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff fb01 	bl	800150c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d903      	bls.n	8001f1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e166      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
 8001f18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b92      	ldr	r3, [pc, #584]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a4 	beq.w	800207e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b8c      	ldr	r3, [pc, #560]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b89      	ldr	r3, [pc, #548]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a88      	ldr	r2, [pc, #544]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b86      	ldr	r3, [pc, #536]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	4b83      	ldr	r3, [pc, #524]	; (800216c <HAL_RCC_OscConfig+0x4d4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f6a:	4b80      	ldr	r3, [pc, #512]	; (800216c <HAL_RCC_OscConfig+0x4d4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7f      	ldr	r2, [pc, #508]	; (800216c <HAL_RCC_OscConfig+0x4d4>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7ff fac9 	bl	800150c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff fac5 	bl	800150c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	; 0x64
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e12a      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x4d4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x31a>
 8001fa4:	4b70      	ldr	r3, [pc, #448]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a6f      	ldr	r2, [pc, #444]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb0:	e02d      	b.n	800200e <HAL_RCC_OscConfig+0x376>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x33c>
 8001fba:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a6a      	ldr	r2, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc6:	4b68      	ldr	r3, [pc, #416]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	4a67      	ldr	r2, [pc, #412]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd2:	e01c      	b.n	800200e <HAL_RCC_OscConfig+0x376>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x35e>
 8001fdc:	4b62      	ldr	r3, [pc, #392]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a61      	ldr	r2, [pc, #388]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x376>
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff fa79 	bl	800150c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fa75 	bl	800150c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0d8      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	4b4c      	ldr	r3, [pc, #304]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ee      	beq.n	800201e <HAL_RCC_OscConfig+0x386>
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7ff fa63 	bl	800150c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff fa5f 	bl	800150c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0c2      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ee      	bne.n	800204a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80ae 	beq.w	80021e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d06d      	beq.n	8002170 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d14b      	bne.n	8002134 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a31      	ldr	r2, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 80020a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff fa30 	bl	800150c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff fa2c 	bl	800150c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e091      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	071b      	lsls	r3, r3, #28
 80020fa:	491b      	ldr	r1, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff f9fe 	bl	800150c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff f9fa 	bl	800150c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e05f      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x47c>
 8002132:	e057      	b.n	80021e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff f9e4 	bl	800150c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7ff f9e0 	bl	800150c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e045      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_RCC_OscConfig+0x4d0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x4b0>
 8002166:	e03d      	b.n	80021e4 <HAL_RCC_OscConfig+0x54c>
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <HAL_RCC_OscConfig+0x558>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d030      	beq.n	80021e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d129      	bne.n	80021e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d122      	bne.n	80021e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d119      	bne.n	80021e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d10f      	bne.n	80021e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0d0      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	4965      	ldr	r1, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800225e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002276:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d040      	beq.n	8002318 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d115      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e073      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06b      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e8:	f7ff f910 	bl	800150c <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff f90c 	bl	800150c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e053      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d210      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	4922      	ldr	r1, [pc, #136]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4602      	mov	r2, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	490a      	ldr	r1, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002398:	5ccb      	ldrb	r3, [r1, r3]
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1d0>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1d4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f86c 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00
 80023bc:	40023800 	.word	0x40023800
 80023c0:	080050d0 	.word	0x080050d0
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004

080023cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b094      	sub	sp, #80	; 0x50
 80023d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	647b      	str	r3, [r7, #68]	; 0x44
 80023d8:	2300      	movs	r3, #0
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	2300      	movs	r3, #0
 80023de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e4:	4b79      	ldr	r3, [pc, #484]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d00d      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	f200 80e1 	bhi.w	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x34>
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fe:	e0db      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002404:	e0db      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800240a:	e0d8      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002416:	4b6d      	ldr	r3, [pc, #436]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
 800242c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800243e:	4622      	mov	r2, r4
 8002440:	462b      	mov	r3, r5
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	0159      	lsls	r1, r3, #5
 800244c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002450:	0150      	lsls	r0, r2, #5
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4621      	mov	r1, r4
 8002458:	1a51      	subs	r1, r2, r1
 800245a:	6139      	str	r1, [r7, #16]
 800245c:	4629      	mov	r1, r5
 800245e:	eb63 0301 	sbc.w	r3, r3, r1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002470:	4659      	mov	r1, fp
 8002472:	018b      	lsls	r3, r1, #6
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800247a:	4651      	mov	r1, sl
 800247c:	018a      	lsls	r2, r1, #6
 800247e:	4651      	mov	r1, sl
 8002480:	ebb2 0801 	subs.w	r8, r2, r1
 8002484:	4659      	mov	r1, fp
 8002486:	eb63 0901 	sbc.w	r9, r3, r1
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800249e:	4690      	mov	r8, r2
 80024a0:	4699      	mov	r9, r3
 80024a2:	4623      	mov	r3, r4
 80024a4:	eb18 0303 	adds.w	r3, r8, r3
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	462b      	mov	r3, r5
 80024ac:	eb49 0303 	adc.w	r3, r9, r3
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024be:	4629      	mov	r1, r5
 80024c0:	024b      	lsls	r3, r1, #9
 80024c2:	4621      	mov	r1, r4
 80024c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c8:	4621      	mov	r1, r4
 80024ca:	024a      	lsls	r2, r1, #9
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	2200      	movs	r2, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024dc:	f7fd ff08 	bl	80002f0 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e8:	e058      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	4611      	mov	r1, r2
 80024f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002504:	4642      	mov	r2, r8
 8002506:	464b      	mov	r3, r9
 8002508:	f04f 0000 	mov.w	r0, #0
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	0159      	lsls	r1, r3, #5
 8002512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002516:	0150      	lsls	r0, r2, #5
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4641      	mov	r1, r8
 800251e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002522:	4649      	mov	r1, r9
 8002524:	eb63 0b01 	sbc.w	fp, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800253c:	ebb2 040a 	subs.w	r4, r2, sl
 8002540:	eb63 050b 	sbc.w	r5, r3, fp
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	00eb      	lsls	r3, r5, #3
 800254e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002552:	00e2      	lsls	r2, r4, #3
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
 8002558:	4643      	mov	r3, r8
 800255a:	18e3      	adds	r3, r4, r3
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	464b      	mov	r3, r9
 8002560:	eb45 0303 	adc.w	r3, r5, r3
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002572:	4629      	mov	r1, r5
 8002574:	028b      	lsls	r3, r1, #10
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800257c:	4621      	mov	r1, r4
 800257e:	028a      	lsls	r2, r1, #10
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	2200      	movs	r2, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	61fa      	str	r2, [r7, #28]
 800258c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002590:	f7fd feae 	bl	80002f0 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80025ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3750      	adds	r7, #80	; 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200

080025d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	080050e0 	.word	0x080050e0

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800261c:	f7ff ffdc 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0b5b      	lsrs	r3, r3, #13
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	080050e0 	.word	0x080050e0

08002640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	4964      	ldr	r1, [pc, #400]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	4959      	ldr	r1, [pc, #356]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d017      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d6:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	494a      	ldr	r1, [pc, #296]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f4:	d101      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808b 	beq.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7fe fee0 	bl	800150c <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe fedc 	bl	800150c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e38f      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002776:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d035      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d02e      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002794:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d114      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fea4 	bl	800150c <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe fea0 	bl	800150c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e351      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f6:	d111      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002806:	400b      	ands	r3, r1
 8002808:	4901      	ldr	r1, [pc, #4]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
 800280e:	e00b      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
 8002818:	0ffffcff 	.word	0x0ffffcff
 800281c:	4bac      	ldr	r3, [pc, #688]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4aab      	ldr	r2, [pc, #684]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	4ba9      	ldr	r3, [pc, #676]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	49a6      	ldr	r1, [pc, #664]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	4313      	orrs	r3, r2
 8002838:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002846:	4ba2      	ldr	r3, [pc, #648]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284c:	4aa0      	ldr	r2, [pc, #640]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002856:	4b9e      	ldr	r3, [pc, #632]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002858:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	499b      	ldr	r1, [pc, #620]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002874:	4b96      	ldr	r3, [pc, #600]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002882:	4993      	ldr	r1, [pc, #588]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002896:	4b8e      	ldr	r3, [pc, #568]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a4:	498a      	ldr	r1, [pc, #552]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b8:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	4982      	ldr	r1, [pc, #520]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028da:	4b7d      	ldr	r3, [pc, #500]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4979      	ldr	r1, [pc, #484]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4971      	ldr	r1, [pc, #452]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291e:	4b6c      	ldr	r3, [pc, #432]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f023 020c 	bic.w	r2, r3, #12
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	4968      	ldr	r1, [pc, #416]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002940:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	4960      	ldr	r1, [pc, #384]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002970:	4957      	ldr	r1, [pc, #348]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002984:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	494f      	ldr	r1, [pc, #316]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4946      	ldr	r1, [pc, #280]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	493e      	ldr	r1, [pc, #248]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1a:	492d      	ldr	r1, [pc, #180]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d011      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3c:	4924      	ldr	r1, [pc, #144]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	4914      	ldr	r1, [pc, #80]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa0:	490b      	ldr	r1, [pc, #44]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00f      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac4:	4902      	ldr	r1, [pc, #8]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002acc:	e002      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ae0:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	4986      	ldr	r1, [pc, #536]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b04:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b14:	497d      	ldr	r1, [pc, #500]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d006      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80d6 	beq.w	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b30:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fce6 	bl	800150c <HAL_GetTick>
 8002b40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b44:	f7fe fce2 	bl	800150c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e195      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b56:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d021      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11d      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b84:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8a:	0e1b      	lsrs	r3, r3, #24
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	019a      	lsls	r2, r3, #6
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	4958      	ldr	r1, [pc, #352]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d02e      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bdc:	d129      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bec:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf2:	0f1b      	lsrs	r3, r3, #28
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	019a      	lsls	r2, r3, #6
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	061b      	lsls	r3, r3, #24
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	493e      	ldr	r1, [pc, #248]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c1a:	4b3c      	ldr	r3, [pc, #240]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c20:	f023 021f 	bic.w	r2, r3, #31
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	4938      	ldr	r1, [pc, #224]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01d      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c44:	0e1b      	lsrs	r3, r3, #24
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	0f1b      	lsrs	r3, r3, #28
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	019a      	lsls	r2, r3, #6
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	431a      	orrs	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	071b      	lsls	r3, r3, #28
 8002c72:	4926      	ldr	r1, [pc, #152]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d011      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	019a      	lsls	r2, r3, #6
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	491a      	ldr	r1, [pc, #104]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fc29 	bl	800150c <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cbe:	f7fe fc25 	bl	800150c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b64      	cmp	r3, #100	; 0x64
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0d8      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	f040 80ce 	bne.w	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fc0c 	bl	800150c <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cf8:	f7fe fc08 	bl	800150c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d904      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0bb      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d1c:	d0ec      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d02e      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d12a      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d46:	4b51      	ldr	r3, [pc, #324]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d54:	4b4d      	ldr	r3, [pc, #308]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	0f1b      	lsrs	r3, r3, #28
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	019a      	lsls	r2, r3, #6
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	4944      	ldr	r1, [pc, #272]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d82:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	493d      	ldr	r1, [pc, #244]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d022      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db0:	d11d      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	0e1b      	lsrs	r3, r3, #24
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	0f1b      	lsrs	r3, r3, #28
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	019a      	lsls	r2, r3, #6
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	4929      	ldr	r1, [pc, #164]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d028      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	0e1b      	lsrs	r3, r3, #24
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	019a      	lsls	r2, r3, #6
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	431a      	orrs	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	061b      	lsls	r3, r3, #24
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	071b      	lsls	r3, r3, #28
 8002e2e:	4917      	ldr	r1, [pc, #92]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4911      	ldr	r1, [pc, #68]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fe fb58 	bl	800150c <HAL_GetTick>
 8002e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e60:	f7fe fb54 	bl	800150c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e007      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e7e:	d1ef      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e040      	b.n	8002f24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe f9c4 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fbd6 	bl	8003680 <UART_SetConfig>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e022      	b.n	8002f24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fe2e 	bl	8003b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 feb5 	bl	8003c8c <UART_CheckIdleState>
 8002f22:	4603      	mov	r3, r0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b08b      	sub	sp, #44	; 0x2c
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d147      	bne.n	8002fd2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_Transmit_IT+0x22>
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e040      	b.n	8002fd4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2221      	movs	r2, #33	; 0x21
 8002f7a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f84:	d107      	bne.n	8002f96 <HAL_UART_Transmit_IT+0x6a>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <HAL_UART_Transmit_IT+0xb4>)
 8002f92:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f94:	e002      	b.n	8002f9c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_UART_Transmit_IT+0xb8>)
 8002f9a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	69f9      	ldr	r1, [r7, #28]
 8002fc0:	6a3a      	ldr	r2, [r7, #32]
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e6      	bne.n	8002f9c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	372c      	adds	r7, #44	; 0x2c
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	080041eb 	.word	0x080041eb
 8002fe4:	08004135 	.word	0x08004135

08002fe8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d132      	bne.n	8003066 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_UART_Receive_IT+0x24>
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e02b      	b.n	8003068 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d018      	beq.n	8003056 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	613b      	str	r3, [r7, #16]
   return(result);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	69f9      	ldr	r1, [r7, #28]
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e6      	bne.n	8003024 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	461a      	mov	r2, r3
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 ff29 	bl	8003eb4 <UART_Start_Receive_IT>
 8003062:	4603      	mov	r3, r0
 8003064:	e000      	b.n	8003068 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0ba      	sub	sp, #232	; 0xe8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003096:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800309a:	f640 030f 	movw	r3, #2063	; 0x80f
 800309e:	4013      	ands	r3, r2
 80030a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d115      	bne.n	80030d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00f      	beq.n	80030d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 82ac 	beq.w	8003626 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
      }
      return;
 80030d6:	e2a6      	b.n	8003626 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8117 	beq.w	8003310 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030f2:	4b85      	ldr	r3, [pc, #532]	; (8003308 <HAL_UART_IRQHandler+0x298>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 810a 	beq.w	8003310 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <HAL_UART_IRQHandler+0xbc>
 8003108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d011      	beq.n	800315c <HAL_UART_IRQHandler+0xec>
 8003138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2202      	movs	r2, #2
 800314a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003152:	f043 0204 	orr.w	r2, r3, #4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800315c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d011      	beq.n	800318c <HAL_UART_IRQHandler+0x11c>
 8003168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00b      	beq.n	800318c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2204      	movs	r2, #4
 800317a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003182:	f043 0202 	orr.w	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800318c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d017      	beq.n	80031c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2208      	movs	r2, #8
 80031b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031be:	f043 0208 	orr.w	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d012      	beq.n	80031fa <HAL_UART_IRQHandler+0x18a>
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8212 	beq.w	800362a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003234:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d005      	beq.n	8003252 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800324a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04f      	beq.n	80032f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fef4 	bl	8004040 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	d141      	bne.n	80032ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3308      	adds	r3, #8
 800326c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800327c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3308      	adds	r3, #8
 800328e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003292:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800329e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1d9      	bne.n	8003266 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d013      	beq.n	80032e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <HAL_UART_IRQHandler+0x29c>)
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe faad 	bl	8001826 <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d017      	beq.n	8003302 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e00f      	b.n	8003302 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9ac 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e00b      	b.n	8003302 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9a8 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e007      	b.n	8003302 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9a4 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003300:	e193      	b.n	800362a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003302:	bf00      	nop
    return;
 8003304:	e191      	b.n	800362a <HAL_UART_IRQHandler+0x5ba>
 8003306:	bf00      	nop
 8003308:	04000120 	.word	0x04000120
 800330c:	08004109 	.word	0x08004109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 814c 	bne.w	80035b2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8145 	beq.w	80035b2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 813e 	beq.w	80035b2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2210      	movs	r2, #16
 800333c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	f040 80b6 	bne.w	80034ba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800335a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8165 	beq.w	800362e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800336a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336e:	429a      	cmp	r2, r3
 8003370:	f080 815d 	bcs.w	800362e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800337a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003388:	f000 8086 	beq.w	8003498 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1da      	bne.n	800338c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3308      	adds	r3, #8
 80033dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800340c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e1      	bne.n	80033d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3308      	adds	r3, #8
 8003418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3308      	adds	r3, #8
 8003432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800343c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e3      	bne.n	8003412 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003468:	f023 0310 	bic.w	r3, r3, #16
 800346c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800347a:	65bb      	str	r3, [r7, #88]	; 0x58
 800347c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e4      	bne.n	8003458 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe f957 	bl	8001746 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8ce 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034b8:	e0b9      	b.n	800362e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80ab 	beq.w	8003632 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80034dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a6 	beq.w	8003632 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
 800350a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800350e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e4      	bne.n	80034e6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3308      	adds	r3, #8
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	623b      	str	r3, [r7, #32]
   return(result);
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003540:	633a      	str	r2, [r7, #48]	; 0x30
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e3      	bne.n	800351c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	60fb      	str	r3, [r7, #12]
   return(result);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0310 	bic.w	r3, r3, #16
 800357c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	69b9      	ldr	r1, [r7, #24]
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	617b      	str	r3, [r7, #20]
   return(result);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e4      	bne.n	8003568 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f852 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035b0:	e03f      	b.n	8003632 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <HAL_UART_IRQHandler+0x56c>
 80035be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f849 	bl	800366c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035da:	e02d      	b.n	8003638 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01c      	beq.n	8003636 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
    }
    return;
 8003604:	e017      	b.n	8003636 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <HAL_UART_IRQHandler+0x5c8>
 8003612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fe43 	bl	80042aa <UART_EndTransmit_IT>
    return;
 8003624:	e008      	b.n	8003638 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003626:	bf00      	nop
 8003628:	e006      	b.n	8003638 <HAL_UART_IRQHandler+0x5c8>
    return;
 800362a:	bf00      	nop
 800362c:	e004      	b.n	8003638 <HAL_UART_IRQHandler+0x5c8>
      return;
 800362e:	bf00      	nop
 8003630:	e002      	b.n	8003638 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003636:	bf00      	nop
  }

}
 8003638:	37e8      	adds	r7, #232	; 0xe8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop

08003640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4ba6      	ldr	r3, [pc, #664]	; (8003944 <UART_SetConfig+0x2c4>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	6979      	ldr	r1, [r7, #20]
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a94      	ldr	r2, [pc, #592]	; (8003948 <UART_SetConfig+0x2c8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d120      	bne.n	800373e <UART_SetConfig+0xbe>
 80036fc:	4b93      	ldr	r3, [pc, #588]	; (800394c <UART_SetConfig+0x2cc>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d816      	bhi.n	8003738 <UART_SetConfig+0xb8>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <UART_SetConfig+0x90>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003721 	.word	0x08003721
 8003714:	0800372d 	.word	0x0800372d
 8003718:	08003727 	.word	0x08003727
 800371c:	08003733 	.word	0x08003733
 8003720:	2301      	movs	r3, #1
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e150      	b.n	80039c8 <UART_SetConfig+0x348>
 8003726:	2302      	movs	r3, #2
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e14d      	b.n	80039c8 <UART_SetConfig+0x348>
 800372c:	2304      	movs	r3, #4
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e14a      	b.n	80039c8 <UART_SetConfig+0x348>
 8003732:	2308      	movs	r3, #8
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e147      	b.n	80039c8 <UART_SetConfig+0x348>
 8003738:	2310      	movs	r3, #16
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e144      	b.n	80039c8 <UART_SetConfig+0x348>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a83      	ldr	r2, [pc, #524]	; (8003950 <UART_SetConfig+0x2d0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d132      	bne.n	80037ae <UART_SetConfig+0x12e>
 8003748:	4b80      	ldr	r3, [pc, #512]	; (800394c <UART_SetConfig+0x2cc>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d828      	bhi.n	80037a8 <UART_SetConfig+0x128>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <UART_SetConfig+0xdc>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	08003791 	.word	0x08003791
 8003760:	080037a9 	.word	0x080037a9
 8003764:	080037a9 	.word	0x080037a9
 8003768:	080037a9 	.word	0x080037a9
 800376c:	0800379d 	.word	0x0800379d
 8003770:	080037a9 	.word	0x080037a9
 8003774:	080037a9 	.word	0x080037a9
 8003778:	080037a9 	.word	0x080037a9
 800377c:	08003797 	.word	0x08003797
 8003780:	080037a9 	.word	0x080037a9
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080037a9 	.word	0x080037a9
 800378c:	080037a3 	.word	0x080037a3
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e118      	b.n	80039c8 <UART_SetConfig+0x348>
 8003796:	2302      	movs	r3, #2
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e115      	b.n	80039c8 <UART_SetConfig+0x348>
 800379c:	2304      	movs	r3, #4
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e112      	b.n	80039c8 <UART_SetConfig+0x348>
 80037a2:	2308      	movs	r3, #8
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e10f      	b.n	80039c8 <UART_SetConfig+0x348>
 80037a8:	2310      	movs	r3, #16
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e10c      	b.n	80039c8 <UART_SetConfig+0x348>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a68      	ldr	r2, [pc, #416]	; (8003954 <UART_SetConfig+0x2d4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d120      	bne.n	80037fa <UART_SetConfig+0x17a>
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <UART_SetConfig+0x2cc>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037c2:	2b30      	cmp	r3, #48	; 0x30
 80037c4:	d013      	beq.n	80037ee <UART_SetConfig+0x16e>
 80037c6:	2b30      	cmp	r3, #48	; 0x30
 80037c8:	d814      	bhi.n	80037f4 <UART_SetConfig+0x174>
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d009      	beq.n	80037e2 <UART_SetConfig+0x162>
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d810      	bhi.n	80037f4 <UART_SetConfig+0x174>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <UART_SetConfig+0x15c>
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d006      	beq.n	80037e8 <UART_SetConfig+0x168>
 80037da:	e00b      	b.n	80037f4 <UART_SetConfig+0x174>
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e0f2      	b.n	80039c8 <UART_SetConfig+0x348>
 80037e2:	2302      	movs	r3, #2
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e0ef      	b.n	80039c8 <UART_SetConfig+0x348>
 80037e8:	2304      	movs	r3, #4
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e0ec      	b.n	80039c8 <UART_SetConfig+0x348>
 80037ee:	2308      	movs	r3, #8
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	e0e9      	b.n	80039c8 <UART_SetConfig+0x348>
 80037f4:	2310      	movs	r3, #16
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e0e6      	b.n	80039c8 <UART_SetConfig+0x348>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a56      	ldr	r2, [pc, #344]	; (8003958 <UART_SetConfig+0x2d8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d120      	bne.n	8003846 <UART_SetConfig+0x1c6>
 8003804:	4b51      	ldr	r3, [pc, #324]	; (800394c <UART_SetConfig+0x2cc>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800380e:	2bc0      	cmp	r3, #192	; 0xc0
 8003810:	d013      	beq.n	800383a <UART_SetConfig+0x1ba>
 8003812:	2bc0      	cmp	r3, #192	; 0xc0
 8003814:	d814      	bhi.n	8003840 <UART_SetConfig+0x1c0>
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d009      	beq.n	800382e <UART_SetConfig+0x1ae>
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d810      	bhi.n	8003840 <UART_SetConfig+0x1c0>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <UART_SetConfig+0x1a8>
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d006      	beq.n	8003834 <UART_SetConfig+0x1b4>
 8003826:	e00b      	b.n	8003840 <UART_SetConfig+0x1c0>
 8003828:	2300      	movs	r3, #0
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e0cc      	b.n	80039c8 <UART_SetConfig+0x348>
 800382e:	2302      	movs	r3, #2
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e0c9      	b.n	80039c8 <UART_SetConfig+0x348>
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e0c6      	b.n	80039c8 <UART_SetConfig+0x348>
 800383a:	2308      	movs	r3, #8
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e0c3      	b.n	80039c8 <UART_SetConfig+0x348>
 8003840:	2310      	movs	r3, #16
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e0c0      	b.n	80039c8 <UART_SetConfig+0x348>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a44      	ldr	r2, [pc, #272]	; (800395c <UART_SetConfig+0x2dc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d125      	bne.n	800389c <UART_SetConfig+0x21c>
 8003850:	4b3e      	ldr	r3, [pc, #248]	; (800394c <UART_SetConfig+0x2cc>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385e:	d017      	beq.n	8003890 <UART_SetConfig+0x210>
 8003860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003864:	d817      	bhi.n	8003896 <UART_SetConfig+0x216>
 8003866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386a:	d00b      	beq.n	8003884 <UART_SetConfig+0x204>
 800386c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003870:	d811      	bhi.n	8003896 <UART_SetConfig+0x216>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <UART_SetConfig+0x1fe>
 8003876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387a:	d006      	beq.n	800388a <UART_SetConfig+0x20a>
 800387c:	e00b      	b.n	8003896 <UART_SetConfig+0x216>
 800387e:	2300      	movs	r3, #0
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e0a1      	b.n	80039c8 <UART_SetConfig+0x348>
 8003884:	2302      	movs	r3, #2
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e09e      	b.n	80039c8 <UART_SetConfig+0x348>
 800388a:	2304      	movs	r3, #4
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e09b      	b.n	80039c8 <UART_SetConfig+0x348>
 8003890:	2308      	movs	r3, #8
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e098      	b.n	80039c8 <UART_SetConfig+0x348>
 8003896:	2310      	movs	r3, #16
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e095      	b.n	80039c8 <UART_SetConfig+0x348>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2f      	ldr	r2, [pc, #188]	; (8003960 <UART_SetConfig+0x2e0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d125      	bne.n	80038f2 <UART_SetConfig+0x272>
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <UART_SetConfig+0x2cc>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038b4:	d017      	beq.n	80038e6 <UART_SetConfig+0x266>
 80038b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ba:	d817      	bhi.n	80038ec <UART_SetConfig+0x26c>
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c0:	d00b      	beq.n	80038da <UART_SetConfig+0x25a>
 80038c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c6:	d811      	bhi.n	80038ec <UART_SetConfig+0x26c>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <UART_SetConfig+0x254>
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d0:	d006      	beq.n	80038e0 <UART_SetConfig+0x260>
 80038d2:	e00b      	b.n	80038ec <UART_SetConfig+0x26c>
 80038d4:	2301      	movs	r3, #1
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e076      	b.n	80039c8 <UART_SetConfig+0x348>
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e073      	b.n	80039c8 <UART_SetConfig+0x348>
 80038e0:	2304      	movs	r3, #4
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e070      	b.n	80039c8 <UART_SetConfig+0x348>
 80038e6:	2308      	movs	r3, #8
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e06d      	b.n	80039c8 <UART_SetConfig+0x348>
 80038ec:	2310      	movs	r3, #16
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e06a      	b.n	80039c8 <UART_SetConfig+0x348>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <UART_SetConfig+0x2e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d138      	bne.n	800396e <UART_SetConfig+0x2ee>
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <UART_SetConfig+0x2cc>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390a:	d017      	beq.n	800393c <UART_SetConfig+0x2bc>
 800390c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003910:	d82a      	bhi.n	8003968 <UART_SetConfig+0x2e8>
 8003912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003916:	d00b      	beq.n	8003930 <UART_SetConfig+0x2b0>
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391c:	d824      	bhi.n	8003968 <UART_SetConfig+0x2e8>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <UART_SetConfig+0x2aa>
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003926:	d006      	beq.n	8003936 <UART_SetConfig+0x2b6>
 8003928:	e01e      	b.n	8003968 <UART_SetConfig+0x2e8>
 800392a:	2300      	movs	r3, #0
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e04b      	b.n	80039c8 <UART_SetConfig+0x348>
 8003930:	2302      	movs	r3, #2
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e048      	b.n	80039c8 <UART_SetConfig+0x348>
 8003936:	2304      	movs	r3, #4
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e045      	b.n	80039c8 <UART_SetConfig+0x348>
 800393c:	2308      	movs	r3, #8
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e042      	b.n	80039c8 <UART_SetConfig+0x348>
 8003942:	bf00      	nop
 8003944:	efff69f3 	.word	0xefff69f3
 8003948:	40011000 	.word	0x40011000
 800394c:	40023800 	.word	0x40023800
 8003950:	40004400 	.word	0x40004400
 8003954:	40004800 	.word	0x40004800
 8003958:	40004c00 	.word	0x40004c00
 800395c:	40005000 	.word	0x40005000
 8003960:	40011400 	.word	0x40011400
 8003964:	40007800 	.word	0x40007800
 8003968:	2310      	movs	r3, #16
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e02c      	b.n	80039c8 <UART_SetConfig+0x348>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a72      	ldr	r2, [pc, #456]	; (8003b3c <UART_SetConfig+0x4bc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d125      	bne.n	80039c4 <UART_SetConfig+0x344>
 8003978:	4b71      	ldr	r3, [pc, #452]	; (8003b40 <UART_SetConfig+0x4c0>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003982:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003986:	d017      	beq.n	80039b8 <UART_SetConfig+0x338>
 8003988:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800398c:	d817      	bhi.n	80039be <UART_SetConfig+0x33e>
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003992:	d00b      	beq.n	80039ac <UART_SetConfig+0x32c>
 8003994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003998:	d811      	bhi.n	80039be <UART_SetConfig+0x33e>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <UART_SetConfig+0x326>
 800399e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a2:	d006      	beq.n	80039b2 <UART_SetConfig+0x332>
 80039a4:	e00b      	b.n	80039be <UART_SetConfig+0x33e>
 80039a6:	2300      	movs	r3, #0
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e00d      	b.n	80039c8 <UART_SetConfig+0x348>
 80039ac:	2302      	movs	r3, #2
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e00a      	b.n	80039c8 <UART_SetConfig+0x348>
 80039b2:	2304      	movs	r3, #4
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e007      	b.n	80039c8 <UART_SetConfig+0x348>
 80039b8:	2308      	movs	r3, #8
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e004      	b.n	80039c8 <UART_SetConfig+0x348>
 80039be:	2310      	movs	r3, #16
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e001      	b.n	80039c8 <UART_SetConfig+0x348>
 80039c4:	2310      	movs	r3, #16
 80039c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d0:	d15b      	bne.n	8003a8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d828      	bhi.n	8003a2a <UART_SetConfig+0x3aa>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x360>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a1b 	.word	0x08003a1b
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a2b 	.word	0x08003a2b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe fdf4 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003a08:	61b8      	str	r0, [r7, #24]
        break;
 8003a0a:	e013      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7fe fe04 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003a10:	61b8      	str	r0, [r7, #24]
        break;
 8003a12:	e00f      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <UART_SetConfig+0x4c4>)
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e00c      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7fe fcd7 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8003a1e:	61b8      	str	r0, [r7, #24]
        break;
 8003a20:	e008      	b.n	8003a34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	61bb      	str	r3, [r7, #24]
        break;
 8003a28:	e004      	b.n	8003a34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	77bb      	strb	r3, [r7, #30]
        break;
 8003a32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d074      	beq.n	8003b24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	005a      	lsls	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0f      	cmp	r3, #15
 8003a54:	d916      	bls.n	8003a84 <UART_SetConfig+0x404>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d212      	bcs.n	8003a84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f023 030f 	bic.w	r3, r3, #15
 8003a66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	89fa      	ldrh	r2, [r7, #14]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	e04f      	b.n	8003b24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	77bb      	strb	r3, [r7, #30]
 8003a88:	e04c      	b.n	8003b24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a8a:	7ffb      	ldrb	r3, [r7, #31]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d828      	bhi.n	8003ae2 <UART_SetConfig+0x462>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0x418>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003ac5 	.word	0x08003ac5
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003ae3 	.word	0x08003ae3
 8003aa8:	08003ad3 	.word	0x08003ad3
 8003aac:	08003ae3 	.word	0x08003ae3
 8003ab0:	08003ae3 	.word	0x08003ae3
 8003ab4:	08003ae3 	.word	0x08003ae3
 8003ab8:	08003adb 	.word	0x08003adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7fe fd98 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	61b8      	str	r0, [r7, #24]
        break;
 8003ac2:	e013      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe fda8 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	61b8      	str	r0, [r7, #24]
        break;
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <UART_SetConfig+0x4c4>)
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e00c      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad2:	f7fe fc7b 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 8003ad6:	61b8      	str	r0, [r7, #24]
        break;
 8003ad8:	e008      	b.n	8003aec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ade:	61bb      	str	r3, [r7, #24]
        break;
 8003ae0:	e004      	b.n	8003aec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aea:	bf00      	nop
    }

    if (pclk != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085a      	lsrs	r2, r3, #1
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	d909      	bls.n	8003b20 <UART_SetConfig+0x4a0>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b12:	d205      	bcs.n	8003b20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	e001      	b.n	8003b24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40007c00 	.word	0x40007c00
 8003b40:	40023800 	.word	0x40023800
 8003b44:	00f42400 	.word	0x00f42400

08003b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c46:	d10a      	bne.n	8003c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c9c:	f7fd fc36 	bl	800150c <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d10e      	bne.n	8003cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f831 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e027      	b.n	8003d1e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d10e      	bne.n	8003cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f81b 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e011      	b.n	8003d1e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b09c      	sub	sp, #112	; 0x70
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	e0a7      	b.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	f000 80a3 	beq.w	8003e88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fd fbe3 	bl	800150c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d13f      	bne.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e6      	bne.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	663b      	str	r3, [r7, #96]	; 0x60
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003daa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e068      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d050      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df4:	d148      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dfe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e20:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e6      	bne.n	8003e00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	613b      	str	r3, [r7, #16]
   return(result);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e52:	623a      	str	r2, [r7, #32]
 8003e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	69f9      	ldr	r1, [r7, #28]
 8003e58:	6a3a      	ldr	r2, [r7, #32]
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e5      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e010      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	f43f af48 	beq.w	8003d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3770      	adds	r7, #112	; 0x70
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b097      	sub	sp, #92	; 0x5c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	d10e      	bne.n	8003f06 <UART_Start_Receive_IT+0x52>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <UART_Start_Receive_IT+0x48>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003efa:	e02d      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	22ff      	movs	r2, #255	; 0xff
 8003f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f04:	e028      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <UART_Start_Receive_IT+0x76>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <UART_Start_Receive_IT+0x6c>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f1e:	e01b      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	227f      	movs	r2, #127	; 0x7f
 8003f24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f28:	e016      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f32:	d10d      	bne.n	8003f50 <UART_Start_Receive_IT+0x9c>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <UART_Start_Receive_IT+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	227f      	movs	r2, #127	; 0x7f
 8003f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f44:	e008      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	223f      	movs	r2, #63	; 0x3f
 8003f4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f4e:	e003      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2222      	movs	r2, #34	; 0x22
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f88:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d107      	bne.n	8003fb6 <UART_Start_Receive_IT+0x102>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a21      	ldr	r2, [pc, #132]	; (8004038 <UART_Start_Receive_IT+0x184>)
 8003fb2:	669a      	str	r2, [r3, #104]	; 0x68
 8003fb4:	e002      	b.n	8003fbc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a20      	ldr	r2, [pc, #128]	; (800403c <UART_Start_Receive_IT+0x188>)
 8003fba:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e6      	bne.n	8003fc4 <UART_Start_Receive_IT+0x110>
 8003ff6:	e018      	b.n	800402a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	613b      	str	r3, [r7, #16]
   return(result);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f043 0320 	orr.w	r3, r3, #32
 800400c:	653b      	str	r3, [r7, #80]	; 0x50
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004016:	623b      	str	r3, [r7, #32]
 8004018:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	69f9      	ldr	r1, [r7, #28]
 800401c:	6a3a      	ldr	r2, [r7, #32]
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	61bb      	str	r3, [r7, #24]
   return(result);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e6      	bne.n	8003ff8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	375c      	adds	r7, #92	; 0x5c
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	08004465 	.word	0x08004465
 800403c:	080042ff 	.word	0x080042ff

08004040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b095      	sub	sp, #84	; 0x54
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004066:	643b      	str	r3, [r7, #64]	; 0x40
 8004068:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800406c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	61fb      	str	r3, [r7, #28]
   return(result);
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	64bb      	str	r3, [r7, #72]	; 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3308      	adds	r3, #8
 8004098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d118      	bne.n	80040e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f023 0310 	bic.w	r3, r3, #16
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	613b      	str	r3, [r7, #16]
   return(result);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040fc:	bf00      	nop
 80040fe:	3754      	adds	r7, #84	; 0x54
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fa8a 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b08f      	sub	sp, #60	; 0x3c
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004140:	2b21      	cmp	r3, #33	; 0x21
 8004142:	d14c      	bne.n	80041de <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d132      	bne.n	80041b6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	61fb      	str	r3, [r7, #28]
   return(result);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004170:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e6      	bne.n	8004150 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	633b      	str	r3, [r7, #48]	; 0x30
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	613b      	str	r3, [r7, #16]
   return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e6      	bne.n	8004182 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041b4:	e013      	b.n	80041de <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041de:	bf00      	nop
 80041e0:	373c      	adds	r7, #60	; 0x3c
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b091      	sub	sp, #68	; 0x44
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f6:	2b21      	cmp	r3, #33	; 0x21
 80041f8:	d151      	bne.n	800429e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d132      	bne.n	800426c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	623b      	str	r3, [r7, #32]
   return(result);
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800422a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e6      	bne.n	8004206 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	60fb      	str	r3, [r7, #12]
   return(result);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	69b9      	ldr	r1, [r7, #24]
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	617b      	str	r3, [r7, #20]
   return(result);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e6      	bne.n	8004238 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800426a:	e018      	b.n	800429e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004270:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800429e:	bf00      	nop
 80042a0:	3744      	adds	r7, #68	; 0x44
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b088      	sub	sp, #32
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6979      	ldr	r1, [r7, #20]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	613b      	str	r3, [r7, #16]
   return(result);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e6      	bne.n	80042b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7fc ff49 	bl	8001188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f6:	bf00      	nop
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b096      	sub	sp, #88	; 0x58
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800430c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004316:	2b22      	cmp	r3, #34	; 0x22
 8004318:	f040 8098 	bne.w	800444c <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004326:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800432a:	b2d9      	uxtb	r1, r3
 800432c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004330:	b2da      	uxtb	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	400a      	ands	r2, r1
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d17b      	bne.n	800445c <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004378:	653b      	str	r3, [r7, #80]	; 0x50
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004382:	647b      	str	r3, [r7, #68]	; 0x44
 8004384:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e6      	bne.n	8004364 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	623b      	str	r3, [r7, #32]
   return(result);
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043b6:	633a      	str	r2, [r7, #48]	; 0x30
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d12e      	bne.n	8004444 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0310 	bic.w	r3, r3, #16
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	69b9      	ldr	r1, [r7, #24]
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	617b      	str	r3, [r7, #20]
   return(result);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e6      	bne.n	80043ec <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d103      	bne.n	8004434 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2210      	movs	r2, #16
 8004432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff f909 	bl	8003654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004442:	e00b      	b.n	800445c <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fc fe75 	bl	8001134 <HAL_UART_RxCpltCallback>
}
 800444a:	e007      	b.n	800445c <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0208 	orr.w	r2, r2, #8
 800445a:	619a      	str	r2, [r3, #24]
}
 800445c:	bf00      	nop
 800445e:	3758      	adds	r7, #88	; 0x58
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b096      	sub	sp, #88	; 0x58
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447c:	2b22      	cmp	r3, #34	; 0x22
 800447e:	f040 8098 	bne.w	80045b2 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004492:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004496:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800449a:	4013      	ands	r3, r2
 800449c:	b29a      	uxth	r2, r3
 800449e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d17b      	bne.n	80045c2 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	61fb      	str	r3, [r7, #28]
   return(result);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004548:	2b01      	cmp	r3, #1
 800454a:	d12e      	bne.n	80045aa <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	647b      	str	r3, [r7, #68]	; 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	613b      	str	r3, [r7, #16]
   return(result);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e6      	bne.n	8004552 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b10      	cmp	r3, #16
 8004590:	d103      	bne.n	800459a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2210      	movs	r2, #16
 8004598:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff f856 	bl	8003654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045a8:	e00b      	b.n	80045c2 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc fdc2 	bl	8001134 <HAL_UART_RxCpltCallback>
}
 80045b0:	e007      	b.n	80045c2 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0208 	orr.w	r2, r2, #8
 80045c0:	619a      	str	r2, [r3, #24]
}
 80045c2:	bf00      	nop
 80045c4:	3758      	adds	r7, #88	; 0x58
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <atoi>:
 80045ca:	220a      	movs	r2, #10
 80045cc:	2100      	movs	r1, #0
 80045ce:	f000 b8c3 	b.w	8004758 <strtol>
	...

080045d4 <__errno>:
 80045d4:	4b01      	ldr	r3, [pc, #4]	; (80045dc <__errno+0x8>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2000000c 	.word	0x2000000c

080045e0 <__libc_init_array>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4d0d      	ldr	r5, [pc, #52]	; (8004618 <__libc_init_array+0x38>)
 80045e4:	4c0d      	ldr	r4, [pc, #52]	; (800461c <__libc_init_array+0x3c>)
 80045e6:	1b64      	subs	r4, r4, r5
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	2600      	movs	r6, #0
 80045ec:	42a6      	cmp	r6, r4
 80045ee:	d109      	bne.n	8004604 <__libc_init_array+0x24>
 80045f0:	4d0b      	ldr	r5, [pc, #44]	; (8004620 <__libc_init_array+0x40>)
 80045f2:	4c0c      	ldr	r4, [pc, #48]	; (8004624 <__libc_init_array+0x44>)
 80045f4:	f000 fd28 	bl	8005048 <_init>
 80045f8:	1b64      	subs	r4, r4, r5
 80045fa:	10a4      	asrs	r4, r4, #2
 80045fc:	2600      	movs	r6, #0
 80045fe:	42a6      	cmp	r6, r4
 8004600:	d105      	bne.n	800460e <__libc_init_array+0x2e>
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	f855 3b04 	ldr.w	r3, [r5], #4
 8004608:	4798      	blx	r3
 800460a:	3601      	adds	r6, #1
 800460c:	e7ee      	b.n	80045ec <__libc_init_array+0xc>
 800460e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004612:	4798      	blx	r3
 8004614:	3601      	adds	r6, #1
 8004616:	e7f2      	b.n	80045fe <__libc_init_array+0x1e>
 8004618:	08005224 	.word	0x08005224
 800461c:	08005224 	.word	0x08005224
 8004620:	08005224 	.word	0x08005224
 8004624:	08005228 	.word	0x08005228

08004628 <memset>:
 8004628:	4402      	add	r2, r0
 800462a:	4603      	mov	r3, r0
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <memset+0xa>
 8004630:	4770      	bx	lr
 8004632:	f803 1b01 	strb.w	r1, [r3], #1
 8004636:	e7f9      	b.n	800462c <memset+0x4>

08004638 <strchr>:
 8004638:	b2c9      	uxtb	r1, r1
 800463a:	4603      	mov	r3, r0
 800463c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004640:	b11a      	cbz	r2, 800464a <strchr+0x12>
 8004642:	428a      	cmp	r2, r1
 8004644:	d1f9      	bne.n	800463a <strchr+0x2>
 8004646:	4618      	mov	r0, r3
 8004648:	4770      	bx	lr
 800464a:	2900      	cmp	r1, #0
 800464c:	bf18      	it	ne
 800464e:	2300      	movne	r3, #0
 8004650:	e7f9      	b.n	8004646 <strchr+0xe>
	...

08004654 <_strtol_l.constprop.0>:
 8004654:	2b01      	cmp	r3, #1
 8004656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800465a:	d001      	beq.n	8004660 <_strtol_l.constprop.0+0xc>
 800465c:	2b24      	cmp	r3, #36	; 0x24
 800465e:	d906      	bls.n	800466e <_strtol_l.constprop.0+0x1a>
 8004660:	f7ff ffb8 	bl	80045d4 <__errno>
 8004664:	2316      	movs	r3, #22
 8004666:	6003      	str	r3, [r0, #0]
 8004668:	2000      	movs	r0, #0
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004754 <_strtol_l.constprop.0+0x100>
 8004672:	460d      	mov	r5, r1
 8004674:	462e      	mov	r6, r5
 8004676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800467a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800467e:	f017 0708 	ands.w	r7, r7, #8
 8004682:	d1f7      	bne.n	8004674 <_strtol_l.constprop.0+0x20>
 8004684:	2c2d      	cmp	r4, #45	; 0x2d
 8004686:	d132      	bne.n	80046ee <_strtol_l.constprop.0+0x9a>
 8004688:	782c      	ldrb	r4, [r5, #0]
 800468a:	2701      	movs	r7, #1
 800468c:	1cb5      	adds	r5, r6, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d05b      	beq.n	800474a <_strtol_l.constprop.0+0xf6>
 8004692:	2b10      	cmp	r3, #16
 8004694:	d109      	bne.n	80046aa <_strtol_l.constprop.0+0x56>
 8004696:	2c30      	cmp	r4, #48	; 0x30
 8004698:	d107      	bne.n	80046aa <_strtol_l.constprop.0+0x56>
 800469a:	782c      	ldrb	r4, [r5, #0]
 800469c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80046a0:	2c58      	cmp	r4, #88	; 0x58
 80046a2:	d14d      	bne.n	8004740 <_strtol_l.constprop.0+0xec>
 80046a4:	786c      	ldrb	r4, [r5, #1]
 80046a6:	2310      	movs	r3, #16
 80046a8:	3502      	adds	r5, #2
 80046aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80046ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80046b2:	f04f 0c00 	mov.w	ip, #0
 80046b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80046ba:	4666      	mov	r6, ip
 80046bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80046c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80046c4:	f1be 0f09 	cmp.w	lr, #9
 80046c8:	d816      	bhi.n	80046f8 <_strtol_l.constprop.0+0xa4>
 80046ca:	4674      	mov	r4, lr
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	dd24      	ble.n	800471a <_strtol_l.constprop.0+0xc6>
 80046d0:	f1bc 0f00 	cmp.w	ip, #0
 80046d4:	db1e      	blt.n	8004714 <_strtol_l.constprop.0+0xc0>
 80046d6:	45b1      	cmp	r9, r6
 80046d8:	d31c      	bcc.n	8004714 <_strtol_l.constprop.0+0xc0>
 80046da:	d101      	bne.n	80046e0 <_strtol_l.constprop.0+0x8c>
 80046dc:	45a2      	cmp	sl, r4
 80046de:	db19      	blt.n	8004714 <_strtol_l.constprop.0+0xc0>
 80046e0:	fb06 4603 	mla	r6, r6, r3, r4
 80046e4:	f04f 0c01 	mov.w	ip, #1
 80046e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046ec:	e7e8      	b.n	80046c0 <_strtol_l.constprop.0+0x6c>
 80046ee:	2c2b      	cmp	r4, #43	; 0x2b
 80046f0:	bf04      	itt	eq
 80046f2:	782c      	ldrbeq	r4, [r5, #0]
 80046f4:	1cb5      	addeq	r5, r6, #2
 80046f6:	e7ca      	b.n	800468e <_strtol_l.constprop.0+0x3a>
 80046f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80046fc:	f1be 0f19 	cmp.w	lr, #25
 8004700:	d801      	bhi.n	8004706 <_strtol_l.constprop.0+0xb2>
 8004702:	3c37      	subs	r4, #55	; 0x37
 8004704:	e7e2      	b.n	80046cc <_strtol_l.constprop.0+0x78>
 8004706:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800470a:	f1be 0f19 	cmp.w	lr, #25
 800470e:	d804      	bhi.n	800471a <_strtol_l.constprop.0+0xc6>
 8004710:	3c57      	subs	r4, #87	; 0x57
 8004712:	e7db      	b.n	80046cc <_strtol_l.constprop.0+0x78>
 8004714:	f04f 3cff 	mov.w	ip, #4294967295
 8004718:	e7e6      	b.n	80046e8 <_strtol_l.constprop.0+0x94>
 800471a:	f1bc 0f00 	cmp.w	ip, #0
 800471e:	da05      	bge.n	800472c <_strtol_l.constprop.0+0xd8>
 8004720:	2322      	movs	r3, #34	; 0x22
 8004722:	6003      	str	r3, [r0, #0]
 8004724:	4646      	mov	r6, r8
 8004726:	b942      	cbnz	r2, 800473a <_strtol_l.constprop.0+0xe6>
 8004728:	4630      	mov	r0, r6
 800472a:	e79e      	b.n	800466a <_strtol_l.constprop.0+0x16>
 800472c:	b107      	cbz	r7, 8004730 <_strtol_l.constprop.0+0xdc>
 800472e:	4276      	negs	r6, r6
 8004730:	2a00      	cmp	r2, #0
 8004732:	d0f9      	beq.n	8004728 <_strtol_l.constprop.0+0xd4>
 8004734:	f1bc 0f00 	cmp.w	ip, #0
 8004738:	d000      	beq.n	800473c <_strtol_l.constprop.0+0xe8>
 800473a:	1e69      	subs	r1, r5, #1
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	e7f3      	b.n	8004728 <_strtol_l.constprop.0+0xd4>
 8004740:	2430      	movs	r4, #48	; 0x30
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1b1      	bne.n	80046aa <_strtol_l.constprop.0+0x56>
 8004746:	2308      	movs	r3, #8
 8004748:	e7af      	b.n	80046aa <_strtol_l.constprop.0+0x56>
 800474a:	2c30      	cmp	r4, #48	; 0x30
 800474c:	d0a5      	beq.n	800469a <_strtol_l.constprop.0+0x46>
 800474e:	230a      	movs	r3, #10
 8004750:	e7ab      	b.n	80046aa <_strtol_l.constprop.0+0x56>
 8004752:	bf00      	nop
 8004754:	080050e9 	.word	0x080050e9

08004758 <strtol>:
 8004758:	4613      	mov	r3, r2
 800475a:	460a      	mov	r2, r1
 800475c:	4601      	mov	r1, r0
 800475e:	4802      	ldr	r0, [pc, #8]	; (8004768 <strtol+0x10>)
 8004760:	6800      	ldr	r0, [r0, #0]
 8004762:	f7ff bf77 	b.w	8004654 <_strtol_l.constprop.0>
 8004766:	bf00      	nop
 8004768:	2000000c 	.word	0x2000000c

0800476c <_vsiprintf_r>:
 800476c:	b500      	push	{lr}
 800476e:	b09b      	sub	sp, #108	; 0x6c
 8004770:	9100      	str	r1, [sp, #0]
 8004772:	9104      	str	r1, [sp, #16]
 8004774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004778:	9105      	str	r1, [sp, #20]
 800477a:	9102      	str	r1, [sp, #8]
 800477c:	4905      	ldr	r1, [pc, #20]	; (8004794 <_vsiprintf_r+0x28>)
 800477e:	9103      	str	r1, [sp, #12]
 8004780:	4669      	mov	r1, sp
 8004782:	f000 f86f 	bl	8004864 <_svfiprintf_r>
 8004786:	9b00      	ldr	r3, [sp, #0]
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	b01b      	add	sp, #108	; 0x6c
 800478e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004792:	bf00      	nop
 8004794:	ffff0208 	.word	0xffff0208

08004798 <vsiprintf>:
 8004798:	4613      	mov	r3, r2
 800479a:	460a      	mov	r2, r1
 800479c:	4601      	mov	r1, r0
 800479e:	4802      	ldr	r0, [pc, #8]	; (80047a8 <vsiprintf+0x10>)
 80047a0:	6800      	ldr	r0, [r0, #0]
 80047a2:	f7ff bfe3 	b.w	800476c <_vsiprintf_r>
 80047a6:	bf00      	nop
 80047a8:	2000000c 	.word	0x2000000c

080047ac <__ssputs_r>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	688e      	ldr	r6, [r1, #8]
 80047b2:	429e      	cmp	r6, r3
 80047b4:	4682      	mov	sl, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	4690      	mov	r8, r2
 80047ba:	461f      	mov	r7, r3
 80047bc:	d838      	bhi.n	8004830 <__ssputs_r+0x84>
 80047be:	898a      	ldrh	r2, [r1, #12]
 80047c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047c4:	d032      	beq.n	800482c <__ssputs_r+0x80>
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	6909      	ldr	r1, [r1, #16]
 80047ca:	eba5 0901 	sub.w	r9, r5, r1
 80047ce:	6965      	ldr	r5, [r4, #20]
 80047d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d8:	3301      	adds	r3, #1
 80047da:	444b      	add	r3, r9
 80047dc:	106d      	asrs	r5, r5, #1
 80047de:	429d      	cmp	r5, r3
 80047e0:	bf38      	it	cc
 80047e2:	461d      	movcc	r5, r3
 80047e4:	0553      	lsls	r3, r2, #21
 80047e6:	d531      	bpl.n	800484c <__ssputs_r+0xa0>
 80047e8:	4629      	mov	r1, r5
 80047ea:	f000 fb63 	bl	8004eb4 <_malloc_r>
 80047ee:	4606      	mov	r6, r0
 80047f0:	b950      	cbnz	r0, 8004808 <__ssputs_r+0x5c>
 80047f2:	230c      	movs	r3, #12
 80047f4:	f8ca 3000 	str.w	r3, [sl]
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	6921      	ldr	r1, [r4, #16]
 800480a:	464a      	mov	r2, r9
 800480c:	f000 fabe 	bl	8004d8c <memcpy>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	6126      	str	r6, [r4, #16]
 800481e:	6165      	str	r5, [r4, #20]
 8004820:	444e      	add	r6, r9
 8004822:	eba5 0509 	sub.w	r5, r5, r9
 8004826:	6026      	str	r6, [r4, #0]
 8004828:	60a5      	str	r5, [r4, #8]
 800482a:	463e      	mov	r6, r7
 800482c:	42be      	cmp	r6, r7
 800482e:	d900      	bls.n	8004832 <__ssputs_r+0x86>
 8004830:	463e      	mov	r6, r7
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	4632      	mov	r2, r6
 8004836:	4641      	mov	r1, r8
 8004838:	f000 fab6 	bl	8004da8 <memmove>
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	1b9b      	subs	r3, r3, r6
 8004840:	60a3      	str	r3, [r4, #8]
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	4433      	add	r3, r6
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	2000      	movs	r0, #0
 800484a:	e7db      	b.n	8004804 <__ssputs_r+0x58>
 800484c:	462a      	mov	r2, r5
 800484e:	f000 fba5 	bl	8004f9c <_realloc_r>
 8004852:	4606      	mov	r6, r0
 8004854:	2800      	cmp	r0, #0
 8004856:	d1e1      	bne.n	800481c <__ssputs_r+0x70>
 8004858:	6921      	ldr	r1, [r4, #16]
 800485a:	4650      	mov	r0, sl
 800485c:	f000 fabe 	bl	8004ddc <_free_r>
 8004860:	e7c7      	b.n	80047f2 <__ssputs_r+0x46>
	...

08004864 <_svfiprintf_r>:
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	4698      	mov	r8, r3
 800486a:	898b      	ldrh	r3, [r1, #12]
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	b09d      	sub	sp, #116	; 0x74
 8004870:	4607      	mov	r7, r0
 8004872:	460d      	mov	r5, r1
 8004874:	4614      	mov	r4, r2
 8004876:	d50e      	bpl.n	8004896 <_svfiprintf_r+0x32>
 8004878:	690b      	ldr	r3, [r1, #16]
 800487a:	b963      	cbnz	r3, 8004896 <_svfiprintf_r+0x32>
 800487c:	2140      	movs	r1, #64	; 0x40
 800487e:	f000 fb19 	bl	8004eb4 <_malloc_r>
 8004882:	6028      	str	r0, [r5, #0]
 8004884:	6128      	str	r0, [r5, #16]
 8004886:	b920      	cbnz	r0, 8004892 <_svfiprintf_r+0x2e>
 8004888:	230c      	movs	r3, #12
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	e0d1      	b.n	8004a36 <_svfiprintf_r+0x1d2>
 8004892:	2340      	movs	r3, #64	; 0x40
 8004894:	616b      	str	r3, [r5, #20]
 8004896:	2300      	movs	r3, #0
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	2320      	movs	r3, #32
 800489c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a4:	2330      	movs	r3, #48	; 0x30
 80048a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a50 <_svfiprintf_r+0x1ec>
 80048aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ae:	f04f 0901 	mov.w	r9, #1
 80048b2:	4623      	mov	r3, r4
 80048b4:	469a      	mov	sl, r3
 80048b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ba:	b10a      	cbz	r2, 80048c0 <_svfiprintf_r+0x5c>
 80048bc:	2a25      	cmp	r2, #37	; 0x25
 80048be:	d1f9      	bne.n	80048b4 <_svfiprintf_r+0x50>
 80048c0:	ebba 0b04 	subs.w	fp, sl, r4
 80048c4:	d00b      	beq.n	80048de <_svfiprintf_r+0x7a>
 80048c6:	465b      	mov	r3, fp
 80048c8:	4622      	mov	r2, r4
 80048ca:	4629      	mov	r1, r5
 80048cc:	4638      	mov	r0, r7
 80048ce:	f7ff ff6d 	bl	80047ac <__ssputs_r>
 80048d2:	3001      	adds	r0, #1
 80048d4:	f000 80aa 	beq.w	8004a2c <_svfiprintf_r+0x1c8>
 80048d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048da:	445a      	add	r2, fp
 80048dc:	9209      	str	r2, [sp, #36]	; 0x24
 80048de:	f89a 3000 	ldrb.w	r3, [sl]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80a2 	beq.w	8004a2c <_svfiprintf_r+0x1c8>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f04f 32ff 	mov.w	r2, #4294967295
 80048ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f2:	f10a 0a01 	add.w	sl, sl, #1
 80048f6:	9304      	str	r3, [sp, #16]
 80048f8:	9307      	str	r3, [sp, #28]
 80048fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004900:	4654      	mov	r4, sl
 8004902:	2205      	movs	r2, #5
 8004904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004908:	4851      	ldr	r0, [pc, #324]	; (8004a50 <_svfiprintf_r+0x1ec>)
 800490a:	f7fb fca1 	bl	8000250 <memchr>
 800490e:	9a04      	ldr	r2, [sp, #16]
 8004910:	b9d8      	cbnz	r0, 800494a <_svfiprintf_r+0xe6>
 8004912:	06d0      	lsls	r0, r2, #27
 8004914:	bf44      	itt	mi
 8004916:	2320      	movmi	r3, #32
 8004918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491c:	0711      	lsls	r1, r2, #28
 800491e:	bf44      	itt	mi
 8004920:	232b      	movmi	r3, #43	; 0x2b
 8004922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004926:	f89a 3000 	ldrb.w	r3, [sl]
 800492a:	2b2a      	cmp	r3, #42	; 0x2a
 800492c:	d015      	beq.n	800495a <_svfiprintf_r+0xf6>
 800492e:	9a07      	ldr	r2, [sp, #28]
 8004930:	4654      	mov	r4, sl
 8004932:	2000      	movs	r0, #0
 8004934:	f04f 0c0a 	mov.w	ip, #10
 8004938:	4621      	mov	r1, r4
 800493a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800493e:	3b30      	subs	r3, #48	; 0x30
 8004940:	2b09      	cmp	r3, #9
 8004942:	d94e      	bls.n	80049e2 <_svfiprintf_r+0x17e>
 8004944:	b1b0      	cbz	r0, 8004974 <_svfiprintf_r+0x110>
 8004946:	9207      	str	r2, [sp, #28]
 8004948:	e014      	b.n	8004974 <_svfiprintf_r+0x110>
 800494a:	eba0 0308 	sub.w	r3, r0, r8
 800494e:	fa09 f303 	lsl.w	r3, r9, r3
 8004952:	4313      	orrs	r3, r2
 8004954:	9304      	str	r3, [sp, #16]
 8004956:	46a2      	mov	sl, r4
 8004958:	e7d2      	b.n	8004900 <_svfiprintf_r+0x9c>
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	1d19      	adds	r1, r3, #4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	9103      	str	r1, [sp, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfbb      	ittet	lt
 8004966:	425b      	neglt	r3, r3
 8004968:	f042 0202 	orrlt.w	r2, r2, #2
 800496c:	9307      	strge	r3, [sp, #28]
 800496e:	9307      	strlt	r3, [sp, #28]
 8004970:	bfb8      	it	lt
 8004972:	9204      	strlt	r2, [sp, #16]
 8004974:	7823      	ldrb	r3, [r4, #0]
 8004976:	2b2e      	cmp	r3, #46	; 0x2e
 8004978:	d10c      	bne.n	8004994 <_svfiprintf_r+0x130>
 800497a:	7863      	ldrb	r3, [r4, #1]
 800497c:	2b2a      	cmp	r3, #42	; 0x2a
 800497e:	d135      	bne.n	80049ec <_svfiprintf_r+0x188>
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9203      	str	r2, [sp, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfb8      	it	lt
 800498c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004990:	3402      	adds	r4, #2
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a60 <_svfiprintf_r+0x1fc>
 8004998:	7821      	ldrb	r1, [r4, #0]
 800499a:	2203      	movs	r2, #3
 800499c:	4650      	mov	r0, sl
 800499e:	f7fb fc57 	bl	8000250 <memchr>
 80049a2:	b140      	cbz	r0, 80049b6 <_svfiprintf_r+0x152>
 80049a4:	2340      	movs	r3, #64	; 0x40
 80049a6:	eba0 000a 	sub.w	r0, r0, sl
 80049aa:	fa03 f000 	lsl.w	r0, r3, r0
 80049ae:	9b04      	ldr	r3, [sp, #16]
 80049b0:	4303      	orrs	r3, r0
 80049b2:	3401      	adds	r4, #1
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ba:	4826      	ldr	r0, [pc, #152]	; (8004a54 <_svfiprintf_r+0x1f0>)
 80049bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c0:	2206      	movs	r2, #6
 80049c2:	f7fb fc45 	bl	8000250 <memchr>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d038      	beq.n	8004a3c <_svfiprintf_r+0x1d8>
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <_svfiprintf_r+0x1f4>)
 80049cc:	bb1b      	cbnz	r3, 8004a16 <_svfiprintf_r+0x1b2>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	3307      	adds	r3, #7
 80049d2:	f023 0307 	bic.w	r3, r3, #7
 80049d6:	3308      	adds	r3, #8
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049dc:	4433      	add	r3, r6
 80049de:	9309      	str	r3, [sp, #36]	; 0x24
 80049e0:	e767      	b.n	80048b2 <_svfiprintf_r+0x4e>
 80049e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049e6:	460c      	mov	r4, r1
 80049e8:	2001      	movs	r0, #1
 80049ea:	e7a5      	b.n	8004938 <_svfiprintf_r+0xd4>
 80049ec:	2300      	movs	r3, #0
 80049ee:	3401      	adds	r4, #1
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0c0a 	mov.w	ip, #10
 80049f8:	4620      	mov	r0, r4
 80049fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049fe:	3a30      	subs	r2, #48	; 0x30
 8004a00:	2a09      	cmp	r2, #9
 8004a02:	d903      	bls.n	8004a0c <_svfiprintf_r+0x1a8>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0c5      	beq.n	8004994 <_svfiprintf_r+0x130>
 8004a08:	9105      	str	r1, [sp, #20]
 8004a0a:	e7c3      	b.n	8004994 <_svfiprintf_r+0x130>
 8004a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a10:	4604      	mov	r4, r0
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f0      	b.n	80049f8 <_svfiprintf_r+0x194>
 8004a16:	ab03      	add	r3, sp, #12
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <_svfiprintf_r+0x1f8>)
 8004a1e:	a904      	add	r1, sp, #16
 8004a20:	4638      	mov	r0, r7
 8004a22:	f3af 8000 	nop.w
 8004a26:	1c42      	adds	r2, r0, #1
 8004a28:	4606      	mov	r6, r0
 8004a2a:	d1d6      	bne.n	80049da <_svfiprintf_r+0x176>
 8004a2c:	89ab      	ldrh	r3, [r5, #12]
 8004a2e:	065b      	lsls	r3, r3, #25
 8004a30:	f53f af2c 	bmi.w	800488c <_svfiprintf_r+0x28>
 8004a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a36:	b01d      	add	sp, #116	; 0x74
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	ab03      	add	r3, sp, #12
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	462a      	mov	r2, r5
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <_svfiprintf_r+0x1f8>)
 8004a44:	a904      	add	r1, sp, #16
 8004a46:	4638      	mov	r0, r7
 8004a48:	f000 f87a 	bl	8004b40 <_printf_i>
 8004a4c:	e7eb      	b.n	8004a26 <_svfiprintf_r+0x1c2>
 8004a4e:	bf00      	nop
 8004a50:	080051e9 	.word	0x080051e9
 8004a54:	080051f3 	.word	0x080051f3
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	080047ad 	.word	0x080047ad
 8004a60:	080051ef 	.word	0x080051ef

08004a64 <_printf_common>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	4616      	mov	r6, r2
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	688a      	ldr	r2, [r1, #8]
 8004a6e:	690b      	ldr	r3, [r1, #16]
 8004a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a74:	4293      	cmp	r3, r2
 8004a76:	bfb8      	it	lt
 8004a78:	4613      	movlt	r3, r2
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a80:	4607      	mov	r7, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	b10a      	cbz	r2, 8004a8a <_printf_common+0x26>
 8004a86:	3301      	adds	r3, #1
 8004a88:	6033      	str	r3, [r6, #0]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	6833      	ldrmi	r3, [r6, #0]
 8004a92:	3302      	addmi	r3, #2
 8004a94:	6033      	strmi	r3, [r6, #0]
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	f015 0506 	ands.w	r5, r5, #6
 8004a9c:	d106      	bne.n	8004aac <_printf_common+0x48>
 8004a9e:	f104 0a19 	add.w	sl, r4, #25
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	6832      	ldr	r2, [r6, #0]
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dc26      	bgt.n	8004afa <_printf_common+0x96>
 8004aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab0:	1e13      	subs	r3, r2, #0
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	bf18      	it	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	0692      	lsls	r2, r2, #26
 8004aba:	d42b      	bmi.n	8004b14 <_printf_common+0xb0>
 8004abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	47c0      	blx	r8
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d01e      	beq.n	8004b08 <_printf_common+0xa4>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	68e5      	ldr	r5, [r4, #12]
 8004ace:	6832      	ldr	r2, [r6, #0]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf08      	it	eq
 8004ad8:	1aad      	subeq	r5, r5, r2
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf0c      	ite	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	2500      	movne	r5, #0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfc4      	itt	gt
 8004aea:	1a9b      	subgt	r3, r3, r2
 8004aec:	18ed      	addgt	r5, r5, r3
 8004aee:	2600      	movs	r6, #0
 8004af0:	341a      	adds	r4, #26
 8004af2:	42b5      	cmp	r5, r6
 8004af4:	d11a      	bne.n	8004b2c <_printf_common+0xc8>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e008      	b.n	8004b0c <_printf_common+0xa8>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4649      	mov	r1, r9
 8004b00:	4638      	mov	r0, r7
 8004b02:	47c0      	blx	r8
 8004b04:	3001      	adds	r0, #1
 8004b06:	d103      	bne.n	8004b10 <_printf_common+0xac>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	3501      	adds	r5, #1
 8004b12:	e7c6      	b.n	8004aa2 <_printf_common+0x3e>
 8004b14:	18e1      	adds	r1, r4, r3
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	2030      	movs	r0, #48	; 0x30
 8004b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1e:	4422      	add	r2, r4
 8004b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b28:	3302      	adds	r3, #2
 8004b2a:	e7c7      	b.n	8004abc <_printf_common+0x58>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0e6      	beq.n	8004b08 <_printf_common+0xa4>
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7d9      	b.n	8004af2 <_printf_common+0x8e>
	...

08004b40 <_printf_i>:
 8004b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	7e0f      	ldrb	r7, [r1, #24]
 8004b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b48:	2f78      	cmp	r7, #120	; 0x78
 8004b4a:	4691      	mov	r9, r2
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	469a      	mov	sl, r3
 8004b52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b56:	d807      	bhi.n	8004b68 <_printf_i+0x28>
 8004b58:	2f62      	cmp	r7, #98	; 0x62
 8004b5a:	d80a      	bhi.n	8004b72 <_printf_i+0x32>
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f000 80d8 	beq.w	8004d12 <_printf_i+0x1d2>
 8004b62:	2f58      	cmp	r7, #88	; 0x58
 8004b64:	f000 80a3 	beq.w	8004cae <_printf_i+0x16e>
 8004b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b70:	e03a      	b.n	8004be8 <_printf_i+0xa8>
 8004b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b76:	2b15      	cmp	r3, #21
 8004b78:	d8f6      	bhi.n	8004b68 <_printf_i+0x28>
 8004b7a:	a101      	add	r1, pc, #4	; (adr r1, 8004b80 <_printf_i+0x40>)
 8004b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004b69 	.word	0x08004b69
 8004b8c:	08004b69 	.word	0x08004b69
 8004b90:	08004b69 	.word	0x08004b69
 8004b94:	08004b69 	.word	0x08004b69
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004b69 	.word	0x08004b69
 8004ba0:	08004b69 	.word	0x08004b69
 8004ba4:	08004b69 	.word	0x08004b69
 8004ba8:	08004b69 	.word	0x08004b69
 8004bac:	08004cf9 	.word	0x08004cf9
 8004bb0:	08004c1d 	.word	0x08004c1d
 8004bb4:	08004cdb 	.word	0x08004cdb
 8004bb8:	08004b69 	.word	0x08004b69
 8004bbc:	08004b69 	.word	0x08004b69
 8004bc0:	08004d1b 	.word	0x08004d1b
 8004bc4:	08004b69 	.word	0x08004b69
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b69 	.word	0x08004b69
 8004bd0:	08004b69 	.word	0x08004b69
 8004bd4:	08004ce3 	.word	0x08004ce3
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	602a      	str	r2, [r5, #0]
 8004be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a3      	b.n	8004d34 <_printf_i+0x1f4>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	6829      	ldr	r1, [r5, #0]
 8004bf0:	0606      	lsls	r6, r0, #24
 8004bf2:	f101 0304 	add.w	r3, r1, #4
 8004bf6:	d50a      	bpl.n	8004c0e <_printf_i+0xce>
 8004bf8:	680e      	ldr	r6, [r1, #0]
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xc8>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	4276      	negs	r6, r6
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c08:	485e      	ldr	r0, [pc, #376]	; (8004d84 <_printf_i+0x244>)
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e019      	b.n	8004c42 <_printf_i+0x102>
 8004c0e:	680e      	ldr	r6, [r1, #0]
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c16:	bf18      	it	ne
 8004c18:	b236      	sxthne	r6, r6
 8004c1a:	e7ef      	b.n	8004bfc <_printf_i+0xbc>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6029      	str	r1, [r5, #0]
 8004c24:	0601      	lsls	r1, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xec>
 8004c28:	681e      	ldr	r6, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xf2>
 8004c2c:	0646      	lsls	r6, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe8>
 8004c30:	881e      	ldrh	r6, [r3, #0]
 8004c32:	4854      	ldr	r0, [pc, #336]	; (8004d84 <_printf_i+0x244>)
 8004c34:	2f6f      	cmp	r7, #111	; 0x6f
 8004c36:	bf0c      	ite	eq
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6865      	ldr	r5, [r4, #4]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	bfa2      	ittt	ge
 8004c4a:	6821      	ldrge	r1, [r4, #0]
 8004c4c:	f021 0104 	bicge.w	r1, r1, #4
 8004c50:	6021      	strge	r1, [r4, #0]
 8004c52:	b90e      	cbnz	r6, 8004c58 <_printf_i+0x118>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d04d      	beq.n	8004cf4 <_printf_i+0x1b4>
 8004c58:	4615      	mov	r5, r2
 8004c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c62:	5dc7      	ldrb	r7, [r0, r7]
 8004c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c68:	4637      	mov	r7, r6
 8004c6a:	42bb      	cmp	r3, r7
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	d9f4      	bls.n	8004c5a <_printf_i+0x11a>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <_printf_i+0x14c>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07de      	lsls	r6, r3, #31
 8004c78:	d508      	bpl.n	8004c8c <_printf_i+0x14c>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	bfde      	ittt	le
 8004c82:	2330      	movle	r3, #48	; 0x30
 8004c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	464b      	mov	r3, r9
 8004c96:	aa03      	add	r2, sp, #12
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fee2 	bl	8004a64 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d14c      	bne.n	8004d3e <_printf_i+0x1fe>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	b004      	add	sp, #16
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	4835      	ldr	r0, [pc, #212]	; (8004d84 <_printf_i+0x244>)
 8004cb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cb4:	6829      	ldr	r1, [r5, #0]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cbc:	6029      	str	r1, [r5, #0]
 8004cbe:	061d      	lsls	r5, r3, #24
 8004cc0:	d514      	bpl.n	8004cec <_printf_i+0x1ac>
 8004cc2:	07df      	lsls	r7, r3, #31
 8004cc4:	bf44      	itt	mi
 8004cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cca:	6023      	strmi	r3, [r4, #0]
 8004ccc:	b91e      	cbnz	r6, 8004cd6 <_printf_i+0x196>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	f023 0320 	bic.w	r3, r3, #32
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	e7b0      	b.n	8004c3c <_printf_i+0xfc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	2378      	movs	r3, #120	; 0x78
 8004ce4:	4828      	ldr	r0, [pc, #160]	; (8004d88 <_printf_i+0x248>)
 8004ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cea:	e7e3      	b.n	8004cb4 <_printf_i+0x174>
 8004cec:	0659      	lsls	r1, r3, #25
 8004cee:	bf48      	it	mi
 8004cf0:	b2b6      	uxthmi	r6, r6
 8004cf2:	e7e6      	b.n	8004cc2 <_printf_i+0x182>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	e7bb      	b.n	8004c70 <_printf_i+0x130>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	6826      	ldr	r6, [r4, #0]
 8004cfc:	6961      	ldr	r1, [r4, #20]
 8004cfe:	1d18      	adds	r0, r3, #4
 8004d00:	6028      	str	r0, [r5, #0]
 8004d02:	0635      	lsls	r5, r6, #24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x1cc>
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x1d2>
 8004d0c:	0670      	lsls	r0, r6, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x1c8>
 8004d10:	8019      	strh	r1, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	4615      	mov	r5, r2
 8004d18:	e7ba      	b.n	8004c90 <_printf_i+0x150>
 8004d1a:	682b      	ldr	r3, [r5, #0]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	602a      	str	r2, [r5, #0]
 8004d20:	681d      	ldr	r5, [r3, #0]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4628      	mov	r0, r5
 8004d28:	f7fb fa92 	bl	8000250 <memchr>
 8004d2c:	b108      	cbz	r0, 8004d32 <_printf_i+0x1f2>
 8004d2e:	1b40      	subs	r0, r0, r5
 8004d30:	6060      	str	r0, [r4, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	2300      	movs	r3, #0
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3c:	e7a8      	b.n	8004c90 <_printf_i+0x150>
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	462a      	mov	r2, r5
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d0ab      	beq.n	8004ca4 <_printf_i+0x164>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	079b      	lsls	r3, r3, #30
 8004d50:	d413      	bmi.n	8004d7a <_printf_i+0x23a>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e7a4      	b.n	8004ca8 <_printf_i+0x168>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d09b      	beq.n	8004ca4 <_printf_i+0x164>
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	9903      	ldr	r1, [sp, #12]
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	42ab      	cmp	r3, r5
 8004d76:	dcf2      	bgt.n	8004d5e <_printf_i+0x21e>
 8004d78:	e7eb      	b.n	8004d52 <_printf_i+0x212>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	f104 0619 	add.w	r6, r4, #25
 8004d80:	e7f5      	b.n	8004d6e <_printf_i+0x22e>
 8004d82:	bf00      	nop
 8004d84:	080051fa 	.word	0x080051fa
 8004d88:	0800520b 	.word	0x0800520b

08004d8c <memcpy>:
 8004d8c:	440a      	add	r2, r1
 8004d8e:	4291      	cmp	r1, r2
 8004d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d94:	d100      	bne.n	8004d98 <memcpy+0xc>
 8004d96:	4770      	bx	lr
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da2:	4291      	cmp	r1, r2
 8004da4:	d1f9      	bne.n	8004d9a <memcpy+0xe>
 8004da6:	bd10      	pop	{r4, pc}

08004da8 <memmove>:
 8004da8:	4288      	cmp	r0, r1
 8004daa:	b510      	push	{r4, lr}
 8004dac:	eb01 0402 	add.w	r4, r1, r2
 8004db0:	d902      	bls.n	8004db8 <memmove+0x10>
 8004db2:	4284      	cmp	r4, r0
 8004db4:	4623      	mov	r3, r4
 8004db6:	d807      	bhi.n	8004dc8 <memmove+0x20>
 8004db8:	1e43      	subs	r3, r0, #1
 8004dba:	42a1      	cmp	r1, r4
 8004dbc:	d008      	beq.n	8004dd0 <memmove+0x28>
 8004dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dc6:	e7f8      	b.n	8004dba <memmove+0x12>
 8004dc8:	4402      	add	r2, r0
 8004dca:	4601      	mov	r1, r0
 8004dcc:	428a      	cmp	r2, r1
 8004dce:	d100      	bne.n	8004dd2 <memmove+0x2a>
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dda:	e7f7      	b.n	8004dcc <memmove+0x24>

08004ddc <_free_r>:
 8004ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d044      	beq.n	8004e6c <_free_r+0x90>
 8004de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de6:	9001      	str	r0, [sp, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f1a1 0404 	sub.w	r4, r1, #4
 8004dee:	bfb8      	it	lt
 8004df0:	18e4      	addlt	r4, r4, r3
 8004df2:	f000 f913 	bl	800501c <__malloc_lock>
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <_free_r+0x94>)
 8004df8:	9801      	ldr	r0, [sp, #4]
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	b933      	cbnz	r3, 8004e0c <_free_r+0x30>
 8004dfe:	6063      	str	r3, [r4, #4]
 8004e00:	6014      	str	r4, [r2, #0]
 8004e02:	b003      	add	sp, #12
 8004e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e08:	f000 b90e 	b.w	8005028 <__malloc_unlock>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d908      	bls.n	8004e22 <_free_r+0x46>
 8004e10:	6825      	ldr	r5, [r4, #0]
 8004e12:	1961      	adds	r1, r4, r5
 8004e14:	428b      	cmp	r3, r1
 8004e16:	bf01      	itttt	eq
 8004e18:	6819      	ldreq	r1, [r3, #0]
 8004e1a:	685b      	ldreq	r3, [r3, #4]
 8004e1c:	1949      	addeq	r1, r1, r5
 8004e1e:	6021      	streq	r1, [r4, #0]
 8004e20:	e7ed      	b.n	8004dfe <_free_r+0x22>
 8004e22:	461a      	mov	r2, r3
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b10b      	cbz	r3, 8004e2c <_free_r+0x50>
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d9fa      	bls.n	8004e22 <_free_r+0x46>
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	1855      	adds	r5, r2, r1
 8004e30:	42a5      	cmp	r5, r4
 8004e32:	d10b      	bne.n	8004e4c <_free_r+0x70>
 8004e34:	6824      	ldr	r4, [r4, #0]
 8004e36:	4421      	add	r1, r4
 8004e38:	1854      	adds	r4, r2, r1
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	6011      	str	r1, [r2, #0]
 8004e3e:	d1e0      	bne.n	8004e02 <_free_r+0x26>
 8004e40:	681c      	ldr	r4, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	6053      	str	r3, [r2, #4]
 8004e46:	4421      	add	r1, r4
 8004e48:	6011      	str	r1, [r2, #0]
 8004e4a:	e7da      	b.n	8004e02 <_free_r+0x26>
 8004e4c:	d902      	bls.n	8004e54 <_free_r+0x78>
 8004e4e:	230c      	movs	r3, #12
 8004e50:	6003      	str	r3, [r0, #0]
 8004e52:	e7d6      	b.n	8004e02 <_free_r+0x26>
 8004e54:	6825      	ldr	r5, [r4, #0]
 8004e56:	1961      	adds	r1, r4, r5
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf04      	itt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	bf04      	itt	eq
 8004e64:	1949      	addeq	r1, r1, r5
 8004e66:	6021      	streq	r1, [r4, #0]
 8004e68:	6054      	str	r4, [r2, #4]
 8004e6a:	e7ca      	b.n	8004e02 <_free_r+0x26>
 8004e6c:	b003      	add	sp, #12
 8004e6e:	bd30      	pop	{r4, r5, pc}
 8004e70:	2000043c 	.word	0x2000043c

08004e74 <sbrk_aligned>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4e0e      	ldr	r6, [pc, #56]	; (8004eb0 <sbrk_aligned+0x3c>)
 8004e78:	460c      	mov	r4, r1
 8004e7a:	6831      	ldr	r1, [r6, #0]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	b911      	cbnz	r1, 8004e86 <sbrk_aligned+0x12>
 8004e80:	f000 f8bc 	bl	8004ffc <_sbrk_r>
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 f8b7 	bl	8004ffc <_sbrk_r>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	d00a      	beq.n	8004ea8 <sbrk_aligned+0x34>
 8004e92:	1cc4      	adds	r4, r0, #3
 8004e94:	f024 0403 	bic.w	r4, r4, #3
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	d007      	beq.n	8004eac <sbrk_aligned+0x38>
 8004e9c:	1a21      	subs	r1, r4, r0
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 f8ac 	bl	8004ffc <_sbrk_r>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d101      	bne.n	8004eac <sbrk_aligned+0x38>
 8004ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8004eac:	4620      	mov	r0, r4
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	20000440 	.word	0x20000440

08004eb4 <_malloc_r>:
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	1ccd      	adds	r5, r1, #3
 8004eba:	f025 0503 	bic.w	r5, r5, #3
 8004ebe:	3508      	adds	r5, #8
 8004ec0:	2d0c      	cmp	r5, #12
 8004ec2:	bf38      	it	cc
 8004ec4:	250c      	movcc	r5, #12
 8004ec6:	2d00      	cmp	r5, #0
 8004ec8:	4607      	mov	r7, r0
 8004eca:	db01      	blt.n	8004ed0 <_malloc_r+0x1c>
 8004ecc:	42a9      	cmp	r1, r5
 8004ece:	d905      	bls.n	8004edc <_malloc_r+0x28>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004edc:	4e2e      	ldr	r6, [pc, #184]	; (8004f98 <_malloc_r+0xe4>)
 8004ede:	f000 f89d 	bl	800501c <__malloc_lock>
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	461c      	mov	r4, r3
 8004ee6:	bb34      	cbnz	r4, 8004f36 <_malloc_r+0x82>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff ffc2 	bl	8004e74 <sbrk_aligned>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	d14d      	bne.n	8004f92 <_malloc_r+0xde>
 8004ef6:	6834      	ldr	r4, [r6, #0]
 8004ef8:	4626      	mov	r6, r4
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d140      	bne.n	8004f80 <_malloc_r+0xcc>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4631      	mov	r1, r6
 8004f02:	4638      	mov	r0, r7
 8004f04:	eb04 0803 	add.w	r8, r4, r3
 8004f08:	f000 f878 	bl	8004ffc <_sbrk_r>
 8004f0c:	4580      	cmp	r8, r0
 8004f0e:	d13a      	bne.n	8004f86 <_malloc_r+0xd2>
 8004f10:	6821      	ldr	r1, [r4, #0]
 8004f12:	3503      	adds	r5, #3
 8004f14:	1a6d      	subs	r5, r5, r1
 8004f16:	f025 0503 	bic.w	r5, r5, #3
 8004f1a:	3508      	adds	r5, #8
 8004f1c:	2d0c      	cmp	r5, #12
 8004f1e:	bf38      	it	cc
 8004f20:	250c      	movcc	r5, #12
 8004f22:	4629      	mov	r1, r5
 8004f24:	4638      	mov	r0, r7
 8004f26:	f7ff ffa5 	bl	8004e74 <sbrk_aligned>
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d02b      	beq.n	8004f86 <_malloc_r+0xd2>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	442b      	add	r3, r5
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	e00e      	b.n	8004f54 <_malloc_r+0xa0>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	1b52      	subs	r2, r2, r5
 8004f3a:	d41e      	bmi.n	8004f7a <_malloc_r+0xc6>
 8004f3c:	2a0b      	cmp	r2, #11
 8004f3e:	d916      	bls.n	8004f6e <_malloc_r+0xba>
 8004f40:	1961      	adds	r1, r4, r5
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	6025      	str	r5, [r4, #0]
 8004f46:	bf18      	it	ne
 8004f48:	6059      	strne	r1, [r3, #4]
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	bf08      	it	eq
 8004f4e:	6031      	streq	r1, [r6, #0]
 8004f50:	5162      	str	r2, [r4, r5]
 8004f52:	604b      	str	r3, [r1, #4]
 8004f54:	4638      	mov	r0, r7
 8004f56:	f104 060b 	add.w	r6, r4, #11
 8004f5a:	f000 f865 	bl	8005028 <__malloc_unlock>
 8004f5e:	f026 0607 	bic.w	r6, r6, #7
 8004f62:	1d23      	adds	r3, r4, #4
 8004f64:	1af2      	subs	r2, r6, r3
 8004f66:	d0b6      	beq.n	8004ed6 <_malloc_r+0x22>
 8004f68:	1b9b      	subs	r3, r3, r6
 8004f6a:	50a3      	str	r3, [r4, r2]
 8004f6c:	e7b3      	b.n	8004ed6 <_malloc_r+0x22>
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	bf0c      	ite	eq
 8004f74:	6032      	streq	r2, [r6, #0]
 8004f76:	605a      	strne	r2, [r3, #4]
 8004f78:	e7ec      	b.n	8004f54 <_malloc_r+0xa0>
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	6864      	ldr	r4, [r4, #4]
 8004f7e:	e7b2      	b.n	8004ee6 <_malloc_r+0x32>
 8004f80:	4634      	mov	r4, r6
 8004f82:	6876      	ldr	r6, [r6, #4]
 8004f84:	e7b9      	b.n	8004efa <_malloc_r+0x46>
 8004f86:	230c      	movs	r3, #12
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f000 f84c 	bl	8005028 <__malloc_unlock>
 8004f90:	e7a1      	b.n	8004ed6 <_malloc_r+0x22>
 8004f92:	6025      	str	r5, [r4, #0]
 8004f94:	e7de      	b.n	8004f54 <_malloc_r+0xa0>
 8004f96:	bf00      	nop
 8004f98:	2000043c 	.word	0x2000043c

08004f9c <_realloc_r>:
 8004f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	460e      	mov	r6, r1
 8004fa6:	b921      	cbnz	r1, 8004fb2 <_realloc_r+0x16>
 8004fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	4611      	mov	r1, r2
 8004fae:	f7ff bf81 	b.w	8004eb4 <_malloc_r>
 8004fb2:	b92a      	cbnz	r2, 8004fc0 <_realloc_r+0x24>
 8004fb4:	f7ff ff12 	bl	8004ddc <_free_r>
 8004fb8:	4625      	mov	r5, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc0:	f000 f838 	bl	8005034 <_malloc_usable_size_r>
 8004fc4:	4284      	cmp	r4, r0
 8004fc6:	4607      	mov	r7, r0
 8004fc8:	d802      	bhi.n	8004fd0 <_realloc_r+0x34>
 8004fca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fce:	d812      	bhi.n	8004ff6 <_realloc_r+0x5a>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f7ff ff6e 	bl	8004eb4 <_malloc_r>
 8004fd8:	4605      	mov	r5, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d0ed      	beq.n	8004fba <_realloc_r+0x1e>
 8004fde:	42bc      	cmp	r4, r7
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	bf28      	it	cs
 8004fe6:	463a      	movcs	r2, r7
 8004fe8:	f7ff fed0 	bl	8004d8c <memcpy>
 8004fec:	4631      	mov	r1, r6
 8004fee:	4640      	mov	r0, r8
 8004ff0:	f7ff fef4 	bl	8004ddc <_free_r>
 8004ff4:	e7e1      	b.n	8004fba <_realloc_r+0x1e>
 8004ff6:	4635      	mov	r5, r6
 8004ff8:	e7df      	b.n	8004fba <_realloc_r+0x1e>
	...

08004ffc <_sbrk_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_sbrk_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fc f9be 	bl	8001388 <_sbrk>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_sbrk_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_sbrk_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20000444 	.word	0x20000444

0800501c <__malloc_lock>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__malloc_lock+0x8>)
 800501e:	f000 b811 	b.w	8005044 <__retarget_lock_acquire_recursive>
 8005022:	bf00      	nop
 8005024:	20000448 	.word	0x20000448

08005028 <__malloc_unlock>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__malloc_unlock+0x8>)
 800502a:	f000 b80c 	b.w	8005046 <__retarget_lock_release_recursive>
 800502e:	bf00      	nop
 8005030:	20000448 	.word	0x20000448

08005034 <_malloc_usable_size_r>:
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f18      	subs	r0, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfbc      	itt	lt
 800503e:	580b      	ldrlt	r3, [r1, r0]
 8005040:	18c0      	addlt	r0, r0, r3
 8005042:	4770      	bx	lr

08005044 <__retarget_lock_acquire_recursive>:
 8005044:	4770      	bx	lr

08005046 <__retarget_lock_release_recursive>:
 8005046:	4770      	bx	lr

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr
