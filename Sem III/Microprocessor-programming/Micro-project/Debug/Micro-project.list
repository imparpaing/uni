
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cac  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc0  08003fc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc8  08003fc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fcc  08003fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000070  08004040  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08004040  00020394  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b421  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5f  00000000  00000000  0002b4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c92  00000000  00000000  0002deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaf6  00000000  00000000  00054b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1383  00000000  00000000  0005f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001509c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000209c  00000000  00000000  00150a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08003e8c 	.word	0x08003e8c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08003e8c 	.word	0x08003e8c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Print single character to terminal
void uart_print(unsigned char x)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	USART3->TDR = (x);
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <uart_print+0x2c>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 800054c:	bf00      	nop
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <uart_print+0x2c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <uart_print+0x12>
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40004800 	.word	0x40004800

0800056c <char_is_endmessage>:

// --- Reception ---
uint8_t char_is_endmessage(char c)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b0d      	cmp	r3, #13
 800057a:	d002      	beq.n	8000582 <char_is_endmessage+0x16>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b0a      	cmp	r3, #10
 8000580:	d101      	bne.n	8000586 <char_is_endmessage+0x1a>
	{
		return 1;
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <char_is_endmessage+0x1c>
	}
	else return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <rx_has_data>:

uint8_t rx_has_data()
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <rx_has_data+0x24>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <rx_has_data+0x28>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d101      	bne.n	80005ac <rx_has_data+0x18>
	{
		return 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e000      	b.n	80005ae <rx_has_data+0x1a>
	}
	else return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	2000036a 	.word	0x2000036a
 80005bc:	2000036c 	.word	0x2000036c

080005c0 <increase_rx_empty>:

void increase_rx_empty()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	rx_empty++;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <increase_rx_empty+0x2c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <increase_rx_empty+0x2c>)
 80005d0:	801a      	strh	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <increase_rx_empty+0x2c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	2b1e      	cmp	r3, #30
 80005da:	d902      	bls.n	80005e2 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <increase_rx_empty+0x2c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	}
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	2000036a 	.word	0x2000036a

080005f0 <increase_rx_busy>:

void increase_rx_busy()
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	rx_busy++;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <increase_rx_busy+0x2c>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	3301      	adds	r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <increase_rx_busy+0x2c>)
 8000600:	801a      	strh	r2, [r3, #0]
	if(rx_busy>BUFFER_LENGTH)
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <increase_rx_busy+0x2c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	2b1e      	cmp	r3, #30
 800060a:	d902      	bls.n	8000612 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <increase_rx_busy+0x2c>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
	}
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	2000036c 	.word	0x2000036c

08000620 <char_is_frame_start_end>:

// Check for frame start and frame end characters
uint8_t char_is_frame_start_end(char c)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	if (c == '#' || c == ';')
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b23      	cmp	r3, #35	; 0x23
 800062e:	d002      	beq.n	8000636 <char_is_frame_start_end+0x16>
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b3b      	cmp	r3, #59	; 0x3b
 8000634:	d104      	bne.n	8000640 <char_is_frame_start_end+0x20>
	{
		uart_print('*');
 8000636:	202a      	movs	r0, #42	; 0x2a
 8000638:	f7ff ff80 	bl	800053c <uart_print>
		return 1;
 800063c:	2301      	movs	r3, #1
 800063e:	e000      	b.n	8000642 <char_is_frame_start_end+0x22>
	}
	else return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <get_char+0x24>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	b29b      	uxth	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <get_char+0x28>)
 800065c:	5c9b      	ldrb	r3, [r3, r2]
 800065e:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000660:	f7ff ffc6 	bl	80005f0 <increase_rx_busy>
	return tmp;
 8000664:	79fb      	ldrb	r3, [r7, #7]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000036c 	.word	0x2000036c
 8000674:	2000034c 	.word	0x2000034c

08000678 <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000684:	e041      	b.n	800070a <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <get_message+0xa8>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	461c      	mov	r4, r3
 800068c:	f7ff ffde 	bl	800064c <get_char>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <get_message+0xac>)
 8000696:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <get_message+0xa8>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <get_message+0xac>)
 80006a0:	5c9b      	ldrb	r3, [r3, r2]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff62 	bl	800056c <char_is_endmessage>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d021      	beq.n	80006f2 <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <get_message+0xa8>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <get_message+0xac>)
 80006b6:	2100      	movs	r1, #0
 80006b8:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e009      	b.n	80006d4 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 80006c0:	7bfa      	ldrb	r2, [r7, #15]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	440b      	add	r3, r1
 80006c8:	4916      	ldr	r1, [pc, #88]	; (8000724 <get_message+0xac>)
 80006ca:	5c8a      	ldrb	r2, [r1, r2]
 80006cc:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	3301      	adds	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <get_message+0xa8>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d3ef      	bcc.n	80006c0 <get_message+0x48>
			}

			message_length = idx;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <get_message+0xa8>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <get_message+0xa8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	801a      	strh	r2, [r3, #0]
			return message_length;
 80006ec:	89bb      	ldrh	r3, [r7, #12]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	e011      	b.n	8000716 <get_message+0x9e>
		}
		else
		{
			idx++;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <get_message+0xa8>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <get_message+0xa8>)
 80006fc:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <get_message+0xa8>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	2b1e      	cmp	r3, #30
 8000704:	d901      	bls.n	800070a <get_message+0x92>
 8000706:	2300      	movs	r3, #0
 8000708:	e005      	b.n	8000716 <get_message+0x9e>
	while(rx_has_data() == 1)
 800070a:	f7ff ff43 	bl	8000594 <rx_has_data>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d0b8      	beq.n	8000686 <get_message+0xe>
		}
	}
	return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	bf00      	nop
 8000720:	2000036e 	.word	0x2000036e
 8000724:	20000370 	.word	0x20000370

08000728 <analyze_frame>:

// Analyze frame content
uint8_t analyze_frame(uint8_t *message)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	// Store last analyzed char position
	uint16_t collection_index = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	82fb      	strh	r3, [r7, #22]

	// Get frame start char ( '#' )
	while (message[collection_index] == '#')
 8000734:	e002      	b.n	800073c <analyze_frame+0x14>
		collection_index++;
 8000736:	8afb      	ldrh	r3, [r7, #22]
 8000738:	3301      	adds	r3, #1
 800073a:	82fb      	strh	r3, [r7, #22]
	while (message[collection_index] == '#')
 800073c:	8afb      	ldrh	r3, [r7, #22]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b23      	cmp	r3, #35	; 0x23
 8000746:	d0f6      	beq.n	8000736 <analyze_frame+0xe>
//	{
//
//	}

	// Get sender
	for (uint8_t i=0; i<3; i++)
 8000748:	2300      	movs	r3, #0
 800074a:	757b      	strb	r3, [r7, #21]
 800074c:	e018      	b.n	8000780 <analyze_frame+0x58>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1)
 800074e:	8afb      	ldrh	r3, [r7, #22]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff62 	bl	8000620 <char_is_frame_start_end>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d101      	bne.n	8000766 <analyze_frame+0x3e>
			return 0;
 8000762:	2300      	movs	r3, #0
 8000764:	e09d      	b.n	80008a2 <analyze_frame+0x17a>

		sender[i] = message[collection_index];
 8000766:	8afb      	ldrh	r3, [r7, #22]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	441a      	add	r2, r3
 800076c:	7d7b      	ldrb	r3, [r7, #21]
 800076e:	7811      	ldrb	r1, [r2, #0]
 8000770:	4a4e      	ldr	r2, [pc, #312]	; (80008ac <analyze_frame+0x184>)
 8000772:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000774:	8afb      	ldrh	r3, [r7, #22]
 8000776:	3301      	adds	r3, #1
 8000778:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 800077a:	7d7b      	ldrb	r3, [r7, #21]
 800077c:	3301      	adds	r3, #1
 800077e:	757b      	strb	r3, [r7, #21]
 8000780:	7d7b      	ldrb	r3, [r7, #21]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d9e3      	bls.n	800074e <analyze_frame+0x26>
	}

	// Get receiver
	for (uint8_t i=0; i<3; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	753b      	strb	r3, [r7, #20]
 800078a:	e018      	b.n	80007be <analyze_frame+0x96>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1)
 800078c:	8afb      	ldrh	r3, [r7, #22]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff43 	bl	8000620 <char_is_frame_start_end>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d101      	bne.n	80007a4 <analyze_frame+0x7c>
			return 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	e07e      	b.n	80008a2 <analyze_frame+0x17a>

		receiver[i] = message[collection_index];
 80007a4:	8afb      	ldrh	r3, [r7, #22]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	441a      	add	r2, r3
 80007aa:	7d3b      	ldrb	r3, [r7, #20]
 80007ac:	7811      	ldrb	r1, [r2, #0]
 80007ae:	4a40      	ldr	r2, [pc, #256]	; (80008b0 <analyze_frame+0x188>)
 80007b0:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	3301      	adds	r3, #1
 80007b6:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 80007b8:	7d3b      	ldrb	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	753b      	strb	r3, [r7, #20]
 80007be:	7d3b      	ldrb	r3, [r7, #20]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d9e3      	bls.n	800078c <analyze_frame+0x64>
	}

	// Get command length
	for (uint8_t i=0; i<3; i++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	74fb      	strb	r3, [r7, #19]
 80007c8:	e018      	b.n	80007fc <analyze_frame+0xd4>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1)
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff24 	bl	8000620 <char_is_frame_start_end>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d101      	bne.n	80007e2 <analyze_frame+0xba>
			return 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	e05f      	b.n	80008a2 <analyze_frame+0x17a>

		command_chars[i] = message[collection_index];
 80007e2:	8afb      	ldrh	r3, [r7, #22]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	441a      	add	r2, r3
 80007e8:	7cfb      	ldrb	r3, [r7, #19]
 80007ea:	7811      	ldrb	r1, [r2, #0]
 80007ec:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <analyze_frame+0x18c>)
 80007ee:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 80007f0:	8afb      	ldrh	r3, [r7, #22]
 80007f2:	3301      	adds	r3, #1
 80007f4:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 80007f6:	7cfb      	ldrb	r3, [r7, #19]
 80007f8:	3301      	adds	r3, #1
 80007fa:	74fb      	strb	r3, [r7, #19]
 80007fc:	7cfb      	ldrb	r3, [r7, #19]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d9e3      	bls.n	80007ca <analyze_frame+0xa2>
	}

	// Get data field length as integer value
	// Use length to get characters from 'data' array in next step
	command_length = atoi(command_chars);
 8000802:	482c      	ldr	r0, [pc, #176]	; (80008b4 <analyze_frame+0x18c>)
 8000804:	f003 fa80 	bl	8003d08 <atoi>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <analyze_frame+0x190>)
 800080e:	801a      	strh	r2, [r3, #0]

	// Get data
	for (uint16_t i=0; i<command_length; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	823b      	strh	r3, [r7, #16]
 8000814:	e018      	b.n	8000848 <analyze_frame+0x120>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1)
 8000816:	8afb      	ldrh	r3, [r7, #22]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fefe 	bl	8000620 <char_is_frame_start_end>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d101      	bne.n	800082e <analyze_frame+0x106>
			return 0;
 800082a:	2300      	movs	r3, #0
 800082c:	e039      	b.n	80008a2 <analyze_frame+0x17a>

		data[i] = message[collection_index];
 800082e:	8afb      	ldrh	r3, [r7, #22]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	441a      	add	r2, r3
 8000834:	8a3b      	ldrh	r3, [r7, #16]
 8000836:	7811      	ldrb	r1, [r2, #0]
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <analyze_frame+0x194>)
 800083a:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 800083c:	8afb      	ldrh	r3, [r7, #22]
 800083e:	3301      	adds	r3, #1
 8000840:	82fb      	strh	r3, [r7, #22]
	for (uint16_t i=0; i<command_length; i++)
 8000842:	8a3b      	ldrh	r3, [r7, #16]
 8000844:	3301      	adds	r3, #1
 8000846:	823b      	strh	r3, [r7, #16]
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <analyze_frame+0x190>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	8a3a      	ldrh	r2, [r7, #16]
 800084e:	429a      	cmp	r2, r3
 8000850:	d3e1      	bcc.n	8000816 <analyze_frame+0xee>
	}

	// Get checksum
	for (uint8_t i=0; i<3; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e018      	b.n	800088a <analyze_frame+0x162>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1)
 8000858:	8afb      	ldrh	r3, [r7, #22]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fedd 	bl	8000620 <char_is_frame_start_end>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d101      	bne.n	8000870 <analyze_frame+0x148>
			return 0;
 800086c:	2300      	movs	r3, #0
 800086e:	e018      	b.n	80008a2 <analyze_frame+0x17a>

		checksum[i] = message[collection_index];
 8000870:	8afb      	ldrh	r3, [r7, #22]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	441a      	add	r2, r3
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	7811      	ldrb	r1, [r2, #0]
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <analyze_frame+0x198>)
 800087c:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 800087e:	8afb      	ldrh	r3, [r7, #22]
 8000880:	3301      	adds	r3, #1
 8000882:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	3301      	adds	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d9e3      	bls.n	8000858 <analyze_frame+0x130>
	}

	// Get frame end char ( ';' )
	if (message[collection_index] == ';')
 8000890:	8afb      	ldrh	r3, [r7, #22]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b3b      	cmp	r3, #59	; 0x3b
 800089a:	d101      	bne.n	80008a0 <analyze_frame+0x178>
		return 1;
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <analyze_frame+0x17a>
	// Otherwise return 0
	else return 0;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000138 	.word	0x20000138
 80008b0:	2000013c 	.word	0x2000013c
 80008b4:	20000140 	.word	0x20000140
 80008b8:	20000144 	.word	0x20000144
 80008bc:	20000148 	.word	0x20000148
 80008c0:	20000348 	.word	0x20000348

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fa7c 	bl	8000dc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f847 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 f8e3 	bl	8000a9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008d6:	f000 f8b1 	bl	8000a3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 80008da:	2201      	movs	r2, #1
 80008dc:	491a      	ldr	r1, [pc, #104]	; (8000948 <main+0x84>)
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <main+0x88>)
 80008e0:	f001 ffd2 	bl	8002888 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Retrieve the message
	  if (char_is_endmessage(character))
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <main+0x84>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe3f 	bl	800056c <char_is_endmessage>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d006      	beq.n	8000902 <main+0x3e>
		  message_length = get_message(message);
 80008f4:	4816      	ldr	r0, [pc, #88]	; (8000950 <main+0x8c>)
 80008f6:	f7ff febf 	bl	8000678 <get_message>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <main+0x90>)
 8000900:	801a      	strh	r2, [r3, #0]

	  // Analyze message if message had any content
	  if (message_length > 0 && analyze_frame(message) == 1)
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <main+0x90>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b29b      	uxth	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0eb      	beq.n	80008e4 <main+0x20>
 800090c:	4810      	ldr	r0, [pc, #64]	; (8000950 <main+0x8c>)
 800090e:	f7ff ff0b 	bl	8000728 <analyze_frame>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d1e5      	bne.n	80008e4 <main+0x20>
	  {
		  for (uint16_t i=0; i<command_length; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	80fb      	strh	r3, [r7, #6]
 800091c:	e008      	b.n	8000930 <main+0x6c>
			  uart_print(data[i]);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <main+0x94>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe09 	bl	800053c <uart_print>
		  for (uint16_t i=0; i<command_length; i++)
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	3301      	adds	r3, #1
 800092e:	80fb      	strh	r3, [r7, #6]
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <main+0x98>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	429a      	cmp	r2, r3
 8000938:	d3f1      	bcc.n	800091e <main+0x5a>
		  uart_print('\n');
 800093a:	200a      	movs	r0, #10
 800093c:	f7ff fdfe 	bl	800053c <uart_print>
		  uart_print('\r');
 8000940:	200d      	movs	r0, #13
 8000942:	f7ff fdfb 	bl	800053c <uart_print>
	  if (char_is_endmessage(character))
 8000946:	e7cd      	b.n	80008e4 <main+0x20>
 8000948:	20000114 	.word	0x20000114
 800094c:	2000008c 	.word	0x2000008c
 8000950:	20000118 	.word	0x20000118
 8000954:	20000136 	.word	0x20000136
 8000958:	20000148 	.word	0x20000148
 800095c:	20000144 	.word	0x20000144

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2234      	movs	r2, #52	; 0x34
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 f9f8 	bl	8003d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <SystemClock_Config+0xd4>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <SystemClock_Config+0xd4>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <SystemClock_Config+0xd4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <SystemClock_Config+0xd8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a25      	ldr	r2, [pc, #148]	; (8000a38 <SystemClock_Config+0xd8>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <SystemClock_Config+0xd8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c8:	2308      	movs	r3, #8
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009cc:	23d8      	movs	r3, #216	; 0xd8
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fe07 	bl	80015f4 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009ec:	f000 f8da 	bl	8000ba4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f0:	f000 fdb0 	bl	8001554 <HAL_PWREx_EnableOverDrive>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009fa:	f000 f8d3 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2302      	movs	r3, #2
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 f897 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a28:	f000 f8bc 	bl	8000ba4 <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	; 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_USART3_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART3_UART_Init+0x58>)
 8000a80:	f001 feb4 	bl	80027ec <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f88b 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_GPIO_Init+0xa8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000b00:	f000 fd0e 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_GPIO_Init+0xb0>)
 8000b1a:	f000 fb55 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_GPIO_Init+0xac>)
 8000b36:	f000 fb47 	bl	80011c8 <HAL_GPIO_Init>

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40020800 	.word	0x40020800

08000b50 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	// Print character to terminal
	uart_print(character);
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_RxCpltCallback+0x44>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fced 	bl	800053c <uart_print>

	// Check for correct USART port
	if(huart->Instance == USART3)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_UART_RxCpltCallback+0x48>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d10e      	bne.n	8000b8a <HAL_UART_RxCpltCallback+0x3a>
	{
		// Collect character to reception buffer
		rx_buffer[rx_empty] = character;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_UART_RxCpltCallback+0x4c>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_UART_RxCpltCallback+0x44>)
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_UART_RxCpltCallback+0x50>)
 8000b7a:	5499      	strb	r1, [r3, r2]

		// Increase rx_empty index
		increase_rx_empty();
 8000b7c:	f7ff fd20 	bl	80005c0 <increase_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &character, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	4904      	ldr	r1, [pc, #16]	; (8000b94 <HAL_UART_RxCpltCallback+0x44>)
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f001 fe7f 	bl	8002888 <HAL_UART_Receive_IT>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000114 	.word	0x20000114
 8000b98:	40004800 	.word	0x40004800
 8000b9c:	2000036a 	.word	0x2000036a
 8000ba0:	2000034c 	.word	0x2000034c

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_MspInit+0x54>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <HAL_MspInit+0x54>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <HAL_MspInit+0x54>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_MspInit+0x54>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be6:	2007      	movs	r0, #7
 8000be8:	f000 fa1a 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2005      	movs	r0, #5
 8000bf2:	f000 fa20 	bl	8001036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f000 fa39 	bl	800106e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0ae      	sub	sp, #184	; 0xb8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2290      	movs	r2, #144	; 0x90
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 f89b 	bl	8003d64 <memset>
  if(huart->Instance==USART3)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_UART_MspInit+0xc4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d144      	bne.n	8000cc2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f9a8 	bl	8001f9c <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c52:	f7ff ffa7 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <HAL_UART_MspInit+0xc8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <HAL_UART_MspInit+0xc8>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <HAL_UART_MspInit+0xc8>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0xc8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0xc8>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_UART_MspInit+0xc8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <HAL_UART_MspInit+0xcc>)
 8000cae:	f000 fa8b 	bl	80011c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2027      	movs	r0, #39	; 0x27
 8000cb8:	f000 f9bd 	bl	8001036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cbc:	2027      	movs	r0, #39	; 0x27
 8000cbe:	f000 f9d6 	bl	800106e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	37b8      	adds	r7, #184	; 0xb8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40004800 	.word	0x40004800
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020c00 	.word	0x40020c00

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f88c 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <USART3_IRQHandler+0x10>)
 8000d42:	f001 fde5 	bl	8002910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000008c 	.word	0x2000008c

08000d50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7a:	490e      	ldr	r1, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d90:	4c0b      	ldr	r4, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ffd7 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f002 ffbb 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fd8d 	bl	80008c4 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000db8:	08003fd0 	.word	0x08003fd0
  ldr r2, =_sbss
 8000dbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dc0:	20000394 	.word	0x20000394

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>

08000dc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f928 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 f805 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd6:	f7ff feeb 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f943 	bl	800108a <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f90b 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000390 	.word	0x20000390

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000390 	.word	0x20000390

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	05fa0000 	.word	0x05fa0000

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff29 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff3e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff31 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa2 	bl	8000fdc <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff feda 	bl	8000e68 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d008      	beq.n	80010d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e052      	b.n	800117a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0216 	bic.w	r2, r2, #22
 80010e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <HAL_DMA_Abort+0x62>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0208 	bic.w	r2, r2, #8
 8001112:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001124:	e013      	b.n	800114e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001126:	f7ff fe9f 	bl	8000e68 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b05      	cmp	r3, #5
 8001132:	d90c      	bls.n	800114e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2220      	movs	r2, #32
 8001138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e015      	b.n	800117a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e4      	bne.n	8001126 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	223f      	movs	r2, #63	; 0x3f
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e00c      	b.n	80011ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2205      	movs	r2, #5
 80011a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e175      	b.n	80014d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 8164 	bne.w	80014ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d005      	beq.n	800121e <HAL_GPIO_Init+0x56>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d130      	bne.n	8001280 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 0201 	and.w	r2, r3, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b03      	cmp	r3, #3
 800128a:	d017      	beq.n	80012bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d123      	bne.n	8001310 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	69b9      	ldr	r1, [r7, #24]
 800130c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0203 	and.w	r2, r3, #3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80be 	beq.w	80014ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b66      	ldr	r3, [pc, #408]	; (80014ec <HAL_GPIO_Init+0x324>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a65      	ldr	r2, [pc, #404]	; (80014ec <HAL_GPIO_Init+0x324>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b63      	ldr	r3, [pc, #396]	; (80014ec <HAL_GPIO_Init+0x324>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800136a:	4a61      	ldr	r2, [pc, #388]	; (80014f0 <HAL_GPIO_Init+0x328>)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <HAL_GPIO_Init+0x32c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d037      	beq.n	8001406 <HAL_GPIO_Init+0x23e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a57      	ldr	r2, [pc, #348]	; (80014f8 <HAL_GPIO_Init+0x330>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d031      	beq.n	8001402 <HAL_GPIO_Init+0x23a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a56      	ldr	r2, [pc, #344]	; (80014fc <HAL_GPIO_Init+0x334>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d02b      	beq.n	80013fe <HAL_GPIO_Init+0x236>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a55      	ldr	r2, [pc, #340]	; (8001500 <HAL_GPIO_Init+0x338>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d025      	beq.n	80013fa <HAL_GPIO_Init+0x232>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a54      	ldr	r2, [pc, #336]	; (8001504 <HAL_GPIO_Init+0x33c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01f      	beq.n	80013f6 <HAL_GPIO_Init+0x22e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a53      	ldr	r2, [pc, #332]	; (8001508 <HAL_GPIO_Init+0x340>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x22a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a52      	ldr	r2, [pc, #328]	; (800150c <HAL_GPIO_Init+0x344>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x226>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a51      	ldr	r2, [pc, #324]	; (8001510 <HAL_GPIO_Init+0x348>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x222>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a50      	ldr	r2, [pc, #320]	; (8001514 <HAL_GPIO_Init+0x34c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x21e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4f      	ldr	r2, [pc, #316]	; (8001518 <HAL_GPIO_Init+0x350>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x21a>
 80013de:	2309      	movs	r3, #9
 80013e0:	e012      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013e2:	230a      	movs	r3, #10
 80013e4:	e010      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013e6:	2308      	movs	r3, #8
 80013e8:	e00e      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00c      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013ee:	2306      	movs	r3, #6
 80013f0:	e00a      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013f2:	2305      	movs	r3, #5
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x240>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x240>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x240>
 8001406:	2300      	movs	r3, #0
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001418:	4935      	ldr	r1, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x328>)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <HAL_GPIO_Init+0x354>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <HAL_GPIO_Init+0x354>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_GPIO_Init+0x354>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a29      	ldr	r2, [pc, #164]	; (800151c <HAL_GPIO_Init+0x354>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <HAL_GPIO_Init+0x354>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149e:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_GPIO_Init+0x354>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_GPIO_Init+0x354>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_GPIO_Init+0x354>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	f67f ae86 	bls.w	80011e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40013800 	.word	0x40013800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40021400 	.word	0x40021400
 800150c:	40021800 	.word	0x40021800
 8001510:	40021c00 	.word	0x40021c00
 8001514:	40022000 	.word	0x40022000
 8001518:	40022400 	.word	0x40022400
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_PWREx_EnableOverDrive+0x98>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001582:	f7ff fc71 	bl	8000e68 <HAL_GetTick>
 8001586:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001588:	e009      	b.n	800159e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800158a:	f7ff fc6d 	bl	8000e68 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001598:	d901      	bls.n	800159e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e022      	b.n	80015e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015aa:	d1ee      	bne.n	800158a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b8:	f7ff fc56 	bl	8000e68 <HAL_GetTick>
 80015bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015be:	e009      	b.n	80015d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015c0:	f7ff fc52 	bl	8000e68 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ce:	d901      	bls.n	80015d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e007      	b.n	80015e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015e0:	d1ee      	bne.n	80015c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e29b      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8087 	beq.w	8001726 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001618:	4b96      	ldr	r3, [pc, #600]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d00c      	beq.n	800163e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001624:	4b93      	ldr	r3, [pc, #588]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d112      	bne.n	8001656 <HAL_RCC_OscConfig+0x62>
 8001630:	4b90      	ldr	r3, [pc, #576]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163c:	d10b      	bne.n	8001656 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163e:	4b8d      	ldr	r3, [pc, #564]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d06c      	beq.n	8001724 <HAL_RCC_OscConfig+0x130>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d168      	bne.n	8001724 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e275      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x7a>
 8001660:	4b84      	ldr	r3, [pc, #528]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a83      	ldr	r2, [pc, #524]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e02e      	b.n	80016cc <HAL_RCC_OscConfig+0xd8>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x9c>
 8001676:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7e      	ldr	r2, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7b      	ldr	r2, [pc, #492]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0xd8>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0xc0>
 800169a:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a75      	ldr	r2, [pc, #468]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b73      	ldr	r3, [pc, #460]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a72      	ldr	r2, [pc, #456]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0xd8>
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a6e      	ldr	r2, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6b      	ldr	r2, [pc, #428]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fbc8 	bl	8000e68 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fbc4 	bl	8000e68 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e229      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0xe8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fbb4 	bl	8000e68 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fbb0 	bl	8000e68 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e215      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b57      	ldr	r3, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x110>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d069      	beq.n	8001806 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001732:	4b50      	ldr	r3, [pc, #320]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b4d      	ldr	r3, [pc, #308]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x190>
 800174a:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x17a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e1e9      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	493d      	ldr	r1, [pc, #244]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e040      	b.n	8001806 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d023      	beq.n	80017d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fb66 	bl	8000e68 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fb62 	bl	8000e68 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1c7      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4929      	ldr	r1, [pc, #164]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a26      	ldr	r2, [pc, #152]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb42 	bl	8000e68 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fb3e 	bl	8000e68 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1a3      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d038      	beq.n	8001884 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d019      	beq.n	800184e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 800181c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff fb1f 	bl	8000e68 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff fb1b 	bl	8000e68 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e180      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x23a>
 800184c:	e01a      	b.n	8001884 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_RCC_OscConfig+0x280>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fb05 	bl	8000e68 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fb01 	bl	8000e68 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d903      	bls.n	8001878 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e166      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
 8001874:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1ee      	bne.n	8001862 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80a4 	beq.w	80019da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a88      	ldr	r2, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b86      	ldr	r3, [pc, #536]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ba:	4b83      	ldr	r3, [pc, #524]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018c6:	4b80      	ldr	r3, [pc, #512]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7f      	ldr	r2, [pc, #508]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fac9 	bl	8000e68 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff fac5 	bl	8000e68 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e12a      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ec:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x31a>
 8001900:	4b70      	ldr	r3, [pc, #448]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a6f      	ldr	r2, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	e02d      	b.n	800196a <HAL_RCC_OscConfig+0x376>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x33c>
 8001916:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	e01c      	b.n	800196a <HAL_RCC_OscConfig+0x376>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x35e>
 8001938:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a61      	ldr	r2, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a5e      	ldr	r2, [pc, #376]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x376>
 8001952:	4b5c      	ldr	r3, [pc, #368]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a5b      	ldr	r2, [pc, #364]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fa79 	bl	8000e68 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fa75 	bl	8000e68 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0d8      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ee      	beq.n	800197a <HAL_RCC_OscConfig+0x386>
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff fa63 	bl	8000e68 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fa5f 	bl	8000e68 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0c2      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80ae 	beq.w	8001b40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e4:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d06d      	beq.n	8001acc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d14b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fa30 	bl	8000e68 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff fa2c 	bl	8000e68 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e091      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1e:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	061b      	lsls	r3, r3, #24
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	071b      	lsls	r3, r3, #28
 8001a56:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff f9fe 	bl	8000e68 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f9fa 	bl	8000e68 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e05f      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x47c>
 8001a8e:	e057      	b.n	8001b40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f9e4 	bl	8000e68 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f9e0 	bl	8000e68 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e045      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4b0>
 8001ac2:	e03d      	b.n	8001b40 <HAL_RCC_OscConfig+0x54c>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x558>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d030      	beq.n	8001b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d129      	bne.n	8001b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d122      	bne.n	8001b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d119      	bne.n	8001b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10f      	bne.n	8001b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0d0      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d910      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 020f 	bic.w	r2, r3, #15
 8001b7e:	4965      	ldr	r1, [pc, #404]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0b8      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d020      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc8:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b50      	ldr	r3, [pc, #320]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	494d      	ldr	r1, [pc, #308]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d040      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e07f      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e073      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06b      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f023 0203 	bic.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4936      	ldr	r1, [pc, #216]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c44:	f7ff f910 	bl	8000e68 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7ff f90c 	bl	8000e68 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e053      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 020c 	and.w	r2, r3, #12
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1eb      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d210      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 020f 	bic.w	r2, r3, #15
 8001c8a:	4922      	ldr	r1, [pc, #136]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e032      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4916      	ldr	r1, [pc, #88]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ce2:	f000 f821 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	490a      	ldr	r1, [pc, #40]	; (8001d1c <HAL_RCC_ClockConfig+0x1cc>)
 8001cf4:	5ccb      	ldrb	r3, [r1, r3]
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1d0>)
 8001cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x1d4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f86c 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023c00 	.word	0x40023c00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08003ea4 	.word	0x08003ea4
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d2c:	b094      	sub	sp, #80	; 0x50
 8001d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	647b      	str	r3, [r7, #68]	; 0x44
 8001d34:	2300      	movs	r3, #0
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d38:	2300      	movs	r3, #0
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d40:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d00d      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x40>
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	f200 80e1 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x34>
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d003      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d5a:	e0db      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d60:	e0db      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d66:	e0d8      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d72:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	2200      	movs	r2, #0
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
 8001d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	462b      	mov	r3, r5
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	0159      	lsls	r1, r3, #5
 8001da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dac:	0150      	lsls	r0, r2, #5
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4621      	mov	r1, r4
 8001db4:	1a51      	subs	r1, r2, r1
 8001db6:	6139      	str	r1, [r7, #16]
 8001db8:	4629      	mov	r1, r5
 8001dba:	eb63 0301 	sbc.w	r3, r3, r1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dcc:	4659      	mov	r1, fp
 8001dce:	018b      	lsls	r3, r1, #6
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	018a      	lsls	r2, r1, #6
 8001dda:	4651      	mov	r1, sl
 8001ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8001de0:	4659      	mov	r1, fp
 8001de2:	eb63 0901 	sbc.w	r9, r3, r1
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	4699      	mov	r9, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	eb18 0303 	adds.w	r3, r8, r3
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	462b      	mov	r3, r5
 8001e08:	eb49 0303 	adc.w	r3, r9, r3
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	024b      	lsls	r3, r1, #9
 8001e1e:	4621      	mov	r1, r4
 8001e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e24:	4621      	mov	r1, r4
 8001e26:	024a      	lsls	r2, r1, #9
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e38:	f7fe f9fe 	bl	8000238 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e44:	e058      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4611      	mov	r1, r2
 8001e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e60:	4642      	mov	r2, r8
 8001e62:	464b      	mov	r3, r9
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	0159      	lsls	r1, r3, #5
 8001e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e72:	0150      	lsls	r0, r2, #5
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4641      	mov	r1, r8
 8001e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e7e:	4649      	mov	r1, r9
 8001e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e98:	ebb2 040a 	subs.w	r4, r2, sl
 8001e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	00eb      	lsls	r3, r5, #3
 8001eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eae:	00e2      	lsls	r2, r4, #3
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	4643      	mov	r3, r8
 8001eb6:	18e3      	adds	r3, r4, r3
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	464b      	mov	r3, r9
 8001ebc:	eb45 0303 	adc.w	r3, r5, r3
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	028b      	lsls	r3, r1, #10
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed8:	4621      	mov	r1, r4
 8001eda:	028a      	lsls	r2, r1, #10
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	61fa      	str	r2, [r7, #28]
 8001ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eec:	f7fe f9a4 	bl	8000238 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3750      	adds	r7, #80	; 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	007a1200 	.word	0x007a1200

08001f34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08003eb4 	.word	0x08003eb4

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f78:	f7ff ffdc 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0b5b      	lsrs	r3, r3, #13
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08003eb4 	.word	0x08003eb4

08001f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fc4:	4b69      	ldr	r3, [pc, #420]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a68      	ldr	r2, [pc, #416]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fce:	6093      	str	r3, [r2, #8]
 8001fd0:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	4964      	ldr	r1, [pc, #400]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d017      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	4959      	ldr	r1, [pc, #356]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002014:	d101      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d017      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002032:	4b4e      	ldr	r3, [pc, #312]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	494a      	ldr	r1, [pc, #296]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002050:	d101      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 808b 	beq.w	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a39      	ldr	r2, [pc, #228]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
 800208c:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a4:	f7fe fee0 	bl	8000e68 <HAL_GetTick>
 80020a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fedc 	bl	8000e68 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e38f      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d035      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d02e      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800210a:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d114      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fea4 	bl	8000e68 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe fea0 	bl	8000e68 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e351      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ee      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002152:	d111      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002162:	400b      	ands	r3, r1
 8002164:	4901      	ldr	r1, [pc, #4]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
 800216a:	e00b      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800216c:	40023800 	.word	0x40023800
 8002170:	40007000 	.word	0x40007000
 8002174:	0ffffcff 	.word	0x0ffffcff
 8002178:	4bac      	ldr	r3, [pc, #688]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4aab      	ldr	r2, [pc, #684]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002182:	6093      	str	r3, [r2, #8]
 8002184:	4ba9      	ldr	r3, [pc, #676]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	49a6      	ldr	r1, [pc, #664]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	4313      	orrs	r3, r2
 8002194:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021a2:	4ba2      	ldr	r3, [pc, #648]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a8:	4aa0      	ldr	r2, [pc, #640]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021b2:	4b9e      	ldr	r3, [pc, #632]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	499b      	ldr	r1, [pc, #620]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d0:	4b96      	ldr	r3, [pc, #600]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021de:	4993      	ldr	r1, [pc, #588]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f2:	4b8e      	ldr	r3, [pc, #568]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002200:	498a      	ldr	r1, [pc, #552]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002214:	4b85      	ldr	r3, [pc, #532]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002222:	4982      	ldr	r1, [pc, #520]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4979      	ldr	r1, [pc, #484]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002258:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4971      	ldr	r1, [pc, #452]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800227a:	4b6c      	ldr	r3, [pc, #432]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f023 020c 	bic.w	r2, r3, #12
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	4968      	ldr	r1, [pc, #416]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229c:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4960      	ldr	r1, [pc, #384]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	4957      	ldr	r1, [pc, #348]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	494f      	ldr	r1, [pc, #316]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	4946      	ldr	r1, [pc, #280]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002324:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	493e      	ldr	r1, [pc, #248]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002376:	492d      	ldr	r1, [pc, #180]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d011      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002398:	4924      	ldr	r1, [pc, #144]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a8:	d101      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	4914      	ldr	r1, [pc, #80]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00f      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002420:	4902      	ldr	r1, [pc, #8]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002428:	e002      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800243c:	4b8a      	ldr	r3, [pc, #552]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002442:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	4986      	ldr	r1, [pc, #536]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002466:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002470:	497d      	ldr	r1, [pc, #500]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d006      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80d6 	beq.w	8002638 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800248c:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fce6 	bl	8000e68 <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024a0:	f7fe fce2 	bl	8000e68 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e195      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024b2:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d021      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e6:	0e1b      	lsrs	r3, r3, #24
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	019a      	lsls	r2, r3, #6
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	071b      	lsls	r3, r3, #28
 8002506:	4958      	ldr	r1, [pc, #352]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d004      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02e      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d129      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	0f1b      	lsrs	r3, r3, #28
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	019a      	lsls	r2, r3, #6
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	071b      	lsls	r3, r3, #28
 800256e:	493e      	ldr	r1, [pc, #248]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002576:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800257c:	f023 021f 	bic.w	r2, r3, #31
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	3b01      	subs	r3, #1
 8002586:	4938      	ldr	r1, [pc, #224]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01d      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a0:	0e1b      	lsrs	r3, r3, #24
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ae:	0f1b      	lsrs	r3, r3, #28
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	019a      	lsls	r2, r3, #6
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	431a      	orrs	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	071b      	lsls	r3, r3, #28
 80025ce:	4926      	ldr	r1, [pc, #152]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	019a      	lsls	r2, r3, #6
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	071b      	lsls	r3, r3, #28
 80025fe:	491a      	ldr	r1, [pc, #104]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002612:	f7fe fc29 	bl	8000e68 <HAL_GetTick>
 8002616:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800261a:	f7fe fc25 	bl	8000e68 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0d8      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b01      	cmp	r3, #1
 800263c:	f040 80ce 	bne.w	80027dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe fc0c 	bl	8000e68 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002652:	e00b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002654:	f7fe fc08 	bl	8000e68 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d904      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0bb      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002678:	d0ec      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02e      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12a      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026b0:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	0f1b      	lsrs	r3, r3, #28
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	019a      	lsls	r2, r3, #6
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	4944      	ldr	r1, [pc, #272]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	493d      	ldr	r1, [pc, #244]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d022      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270c:	d11d      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	0e1b      	lsrs	r3, r3, #24
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	0f1b      	lsrs	r3, r3, #28
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	019a      	lsls	r2, r3, #6
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	071b      	lsls	r3, r3, #28
 8002742:	4929      	ldr	r1, [pc, #164]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d028      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	0e1b      	lsrs	r3, r3, #24
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	0c1b      	lsrs	r3, r3, #16
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	019a      	lsls	r2, r3, #6
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	071b      	lsls	r3, r3, #28
 800278a:	4917      	ldr	r1, [pc, #92]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	4911      	ldr	r1, [pc, #68]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7fe fb58 	bl	8000e68 <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027bc:	f7fe fb54 	bl	8000e68 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e007      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027da:	d1ef      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e040      	b.n	8002880 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe f9fa 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fb82 	bl	8002f34 <UART_SetConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e022      	b.n	8002880 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fdda 	bl	80033fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fe61 	bl	8003540 <UART_CheckIdleState>
 800287e:	4603      	mov	r3, r0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800289c:	2b20      	cmp	r3, #32
 800289e:	d132      	bne.n	8002906 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Receive_IT+0x24>
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e02b      	b.n	8002908 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d018      	beq.n	80028f6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	613b      	str	r3, [r7, #16]
   return(result);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	69f9      	ldr	r1, [r7, #28]
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e6      	bne.n	80028c4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 ff33 	bl	8003768 <UART_Start_Receive_IT>
 8002902:	4603      	mov	r3, r0
 8002904:	e000      	b.n	8002908 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0ba      	sub	sp, #232	; 0xe8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800293a:	f640 030f 	movw	r3, #2063	; 0x80f
 800293e:	4013      	ands	r3, r2
 8002940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d115      	bne.n	8002978 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00f      	beq.n	8002978 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 82ac 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
      }
      return;
 8002976:	e2a6      	b.n	8002ec6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8117 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800298e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002992:	4b85      	ldr	r3, [pc, #532]	; (8002ba8 <HAL_UART_IRQHandler+0x298>)
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 810a 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800299c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d011      	beq.n	80029cc <HAL_UART_IRQHandler+0xbc>
 80029a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d011      	beq.n	80029fc <HAL_UART_IRQHandler+0xec>
 80029d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2202      	movs	r2, #2
 80029ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d011      	beq.n	8002a2c <HAL_UART_IRQHandler+0x11c>
 8002a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d017      	beq.n	8002a68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2208      	movs	r2, #8
 8002a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5e:	f043 0208 	orr.w	r2, r3, #8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <HAL_UART_IRQHandler+0x18a>
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00c      	beq.n	8002a9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8212 	beq.w	8002eca <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d005      	beq.n	8002af2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d04f      	beq.n	8002b92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fefe 	bl	80038f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d141      	bne.n	8002b8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1d9      	bne.n	8002b06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d013      	beq.n	8002b82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_UART_IRQHandler+0x29c>)
 8002b60:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fb0b 	bl	8001182 <HAL_DMA_Abort_IT>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d017      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e00f      	b.n	8002ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9b6 	bl	8002ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	e00b      	b.n	8002ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9b2 	bl	8002ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	e007      	b.n	8002ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f9ae 	bl	8002ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ba0:	e193      	b.n	8002eca <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	bf00      	nop
    return;
 8002ba4:	e191      	b.n	8002eca <HAL_UART_IRQHandler+0x5ba>
 8002ba6:	bf00      	nop
 8002ba8:	04000120 	.word	0x04000120
 8002bac:	080039bd 	.word	0x080039bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 814c 	bne.w	8002e52 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8145 	beq.w	8002e52 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 813e 	beq.w	8002e52 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2210      	movs	r2, #16
 8002bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	f040 80b6 	bne.w	8002d5a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bfa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8165 	beq.w	8002ece <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	f080 815d 	bcs.w	8002ece <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c28:	f000 8086 	beq.w	8002d38 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1da      	bne.n	8002c2c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e1      	bne.n	8002c76 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cde:	e841 2300 	strex	r3, r2, [r1]
 8002ce2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e3      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	e853 3f00 	ldrex	r3, [r3]
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	f023 0310 	bic.w	r3, r3, #16
 8002d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e4      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f9b5 	bl	80010a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8d8 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d58:	e0b9      	b.n	8002ece <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80ab 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a6 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
 8002daa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e4      	bne.n	8002d86 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	623b      	str	r3, [r7, #32]
   return(result);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002de0:	633a      	str	r2, [r7, #48]	; 0x30
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e3      	bne.n	8002dbc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0310 	bic.w	r3, r3, #16
 8002e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	69b9      	ldr	r1, [r7, #24]
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	617b      	str	r3, [r7, #20]
   return(result);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e4      	bne.n	8002e08 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f85c 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e50:	e03f      	b.n	8002ed2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <HAL_UART_IRQHandler+0x56c>
 8002e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f853 	bl	8002f20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e7a:	e02d      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01c      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
    }
    return;
 8002ea4:	e017      	b.n	8002ed6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
 8002eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fd92 	bl	80039e8 <UART_EndTransmit_IT>
    return;
 8002ec4:	e008      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ec6:	bf00      	nop
 8002ec8:	e006      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002ed6:	bf00      	nop
  }

}
 8002ed8:	37e8      	adds	r7, #232	; 0xe8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop

08002ee0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4ba6      	ldr	r3, [pc, #664]	; (80031f8 <UART_SetConfig+0x2c4>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a94      	ldr	r2, [pc, #592]	; (80031fc <UART_SetConfig+0x2c8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d120      	bne.n	8002ff2 <UART_SetConfig+0xbe>
 8002fb0:	4b93      	ldr	r3, [pc, #588]	; (8003200 <UART_SetConfig+0x2cc>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d816      	bhi.n	8002fec <UART_SetConfig+0xb8>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0x90>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fe1 	.word	0x08002fe1
 8002fcc:	08002fdb 	.word	0x08002fdb
 8002fd0:	08002fe7 	.word	0x08002fe7
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e150      	b.n	800327c <UART_SetConfig+0x348>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e14d      	b.n	800327c <UART_SetConfig+0x348>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e14a      	b.n	800327c <UART_SetConfig+0x348>
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	e147      	b.n	800327c <UART_SetConfig+0x348>
 8002fec:	2310      	movs	r3, #16
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e144      	b.n	800327c <UART_SetConfig+0x348>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a83      	ldr	r2, [pc, #524]	; (8003204 <UART_SetConfig+0x2d0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d132      	bne.n	8003062 <UART_SetConfig+0x12e>
 8002ffc:	4b80      	ldr	r3, [pc, #512]	; (8003200 <UART_SetConfig+0x2cc>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d828      	bhi.n	800305c <UART_SetConfig+0x128>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <UART_SetConfig+0xdc>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003045 	.word	0x08003045
 8003014:	0800305d 	.word	0x0800305d
 8003018:	0800305d 	.word	0x0800305d
 800301c:	0800305d 	.word	0x0800305d
 8003020:	08003051 	.word	0x08003051
 8003024:	0800305d 	.word	0x0800305d
 8003028:	0800305d 	.word	0x0800305d
 800302c:	0800305d 	.word	0x0800305d
 8003030:	0800304b 	.word	0x0800304b
 8003034:	0800305d 	.word	0x0800305d
 8003038:	0800305d 	.word	0x0800305d
 800303c:	0800305d 	.word	0x0800305d
 8003040:	08003057 	.word	0x08003057
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e118      	b.n	800327c <UART_SetConfig+0x348>
 800304a:	2302      	movs	r3, #2
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e115      	b.n	800327c <UART_SetConfig+0x348>
 8003050:	2304      	movs	r3, #4
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e112      	b.n	800327c <UART_SetConfig+0x348>
 8003056:	2308      	movs	r3, #8
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e10f      	b.n	800327c <UART_SetConfig+0x348>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e10c      	b.n	800327c <UART_SetConfig+0x348>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a68      	ldr	r2, [pc, #416]	; (8003208 <UART_SetConfig+0x2d4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d120      	bne.n	80030ae <UART_SetConfig+0x17a>
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <UART_SetConfig+0x2cc>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003076:	2b30      	cmp	r3, #48	; 0x30
 8003078:	d013      	beq.n	80030a2 <UART_SetConfig+0x16e>
 800307a:	2b30      	cmp	r3, #48	; 0x30
 800307c:	d814      	bhi.n	80030a8 <UART_SetConfig+0x174>
 800307e:	2b20      	cmp	r3, #32
 8003080:	d009      	beq.n	8003096 <UART_SetConfig+0x162>
 8003082:	2b20      	cmp	r3, #32
 8003084:	d810      	bhi.n	80030a8 <UART_SetConfig+0x174>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <UART_SetConfig+0x15c>
 800308a:	2b10      	cmp	r3, #16
 800308c:	d006      	beq.n	800309c <UART_SetConfig+0x168>
 800308e:	e00b      	b.n	80030a8 <UART_SetConfig+0x174>
 8003090:	2300      	movs	r3, #0
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e0f2      	b.n	800327c <UART_SetConfig+0x348>
 8003096:	2302      	movs	r3, #2
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e0ef      	b.n	800327c <UART_SetConfig+0x348>
 800309c:	2304      	movs	r3, #4
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e0ec      	b.n	800327c <UART_SetConfig+0x348>
 80030a2:	2308      	movs	r3, #8
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e0e9      	b.n	800327c <UART_SetConfig+0x348>
 80030a8:	2310      	movs	r3, #16
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e0e6      	b.n	800327c <UART_SetConfig+0x348>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a56      	ldr	r2, [pc, #344]	; (800320c <UART_SetConfig+0x2d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d120      	bne.n	80030fa <UART_SetConfig+0x1c6>
 80030b8:	4b51      	ldr	r3, [pc, #324]	; (8003200 <UART_SetConfig+0x2cc>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030c2:	2bc0      	cmp	r3, #192	; 0xc0
 80030c4:	d013      	beq.n	80030ee <UART_SetConfig+0x1ba>
 80030c6:	2bc0      	cmp	r3, #192	; 0xc0
 80030c8:	d814      	bhi.n	80030f4 <UART_SetConfig+0x1c0>
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d009      	beq.n	80030e2 <UART_SetConfig+0x1ae>
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d810      	bhi.n	80030f4 <UART_SetConfig+0x1c0>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <UART_SetConfig+0x1a8>
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d006      	beq.n	80030e8 <UART_SetConfig+0x1b4>
 80030da:	e00b      	b.n	80030f4 <UART_SetConfig+0x1c0>
 80030dc:	2300      	movs	r3, #0
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e0cc      	b.n	800327c <UART_SetConfig+0x348>
 80030e2:	2302      	movs	r3, #2
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e0c9      	b.n	800327c <UART_SetConfig+0x348>
 80030e8:	2304      	movs	r3, #4
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e0c6      	b.n	800327c <UART_SetConfig+0x348>
 80030ee:	2308      	movs	r3, #8
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e0c3      	b.n	800327c <UART_SetConfig+0x348>
 80030f4:	2310      	movs	r3, #16
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e0c0      	b.n	800327c <UART_SetConfig+0x348>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a44      	ldr	r2, [pc, #272]	; (8003210 <UART_SetConfig+0x2dc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d125      	bne.n	8003150 <UART_SetConfig+0x21c>
 8003104:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <UART_SetConfig+0x2cc>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003112:	d017      	beq.n	8003144 <UART_SetConfig+0x210>
 8003114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003118:	d817      	bhi.n	800314a <UART_SetConfig+0x216>
 800311a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311e:	d00b      	beq.n	8003138 <UART_SetConfig+0x204>
 8003120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003124:	d811      	bhi.n	800314a <UART_SetConfig+0x216>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <UART_SetConfig+0x1fe>
 800312a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312e:	d006      	beq.n	800313e <UART_SetConfig+0x20a>
 8003130:	e00b      	b.n	800314a <UART_SetConfig+0x216>
 8003132:	2300      	movs	r3, #0
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0a1      	b.n	800327c <UART_SetConfig+0x348>
 8003138:	2302      	movs	r3, #2
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e09e      	b.n	800327c <UART_SetConfig+0x348>
 800313e:	2304      	movs	r3, #4
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e09b      	b.n	800327c <UART_SetConfig+0x348>
 8003144:	2308      	movs	r3, #8
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e098      	b.n	800327c <UART_SetConfig+0x348>
 800314a:	2310      	movs	r3, #16
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e095      	b.n	800327c <UART_SetConfig+0x348>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <UART_SetConfig+0x2e0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d125      	bne.n	80031a6 <UART_SetConfig+0x272>
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <UART_SetConfig+0x2cc>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003168:	d017      	beq.n	800319a <UART_SetConfig+0x266>
 800316a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316e:	d817      	bhi.n	80031a0 <UART_SetConfig+0x26c>
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003174:	d00b      	beq.n	800318e <UART_SetConfig+0x25a>
 8003176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317a:	d811      	bhi.n	80031a0 <UART_SetConfig+0x26c>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <UART_SetConfig+0x254>
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	d006      	beq.n	8003194 <UART_SetConfig+0x260>
 8003186:	e00b      	b.n	80031a0 <UART_SetConfig+0x26c>
 8003188:	2301      	movs	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e076      	b.n	800327c <UART_SetConfig+0x348>
 800318e:	2302      	movs	r3, #2
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e073      	b.n	800327c <UART_SetConfig+0x348>
 8003194:	2304      	movs	r3, #4
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e070      	b.n	800327c <UART_SetConfig+0x348>
 800319a:	2308      	movs	r3, #8
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e06d      	b.n	800327c <UART_SetConfig+0x348>
 80031a0:	2310      	movs	r3, #16
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e06a      	b.n	800327c <UART_SetConfig+0x348>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <UART_SetConfig+0x2e4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d138      	bne.n	8003222 <UART_SetConfig+0x2ee>
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <UART_SetConfig+0x2cc>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031be:	d017      	beq.n	80031f0 <UART_SetConfig+0x2bc>
 80031c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031c4:	d82a      	bhi.n	800321c <UART_SetConfig+0x2e8>
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ca:	d00b      	beq.n	80031e4 <UART_SetConfig+0x2b0>
 80031cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d0:	d824      	bhi.n	800321c <UART_SetConfig+0x2e8>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <UART_SetConfig+0x2aa>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	d006      	beq.n	80031ea <UART_SetConfig+0x2b6>
 80031dc:	e01e      	b.n	800321c <UART_SetConfig+0x2e8>
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e04b      	b.n	800327c <UART_SetConfig+0x348>
 80031e4:	2302      	movs	r3, #2
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e048      	b.n	800327c <UART_SetConfig+0x348>
 80031ea:	2304      	movs	r3, #4
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e045      	b.n	800327c <UART_SetConfig+0x348>
 80031f0:	2308      	movs	r3, #8
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e042      	b.n	800327c <UART_SetConfig+0x348>
 80031f6:	bf00      	nop
 80031f8:	efff69f3 	.word	0xefff69f3
 80031fc:	40011000 	.word	0x40011000
 8003200:	40023800 	.word	0x40023800
 8003204:	40004400 	.word	0x40004400
 8003208:	40004800 	.word	0x40004800
 800320c:	40004c00 	.word	0x40004c00
 8003210:	40005000 	.word	0x40005000
 8003214:	40011400 	.word	0x40011400
 8003218:	40007800 	.word	0x40007800
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e02c      	b.n	800327c <UART_SetConfig+0x348>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a72      	ldr	r2, [pc, #456]	; (80033f0 <UART_SetConfig+0x4bc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d125      	bne.n	8003278 <UART_SetConfig+0x344>
 800322c:	4b71      	ldr	r3, [pc, #452]	; (80033f4 <UART_SetConfig+0x4c0>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800323a:	d017      	beq.n	800326c <UART_SetConfig+0x338>
 800323c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003240:	d817      	bhi.n	8003272 <UART_SetConfig+0x33e>
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d00b      	beq.n	8003260 <UART_SetConfig+0x32c>
 8003248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324c:	d811      	bhi.n	8003272 <UART_SetConfig+0x33e>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <UART_SetConfig+0x326>
 8003252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003256:	d006      	beq.n	8003266 <UART_SetConfig+0x332>
 8003258:	e00b      	b.n	8003272 <UART_SetConfig+0x33e>
 800325a:	2300      	movs	r3, #0
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e00d      	b.n	800327c <UART_SetConfig+0x348>
 8003260:	2302      	movs	r3, #2
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e00a      	b.n	800327c <UART_SetConfig+0x348>
 8003266:	2304      	movs	r3, #4
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e007      	b.n	800327c <UART_SetConfig+0x348>
 800326c:	2308      	movs	r3, #8
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e004      	b.n	800327c <UART_SetConfig+0x348>
 8003272:	2310      	movs	r3, #16
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e001      	b.n	800327c <UART_SetConfig+0x348>
 8003278:	2310      	movs	r3, #16
 800327a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003284:	d15b      	bne.n	800333e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d828      	bhi.n	80032de <UART_SetConfig+0x3aa>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <UART_SetConfig+0x360>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032c9 	.word	0x080032c9
 80032a0:	080032df 	.word	0x080032df
 80032a4:	080032cf 	.word	0x080032cf
 80032a8:	080032df 	.word	0x080032df
 80032ac:	080032df 	.word	0x080032df
 80032b0:	080032df 	.word	0x080032df
 80032b4:	080032d7 	.word	0x080032d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7fe fe48 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 80032bc:	61b8      	str	r0, [r7, #24]
        break;
 80032be:	e013      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7fe fe58 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 80032c4:	61b8      	str	r0, [r7, #24]
        break;
 80032c6:	e00f      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c8:	4b4b      	ldr	r3, [pc, #300]	; (80033f8 <UART_SetConfig+0x4c4>)
 80032ca:	61bb      	str	r3, [r7, #24]
        break;
 80032cc:	e00c      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ce:	f7fe fd2b 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 80032d2:	61b8      	str	r0, [r7, #24]
        break;
 80032d4:	e008      	b.n	80032e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e004      	b.n	80032e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	77bb      	strb	r3, [r7, #30]
        break;
 80032e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d074      	beq.n	80033d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	005a      	lsls	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d916      	bls.n	8003338 <UART_SetConfig+0x404>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d212      	bcs.n	8003338 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f023 030f 	bic.w	r3, r3, #15
 800331a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	b29a      	uxth	r2, r3
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	4313      	orrs	r3, r2
 800332c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	89fa      	ldrh	r2, [r7, #14]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	e04f      	b.n	80033d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77bb      	strb	r3, [r7, #30]
 800333c:	e04c      	b.n	80033d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d828      	bhi.n	8003396 <UART_SetConfig+0x462>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0x418>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe fdec 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 8003374:	61b8      	str	r0, [r7, #24]
        break;
 8003376:	e013      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe fdfc 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 800337c:	61b8      	str	r0, [r7, #24]
        break;
 800337e:	e00f      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <UART_SetConfig+0x4c4>)
 8003382:	61bb      	str	r3, [r7, #24]
        break;
 8003384:	e00c      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7fe fccf 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 800338a:	61b8      	str	r0, [r7, #24]
        break;
 800338c:	e008      	b.n	80033a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e004      	b.n	80033a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77bb      	strb	r3, [r7, #30]
        break;
 800339e:	bf00      	nop
    }

    if (pclk != 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d018      	beq.n	80033d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	085a      	lsrs	r2, r3, #1
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	441a      	add	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d909      	bls.n	80033d4 <UART_SetConfig+0x4a0>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d205      	bcs.n	80033d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e001      	b.n	80033d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40007c00 	.word	0x40007c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	00f42400 	.word	0x00f42400

080033fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01a      	beq.n	8003512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034fa:	d10a      	bne.n	8003512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003550:	f7fd fc8a 	bl	8000e68 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d10e      	bne.n	8003582 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f831 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e027      	b.n	80035d2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b04      	cmp	r3, #4
 800358e:	d10e      	bne.n	80035ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f81b 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e011      	b.n	80035d2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b09c      	sub	sp, #112	; 0x70
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	e0a7      	b.n	800373c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	f000 80a3 	beq.w	800373c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fd fc37 	bl	8000e68 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <UART_WaitOnFlagUntilTimeout+0x32>
 8003606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003608:	2b00      	cmp	r3, #0
 800360a:	d13f      	bne.n	800368c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003620:	667b      	str	r3, [r7, #100]	; 0x64
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800362a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e6      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3308      	adds	r3, #8
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	663b      	str	r3, [r7, #96]	; 0x60
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3308      	adds	r3, #8
 800365c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800365e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800366c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e068      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d050      	beq.n	800373c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a8:	d148      	bne.n	800373c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
 80036d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e6      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3308      	adds	r3, #8
 80036ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	613b      	str	r3, [r7, #16]
   return(result);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003706:	623a      	str	r2, [r7, #32]
 8003708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	69f9      	ldr	r1, [r7, #28]
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	61bb      	str	r3, [r7, #24]
   return(result);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e5      	bne.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e010      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	429a      	cmp	r2, r3
 8003758:	f43f af48 	beq.w	80035ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3770      	adds	r7, #112	; 0x70
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003768:	b480      	push	{r7}
 800376a:	b097      	sub	sp, #92	; 0x5c
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d10e      	bne.n	80037ba <UART_Start_Receive_IT+0x52>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d105      	bne.n	80037b0 <UART_Start_Receive_IT+0x48>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ae:	e02d      	b.n	800380c <UART_Start_Receive_IT+0xa4>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	22ff      	movs	r2, #255	; 0xff
 80037b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037b8:	e028      	b.n	800380c <UART_Start_Receive_IT+0xa4>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <UART_Start_Receive_IT+0x76>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <UART_Start_Receive_IT+0x6c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d2:	e01b      	b.n	800380c <UART_Start_Receive_IT+0xa4>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	227f      	movs	r2, #127	; 0x7f
 80037d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037dc:	e016      	b.n	800380c <UART_Start_Receive_IT+0xa4>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e6:	d10d      	bne.n	8003804 <UART_Start_Receive_IT+0x9c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <UART_Start_Receive_IT+0x92>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	227f      	movs	r2, #127	; 0x7f
 80037f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037f8:	e008      	b.n	800380c <UART_Start_Receive_IT+0xa4>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	223f      	movs	r2, #63	; 0x3f
 80037fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003802:	e003      	b.n	800380c <UART_Start_Receive_IT+0xa4>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2222      	movs	r2, #34	; 0x22
 8003818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3308      	adds	r3, #8
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	657b      	str	r3, [r7, #84]	; 0x54
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3308      	adds	r3, #8
 800383a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800383c:	64ba      	str	r2, [r7, #72]	; 0x48
 800383e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800384a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e5      	bne.n	800381c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d107      	bne.n	800386a <UART_Start_Receive_IT+0x102>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a21      	ldr	r2, [pc, #132]	; (80038ec <UART_Start_Receive_IT+0x184>)
 8003866:	669a      	str	r2, [r3, #104]	; 0x68
 8003868:	e002      	b.n	8003870 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <UART_Start_Receive_IT+0x188>)
 800386e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d019      	beq.n	80038ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800388c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
 8003898:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e6      	bne.n	8003878 <UART_Start_Receive_IT+0x110>
 80038aa:	e018      	b.n	80038de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f043 0320 	orr.w	r3, r3, #32
 80038c0:	653b      	str	r3, [r7, #80]	; 0x50
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	69f9      	ldr	r1, [r7, #28]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e6      	bne.n	80038ac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	375c      	adds	r7, #92	; 0x5c
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	08003ba3 	.word	0x08003ba3
 80038f0:	08003a3d 	.word	0x08003a3d

080038f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b095      	sub	sp, #84	; 0x54
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
 800391c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e6      	bne.n	80038fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3308      	adds	r3, #8
 8003934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	61fb      	str	r3, [r7, #28]
   return(result);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	64bb      	str	r3, [r7, #72]	; 0x48
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3308      	adds	r3, #8
 800394c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800394e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e5      	bne.n	800392e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	2b01      	cmp	r3, #1
 8003968:	d118      	bne.n	800399c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	60bb      	str	r3, [r7, #8]
   return(result);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	647b      	str	r3, [r7, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	613b      	str	r3, [r7, #16]
   return(result);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e6      	bne.n	800396a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039b0:	bf00      	nop
 80039b2:	3754      	adds	r7, #84	; 0x54
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff fa8a 	bl	8002ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff fa56 	bl	8002ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a34:	bf00      	nop
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b096      	sub	sp, #88	; 0x58
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a4a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a54:	2b22      	cmp	r3, #34	; 0x22
 8003a56:	f040 8098 	bne.w	8003b8a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a68:	b2d9      	uxtb	r1, r3
 8003a6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	400a      	ands	r2, r1
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d17b      	bne.n	8003b9a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003af4:	633a      	str	r2, [r7, #48]	; 0x30
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d12e      	bne.n	8003b82 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	69b9      	ldr	r1, [r7, #24]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	617b      	str	r3, [r7, #20]
   return(result);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e6      	bne.n	8003b2a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d103      	bne.n	8003b72 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff f9c4 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b80:	e00b      	b.n	8003b9a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fc ffe4 	bl	8000b50 <HAL_UART_RxCpltCallback>
}
 8003b88:	e007      	b.n	8003b9a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0208 	orr.w	r2, r2, #8
 8003b98:	619a      	str	r2, [r3, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	3758      	adds	r7, #88	; 0x58
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b096      	sub	sp, #88	; 0x58
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bba:	2b22      	cmp	r3, #34	; 0x22
 8003bbc:	f040 8098 	bne.w	8003cf0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bd0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003bd4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bde:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d17b      	bne.n	8003d00 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	643b      	str	r3, [r7, #64]	; 0x40
 8003c28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d12e      	bne.n	8003ce8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f023 0310 	bic.w	r3, r3, #16
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6979      	ldr	r1, [r7, #20]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e6      	bne.n	8003c90 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d103      	bne.n	8003cd8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff f911 	bl	8002f08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ce6:	e00b      	b.n	8003d00 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fc ff31 	bl	8000b50 <HAL_UART_RxCpltCallback>
}
 8003cee:	e007      	b.n	8003d00 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0208 	orr.w	r2, r2, #8
 8003cfe:	619a      	str	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	3758      	adds	r7, #88	; 0x58
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <atoi>:
 8003d08:	220a      	movs	r2, #10
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	f000 b8b4 	b.w	8003e78 <strtol>

08003d10 <__errno>:
 8003d10:	4b01      	ldr	r3, [pc, #4]	; (8003d18 <__errno+0x8>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2000000c 	.word	0x2000000c

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4d0d      	ldr	r5, [pc, #52]	; (8003d54 <__libc_init_array+0x38>)
 8003d20:	4c0d      	ldr	r4, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d22:	1b64      	subs	r4, r4, r5
 8003d24:	10a4      	asrs	r4, r4, #2
 8003d26:	2600      	movs	r6, #0
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	4d0b      	ldr	r5, [pc, #44]	; (8003d5c <__libc_init_array+0x40>)
 8003d2e:	4c0c      	ldr	r4, [pc, #48]	; (8003d60 <__libc_init_array+0x44>)
 8003d30:	f000 f8ac 	bl	8003e8c <_init>
 8003d34:	1b64      	subs	r4, r4, r5
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	2600      	movs	r6, #0
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d44:	4798      	blx	r3
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4e:	4798      	blx	r3
 8003d50:	3601      	adds	r6, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	08003fc8 	.word	0x08003fc8
 8003d58:	08003fc8 	.word	0x08003fc8
 8003d5c:	08003fc8 	.word	0x08003fc8
 8003d60:	08003fcc 	.word	0x08003fcc

08003d64 <memset>:
 8003d64:	4402      	add	r2, r0
 8003d66:	4603      	mov	r3, r0
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <memset+0xa>
 8003d6c:	4770      	bx	lr
 8003d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d72:	e7f9      	b.n	8003d68 <memset+0x4>

08003d74 <_strtol_l.constprop.0>:
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7a:	d001      	beq.n	8003d80 <_strtol_l.constprop.0+0xc>
 8003d7c:	2b24      	cmp	r3, #36	; 0x24
 8003d7e:	d906      	bls.n	8003d8e <_strtol_l.constprop.0+0x1a>
 8003d80:	f7ff ffc6 	bl	8003d10 <__errno>
 8003d84:	2316      	movs	r3, #22
 8003d86:	6003      	str	r3, [r0, #0]
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003e74 <_strtol_l.constprop.0+0x100>
 8003d92:	460d      	mov	r5, r1
 8003d94:	462e      	mov	r6, r5
 8003d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003d9e:	f017 0708 	ands.w	r7, r7, #8
 8003da2:	d1f7      	bne.n	8003d94 <_strtol_l.constprop.0+0x20>
 8003da4:	2c2d      	cmp	r4, #45	; 0x2d
 8003da6:	d132      	bne.n	8003e0e <_strtol_l.constprop.0+0x9a>
 8003da8:	782c      	ldrb	r4, [r5, #0]
 8003daa:	2701      	movs	r7, #1
 8003dac:	1cb5      	adds	r5, r6, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d05b      	beq.n	8003e6a <_strtol_l.constprop.0+0xf6>
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d109      	bne.n	8003dca <_strtol_l.constprop.0+0x56>
 8003db6:	2c30      	cmp	r4, #48	; 0x30
 8003db8:	d107      	bne.n	8003dca <_strtol_l.constprop.0+0x56>
 8003dba:	782c      	ldrb	r4, [r5, #0]
 8003dbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003dc0:	2c58      	cmp	r4, #88	; 0x58
 8003dc2:	d14d      	bne.n	8003e60 <_strtol_l.constprop.0+0xec>
 8003dc4:	786c      	ldrb	r4, [r5, #1]
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	3502      	adds	r5, #2
 8003dca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003dce:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dd2:	f04f 0c00 	mov.w	ip, #0
 8003dd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8003dda:	4666      	mov	r6, ip
 8003ddc:	fb03 8a19 	mls	sl, r3, r9, r8
 8003de0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003de4:	f1be 0f09 	cmp.w	lr, #9
 8003de8:	d816      	bhi.n	8003e18 <_strtol_l.constprop.0+0xa4>
 8003dea:	4674      	mov	r4, lr
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	dd24      	ble.n	8003e3a <_strtol_l.constprop.0+0xc6>
 8003df0:	f1bc 0f00 	cmp.w	ip, #0
 8003df4:	db1e      	blt.n	8003e34 <_strtol_l.constprop.0+0xc0>
 8003df6:	45b1      	cmp	r9, r6
 8003df8:	d31c      	bcc.n	8003e34 <_strtol_l.constprop.0+0xc0>
 8003dfa:	d101      	bne.n	8003e00 <_strtol_l.constprop.0+0x8c>
 8003dfc:	45a2      	cmp	sl, r4
 8003dfe:	db19      	blt.n	8003e34 <_strtol_l.constprop.0+0xc0>
 8003e00:	fb06 4603 	mla	r6, r6, r3, r4
 8003e04:	f04f 0c01 	mov.w	ip, #1
 8003e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e0c:	e7e8      	b.n	8003de0 <_strtol_l.constprop.0+0x6c>
 8003e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8003e10:	bf04      	itt	eq
 8003e12:	782c      	ldrbeq	r4, [r5, #0]
 8003e14:	1cb5      	addeq	r5, r6, #2
 8003e16:	e7ca      	b.n	8003dae <_strtol_l.constprop.0+0x3a>
 8003e18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003e1c:	f1be 0f19 	cmp.w	lr, #25
 8003e20:	d801      	bhi.n	8003e26 <_strtol_l.constprop.0+0xb2>
 8003e22:	3c37      	subs	r4, #55	; 0x37
 8003e24:	e7e2      	b.n	8003dec <_strtol_l.constprop.0+0x78>
 8003e26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003e2a:	f1be 0f19 	cmp.w	lr, #25
 8003e2e:	d804      	bhi.n	8003e3a <_strtol_l.constprop.0+0xc6>
 8003e30:	3c57      	subs	r4, #87	; 0x57
 8003e32:	e7db      	b.n	8003dec <_strtol_l.constprop.0+0x78>
 8003e34:	f04f 3cff 	mov.w	ip, #4294967295
 8003e38:	e7e6      	b.n	8003e08 <_strtol_l.constprop.0+0x94>
 8003e3a:	f1bc 0f00 	cmp.w	ip, #0
 8003e3e:	da05      	bge.n	8003e4c <_strtol_l.constprop.0+0xd8>
 8003e40:	2322      	movs	r3, #34	; 0x22
 8003e42:	6003      	str	r3, [r0, #0]
 8003e44:	4646      	mov	r6, r8
 8003e46:	b942      	cbnz	r2, 8003e5a <_strtol_l.constprop.0+0xe6>
 8003e48:	4630      	mov	r0, r6
 8003e4a:	e79e      	b.n	8003d8a <_strtol_l.constprop.0+0x16>
 8003e4c:	b107      	cbz	r7, 8003e50 <_strtol_l.constprop.0+0xdc>
 8003e4e:	4276      	negs	r6, r6
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	d0f9      	beq.n	8003e48 <_strtol_l.constprop.0+0xd4>
 8003e54:	f1bc 0f00 	cmp.w	ip, #0
 8003e58:	d000      	beq.n	8003e5c <_strtol_l.constprop.0+0xe8>
 8003e5a:	1e69      	subs	r1, r5, #1
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	e7f3      	b.n	8003e48 <_strtol_l.constprop.0+0xd4>
 8003e60:	2430      	movs	r4, #48	; 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1b1      	bne.n	8003dca <_strtol_l.constprop.0+0x56>
 8003e66:	2308      	movs	r3, #8
 8003e68:	e7af      	b.n	8003dca <_strtol_l.constprop.0+0x56>
 8003e6a:	2c30      	cmp	r4, #48	; 0x30
 8003e6c:	d0a5      	beq.n	8003dba <_strtol_l.constprop.0+0x46>
 8003e6e:	230a      	movs	r3, #10
 8003e70:	e7ab      	b.n	8003dca <_strtol_l.constprop.0+0x56>
 8003e72:	bf00      	nop
 8003e74:	08003ebd 	.word	0x08003ebd

08003e78 <strtol>:
 8003e78:	4613      	mov	r3, r2
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	4802      	ldr	r0, [pc, #8]	; (8003e88 <strtol+0x10>)
 8003e80:	6800      	ldr	r0, [r0, #0]
 8003e82:	f7ff bf77 	b.w	8003d74 <_strtol_l.constprop.0>
 8003e86:	bf00      	nop
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <_init>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr

08003e98 <_fini>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr
