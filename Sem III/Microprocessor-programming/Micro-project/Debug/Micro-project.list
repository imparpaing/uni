
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fdc  08004fdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe4  08004fe4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000070  0800505c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800505c  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b947  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b71  00000000  00000000  0002b9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027087  00000000  00000000  0002e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1f1  00000000  00000000  00055607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1aba  00000000  00000000  000607f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001522b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a8  00000000  00000000  00152304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004e10 	.word	0x08004e10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004e10 	.word	0x08004e10

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Print single character to terminal
void uart_print(unsigned char x)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	USART3->TDR = (x);
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <uart_print+0x2c>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 8000604:	bf00      	nop
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <uart_print+0x2c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <uart_print+0x12>
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40004800 	.word	0x40004800

08000624 <char_is_endmessage>:

// --- Reception ---
uint8_t char_is_endmessage(char c)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d002      	beq.n	800063a <char_is_endmessage+0x16>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d101      	bne.n	800063e <char_is_endmessage+0x1a>
	{
		return 1;
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <char_is_endmessage+0x1c>
	}
	else return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <rx_has_data>:

uint8_t rx_has_data()
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <rx_has_data+0x24>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <rx_has_data+0x28>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	429a      	cmp	r2, r3
 800065e:	d101      	bne.n	8000664 <rx_has_data+0x18>
	{
		return 0;
 8000660:	2300      	movs	r3, #0
 8000662:	e000      	b.n	8000666 <rx_has_data+0x1a>
	}
	else return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	2000036e 	.word	0x2000036e
 8000674:	20000370 	.word	0x20000370

08000678 <increase_rx_empty>:

void increase_rx_empty()
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	rx_empty++;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <increase_rx_empty+0x2c>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	3301      	adds	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <increase_rx_empty+0x2c>)
 8000688:	801a      	strh	r2, [r3, #0]
	if(rx_empty >= BUFFER_LENGTH)
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <increase_rx_empty+0x2c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	2b1d      	cmp	r3, #29
 8000692:	d902      	bls.n	800069a <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <increase_rx_empty+0x2c>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
	}
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	2000036e 	.word	0x2000036e

080006a8 <increase_rx_busy>:

void increase_rx_busy()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	rx_busy++;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <increase_rx_busy+0x2c>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <increase_rx_busy+0x2c>)
 80006b8:	801a      	strh	r2, [r3, #0]
	if(rx_busy >= BUFFER_LENGTH)
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <increase_rx_busy+0x2c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	2b1d      	cmp	r3, #29
 80006c2:	d902      	bls.n	80006ca <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <increase_rx_busy+0x2c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	801a      	strh	r2, [r3, #0]
	}
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	20000370 	.word	0x20000370

080006d8 <tx_has_data>:

// --- Transmission ---
uint8_t tx_has_data()
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	if(tx_empty == tx_busy)
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <tx_has_data+0x24>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <tx_has_data+0x28>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d101      	bne.n	80006f0 <tx_has_data+0x18>
	{
		return 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	e000      	b.n	80006f2 <tx_has_data+0x1a>
	}
	else return 1;
 80006f0:	2301      	movs	r3, #1
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	20000392 	.word	0x20000392
 8000700:	20000394 	.word	0x20000394

08000704 <increase_tx_busy>:
		tx_empty = 0;
	}
}

void increase_tx_busy()
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	tx_busy++;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <increase_tx_busy+0x2c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	b29b      	uxth	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <increase_tx_busy+0x2c>)
 8000714:	801a      	strh	r2, [r3, #0]
	if(tx_busy >= BUFFER_LENGTH)
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <increase_tx_busy+0x2c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	b29b      	uxth	r3, r3
 800071c:	2b1d      	cmp	r3, #29
 800071e:	d902      	bls.n	8000726 <increase_tx_busy+0x22>
	{
		tx_busy = 0;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <increase_tx_busy+0x2c>)
 8000722:	2200      	movs	r2, #0
 8000724:	801a      	strh	r2, [r3, #0]
	}
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	20000394 	.word	0x20000394

08000734 <char_is_frame_start_end>:

// Check for frame start and frame end characters
uint8_t char_is_frame_start_end(char c)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if (c == '#' || c == ';')
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b23      	cmp	r3, #35	; 0x23
 8000742:	d002      	beq.n	800074a <char_is_frame_start_end+0x16>
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b3b      	cmp	r3, #59	; 0x3b
 8000748:	d101      	bne.n	800074e <char_is_frame_start_end+0x1a>
	{
		return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e000      	b.n	8000750 <char_is_frame_start_end+0x1c>
	}
	else return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <get_char>:

// Get single character from the reception buffer
uint8_t get_char()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <get_char+0x24>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <get_char+0x28>)
 800076c:	5c9b      	ldrb	r3, [r3, r2]
 800076e:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000770:	f7ff ff9a 	bl	80006a8 <increase_rx_busy>
	return tmp;
 8000774:	79fb      	ldrb	r3, [r7, #7]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000370 	.word	0x20000370
 8000784:	20000350 	.word	0x20000350

08000788 <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000794:	e041      	b.n	800081a <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <get_message+0xa8>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	461c      	mov	r4, r3
 800079c:	f7ff ffde 	bl	800075c <get_char>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <get_message+0xac>)
 80007a6:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <get_message+0xa8>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <get_message+0xac>)
 80007b0:	5c9b      	ldrb	r3, [r3, r2]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff36 	bl	8000624 <char_is_endmessage>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d021      	beq.n	8000802 <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <get_message+0xa8>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <get_message+0xac>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e009      	b.n	80007e4 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	440b      	add	r3, r1
 80007d8:	4916      	ldr	r1, [pc, #88]	; (8000834 <get_message+0xac>)
 80007da:	5c8a      	ldrb	r2, [r1, r2]
 80007dc:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3301      	adds	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <get_message+0xa8>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3ef      	bcc.n	80007d0 <get_message+0x48>
			}

			message_length = idx;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <get_message+0xa8>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <get_message+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	801a      	strh	r2, [r3, #0]
			return message_length;
 80007fc:	89bb      	ldrh	r3, [r7, #12]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	e011      	b.n	8000826 <get_message+0x9e>
		}
		else
		{
			idx++;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <get_message+0xa8>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <get_message+0xa8>)
 800080c:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <get_message+0xa8>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	2b1e      	cmp	r3, #30
 8000814:	d901      	bls.n	800081a <get_message+0x92>
 8000816:	2300      	movs	r3, #0
 8000818:	e005      	b.n	8000826 <get_message+0x9e>
	while(rx_has_data() == 1)
 800081a:	f7ff ff17 	bl	800064c <rx_has_data>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d0b8      	beq.n	8000796 <get_message+0xe>
		}
	}
	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bd90      	pop	{r4, r7, pc}
 800082e:	bf00      	nop
 8000830:	20000396 	.word	0x20000396
 8000834:	20000398 	.word	0x20000398

08000838 <return_message>:

// Send response from STM
void return_message(char *message, ...)
{
 8000838:	b40f      	push	{r0, r1, r2, r3}
 800083a:	b590      	push	{r4, r7, lr}
 800083c:	b08b      	sub	sp, #44	; 0x2c
 800083e:	af00      	add	r7, sp, #0
	// Store STM return message
	char response[BUFFER_LENGTH];
	uint16_t idx;

	va_list arglist;
	va_start(arglist, message);
 8000840:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000844:	603b      	str	r3, [r7, #0]
	vsprintf(response, message, arglist);
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fe87 	bl	8004560 <vsiprintf>
	va_end(arglist);

	// Set index to the first empty space in transmission buffer
	idx = tx_empty;
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <return_message+0xb4>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	84fb      	strh	r3, [r7, #38]	; 0x26

	// Send response to the transmission buffer
	for (uint16_t i=0; i<strlen(response); i++)
 8000858:	2300      	movs	r3, #0
 800085a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800085c:	e012      	b.n	8000884 <return_message+0x4c>
	{
		tx_buffer[idx] = response[i];
 800085e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000860:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000862:	3228      	adds	r2, #40	; 0x28
 8000864:	443a      	add	r2, r7
 8000866:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <return_message+0xb8>)
 800086c:	54d1      	strb	r1, [r2, r3]
		idx++;
 800086e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000870:	3301      	adds	r3, #1
 8000872:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (idx >= BUFFER_LENGTH)
 8000874:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000876:	2b1d      	cmp	r3, #29
 8000878:	d901      	bls.n	800087e <return_message+0x46>
			idx = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint16_t i=0; i<strlen(response); i++)
 800087e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000880:	3301      	adds	r3, #1
 8000882:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000884:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fcd9 	bl	8000240 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	429c      	cmp	r4, r3
 8000892:	d3e4      	bcc.n	800085e <return_message+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
	}
	__disable_irq();

	// Check if there is no more data to transmit
	if (tx_has_data() == 0 && (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TXE) == SET))
 8000898:	f7ff ff1e 	bl	80006d8 <tx_has_data>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d117      	bne.n	80008d2 <return_message+0x9a>
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <return_message+0xbc>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ac:	2b80      	cmp	r3, #128	; 0x80
 80008ae:	d110      	bne.n	80008d2 <return_message+0x9a>
	{
		tx_empty = idx;
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <return_message+0xb4>)
 80008b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008b4:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart3, &tx_buffer[tx_busy], 1);
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <return_message+0xc0>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <return_message+0xb8>)
 80008c0:	4413      	add	r3, r2
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <return_message+0xbc>)
 80008c8:	f002 fa14 	bl	8002cf4 <HAL_UART_Transmit_IT>
		increase_tx_busy();
 80008cc:	f7ff ff1a 	bl	8000704 <increase_tx_busy>
 80008d0:	e002      	b.n	80008d8 <return_message+0xa0>
	}
	else
		tx_empty = idx;
 80008d2:	4a06      	ldr	r2, [pc, #24]	; (80008ec <return_message+0xb4>)
 80008d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008d6:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008d8:	b662      	cpsie	i
}
 80008da:	bf00      	nop

	__enable_irq();
}
 80008dc:	bf00      	nop
 80008de:	372c      	adds	r7, #44	; 0x2c
 80008e0:	46bd      	mov	sp, r7
 80008e2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80008e6:	b004      	add	sp, #16
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	20000392 	.word	0x20000392
 80008f0:	20000374 	.word	0x20000374
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	20000394 	.word	0x20000394

080008fc <analyze_frame>:

// Analyze frame content
uint8_t analyze_frame(char *message)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b0a3      	sub	sp, #140	; 0x8c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	// Store last analyzed char position
	uint16_t collection_index = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	// Check for '#' and ';' characters in received message
	char *frame_begin;
	char *frame_end;

	frame_begin = strchr(message, '#');
 800090a:	2123      	movs	r1, #35	; 0x23
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f003 fd77 	bl	8004400 <strchr>
 8000912:	67b8      	str	r0, [r7, #120]	; 0x78
	frame_end = strchr(message, ';');
 8000914:	213b      	movs	r1, #59	; 0x3b
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f003 fd72 	bl	8004400 <strchr>
 800091c:	6778      	str	r0, [r7, #116]	; 0x74

	if (frame_begin == NULL || frame_end == NULL)
 800091e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <analyze_frame+0x2e>
 8000924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000926:	2b00      	cmp	r3, #0
 8000928:	d109      	bne.n	800093e <analyze_frame+0x42>
	{
		uart_print('%');
 800092a:	2025      	movs	r0, #37	; 0x25
 800092c:	f7ff fe62 	bl	80005f4 <uart_print>
		return 0;
 8000930:	2300      	movs	r3, #0
 8000932:	e168      	b.n	8000c06 <analyze_frame+0x30a>
	}

	// Skip any character before '#' is found
	while (message[collection_index] != '#')
		collection_index++;
 8000934:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000938:	3301      	adds	r3, #1
 800093a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	while (message[collection_index] != '#')
 800093e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b23      	cmp	r3, #35	; 0x23
 800094a:	d1f3      	bne.n	8000934 <analyze_frame+0x38>

	// Get frame start char ( '#' )
	while (message[collection_index] == '#')
 800094c:	e004      	b.n	8000958 <analyze_frame+0x5c>
		collection_index++;
 800094e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000952:	3301      	adds	r3, #1
 8000954:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	while (message[collection_index] == '#')
 8000958:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b23      	cmp	r3, #35	; 0x23
 8000964:	d0f3      	beq.n	800094e <analyze_frame+0x52>

	// Get sender
	for (uint8_t i=0; i<3; i++)
 8000966:	2300      	movs	r3, #0
 8000968:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 800096c:	e031      	b.n	80009d2 <analyze_frame+0xd6>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1 || message[collection_index] == ' ')
 800096e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fedb 	bl	8000734 <char_is_frame_start_end>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d006      	beq.n	8000992 <analyze_frame+0x96>
 8000984:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b20      	cmp	r3, #32
 8000990:	d10c      	bne.n	80009ac <analyze_frame+0xb0>
		{
			// Send [CHECKSENDER] message
			char CHECKSENDER[] = "CHECKSENDER\r\n";
 8000992:	4b9f      	ldr	r3, [pc, #636]	; (8000c10 <analyze_frame+0x314>)
 8000994:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099a:	c407      	stmia	r4!, {r0, r1, r2}
 800099c:	8023      	strh	r3, [r4, #0]
			return_message(CHECKSENDER);
 800099e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff48 	bl	8000838 <return_message>
			return 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	e12c      	b.n	8000c06 <analyze_frame+0x30a>
		}

		sender[i] = message[collection_index];
 80009ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	441a      	add	r2, r3
 80009b4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80009b8:	7811      	ldrb	r1, [r2, #0]
 80009ba:	4a96      	ldr	r2, [pc, #600]	; (8000c14 <analyze_frame+0x318>)
 80009bc:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 80009be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80009c2:	3301      	adds	r3, #1
 80009c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for (uint8_t i=0; i<3; i++)
 80009c8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80009cc:	3301      	adds	r3, #1
 80009ce:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80009d2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d9c9      	bls.n	800096e <analyze_frame+0x72>
	}

	// Get receiver
	for (uint8_t i=0; i<3; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80009e0:	e031      	b.n	8000a46 <analyze_frame+0x14a>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1 || message[collection_index] == ' ')
 80009e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fea1 	bl	8000734 <char_is_frame_start_end>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d006      	beq.n	8000a06 <analyze_frame+0x10a>
 80009f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b20      	cmp	r3, #32
 8000a04:	d10c      	bne.n	8000a20 <analyze_frame+0x124>
		{
			// Send [CHECKRECEIVER] message
			char CHECKRECEIVER[] = "CHECKRECEIVER\r\n";
 8000a06:	4b84      	ldr	r3, [pc, #528]	; (8000c18 <analyze_frame+0x31c>)
 8000a08:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return_message(CHECKRECEIVER);
 8000a12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff0e 	bl	8000838 <return_message>
			return 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e0f2      	b.n	8000c06 <analyze_frame+0x30a>
		}

		receiver[i] = message[collection_index];
 8000a20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	441a      	add	r2, r3
 8000a28:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000a2c:	7811      	ldrb	r1, [r2, #0]
 8000a2e:	4a7b      	ldr	r2, [pc, #492]	; (8000c1c <analyze_frame+0x320>)
 8000a30:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000a32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for (uint8_t i=0; i<3; i++)
 8000a3c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000a40:	3301      	adds	r3, #1
 8000a42:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000a46:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d9c9      	bls.n	80009e2 <analyze_frame+0xe6>
	}

	// Get command length
	for (uint8_t i=0; i<3; i++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000a54:	e02d      	b.n	8000ab2 <analyze_frame+0x1b6>
	{
		if (!(message[collection_index] >= 0x30 && message[collection_index] <= 0x39))
 8000a56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b2f      	cmp	r3, #47	; 0x2f
 8000a62:	d906      	bls.n	8000a72 <analyze_frame+0x176>
 8000a64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b39      	cmp	r3, #57	; 0x39
 8000a70:	d90c      	bls.n	8000a8c <analyze_frame+0x190>
		{
			// Send [CHECKLENGTH] message
			char CHECKLENGTH[] = "CHECKLENGTH\r\n";
 8000a72:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <analyze_frame+0x324>)
 8000a74:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a7a:	c407      	stmia	r4!, {r0, r1, r2}
 8000a7c:	8023      	strh	r3, [r4, #0]
			return_message(CHECKLENGTH);
 8000a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fed8 	bl	8000838 <return_message>
			return 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e0bc      	b.n	8000c06 <analyze_frame+0x30a>
		}

		command_chars[i] = message[collection_index];
 8000a8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	441a      	add	r2, r3
 8000a94:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000a98:	7811      	ldrb	r1, [r2, #0]
 8000a9a:	4a62      	ldr	r2, [pc, #392]	; (8000c24 <analyze_frame+0x328>)
 8000a9c:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000a9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for (uint8_t i=0; i<3; i++)
 8000aa8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000aac:	3301      	adds	r3, #1
 8000aae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000ab2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d9cd      	bls.n	8000a56 <analyze_frame+0x15a>
	}

	// Get data field length as integer value
	// Use length to get characters from 'data' array in next step
	command_length = atoi(command_chars);
 8000aba:	485a      	ldr	r0, [pc, #360]	; (8000c24 <analyze_frame+0x328>)
 8000abc:	f003 fc69 	bl	8004392 <atoi>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b58      	ldr	r3, [pc, #352]	; (8000c28 <analyze_frame+0x32c>)
 8000ac6:	801a      	strh	r2, [r3, #0]

	// Check declared message length
	if (command_length == 0)
 8000ac8:	4b57      	ldr	r3, [pc, #348]	; (8000c28 <analyze_frame+0x32c>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10c      	bne.n	8000aea <analyze_frame+0x1ee>
	{
		// Send [FRAMEEMPTY] message
		char FRAMEEMPTY[] = "FRAMEEMPTY\r\n";
 8000ad0:	4b56      	ldr	r3, [pc, #344]	; (8000c2c <analyze_frame+0x330>)
 8000ad2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad8:	c407      	stmia	r4!, {r0, r1, r2}
 8000ada:	7023      	strb	r3, [r4, #0]
		return_message(FRAMEEMPTY);
 8000adc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fea9 	bl	8000838 <return_message>
		return 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e08d      	b.n	8000c06 <analyze_frame+0x30a>
	}
	else if (command_length > MAX_DATA_LENGTH)
 8000aea:	4b4f      	ldr	r3, [pc, #316]	; (8000c28 <analyze_frame+0x32c>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000af2:	d90f      	bls.n	8000b14 <analyze_frame+0x218>
	{
		// Send [DATAOVERFLOW] message
		char DATAOVERFLOW[] = "DATAOVERFLOW\r\n";
 8000af4:	4b4e      	ldr	r3, [pc, #312]	; (8000c30 <analyze_frame+0x334>)
 8000af6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afc:	c407      	stmia	r4!, {r0, r1, r2}
 8000afe:	8023      	strh	r3, [r4, #0]
 8000b00:	3402      	adds	r4, #2
 8000b02:	0c1b      	lsrs	r3, r3, #16
 8000b04:	7023      	strb	r3, [r4, #0]
		return_message(DATAOVERFLOW);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fe94 	bl	8000838 <return_message>
		return 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e078      	b.n	8000c06 <analyze_frame+0x30a>
	}

	// Pass command length to the variable outside the function
	data_len = command_length;
 8000b14:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <analyze_frame+0x32c>)
 8000b16:	881a      	ldrh	r2, [r3, #0]
 8000b18:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <analyze_frame+0x338>)
 8000b1a:	801a      	strh	r2, [r3, #0]

	// Get data
	for (uint16_t i=0; i<command_length; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8000b22:	e02a      	b.n	8000b7a <analyze_frame+0x27e>
	{
		if (char_is_frame_start_end(message[collection_index]) == 1)
 8000b24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe00 	bl	8000734 <char_is_frame_start_end>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10c      	bne.n	8000b54 <analyze_frame+0x258>
		{
			// Send [CHECKDATA] message
			char CHECKDATA[] = "CHECKDATA\r\n";
 8000b3a:	4a3f      	ldr	r2, [pc, #252]	; (8000c38 <analyze_frame+0x33c>)
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			return_message(CHECKDATA);
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe74 	bl	8000838 <return_message>
			return 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	e058      	b.n	8000c06 <analyze_frame+0x30a>
		}

		data[i] = message[collection_index];
 8000b54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	441a      	add	r2, r3
 8000b5c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000b60:	7811      	ldrb	r1, [r2, #0]
 8000b62:	4a36      	ldr	r2, [pc, #216]	; (8000c3c <analyze_frame+0x340>)
 8000b64:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000b66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for (uint16_t i=0; i<command_length; i++)
 8000b70:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000b74:	3301      	adds	r3, #1
 8000b76:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <analyze_frame+0x32c>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d3ce      	bcc.n	8000b24 <analyze_frame+0x228>
	}

	// Get checksum
	for (uint8_t i=0; i<3; i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000b8c:	e02d      	b.n	8000bea <analyze_frame+0x2ee>
	{
		if (!(message[collection_index] >= 0x30 && message[collection_index] <= 0x39))
 8000b8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b2f      	cmp	r3, #47	; 0x2f
 8000b9a:	d906      	bls.n	8000baa <analyze_frame+0x2ae>
 8000b9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b39      	cmp	r3, #57	; 0x39
 8000ba8:	d90c      	bls.n	8000bc4 <analyze_frame+0x2c8>
		{
			// Send [CHECKCSUM] message
			char CHECKCSUM[] = "CHECKCSUM\r\n";
 8000baa:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <analyze_frame+0x344>)
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			return_message(CHECKCSUM);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe3c 	bl	8000838 <return_message>
			return 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e020      	b.n	8000c06 <analyze_frame+0x30a>
		}

		checksum[i] = message[collection_index];
 8000bc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	441a      	add	r2, r3
 8000bcc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000bd0:	7811      	ldrb	r1, [r2, #0]
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <analyze_frame+0x348>)
 8000bd4:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000bd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	for (uint8_t i=0; i<3; i++)
 8000be0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000be4:	3301      	adds	r3, #1
 8000be6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000bea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d9cd      	bls.n	8000b8e <analyze_frame+0x292>
	}

	// Get frame end char ( ';' )
	if (message[collection_index] == ';')
 8000bf2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b3b      	cmp	r3, #59	; 0x3b
 8000bfe:	d101      	bne.n	8000c04 <analyze_frame+0x308>
		return 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <analyze_frame+0x30a>
	// Otherwise return 0
	else return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	378c      	adds	r7, #140	; 0x8c
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08004e28 	.word	0x08004e28
 8000c14:	20000138 	.word	0x20000138
 8000c18:	08004e38 	.word	0x08004e38
 8000c1c:	2000013c 	.word	0x2000013c
 8000c20:	08004e48 	.word	0x08004e48
 8000c24:	20000140 	.word	0x20000140
 8000c28:	20000144 	.word	0x20000144
 8000c2c:	08004e58 	.word	0x08004e58
 8000c30:	08004e68 	.word	0x08004e68
 8000c34:	2000034c 	.word	0x2000034c
 8000c38:	08004e78 	.word	0x08004e78
 8000c3c:	20000148 	.word	0x20000148
 8000c40:	08004e84 	.word	0x08004e84
 8000c44:	20000348 	.word	0x20000348

08000c48 <execute_command>:

// Execute command
void execute_command(uint8_t *frame_command, uint16_t frame_command_length)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
//	{
//		// Return empty command message
//		for (uint16_t i=0; i<(sizeof(frameempty)-2); i++)
//			uart_print(frameempty[i]);
//	}
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f000 fae4 	bl	8001232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f84f 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 f8eb 	bl	8000e48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c72:	f000 f8b9 	bl	8000de8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	491d      	ldr	r1, [pc, #116]	; (8000cf0 <main+0x90>)
 8000c7a:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <main+0x94>)
 8000c7c:	f002 f898 	bl	8002db0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Retrieve the message
	  if (char_is_endmessage(character))
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <main+0x90>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fccd 	bl	8000624 <char_is_endmessage>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <main+0x3e>
		  message_length = get_message(message);
 8000c90:	4819      	ldr	r0, [pc, #100]	; (8000cf8 <main+0x98>)
 8000c92:	f7ff fd79 	bl	8000788 <get_message>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <main+0x9c>)
 8000c9c:	801a      	strh	r2, [r3, #0]

	  // Analyze frame if message had any content
	  if (message_length > 0 && analyze_frame(message) == 1)
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <main+0x9c>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0eb      	beq.n	8000c80 <main+0x20>
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <main+0x98>)
 8000caa:	f7ff fe27 	bl	80008fc <analyze_frame>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d1e5      	bne.n	8000c80 <main+0x20>
	  {
		  // Print received message
		  for (uint16_t i=0; i<command_length; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	80fb      	strh	r3, [r7, #6]
 8000cb8:	e008      	b.n	8000ccc <main+0x6c>
			  uart_print(data[i]);
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <main+0xa0>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc97 	bl	80005f4 <uart_print>
		  for (uint16_t i=0; i<command_length; i++)
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	80fb      	strh	r3, [r7, #6]
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <main+0xa4>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3f1      	bcc.n	8000cba <main+0x5a>
		  uart_print('\r');
 8000cd6:	200d      	movs	r0, #13
 8000cd8:	f7ff fc8c 	bl	80005f4 <uart_print>
		  uart_print('\n');
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f7ff fc89 	bl	80005f4 <uart_print>

		  // Run sent command
		  execute_command(data, data_len);
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <main+0xa8>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <main+0xa0>)
 8000cea:	f7ff ffad 	bl	8000c48 <execute_command>
	  if (char_is_endmessage(character))
 8000cee:	e7c7      	b.n	8000c80 <main+0x20>
 8000cf0:	20000114 	.word	0x20000114
 8000cf4:	2000008c 	.word	0x2000008c
 8000cf8:	20000118 	.word	0x20000118
 8000cfc:	20000136 	.word	0x20000136
 8000d00:	20000148 	.word	0x20000148
 8000d04:	20000144 	.word	0x20000144
 8000d08:	2000034c 	.word	0x2000034c

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b094      	sub	sp, #80	; 0x50
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2234      	movs	r2, #52	; 0x34
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fb68 	bl	80043f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <SystemClock_Config+0xd4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <SystemClock_Config+0xd4>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <SystemClock_Config+0xd4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <SystemClock_Config+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <SystemClock_Config+0xd8>)
 8000d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <SystemClock_Config+0xd8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d74:	2308      	movs	r3, #8
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d78:	23d8      	movs	r3, #216	; 0xd8
 8000d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fe67 	bl	8001a60 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d98:	f000 f904 	bl	8000fa4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d9c:	f000 fe10 	bl	80019c0 <HAL_PWREx_EnableOverDrive>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000da6:	f000 f8fd 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	230f      	movs	r3, #15
 8000dac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2302      	movs	r3, #2
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000db6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	2107      	movs	r1, #7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 f8f7 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000dd4:	f000 f8e6 	bl	8000fa4 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3750      	adds	r7, #80	; 0x50
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40007000 	.word	0x40007000

08000de8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000dee:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <MX_USART3_UART_Init+0x5c>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_USART3_UART_Init+0x58>)
 8000e2c:	f001 ff14 	bl	8002c58 <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 f8b5 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000008c 	.word	0x2000008c
 8000e44:	40004800 	.word	0x40004800

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_GPIO_Init+0xa8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <MX_GPIO_Init+0xac>)
 8000eac:	f000 fd6e 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <MX_GPIO_Init+0xb0>)
 8000ec6:	f000 fbb5 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_GPIO_Init+0xac>)
 8000ee2:	f000 fba7 	bl	8001634 <HAL_GPIO_Init>

}
 8000ee6:	bf00      	nop
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40020800 	.word	0x40020800

08000efc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	// Print character to terminal
	uart_print(character);
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_UART_RxCpltCallback+0x44>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fb73 	bl	80005f4 <uart_print>

	// Check for correct USART port
	if(huart->Instance == USART3)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <HAL_UART_RxCpltCallback+0x48>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d10e      	bne.n	8000f36 <HAL_UART_RxCpltCallback+0x3a>
	{
		// Collect character to reception buffer
		rx_buffer[rx_empty] = character;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_UART_RxCpltCallback+0x4c>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_UART_RxCpltCallback+0x44>)
 8000f22:	7819      	ldrb	r1, [r3, #0]
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_UART_RxCpltCallback+0x50>)
 8000f26:	5499      	strb	r1, [r3, r2]

		// Increase rx_empty index
		increase_rx_empty();
 8000f28:	f7ff fba6 	bl	8000678 <increase_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &character, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4904      	ldr	r1, [pc, #16]	; (8000f40 <HAL_UART_RxCpltCallback+0x44>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f001 ff3d 	bl	8002db0 <HAL_UART_Receive_IT>
	}
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000114 	.word	0x20000114
 8000f44:	40004800 	.word	0x40004800
 8000f48:	2000036e 	.word	0x2000036e
 8000f4c:	20000350 	.word	0x20000350

08000f50 <HAL_UART_TxCpltCallback>:

// Transmission callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_UART_TxCpltCallback+0x44>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d113      	bne.n	8000f8a <HAL_UART_TxCpltCallback+0x3a>
	{
		if(tx_has_data() == 1)
 8000f62:	f7ff fbb9 	bl	80006d8 <tx_has_data>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10e      	bne.n	8000f8a <HAL_UART_TxCpltCallback+0x3a>
		{
			static uint8_t tmp;
			tmp = tx_buffer[tx_busy];
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_UART_TxCpltCallback+0x48>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_UART_TxCpltCallback+0x4c>)
 8000f76:	5c9a      	ldrb	r2, [r3, r2]
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_UART_TxCpltCallback+0x50>)
 8000f7a:	701a      	strb	r2, [r3, #0]

			increase_tx_busy();
 8000f7c:	f7ff fbc2 	bl	8000704 <increase_tx_busy>
			HAL_UART_Transmit_IT(huart, &tmp, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <HAL_UART_TxCpltCallback+0x50>)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f001 feb5 	bl	8002cf4 <HAL_UART_Transmit_IT>
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004800 	.word	0x40004800
 8000f98:	20000394 	.word	0x20000394
 8000f9c:	20000374 	.word	0x20000374
 8000fa0:	200003b6 	.word	0x200003b6

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_MspInit+0x54>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <HAL_MspInit+0x54>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x54>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x54>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <HAL_MspInit+0x54>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_MspInit+0x54>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fe6:	2007      	movs	r0, #7
 8000fe8:	f000 fa50 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2005      	movs	r0, #5
 8000ff2:	f000 fa56 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f000 fa6f 	bl	80014da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0ae      	sub	sp, #184	; 0xb8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2290      	movs	r2, #144	; 0x90
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f003 f9e1 	bl	80043f0 <memset>
  if(huart->Instance==USART3)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <HAL_UART_MspInit+0xc4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d144      	bne.n	80010c2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800103e:	2310      	movs	r3, #16
 8001040:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4618      	mov	r0, r3
 8001048:	f001 f9de 	bl	8002408 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001052:	f7ff ffa7 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_UART_MspInit+0xc8>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_UART_MspInit+0xc8>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_UART_MspInit+0xc8>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_UART_MspInit+0xc8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_UART_MspInit+0xc8>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_UART_MspInit+0xc8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001086:	f44f 7340 	mov.w	r3, #768	; 0x300
 800108a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a0:	2307      	movs	r3, #7
 80010a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <HAL_UART_MspInit+0xcc>)
 80010ae:	f000 fac1 	bl	8001634 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2027      	movs	r0, #39	; 0x27
 80010b8:	f000 f9f3 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010bc:	2027      	movs	r0, #39	; 0x27
 80010be:	f000 fa0c 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	37b8      	adds	r7, #184	; 0xb8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40004800 	.word	0x40004800
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020c00 	.word	0x40020c00

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f8c2 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <USART3_IRQHandler+0x10>)
 8001142:	f001 fe79 	bl	8002e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000008c 	.word	0x2000008c

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f003 f90c 	bl	800439c <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20080000 	.word	0x20080000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	200003b8 	.word	0x200003b8
 80011b8:	200003d0 	.word	0x200003d0

080011bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e6:	490e      	ldr	r1, [pc, #56]	; (8001220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011fc:	4c0b      	ldr	r4, [pc, #44]	; (800122c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120a:	f7ff ffd7 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f003 f8cb 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fd25 	bl	8000c60 <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001224:	08004fec 	.word	0x08004fec
  ldr r2, =_sbss
 8001228:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800122c:	200003d0 	.word	0x200003d0

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>

08001232 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001236:	2003      	movs	r0, #3
 8001238:	f000 f928 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123c:	2000      	movs	r0, #0
 800123e:	f000 f805 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001242:	f7ff feb5 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f943 	bl	80014f6 <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 f90b 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	200003bc 	.word	0x200003bc

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200003bc 	.word	0x200003bc

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <__NVIC_SetPriorityGrouping+0x40>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	4313      	orrs	r3, r2
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x40>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	05fa0000 	.word	0x05fa0000

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff29 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff3e 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff31 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa2 	bl	8001448 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff feda 	bl	80012d4 <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d008      	beq.n	8001540 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e052      	b.n	80015e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0216 	bic.w	r2, r2, #22
 800154e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800155e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <HAL_DMA_Abort+0x62>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0208 	bic.w	r2, r2, #8
 800157e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001590:	e013      	b.n	80015ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001592:	f7ff fe9f 	bl	80012d4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b05      	cmp	r3, #5
 800159e:	d90c      	bls.n	80015ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2220      	movs	r2, #32
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e015      	b.n	80015e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1e4      	bne.n	8001592 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	223f      	movs	r2, #63	; 0x3f
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d004      	beq.n	800160c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e00c      	b.n	8001626 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2205      	movs	r2, #5
 8001610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e175      	b.n	8001940 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8164 	bne.w	800193a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d005      	beq.n	800168a <HAL_GPIO_Init+0x56>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d130      	bne.n	80016ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 0201 	and.w	r2, r3, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d017      	beq.n	8001728 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d123      	bne.n	800177c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	69b9      	ldr	r1, [r7, #24]
 8001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80be 	beq.w	800193a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_GPIO_Init+0x324>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a65      	ldr	r2, [pc, #404]	; (8001958 <HAL_GPIO_Init+0x324>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b63      	ldr	r3, [pc, #396]	; (8001958 <HAL_GPIO_Init+0x324>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017d6:	4a61      	ldr	r2, [pc, #388]	; (800195c <HAL_GPIO_Init+0x328>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_GPIO_Init+0x32c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d037      	beq.n	8001872 <HAL_GPIO_Init+0x23e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <HAL_GPIO_Init+0x330>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d031      	beq.n	800186e <HAL_GPIO_Init+0x23a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a56      	ldr	r2, [pc, #344]	; (8001968 <HAL_GPIO_Init+0x334>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d02b      	beq.n	800186a <HAL_GPIO_Init+0x236>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a55      	ldr	r2, [pc, #340]	; (800196c <HAL_GPIO_Init+0x338>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d025      	beq.n	8001866 <HAL_GPIO_Init+0x232>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a54      	ldr	r2, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x33c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01f      	beq.n	8001862 <HAL_GPIO_Init+0x22e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a53      	ldr	r2, [pc, #332]	; (8001974 <HAL_GPIO_Init+0x340>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x22a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_GPIO_Init+0x344>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x226>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a51      	ldr	r2, [pc, #324]	; (800197c <HAL_GPIO_Init+0x348>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x222>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a50      	ldr	r2, [pc, #320]	; (8001980 <HAL_GPIO_Init+0x34c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x21e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4f      	ldr	r2, [pc, #316]	; (8001984 <HAL_GPIO_Init+0x350>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x21a>
 800184a:	2309      	movs	r3, #9
 800184c:	e012      	b.n	8001874 <HAL_GPIO_Init+0x240>
 800184e:	230a      	movs	r3, #10
 8001850:	e010      	b.n	8001874 <HAL_GPIO_Init+0x240>
 8001852:	2308      	movs	r3, #8
 8001854:	e00e      	b.n	8001874 <HAL_GPIO_Init+0x240>
 8001856:	2307      	movs	r3, #7
 8001858:	e00c      	b.n	8001874 <HAL_GPIO_Init+0x240>
 800185a:	2306      	movs	r3, #6
 800185c:	e00a      	b.n	8001874 <HAL_GPIO_Init+0x240>
 800185e:	2305      	movs	r3, #5
 8001860:	e008      	b.n	8001874 <HAL_GPIO_Init+0x240>
 8001862:	2304      	movs	r3, #4
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x240>
 8001866:	2303      	movs	r3, #3
 8001868:	e004      	b.n	8001874 <HAL_GPIO_Init+0x240>
 800186a:	2302      	movs	r3, #2
 800186c:	e002      	b.n	8001874 <HAL_GPIO_Init+0x240>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x240>
 8001872:	2300      	movs	r3, #0
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f002 0203 	and.w	r2, r2, #3
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	4093      	lsls	r3, r2
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001884:	4935      	ldr	r1, [pc, #212]	; (800195c <HAL_GPIO_Init+0x328>)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_GPIO_Init+0x354>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b6:	4a34      	ldr	r2, [pc, #208]	; (8001988 <HAL_GPIO_Init+0x354>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_GPIO_Init+0x354>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e0:	4a29      	ldr	r2, [pc, #164]	; (8001988 <HAL_GPIO_Init+0x354>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <HAL_GPIO_Init+0x354>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <HAL_GPIO_Init+0x354>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_GPIO_Init+0x354>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <HAL_GPIO_Init+0x354>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	f67f ae86 	bls.w	8001654 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40013800 	.word	0x40013800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400
 8001968:	40020800 	.word	0x40020800
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40021400 	.word	0x40021400
 8001978:	40021800 	.word	0x40021800
 800197c:	40021c00 	.word	0x40021c00
 8001980:	40022000 	.word	0x40022000
 8001984:	40022400 	.word	0x40022400
 8001988:	40013c00 	.word	0x40013c00

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019a8:	e003      	b.n	80019b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ee:	f7ff fc71 	bl	80012d4 <HAL_GetTick>
 80019f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019f4:	e009      	b.n	8001a0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019f6:	f7ff fc6d 	bl	80012d4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a04:	d901      	bls.n	8001a0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e022      	b.n	8001a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d1ee      	bne.n	80019f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a24:	f7ff fc56 	bl	80012d4 <HAL_GetTick>
 8001a28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a2a:	e009      	b.n	8001a40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc52 	bl	80012d4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3a:	d901      	bls.n	8001a40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e007      	b.n	8001a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a4c:	d1ee      	bne.n	8001a2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e29b      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a90:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x62>
 8001a9c:	4b90      	ldr	r3, [pc, #576]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b8d      	ldr	r3, [pc, #564]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x130>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e275      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x7a>
 8001acc:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a83      	ldr	r2, [pc, #524]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x9c>
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7e      	ldr	r2, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7b      	ldr	r2, [pc, #492]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xc0>
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a72      	ldr	r2, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd8>
 8001b20:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fbc8 	bl	80012d4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fbc4 	bl	80012d4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e229      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe8>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fbb4 	bl	80012d4 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fbb0 	bl	80012d4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e215      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x110>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d069      	beq.n	8001c72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001baa:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x190>
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x17a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1e9      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	493d      	ldr	r1, [pc, #244]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e040      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a38      	ldr	r2, [pc, #224]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb66 	bl	80012d4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fb62 	bl	80012d4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1c7      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4929      	ldr	r1, [pc, #164]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a26      	ldr	r2, [pc, #152]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb42 	bl	80012d4 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fb3e 	bl	80012d4 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1a3      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d038      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff fb1f 	bl	80012d4 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fb1b 	bl	80012d4 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e180      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x23a>
 8001cb8:	e01a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb05 	bl	80012d4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff fb01 	bl	80012d4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d903      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e166      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
 8001ce0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ee      	bne.n	8001cce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a4 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a88      	ldr	r2, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b86      	ldr	r3, [pc, #536]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d26:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d32:	4b80      	ldr	r3, [pc, #512]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7f      	ldr	r2, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fac9 	bl	80012d4 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff fac5 	bl	80012d4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e12a      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d58:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x31a>
 8001d6c:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x33c>
 8001d82:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a6a      	ldr	r2, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a67      	ldr	r2, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	e01c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x35e>
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a61      	ldr	r2, [pc, #388]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a5e      	ldr	r2, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7ff fa79 	bl	80012d4 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fa75 	bl	80012d4 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0d8      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ee      	beq.n	8001de6 <HAL_RCC_OscConfig+0x386>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fa63 	bl	80012d4 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fa5f 	bl	80012d4 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0c2      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ae 	beq.w	8001fac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d06d      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d14b      	bne.n	8001efc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff fa30 	bl	80012d4 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff fa2c 	bl	80012d4 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e091      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	019b      	lsls	r3, r3, #6
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	071b      	lsls	r3, r3, #28
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f9fe 	bl	80012d4 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff f9fa 	bl	80012d4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e05f      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x47c>
 8001efa:	e057      	b.n	8001fac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f9e4 	bl	80012d4 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f9e0 	bl	80012d4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e045      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4b0>
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x54c>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_RCC_OscConfig+0x558>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d030      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d129      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d122      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d119      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10f      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0d0      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b67      	ldr	r3, [pc, #412]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 020f 	bic.w	r2, r3, #15
 8001fea:	4965      	ldr	r1, [pc, #404]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800203e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d040      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e073      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06b      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4936      	ldr	r1, [pc, #216]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7ff f910 	bl	80012d4 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7ff f90c 	bl	80012d4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e053      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d210      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	4922      	ldr	r1, [pc, #136]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	490a      	ldr	r1, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1cc>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1d0>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f86c 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00
 8002184:	40023800 	.word	0x40023800
 8002188:	08004e90 	.word	0x08004e90
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002198:	b094      	sub	sp, #80	; 0x50
 800219a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	647b      	str	r3, [r7, #68]	; 0x44
 80021a0:	2300      	movs	r3, #0
 80021a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021a4:	2300      	movs	r3, #0
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ac:	4b79      	ldr	r3, [pc, #484]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d00d      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x40>
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	f200 80e1 	bhi.w	8002380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x34>
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x3a>
 80021c6:	e0db      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b73      	ldr	r3, [pc, #460]	; (8002398 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021cc:	e0db      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ce:	4b73      	ldr	r3, [pc, #460]	; (800239c <HAL_RCC_GetSysClockFreq+0x208>)
 80021d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021d2:	e0d8      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	2200      	movs	r2, #0
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
 8002202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002206:	4622      	mov	r2, r4
 8002208:	462b      	mov	r3, r5
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002218:	0150      	lsls	r0, r2, #5
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4621      	mov	r1, r4
 8002220:	1a51      	subs	r1, r2, r1
 8002222:	6139      	str	r1, [r7, #16]
 8002224:	4629      	mov	r1, r5
 8002226:	eb63 0301 	sbc.w	r3, r3, r1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002238:	4659      	mov	r1, fp
 800223a:	018b      	lsls	r3, r1, #6
 800223c:	4651      	mov	r1, sl
 800223e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002242:	4651      	mov	r1, sl
 8002244:	018a      	lsls	r2, r1, #6
 8002246:	4651      	mov	r1, sl
 8002248:	ebb2 0801 	subs.w	r8, r2, r1
 800224c:	4659      	mov	r1, fp
 800224e:	eb63 0901 	sbc.w	r9, r3, r1
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800225e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002266:	4690      	mov	r8, r2
 8002268:	4699      	mov	r9, r3
 800226a:	4623      	mov	r3, r4
 800226c:	eb18 0303 	adds.w	r3, r8, r3
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	462b      	mov	r3, r5
 8002274:	eb49 0303 	adc.w	r3, r9, r3
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002286:	4629      	mov	r1, r5
 8002288:	024b      	lsls	r3, r1, #9
 800228a:	4621      	mov	r1, r4
 800228c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002290:	4621      	mov	r1, r4
 8002292:	024a      	lsls	r2, r1, #9
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800229a:	2200      	movs	r2, #0
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
 800229e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022a4:	f7fe f824 	bl	80002f0 <__aeabi_uldivmod>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4613      	mov	r3, r2
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b0:	e058      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	2200      	movs	r2, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	4611      	mov	r1, r2
 80022be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	f04f 0000 	mov.w	r0, #0
 80022d4:	f04f 0100 	mov.w	r1, #0
 80022d8:	0159      	lsls	r1, r3, #5
 80022da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022de:	0150      	lsls	r0, r2, #5
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4641      	mov	r1, r8
 80022e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ea:	4649      	mov	r1, r9
 80022ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002304:	ebb2 040a 	subs.w	r4, r2, sl
 8002308:	eb63 050b 	sbc.w	r5, r3, fp
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	00eb      	lsls	r3, r5, #3
 8002316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800231a:	00e2      	lsls	r2, r4, #3
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4643      	mov	r3, r8
 8002322:	18e3      	adds	r3, r4, r3
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	464b      	mov	r3, r9
 8002328:	eb45 0303 	adc.w	r3, r5, r3
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800233a:	4629      	mov	r1, r5
 800233c:	028b      	lsls	r3, r1, #10
 800233e:	4621      	mov	r1, r4
 8002340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002344:	4621      	mov	r1, r4
 8002346:	028a      	lsls	r2, r1, #10
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234e:	2200      	movs	r2, #0
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	61fa      	str	r2, [r7, #28]
 8002354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002358:	f7fd ffca 	bl	80002f0 <__aeabi_uldivmod>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4613      	mov	r3, r2
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_GetSysClockFreq+0x200>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	3301      	adds	r3, #1
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800237e:	e002      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetSysClockFreq+0x204>)
 8002382:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002388:	4618      	mov	r0, r3
 800238a:	3750      	adds	r7, #80	; 0x50
 800238c:	46bd      	mov	sp, r7
 800238e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	00f42400 	.word	0x00f42400
 800239c:	007a1200 	.word	0x007a1200

080023a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000000 	.word	0x20000000

080023b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023bc:	f7ff fff0 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0a9b      	lsrs	r3, r3, #10
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08004ea0 	.word	0x08004ea0

080023e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e4:	f7ff ffdc 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0b5b      	lsrs	r3, r3, #13
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08004ea0 	.word	0x08004ea0

08002408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002430:	4b69      	ldr	r3, [pc, #420]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a68      	ldr	r2, [pc, #416]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002436:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800243a:	6093      	str	r3, [r2, #8]
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	4964      	ldr	r1, [pc, #400]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002452:	2301      	movs	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d017      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	4959      	ldr	r1, [pc, #356]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002480:	d101      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d017      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	494a      	ldr	r1, [pc, #296]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024bc:	d101      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 808b 	beq.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f6:	6413      	str	r3, [r2, #64]	; 0x40
 80024f8:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a34      	ldr	r2, [pc, #208]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe fee0 	bl	80012d4 <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fedc 	bl	80012d4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e38f      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002536:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d035      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	429a      	cmp	r2, r3
 8002552:	d02e      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d114      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fea4 	bl	80012d4 <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fea0 	bl	80012d4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e351      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ee      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025be:	d111      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ce:	400b      	ands	r3, r1
 80025d0:	4901      	ldr	r1, [pc, #4]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000
 80025e0:	0ffffcff 	.word	0x0ffffcff
 80025e4:	4bac      	ldr	r3, [pc, #688]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4aab      	ldr	r2, [pc, #684]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025ee:	6093      	str	r3, [r2, #8]
 80025f0:	4ba9      	ldr	r3, [pc, #676]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	49a6      	ldr	r1, [pc, #664]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800260e:	4ba2      	ldr	r3, [pc, #648]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002614:	4aa0      	ldr	r2, [pc, #640]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800261a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800261e:	4b9e      	ldr	r3, [pc, #632]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002620:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	499b      	ldr	r1, [pc, #620]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800263c:	4b96      	ldr	r3, [pc, #600]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800264a:	4993      	ldr	r1, [pc, #588]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800266c:	498a      	ldr	r1, [pc, #552]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002680:	4b85      	ldr	r3, [pc, #532]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268e:	4982      	ldr	r1, [pc, #520]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026a2:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4979      	ldr	r1, [pc, #484]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c4:	4b74      	ldr	r3, [pc, #464]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4971      	ldr	r1, [pc, #452]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f023 020c 	bic.w	r2, r3, #12
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	4968      	ldr	r1, [pc, #416]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4960      	ldr	r1, [pc, #384]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800272a:	4b5b      	ldr	r3, [pc, #364]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002738:	4957      	ldr	r1, [pc, #348]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800274c:	4b52      	ldr	r3, [pc, #328]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	494f      	ldr	r1, [pc, #316]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	4946      	ldr	r1, [pc, #280]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	493e      	ldr	r1, [pc, #248]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	4935      	ldr	r1, [pc, #212]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027d4:	4b30      	ldr	r3, [pc, #192]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e2:	492d      	ldr	r1, [pc, #180]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027f6:	4b28      	ldr	r3, [pc, #160]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002804:	4924      	ldr	r1, [pc, #144]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	4914      	ldr	r1, [pc, #80]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002868:	490b      	ldr	r1, [pc, #44]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288c:	4902      	ldr	r1, [pc, #8]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002894:	e002      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028a8:	4b8a      	ldr	r3, [pc, #552]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	4986      	ldr	r1, [pc, #536]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028cc:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028dc:	497d      	ldr	r1, [pc, #500]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d006      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80d6 	beq.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028f8:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002904:	f7fe fce6 	bl	80012d4 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800290c:	f7fe fce2 	bl	80012d4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e195      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800291e:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d021      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11d      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800294c:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	0e1b      	lsrs	r3, r3, #24
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	019a      	lsls	r2, r3, #6
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	071b      	lsls	r3, r3, #28
 8002972:	4958      	ldr	r1, [pc, #352]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d004      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02e      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a4:	d129      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029a6:	4b4b      	ldr	r3, [pc, #300]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029b4:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ba:	0f1b      	lsrs	r3, r3, #28
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	019a      	lsls	r2, r3, #6
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	493e      	ldr	r1, [pc, #248]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029e2:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e8:	f023 021f 	bic.w	r2, r3, #31
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	3b01      	subs	r3, #1
 80029f2:	4938      	ldr	r1, [pc, #224]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01d      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a06:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0c:	0e1b      	lsrs	r3, r3, #24
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a14:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1a:	0f1b      	lsrs	r3, r3, #28
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	019a      	lsls	r2, r3, #6
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	071b      	lsls	r3, r3, #28
 8002a3a:	4926      	ldr	r1, [pc, #152]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d011      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	071b      	lsls	r3, r3, #28
 8002a6a:	491a      	ldr	r1, [pc, #104]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fc29 	bl	80012d4 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a86:	f7fe fc25 	bl	80012d4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b64      	cmp	r3, #100	; 0x64
 8002a92:	d901      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0d8      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 80ce 	bne.w	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fc0c 	bl	80012d4 <HAL_GetTick>
 8002abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac0:	f7fe fc08 	bl	80012d4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d904      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0bb      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ad8:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae4:	d0ec      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d02e      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d12a      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	0f1b      	lsrs	r3, r3, #28
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	019a      	lsls	r2, r3, #6
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	071b      	lsls	r3, r3, #28
 8002b42:	4944      	ldr	r1, [pc, #272]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b4a:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	493d      	ldr	r1, [pc, #244]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d022      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b78:	d11d      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	0e1b      	lsrs	r3, r3, #24
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b88:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	0f1b      	lsrs	r3, r3, #28
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	019a      	lsls	r2, r3, #6
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	061b      	lsls	r3, r3, #24
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	071b      	lsls	r3, r3, #28
 8002bae:	4929      	ldr	r1, [pc, #164]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d028      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	0e1b      	lsrs	r3, r3, #24
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bd0:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	019a      	lsls	r2, r3, #6
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	431a      	orrs	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	071b      	lsls	r3, r3, #28
 8002bf6:	4917      	ldr	r1, [pc, #92]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	4911      	ldr	r1, [pc, #68]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe fb58 	bl	80012d4 <HAL_GetTick>
 8002c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c28:	f7fe fb54 	bl	80012d4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e007      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c46:	d1ef      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e040      	b.n	8002cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f9c4 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fbd6 	bl	8003448 <UART_SetConfig>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e022      	b.n	8002cec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fe2e 	bl	8003910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 feb5 	bl	8003a54 <UART_CheckIdleState>
 8002cea:	4603      	mov	r3, r0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b08b      	sub	sp, #44	; 0x2c
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d147      	bne.n	8002d9a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_UART_Transmit_IT+0x22>
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e040      	b.n	8002d9c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	88fa      	ldrh	r2, [r7, #6]
 8002d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d107      	bne.n	8002d5e <HAL_UART_Transmit_IT+0x6a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <HAL_UART_Transmit_IT+0xb4>)
 8002d5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002d5c:	e002      	b.n	8002d64 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_UART_Transmit_IT+0xb8>)
 8002d62:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	613b      	str	r3, [r7, #16]
   return(result);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	69f9      	ldr	r1, [r7, #28]
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e6      	bne.n	8002d64 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	372c      	adds	r7, #44	; 0x2c
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	08003fb3 	.word	0x08003fb3
 8002dac:	08003efd 	.word	0x08003efd

08002db0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d132      	bne.n	8002e2e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_Receive_IT+0x24>
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e02b      	b.n	8002e30 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d018      	beq.n	8002e1e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e6      	bne.n	8002dec <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 ff29 	bl	8003c7c <UART_Start_Receive_IT>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	e000      	b.n	8002e30 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3728      	adds	r7, #40	; 0x28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b0ba      	sub	sp, #232	; 0xe8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e62:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e66:	4013      	ands	r3, r2
 8002e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00f      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 82ac 	beq.w	80033ee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
      }
      return;
 8002e9e:	e2a6      	b.n	80033ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8117 	beq.w	80030d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002eb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002eba:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_UART_IRQHandler+0x298>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 810a 	beq.w	80030d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d011      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xbc>
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d011      	beq.n	8002f24 <HAL_UART_IRQHandler+0xec>
 8002f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2202      	movs	r2, #2
 8002f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d011      	beq.n	8002f54 <HAL_UART_IRQHandler+0x11c>
 8002f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2204      	movs	r2, #4
 8002f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f86:	f043 0208 	orr.w	r2, r3, #8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x18a>
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00c      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8212 	beq.w	80033f2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d005      	beq.n	800301a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800300e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003012:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d04f      	beq.n	80030ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fef4 	bl	8003e08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d141      	bne.n	80030b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3308      	adds	r3, #8
 8003034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3308      	adds	r3, #8
 8003056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800305a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800305e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1d9      	bne.n	800302e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	2b00      	cmp	r3, #0
 8003080:	d013      	beq.n	80030aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_UART_IRQHandler+0x29c>)
 8003088:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe faad 	bl	80015ee <HAL_DMA_Abort_IT>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d017      	beq.n	80030ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030a4:	4610      	mov	r0, r2
 80030a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	e00f      	b.n	80030ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9ac 	bl	8003408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	e00b      	b.n	80030ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9a8 	bl	8003408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	e007      	b.n	80030ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9a4 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80030c8:	e193      	b.n	80033f2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ca:	bf00      	nop
    return;
 80030cc:	e191      	b.n	80033f2 <HAL_UART_IRQHandler+0x5ba>
 80030ce:	bf00      	nop
 80030d0:	04000120 	.word	0x04000120
 80030d4:	08003ed1 	.word	0x08003ed1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 814c 	bne.w	800337a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8145 	beq.w	800337a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 813e 	beq.w	800337a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2210      	movs	r2, #16
 8003104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	f040 80b6 	bne.w	8003282 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003122:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8165 	beq.w	80033f6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003136:	429a      	cmp	r2, r3
 8003138:	f080 815d 	bcs.w	80033f6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003150:	f000 8086 	beq.w	8003260 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003182:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800318a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1da      	bne.n	8003154 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3308      	adds	r3, #8
 80031a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e1      	bne.n	800319e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800320c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e3      	bne.n	80031da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800322e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003230:	f023 0310 	bic.w	r3, r3, #16
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003242:	65bb      	str	r3, [r7, #88]	; 0x58
 8003244:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e4      	bne.n	8003220 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f957 	bl	800150e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003272:	b29b      	uxth	r3, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8ce 	bl	800341c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003280:	e0b9      	b.n	80033f6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800328e:	b29b      	uxth	r3, r3
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80ab 	beq.w	80033fa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80032a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80a6 	beq.w	80033fa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e4      	bne.n	80032ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3308      	adds	r3, #8
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	623b      	str	r3, [r7, #32]
   return(result);
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3308      	adds	r3, #8
 8003304:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003308:	633a      	str	r2, [r7, #48]	; 0x30
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800330e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003310:	e841 2300 	strex	r3, r2, [r1]
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e3      	bne.n	80032e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	60fb      	str	r3, [r7, #12]
   return(result);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f023 0310 	bic.w	r3, r3, #16
 8003344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	617b      	str	r3, [r7, #20]
   return(result);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e4      	bne.n	8003330 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800336c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f852 	bl	800341c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003378:	e03f      	b.n	80033fa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <HAL_UART_IRQHandler+0x56c>
 8003386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800339a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f849 	bl	8003434 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033a2:	e02d      	b.n	8003400 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01c      	beq.n	80033fe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
    }
    return;
 80033cc:	e017      	b.n	80033fe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <HAL_UART_IRQHandler+0x5c8>
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fe43 	bl	8004072 <UART_EndTransmit_IT>
    return;
 80033ec:	e008      	b.n	8003400 <HAL_UART_IRQHandler+0x5c8>
      return;
 80033ee:	bf00      	nop
 80033f0:	e006      	b.n	8003400 <HAL_UART_IRQHandler+0x5c8>
    return;
 80033f2:	bf00      	nop
 80033f4:	e004      	b.n	8003400 <HAL_UART_IRQHandler+0x5c8>
      return;
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <HAL_UART_IRQHandler+0x5c8>
      return;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <HAL_UART_IRQHandler+0x5c8>
    return;
 80033fe:	bf00      	nop
  }

}
 8003400:	37e8      	adds	r7, #232	; 0xe8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop

08003408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4ba6      	ldr	r3, [pc, #664]	; (800370c <UART_SetConfig+0x2c4>)
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	430b      	orrs	r3, r1
 800347e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a94      	ldr	r2, [pc, #592]	; (8003710 <UART_SetConfig+0x2c8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d120      	bne.n	8003506 <UART_SetConfig+0xbe>
 80034c4:	4b93      	ldr	r3, [pc, #588]	; (8003714 <UART_SetConfig+0x2cc>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d816      	bhi.n	8003500 <UART_SetConfig+0xb8>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0x90>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034f5 	.word	0x080034f5
 80034e0:	080034ef 	.word	0x080034ef
 80034e4:	080034fb 	.word	0x080034fb
 80034e8:	2301      	movs	r3, #1
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e150      	b.n	8003790 <UART_SetConfig+0x348>
 80034ee:	2302      	movs	r3, #2
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e14d      	b.n	8003790 <UART_SetConfig+0x348>
 80034f4:	2304      	movs	r3, #4
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e14a      	b.n	8003790 <UART_SetConfig+0x348>
 80034fa:	2308      	movs	r3, #8
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e147      	b.n	8003790 <UART_SetConfig+0x348>
 8003500:	2310      	movs	r3, #16
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e144      	b.n	8003790 <UART_SetConfig+0x348>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a83      	ldr	r2, [pc, #524]	; (8003718 <UART_SetConfig+0x2d0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d132      	bne.n	8003576 <UART_SetConfig+0x12e>
 8003510:	4b80      	ldr	r3, [pc, #512]	; (8003714 <UART_SetConfig+0x2cc>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d828      	bhi.n	8003570 <UART_SetConfig+0x128>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <UART_SetConfig+0xdc>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003559 	.word	0x08003559
 8003528:	08003571 	.word	0x08003571
 800352c:	08003571 	.word	0x08003571
 8003530:	08003571 	.word	0x08003571
 8003534:	08003565 	.word	0x08003565
 8003538:	08003571 	.word	0x08003571
 800353c:	08003571 	.word	0x08003571
 8003540:	08003571 	.word	0x08003571
 8003544:	0800355f 	.word	0x0800355f
 8003548:	08003571 	.word	0x08003571
 800354c:	08003571 	.word	0x08003571
 8003550:	08003571 	.word	0x08003571
 8003554:	0800356b 	.word	0x0800356b
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e118      	b.n	8003790 <UART_SetConfig+0x348>
 800355e:	2302      	movs	r3, #2
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e115      	b.n	8003790 <UART_SetConfig+0x348>
 8003564:	2304      	movs	r3, #4
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e112      	b.n	8003790 <UART_SetConfig+0x348>
 800356a:	2308      	movs	r3, #8
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e10f      	b.n	8003790 <UART_SetConfig+0x348>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e10c      	b.n	8003790 <UART_SetConfig+0x348>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a68      	ldr	r2, [pc, #416]	; (800371c <UART_SetConfig+0x2d4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d120      	bne.n	80035c2 <UART_SetConfig+0x17a>
 8003580:	4b64      	ldr	r3, [pc, #400]	; (8003714 <UART_SetConfig+0x2cc>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800358a:	2b30      	cmp	r3, #48	; 0x30
 800358c:	d013      	beq.n	80035b6 <UART_SetConfig+0x16e>
 800358e:	2b30      	cmp	r3, #48	; 0x30
 8003590:	d814      	bhi.n	80035bc <UART_SetConfig+0x174>
 8003592:	2b20      	cmp	r3, #32
 8003594:	d009      	beq.n	80035aa <UART_SetConfig+0x162>
 8003596:	2b20      	cmp	r3, #32
 8003598:	d810      	bhi.n	80035bc <UART_SetConfig+0x174>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <UART_SetConfig+0x15c>
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d006      	beq.n	80035b0 <UART_SetConfig+0x168>
 80035a2:	e00b      	b.n	80035bc <UART_SetConfig+0x174>
 80035a4:	2300      	movs	r3, #0
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e0f2      	b.n	8003790 <UART_SetConfig+0x348>
 80035aa:	2302      	movs	r3, #2
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e0ef      	b.n	8003790 <UART_SetConfig+0x348>
 80035b0:	2304      	movs	r3, #4
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e0ec      	b.n	8003790 <UART_SetConfig+0x348>
 80035b6:	2308      	movs	r3, #8
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e0e9      	b.n	8003790 <UART_SetConfig+0x348>
 80035bc:	2310      	movs	r3, #16
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e0e6      	b.n	8003790 <UART_SetConfig+0x348>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a56      	ldr	r2, [pc, #344]	; (8003720 <UART_SetConfig+0x2d8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d120      	bne.n	800360e <UART_SetConfig+0x1c6>
 80035cc:	4b51      	ldr	r3, [pc, #324]	; (8003714 <UART_SetConfig+0x2cc>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035d6:	2bc0      	cmp	r3, #192	; 0xc0
 80035d8:	d013      	beq.n	8003602 <UART_SetConfig+0x1ba>
 80035da:	2bc0      	cmp	r3, #192	; 0xc0
 80035dc:	d814      	bhi.n	8003608 <UART_SetConfig+0x1c0>
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d009      	beq.n	80035f6 <UART_SetConfig+0x1ae>
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d810      	bhi.n	8003608 <UART_SetConfig+0x1c0>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <UART_SetConfig+0x1a8>
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d006      	beq.n	80035fc <UART_SetConfig+0x1b4>
 80035ee:	e00b      	b.n	8003608 <UART_SetConfig+0x1c0>
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e0cc      	b.n	8003790 <UART_SetConfig+0x348>
 80035f6:	2302      	movs	r3, #2
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e0c9      	b.n	8003790 <UART_SetConfig+0x348>
 80035fc:	2304      	movs	r3, #4
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e0c6      	b.n	8003790 <UART_SetConfig+0x348>
 8003602:	2308      	movs	r3, #8
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e0c3      	b.n	8003790 <UART_SetConfig+0x348>
 8003608:	2310      	movs	r3, #16
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e0c0      	b.n	8003790 <UART_SetConfig+0x348>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a44      	ldr	r2, [pc, #272]	; (8003724 <UART_SetConfig+0x2dc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d125      	bne.n	8003664 <UART_SetConfig+0x21c>
 8003618:	4b3e      	ldr	r3, [pc, #248]	; (8003714 <UART_SetConfig+0x2cc>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003626:	d017      	beq.n	8003658 <UART_SetConfig+0x210>
 8003628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800362c:	d817      	bhi.n	800365e <UART_SetConfig+0x216>
 800362e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003632:	d00b      	beq.n	800364c <UART_SetConfig+0x204>
 8003634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003638:	d811      	bhi.n	800365e <UART_SetConfig+0x216>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <UART_SetConfig+0x1fe>
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	d006      	beq.n	8003652 <UART_SetConfig+0x20a>
 8003644:	e00b      	b.n	800365e <UART_SetConfig+0x216>
 8003646:	2300      	movs	r3, #0
 8003648:	77fb      	strb	r3, [r7, #31]
 800364a:	e0a1      	b.n	8003790 <UART_SetConfig+0x348>
 800364c:	2302      	movs	r3, #2
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e09e      	b.n	8003790 <UART_SetConfig+0x348>
 8003652:	2304      	movs	r3, #4
 8003654:	77fb      	strb	r3, [r7, #31]
 8003656:	e09b      	b.n	8003790 <UART_SetConfig+0x348>
 8003658:	2308      	movs	r3, #8
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e098      	b.n	8003790 <UART_SetConfig+0x348>
 800365e:	2310      	movs	r3, #16
 8003660:	77fb      	strb	r3, [r7, #31]
 8003662:	e095      	b.n	8003790 <UART_SetConfig+0x348>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2f      	ldr	r2, [pc, #188]	; (8003728 <UART_SetConfig+0x2e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d125      	bne.n	80036ba <UART_SetConfig+0x272>
 800366e:	4b29      	ldr	r3, [pc, #164]	; (8003714 <UART_SetConfig+0x2cc>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800367c:	d017      	beq.n	80036ae <UART_SetConfig+0x266>
 800367e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003682:	d817      	bhi.n	80036b4 <UART_SetConfig+0x26c>
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003688:	d00b      	beq.n	80036a2 <UART_SetConfig+0x25a>
 800368a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368e:	d811      	bhi.n	80036b4 <UART_SetConfig+0x26c>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <UART_SetConfig+0x254>
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003698:	d006      	beq.n	80036a8 <UART_SetConfig+0x260>
 800369a:	e00b      	b.n	80036b4 <UART_SetConfig+0x26c>
 800369c:	2301      	movs	r3, #1
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e076      	b.n	8003790 <UART_SetConfig+0x348>
 80036a2:	2302      	movs	r3, #2
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e073      	b.n	8003790 <UART_SetConfig+0x348>
 80036a8:	2304      	movs	r3, #4
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e070      	b.n	8003790 <UART_SetConfig+0x348>
 80036ae:	2308      	movs	r3, #8
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e06d      	b.n	8003790 <UART_SetConfig+0x348>
 80036b4:	2310      	movs	r3, #16
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e06a      	b.n	8003790 <UART_SetConfig+0x348>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1b      	ldr	r2, [pc, #108]	; (800372c <UART_SetConfig+0x2e4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d138      	bne.n	8003736 <UART_SetConfig+0x2ee>
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <UART_SetConfig+0x2cc>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036d2:	d017      	beq.n	8003704 <UART_SetConfig+0x2bc>
 80036d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036d8:	d82a      	bhi.n	8003730 <UART_SetConfig+0x2e8>
 80036da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036de:	d00b      	beq.n	80036f8 <UART_SetConfig+0x2b0>
 80036e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e4:	d824      	bhi.n	8003730 <UART_SetConfig+0x2e8>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <UART_SetConfig+0x2aa>
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	d006      	beq.n	80036fe <UART_SetConfig+0x2b6>
 80036f0:	e01e      	b.n	8003730 <UART_SetConfig+0x2e8>
 80036f2:	2300      	movs	r3, #0
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e04b      	b.n	8003790 <UART_SetConfig+0x348>
 80036f8:	2302      	movs	r3, #2
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e048      	b.n	8003790 <UART_SetConfig+0x348>
 80036fe:	2304      	movs	r3, #4
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e045      	b.n	8003790 <UART_SetConfig+0x348>
 8003704:	2308      	movs	r3, #8
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e042      	b.n	8003790 <UART_SetConfig+0x348>
 800370a:	bf00      	nop
 800370c:	efff69f3 	.word	0xefff69f3
 8003710:	40011000 	.word	0x40011000
 8003714:	40023800 	.word	0x40023800
 8003718:	40004400 	.word	0x40004400
 800371c:	40004800 	.word	0x40004800
 8003720:	40004c00 	.word	0x40004c00
 8003724:	40005000 	.word	0x40005000
 8003728:	40011400 	.word	0x40011400
 800372c:	40007800 	.word	0x40007800
 8003730:	2310      	movs	r3, #16
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e02c      	b.n	8003790 <UART_SetConfig+0x348>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a72      	ldr	r2, [pc, #456]	; (8003904 <UART_SetConfig+0x4bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d125      	bne.n	800378c <UART_SetConfig+0x344>
 8003740:	4b71      	ldr	r3, [pc, #452]	; (8003908 <UART_SetConfig+0x4c0>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800374a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800374e:	d017      	beq.n	8003780 <UART_SetConfig+0x338>
 8003750:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003754:	d817      	bhi.n	8003786 <UART_SetConfig+0x33e>
 8003756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375a:	d00b      	beq.n	8003774 <UART_SetConfig+0x32c>
 800375c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003760:	d811      	bhi.n	8003786 <UART_SetConfig+0x33e>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <UART_SetConfig+0x326>
 8003766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376a:	d006      	beq.n	800377a <UART_SetConfig+0x332>
 800376c:	e00b      	b.n	8003786 <UART_SetConfig+0x33e>
 800376e:	2300      	movs	r3, #0
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e00d      	b.n	8003790 <UART_SetConfig+0x348>
 8003774:	2302      	movs	r3, #2
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e00a      	b.n	8003790 <UART_SetConfig+0x348>
 800377a:	2304      	movs	r3, #4
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e007      	b.n	8003790 <UART_SetConfig+0x348>
 8003780:	2308      	movs	r3, #8
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e004      	b.n	8003790 <UART_SetConfig+0x348>
 8003786:	2310      	movs	r3, #16
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e001      	b.n	8003790 <UART_SetConfig+0x348>
 800378c:	2310      	movs	r3, #16
 800378e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003798:	d15b      	bne.n	8003852 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d828      	bhi.n	80037f2 <UART_SetConfig+0x3aa>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x360>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037f3 	.word	0x080037f3
 80037b8:	080037e3 	.word	0x080037e3
 80037bc:	080037f3 	.word	0x080037f3
 80037c0:	080037f3 	.word	0x080037f3
 80037c4:	080037f3 	.word	0x080037f3
 80037c8:	080037eb 	.word	0x080037eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7fe fdf4 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 80037d0:	61b8      	str	r0, [r7, #24]
        break;
 80037d2:	e013      	b.n	80037fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d4:	f7fe fe04 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 80037d8:	61b8      	str	r0, [r7, #24]
        break;
 80037da:	e00f      	b.n	80037fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037dc:	4b4b      	ldr	r3, [pc, #300]	; (800390c <UART_SetConfig+0x4c4>)
 80037de:	61bb      	str	r3, [r7, #24]
        break;
 80037e0:	e00c      	b.n	80037fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e2:	f7fe fcd7 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80037e6:	61b8      	str	r0, [r7, #24]
        break;
 80037e8:	e008      	b.n	80037fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ee:	61bb      	str	r3, [r7, #24]
        break;
 80037f0:	e004      	b.n	80037fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	77bb      	strb	r3, [r7, #30]
        break;
 80037fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d074      	beq.n	80038ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	005a      	lsls	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b0f      	cmp	r3, #15
 800381c:	d916      	bls.n	800384c <UART_SetConfig+0x404>
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d212      	bcs.n	800384c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f023 030f 	bic.w	r3, r3, #15
 800382e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	b29a      	uxth	r2, r3
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	4313      	orrs	r3, r2
 8003840:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	89fa      	ldrh	r2, [r7, #14]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	e04f      	b.n	80038ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77bb      	strb	r3, [r7, #30]
 8003850:	e04c      	b.n	80038ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003852:	7ffb      	ldrb	r3, [r7, #31]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d828      	bhi.n	80038aa <UART_SetConfig+0x462>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x418>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003885 	.word	0x08003885
 8003864:	0800388d 	.word	0x0800388d
 8003868:	08003895 	.word	0x08003895
 800386c:	080038ab 	.word	0x080038ab
 8003870:	0800389b 	.word	0x0800389b
 8003874:	080038ab 	.word	0x080038ab
 8003878:	080038ab 	.word	0x080038ab
 800387c:	080038ab 	.word	0x080038ab
 8003880:	080038a3 	.word	0x080038a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7fe fd98 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003888:	61b8      	str	r0, [r7, #24]
        break;
 800388a:	e013      	b.n	80038b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800388c:	f7fe fda8 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8003890:	61b8      	str	r0, [r7, #24]
        break;
 8003892:	e00f      	b.n	80038b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <UART_SetConfig+0x4c4>)
 8003896:	61bb      	str	r3, [r7, #24]
        break;
 8003898:	e00c      	b.n	80038b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389a:	f7fe fc7b 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 800389e:	61b8      	str	r0, [r7, #24]
        break;
 80038a0:	e008      	b.n	80038b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a6:	61bb      	str	r3, [r7, #24]
        break;
 80038a8:	e004      	b.n	80038b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	77bb      	strb	r3, [r7, #30]
        break;
 80038b2:	bf00      	nop
    }

    if (pclk != 0U)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085a      	lsrs	r2, r3, #1
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d909      	bls.n	80038e8 <UART_SetConfig+0x4a0>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038da:	d205      	bcs.n	80038e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	e001      	b.n	80038ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40007c00 	.word	0x40007c00
 8003908:	40023800 	.word	0x40023800
 800390c:	00f42400 	.word	0x00f42400

08003910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01a      	beq.n	8003a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0e:	d10a      	bne.n	8003a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
  }
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a64:	f7fd fc36 	bl	80012d4 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d10e      	bne.n	8003a96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f831 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e027      	b.n	8003ae6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d10e      	bne.n	8003ac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f81b 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e011      	b.n	8003ae6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b09c      	sub	sp, #112	; 0x70
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afe:	e0a7      	b.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	f000 80a3 	beq.w	8003c50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fd fbe3 	bl	80012d4 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d13f      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b34:	667b      	str	r3, [r7, #100]	; 0x64
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e6      	bne.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	663b      	str	r3, [r7, #96]	; 0x60
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e5      	bne.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e068      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d050      	beq.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbc:	d148      	bne.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	637b      	str	r3, [r7, #52]	; 0x34
 8003be8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e6      	bne.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3308      	adds	r3, #8
 8003c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	613b      	str	r3, [r7, #16]
   return(result);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3308      	adds	r3, #8
 8003c18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c1a:	623a      	str	r2, [r7, #32]
 8003c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	69f9      	ldr	r1, [r7, #28]
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e5      	bne.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e010      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	f43f af48 	beq.w	8003b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3770      	adds	r7, #112	; 0x70
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b097      	sub	sp, #92	; 0x5c
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	d10e      	bne.n	8003cce <UART_Start_Receive_IT+0x52>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <UART_Start_Receive_IT+0x48>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003cbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cc2:	e02d      	b.n	8003d20 <UART_Start_Receive_IT+0xa4>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	22ff      	movs	r2, #255	; 0xff
 8003cc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ccc:	e028      	b.n	8003d20 <UART_Start_Receive_IT+0xa4>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <UART_Start_Receive_IT+0x76>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <UART_Start_Receive_IT+0x6c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	22ff      	movs	r2, #255	; 0xff
 8003ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ce6:	e01b      	b.n	8003d20 <UART_Start_Receive_IT+0xa4>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	227f      	movs	r2, #127	; 0x7f
 8003cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf0:	e016      	b.n	8003d20 <UART_Start_Receive_IT+0xa4>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cfa:	d10d      	bne.n	8003d18 <UART_Start_Receive_IT+0x9c>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <UART_Start_Receive_IT+0x92>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	227f      	movs	r2, #127	; 0x7f
 8003d08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d0c:	e008      	b.n	8003d20 <UART_Start_Receive_IT+0xa4>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	223f      	movs	r2, #63	; 0x3f
 8003d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d16:	e003      	b.n	8003d20 <UART_Start_Receive_IT+0xa4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2222      	movs	r2, #34	; 0x22
 8003d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	657b      	str	r3, [r7, #84]	; 0x54
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d50:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d107      	bne.n	8003d7e <UART_Start_Receive_IT+0x102>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <UART_Start_Receive_IT+0x184>)
 8003d7a:	669a      	str	r2, [r3, #104]	; 0x68
 8003d7c:	e002      	b.n	8003d84 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <UART_Start_Receive_IT+0x188>)
 8003d82:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d019      	beq.n	8003dc0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
 8003dac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e6      	bne.n	8003d8c <UART_Start_Receive_IT+0x110>
 8003dbe:	e018      	b.n	8003df2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f043 0320 	orr.w	r3, r3, #32
 8003dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dde:	623b      	str	r3, [r7, #32]
 8003de0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	69f9      	ldr	r1, [r7, #28]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e6      	bne.n	8003dc0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	375c      	adds	r7, #92	; 0x5c
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	0800422d 	.word	0x0800422d
 8003e04:	080040c7 	.word	0x080040c7

08003e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b095      	sub	sp, #84	; 0x54
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e6      	bne.n	8003e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3308      	adds	r3, #8
 8003e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3308      	adds	r3, #8
 8003e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e5      	bne.n	8003e42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d118      	bne.n	8003eb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	647b      	str	r3, [r7, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6979      	ldr	r1, [r7, #20]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e6      	bne.n	8003e7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ec4:	bf00      	nop
 8003ec6:	3754      	adds	r7, #84	; 0x54
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fa8a 	bl	8003408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b08f      	sub	sp, #60	; 0x3c
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f08:	2b21      	cmp	r3, #33	; 0x21
 8003f0a:	d14c      	bne.n	8003fa6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d132      	bne.n	8003f7e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e6      	bne.n	8003f18 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6979      	ldr	r1, [r7, #20]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	613b      	str	r3, [r7, #16]
   return(result);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e6      	bne.n	8003f4a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f7c:	e013      	b.n	8003fa6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003fa6:	bf00      	nop
 8003fa8:	373c      	adds	r7, #60	; 0x3c
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b091      	sub	sp, #68	; 0x44
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fbe:	2b21      	cmp	r3, #33	; 0x21
 8003fc0:	d151      	bne.n	8004066 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d132      	bne.n	8004034 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	623b      	str	r3, [r7, #32]
   return(result);
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
 8003fee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e6      	bne.n	8003fce <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	60fb      	str	r3, [r7, #12]
   return(result);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	617b      	str	r3, [r7, #20]
   return(result);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e6      	bne.n	8004000 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004032:	e018      	b.n	8004066 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404e:	1c9a      	adds	r2, r3, #2
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004066:	bf00      	nop
 8004068:	3744      	adds	r7, #68	; 0x44
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b088      	sub	sp, #32
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60bb      	str	r3, [r7, #8]
   return(result);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	613b      	str	r3, [r7, #16]
   return(result);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e6      	bne.n	800407a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc ff49 	bl	8000f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040be:	bf00      	nop
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b096      	sub	sp, #88	; 0x58
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040de:	2b22      	cmp	r3, #34	; 0x22
 80040e0:	f040 8098 	bne.w	8004214 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80040f2:	b2d9      	uxtb	r1, r3
 80040f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	400a      	ands	r2, r1
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d17b      	bne.n	8004224 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800413a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004140:	653b      	str	r3, [r7, #80]	; 0x50
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
 800414c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	623b      	str	r3, [r7, #32]
   return(result);
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800417e:	633a      	str	r2, [r7, #48]	; 0x30
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d12e      	bne.n	800420c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f023 0310 	bic.w	r3, r3, #16
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	617b      	str	r3, [r7, #20]
   return(result);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e6      	bne.n	80041b4 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d103      	bne.n	80041fc <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff f909 	bl	800341c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800420a:	e00b      	b.n	8004224 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7fc fe75 	bl	8000efc <HAL_UART_RxCpltCallback>
}
 8004212:	e007      	b.n	8004224 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	619a      	str	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	3758      	adds	r7, #88	; 0x58
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b096      	sub	sp, #88	; 0x58
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800423a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004244:	2b22      	cmp	r3, #34	; 0x22
 8004246:	f040 8098 	bne.w	800437a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800425a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800425e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004262:	4013      	ands	r3, r2
 8004264:	b29a      	uxth	r2, r3
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	1c9a      	adds	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d17b      	bne.n	800438a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	643b      	str	r3, [r7, #64]	; 0x40
 80042b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004310:	2b01      	cmp	r3, #1
 8004312:	d12e      	bne.n	8004372 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	60bb      	str	r3, [r7, #8]
   return(result);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f023 0310 	bic.w	r3, r3, #16
 800432e:	647b      	str	r3, [r7, #68]	; 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	613b      	str	r3, [r7, #16]
   return(result);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e6      	bne.n	800431a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b10      	cmp	r3, #16
 8004358:	d103      	bne.n	8004362 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2210      	movs	r2, #16
 8004360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff f856 	bl	800341c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004370:	e00b      	b.n	800438a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fdc2 	bl	8000efc <HAL_UART_RxCpltCallback>
}
 8004378:	e007      	b.n	800438a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0208 	orr.w	r2, r2, #8
 8004388:	619a      	str	r2, [r3, #24]
}
 800438a:	bf00      	nop
 800438c:	3758      	adds	r7, #88	; 0x58
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <atoi>:
 8004392:	220a      	movs	r2, #10
 8004394:	2100      	movs	r1, #0
 8004396:	f000 b8c3 	b.w	8004520 <strtol>
	...

0800439c <__errno>:
 800439c:	4b01      	ldr	r3, [pc, #4]	; (80043a4 <__errno+0x8>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4d0d      	ldr	r5, [pc, #52]	; (80043e0 <__libc_init_array+0x38>)
 80043ac:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <__libc_init_array+0x3c>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	2600      	movs	r6, #0
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	4d0b      	ldr	r5, [pc, #44]	; (80043e8 <__libc_init_array+0x40>)
 80043ba:	4c0c      	ldr	r4, [pc, #48]	; (80043ec <__libc_init_array+0x44>)
 80043bc:	f000 fd28 	bl	8004e10 <_init>
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	2600      	movs	r6, #0
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	08004fe4 	.word	0x08004fe4
 80043e4:	08004fe4 	.word	0x08004fe4
 80043e8:	08004fe4 	.word	0x08004fe4
 80043ec:	08004fe8 	.word	0x08004fe8

080043f0 <memset>:
 80043f0:	4402      	add	r2, r0
 80043f2:	4603      	mov	r3, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	f803 1b01 	strb.w	r1, [r3], #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <strchr>:
 8004400:	b2c9      	uxtb	r1, r1
 8004402:	4603      	mov	r3, r0
 8004404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004408:	b11a      	cbz	r2, 8004412 <strchr+0x12>
 800440a:	428a      	cmp	r2, r1
 800440c:	d1f9      	bne.n	8004402 <strchr+0x2>
 800440e:	4618      	mov	r0, r3
 8004410:	4770      	bx	lr
 8004412:	2900      	cmp	r1, #0
 8004414:	bf18      	it	ne
 8004416:	2300      	movne	r3, #0
 8004418:	e7f9      	b.n	800440e <strchr+0xe>
	...

0800441c <_strtol_l.constprop.0>:
 800441c:	2b01      	cmp	r3, #1
 800441e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004422:	d001      	beq.n	8004428 <_strtol_l.constprop.0+0xc>
 8004424:	2b24      	cmp	r3, #36	; 0x24
 8004426:	d906      	bls.n	8004436 <_strtol_l.constprop.0+0x1a>
 8004428:	f7ff ffb8 	bl	800439c <__errno>
 800442c:	2316      	movs	r3, #22
 800442e:	6003      	str	r3, [r0, #0]
 8004430:	2000      	movs	r0, #0
 8004432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004436:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800451c <_strtol_l.constprop.0+0x100>
 800443a:	460d      	mov	r5, r1
 800443c:	462e      	mov	r6, r5
 800443e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004442:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004446:	f017 0708 	ands.w	r7, r7, #8
 800444a:	d1f7      	bne.n	800443c <_strtol_l.constprop.0+0x20>
 800444c:	2c2d      	cmp	r4, #45	; 0x2d
 800444e:	d132      	bne.n	80044b6 <_strtol_l.constprop.0+0x9a>
 8004450:	782c      	ldrb	r4, [r5, #0]
 8004452:	2701      	movs	r7, #1
 8004454:	1cb5      	adds	r5, r6, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d05b      	beq.n	8004512 <_strtol_l.constprop.0+0xf6>
 800445a:	2b10      	cmp	r3, #16
 800445c:	d109      	bne.n	8004472 <_strtol_l.constprop.0+0x56>
 800445e:	2c30      	cmp	r4, #48	; 0x30
 8004460:	d107      	bne.n	8004472 <_strtol_l.constprop.0+0x56>
 8004462:	782c      	ldrb	r4, [r5, #0]
 8004464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004468:	2c58      	cmp	r4, #88	; 0x58
 800446a:	d14d      	bne.n	8004508 <_strtol_l.constprop.0+0xec>
 800446c:	786c      	ldrb	r4, [r5, #1]
 800446e:	2310      	movs	r3, #16
 8004470:	3502      	adds	r5, #2
 8004472:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004476:	f108 38ff 	add.w	r8, r8, #4294967295
 800447a:	f04f 0c00 	mov.w	ip, #0
 800447e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004482:	4666      	mov	r6, ip
 8004484:	fb03 8a19 	mls	sl, r3, r9, r8
 8004488:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800448c:	f1be 0f09 	cmp.w	lr, #9
 8004490:	d816      	bhi.n	80044c0 <_strtol_l.constprop.0+0xa4>
 8004492:	4674      	mov	r4, lr
 8004494:	42a3      	cmp	r3, r4
 8004496:	dd24      	ble.n	80044e2 <_strtol_l.constprop.0+0xc6>
 8004498:	f1bc 0f00 	cmp.w	ip, #0
 800449c:	db1e      	blt.n	80044dc <_strtol_l.constprop.0+0xc0>
 800449e:	45b1      	cmp	r9, r6
 80044a0:	d31c      	bcc.n	80044dc <_strtol_l.constprop.0+0xc0>
 80044a2:	d101      	bne.n	80044a8 <_strtol_l.constprop.0+0x8c>
 80044a4:	45a2      	cmp	sl, r4
 80044a6:	db19      	blt.n	80044dc <_strtol_l.constprop.0+0xc0>
 80044a8:	fb06 4603 	mla	r6, r6, r3, r4
 80044ac:	f04f 0c01 	mov.w	ip, #1
 80044b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b4:	e7e8      	b.n	8004488 <_strtol_l.constprop.0+0x6c>
 80044b6:	2c2b      	cmp	r4, #43	; 0x2b
 80044b8:	bf04      	itt	eq
 80044ba:	782c      	ldrbeq	r4, [r5, #0]
 80044bc:	1cb5      	addeq	r5, r6, #2
 80044be:	e7ca      	b.n	8004456 <_strtol_l.constprop.0+0x3a>
 80044c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80044c4:	f1be 0f19 	cmp.w	lr, #25
 80044c8:	d801      	bhi.n	80044ce <_strtol_l.constprop.0+0xb2>
 80044ca:	3c37      	subs	r4, #55	; 0x37
 80044cc:	e7e2      	b.n	8004494 <_strtol_l.constprop.0+0x78>
 80044ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80044d2:	f1be 0f19 	cmp.w	lr, #25
 80044d6:	d804      	bhi.n	80044e2 <_strtol_l.constprop.0+0xc6>
 80044d8:	3c57      	subs	r4, #87	; 0x57
 80044da:	e7db      	b.n	8004494 <_strtol_l.constprop.0+0x78>
 80044dc:	f04f 3cff 	mov.w	ip, #4294967295
 80044e0:	e7e6      	b.n	80044b0 <_strtol_l.constprop.0+0x94>
 80044e2:	f1bc 0f00 	cmp.w	ip, #0
 80044e6:	da05      	bge.n	80044f4 <_strtol_l.constprop.0+0xd8>
 80044e8:	2322      	movs	r3, #34	; 0x22
 80044ea:	6003      	str	r3, [r0, #0]
 80044ec:	4646      	mov	r6, r8
 80044ee:	b942      	cbnz	r2, 8004502 <_strtol_l.constprop.0+0xe6>
 80044f0:	4630      	mov	r0, r6
 80044f2:	e79e      	b.n	8004432 <_strtol_l.constprop.0+0x16>
 80044f4:	b107      	cbz	r7, 80044f8 <_strtol_l.constprop.0+0xdc>
 80044f6:	4276      	negs	r6, r6
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	d0f9      	beq.n	80044f0 <_strtol_l.constprop.0+0xd4>
 80044fc:	f1bc 0f00 	cmp.w	ip, #0
 8004500:	d000      	beq.n	8004504 <_strtol_l.constprop.0+0xe8>
 8004502:	1e69      	subs	r1, r5, #1
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	e7f3      	b.n	80044f0 <_strtol_l.constprop.0+0xd4>
 8004508:	2430      	movs	r4, #48	; 0x30
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1b1      	bne.n	8004472 <_strtol_l.constprop.0+0x56>
 800450e:	2308      	movs	r3, #8
 8004510:	e7af      	b.n	8004472 <_strtol_l.constprop.0+0x56>
 8004512:	2c30      	cmp	r4, #48	; 0x30
 8004514:	d0a5      	beq.n	8004462 <_strtol_l.constprop.0+0x46>
 8004516:	230a      	movs	r3, #10
 8004518:	e7ab      	b.n	8004472 <_strtol_l.constprop.0+0x56>
 800451a:	bf00      	nop
 800451c:	08004ea9 	.word	0x08004ea9

08004520 <strtol>:
 8004520:	4613      	mov	r3, r2
 8004522:	460a      	mov	r2, r1
 8004524:	4601      	mov	r1, r0
 8004526:	4802      	ldr	r0, [pc, #8]	; (8004530 <strtol+0x10>)
 8004528:	6800      	ldr	r0, [r0, #0]
 800452a:	f7ff bf77 	b.w	800441c <_strtol_l.constprop.0>
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c

08004534 <_vsiprintf_r>:
 8004534:	b500      	push	{lr}
 8004536:	b09b      	sub	sp, #108	; 0x6c
 8004538:	9100      	str	r1, [sp, #0]
 800453a:	9104      	str	r1, [sp, #16]
 800453c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004540:	9105      	str	r1, [sp, #20]
 8004542:	9102      	str	r1, [sp, #8]
 8004544:	4905      	ldr	r1, [pc, #20]	; (800455c <_vsiprintf_r+0x28>)
 8004546:	9103      	str	r1, [sp, #12]
 8004548:	4669      	mov	r1, sp
 800454a:	f000 f86f 	bl	800462c <_svfiprintf_r>
 800454e:	9b00      	ldr	r3, [sp, #0]
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	b01b      	add	sp, #108	; 0x6c
 8004556:	f85d fb04 	ldr.w	pc, [sp], #4
 800455a:	bf00      	nop
 800455c:	ffff0208 	.word	0xffff0208

08004560 <vsiprintf>:
 8004560:	4613      	mov	r3, r2
 8004562:	460a      	mov	r2, r1
 8004564:	4601      	mov	r1, r0
 8004566:	4802      	ldr	r0, [pc, #8]	; (8004570 <vsiprintf+0x10>)
 8004568:	6800      	ldr	r0, [r0, #0]
 800456a:	f7ff bfe3 	b.w	8004534 <_vsiprintf_r>
 800456e:	bf00      	nop
 8004570:	2000000c 	.word	0x2000000c

08004574 <__ssputs_r>:
 8004574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	688e      	ldr	r6, [r1, #8]
 800457a:	429e      	cmp	r6, r3
 800457c:	4682      	mov	sl, r0
 800457e:	460c      	mov	r4, r1
 8004580:	4690      	mov	r8, r2
 8004582:	461f      	mov	r7, r3
 8004584:	d838      	bhi.n	80045f8 <__ssputs_r+0x84>
 8004586:	898a      	ldrh	r2, [r1, #12]
 8004588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800458c:	d032      	beq.n	80045f4 <__ssputs_r+0x80>
 800458e:	6825      	ldr	r5, [r4, #0]
 8004590:	6909      	ldr	r1, [r1, #16]
 8004592:	eba5 0901 	sub.w	r9, r5, r1
 8004596:	6965      	ldr	r5, [r4, #20]
 8004598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800459c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045a0:	3301      	adds	r3, #1
 80045a2:	444b      	add	r3, r9
 80045a4:	106d      	asrs	r5, r5, #1
 80045a6:	429d      	cmp	r5, r3
 80045a8:	bf38      	it	cc
 80045aa:	461d      	movcc	r5, r3
 80045ac:	0553      	lsls	r3, r2, #21
 80045ae:	d531      	bpl.n	8004614 <__ssputs_r+0xa0>
 80045b0:	4629      	mov	r1, r5
 80045b2:	f000 fb63 	bl	8004c7c <_malloc_r>
 80045b6:	4606      	mov	r6, r0
 80045b8:	b950      	cbnz	r0, 80045d0 <__ssputs_r+0x5c>
 80045ba:	230c      	movs	r3, #12
 80045bc:	f8ca 3000 	str.w	r3, [sl]
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d0:	6921      	ldr	r1, [r4, #16]
 80045d2:	464a      	mov	r2, r9
 80045d4:	f000 fabe 	bl	8004b54 <memcpy>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	6126      	str	r6, [r4, #16]
 80045e6:	6165      	str	r5, [r4, #20]
 80045e8:	444e      	add	r6, r9
 80045ea:	eba5 0509 	sub.w	r5, r5, r9
 80045ee:	6026      	str	r6, [r4, #0]
 80045f0:	60a5      	str	r5, [r4, #8]
 80045f2:	463e      	mov	r6, r7
 80045f4:	42be      	cmp	r6, r7
 80045f6:	d900      	bls.n	80045fa <__ssputs_r+0x86>
 80045f8:	463e      	mov	r6, r7
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	4632      	mov	r2, r6
 80045fe:	4641      	mov	r1, r8
 8004600:	f000 fab6 	bl	8004b70 <memmove>
 8004604:	68a3      	ldr	r3, [r4, #8]
 8004606:	1b9b      	subs	r3, r3, r6
 8004608:	60a3      	str	r3, [r4, #8]
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	4433      	add	r3, r6
 800460e:	6023      	str	r3, [r4, #0]
 8004610:	2000      	movs	r0, #0
 8004612:	e7db      	b.n	80045cc <__ssputs_r+0x58>
 8004614:	462a      	mov	r2, r5
 8004616:	f000 fba5 	bl	8004d64 <_realloc_r>
 800461a:	4606      	mov	r6, r0
 800461c:	2800      	cmp	r0, #0
 800461e:	d1e1      	bne.n	80045e4 <__ssputs_r+0x70>
 8004620:	6921      	ldr	r1, [r4, #16]
 8004622:	4650      	mov	r0, sl
 8004624:	f000 fabe 	bl	8004ba4 <_free_r>
 8004628:	e7c7      	b.n	80045ba <__ssputs_r+0x46>
	...

0800462c <_svfiprintf_r>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	4698      	mov	r8, r3
 8004632:	898b      	ldrh	r3, [r1, #12]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	b09d      	sub	sp, #116	; 0x74
 8004638:	4607      	mov	r7, r0
 800463a:	460d      	mov	r5, r1
 800463c:	4614      	mov	r4, r2
 800463e:	d50e      	bpl.n	800465e <_svfiprintf_r+0x32>
 8004640:	690b      	ldr	r3, [r1, #16]
 8004642:	b963      	cbnz	r3, 800465e <_svfiprintf_r+0x32>
 8004644:	2140      	movs	r1, #64	; 0x40
 8004646:	f000 fb19 	bl	8004c7c <_malloc_r>
 800464a:	6028      	str	r0, [r5, #0]
 800464c:	6128      	str	r0, [r5, #16]
 800464e:	b920      	cbnz	r0, 800465a <_svfiprintf_r+0x2e>
 8004650:	230c      	movs	r3, #12
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	e0d1      	b.n	80047fe <_svfiprintf_r+0x1d2>
 800465a:	2340      	movs	r3, #64	; 0x40
 800465c:	616b      	str	r3, [r5, #20]
 800465e:	2300      	movs	r3, #0
 8004660:	9309      	str	r3, [sp, #36]	; 0x24
 8004662:	2320      	movs	r3, #32
 8004664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004668:	f8cd 800c 	str.w	r8, [sp, #12]
 800466c:	2330      	movs	r3, #48	; 0x30
 800466e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004818 <_svfiprintf_r+0x1ec>
 8004672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004676:	f04f 0901 	mov.w	r9, #1
 800467a:	4623      	mov	r3, r4
 800467c:	469a      	mov	sl, r3
 800467e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004682:	b10a      	cbz	r2, 8004688 <_svfiprintf_r+0x5c>
 8004684:	2a25      	cmp	r2, #37	; 0x25
 8004686:	d1f9      	bne.n	800467c <_svfiprintf_r+0x50>
 8004688:	ebba 0b04 	subs.w	fp, sl, r4
 800468c:	d00b      	beq.n	80046a6 <_svfiprintf_r+0x7a>
 800468e:	465b      	mov	r3, fp
 8004690:	4622      	mov	r2, r4
 8004692:	4629      	mov	r1, r5
 8004694:	4638      	mov	r0, r7
 8004696:	f7ff ff6d 	bl	8004574 <__ssputs_r>
 800469a:	3001      	adds	r0, #1
 800469c:	f000 80aa 	beq.w	80047f4 <_svfiprintf_r+0x1c8>
 80046a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a2:	445a      	add	r2, fp
 80046a4:	9209      	str	r2, [sp, #36]	; 0x24
 80046a6:	f89a 3000 	ldrb.w	r3, [sl]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80a2 	beq.w	80047f4 <_svfiprintf_r+0x1c8>
 80046b0:	2300      	movs	r3, #0
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ba:	f10a 0a01 	add.w	sl, sl, #1
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	9307      	str	r3, [sp, #28]
 80046c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046c6:	931a      	str	r3, [sp, #104]	; 0x68
 80046c8:	4654      	mov	r4, sl
 80046ca:	2205      	movs	r2, #5
 80046cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d0:	4851      	ldr	r0, [pc, #324]	; (8004818 <_svfiprintf_r+0x1ec>)
 80046d2:	f7fb fdbd 	bl	8000250 <memchr>
 80046d6:	9a04      	ldr	r2, [sp, #16]
 80046d8:	b9d8      	cbnz	r0, 8004712 <_svfiprintf_r+0xe6>
 80046da:	06d0      	lsls	r0, r2, #27
 80046dc:	bf44      	itt	mi
 80046de:	2320      	movmi	r3, #32
 80046e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e4:	0711      	lsls	r1, r2, #28
 80046e6:	bf44      	itt	mi
 80046e8:	232b      	movmi	r3, #43	; 0x2b
 80046ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ee:	f89a 3000 	ldrb.w	r3, [sl]
 80046f2:	2b2a      	cmp	r3, #42	; 0x2a
 80046f4:	d015      	beq.n	8004722 <_svfiprintf_r+0xf6>
 80046f6:	9a07      	ldr	r2, [sp, #28]
 80046f8:	4654      	mov	r4, sl
 80046fa:	2000      	movs	r0, #0
 80046fc:	f04f 0c0a 	mov.w	ip, #10
 8004700:	4621      	mov	r1, r4
 8004702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004706:	3b30      	subs	r3, #48	; 0x30
 8004708:	2b09      	cmp	r3, #9
 800470a:	d94e      	bls.n	80047aa <_svfiprintf_r+0x17e>
 800470c:	b1b0      	cbz	r0, 800473c <_svfiprintf_r+0x110>
 800470e:	9207      	str	r2, [sp, #28]
 8004710:	e014      	b.n	800473c <_svfiprintf_r+0x110>
 8004712:	eba0 0308 	sub.w	r3, r0, r8
 8004716:	fa09 f303 	lsl.w	r3, r9, r3
 800471a:	4313      	orrs	r3, r2
 800471c:	9304      	str	r3, [sp, #16]
 800471e:	46a2      	mov	sl, r4
 8004720:	e7d2      	b.n	80046c8 <_svfiprintf_r+0x9c>
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	1d19      	adds	r1, r3, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	9103      	str	r1, [sp, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfbb      	ittet	lt
 800472e:	425b      	neglt	r3, r3
 8004730:	f042 0202 	orrlt.w	r2, r2, #2
 8004734:	9307      	strge	r3, [sp, #28]
 8004736:	9307      	strlt	r3, [sp, #28]
 8004738:	bfb8      	it	lt
 800473a:	9204      	strlt	r2, [sp, #16]
 800473c:	7823      	ldrb	r3, [r4, #0]
 800473e:	2b2e      	cmp	r3, #46	; 0x2e
 8004740:	d10c      	bne.n	800475c <_svfiprintf_r+0x130>
 8004742:	7863      	ldrb	r3, [r4, #1]
 8004744:	2b2a      	cmp	r3, #42	; 0x2a
 8004746:	d135      	bne.n	80047b4 <_svfiprintf_r+0x188>
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	1d1a      	adds	r2, r3, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	9203      	str	r2, [sp, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	bfb8      	it	lt
 8004754:	f04f 33ff 	movlt.w	r3, #4294967295
 8004758:	3402      	adds	r4, #2
 800475a:	9305      	str	r3, [sp, #20]
 800475c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004828 <_svfiprintf_r+0x1fc>
 8004760:	7821      	ldrb	r1, [r4, #0]
 8004762:	2203      	movs	r2, #3
 8004764:	4650      	mov	r0, sl
 8004766:	f7fb fd73 	bl	8000250 <memchr>
 800476a:	b140      	cbz	r0, 800477e <_svfiprintf_r+0x152>
 800476c:	2340      	movs	r3, #64	; 0x40
 800476e:	eba0 000a 	sub.w	r0, r0, sl
 8004772:	fa03 f000 	lsl.w	r0, r3, r0
 8004776:	9b04      	ldr	r3, [sp, #16]
 8004778:	4303      	orrs	r3, r0
 800477a:	3401      	adds	r4, #1
 800477c:	9304      	str	r3, [sp, #16]
 800477e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004782:	4826      	ldr	r0, [pc, #152]	; (800481c <_svfiprintf_r+0x1f0>)
 8004784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004788:	2206      	movs	r2, #6
 800478a:	f7fb fd61 	bl	8000250 <memchr>
 800478e:	2800      	cmp	r0, #0
 8004790:	d038      	beq.n	8004804 <_svfiprintf_r+0x1d8>
 8004792:	4b23      	ldr	r3, [pc, #140]	; (8004820 <_svfiprintf_r+0x1f4>)
 8004794:	bb1b      	cbnz	r3, 80047de <_svfiprintf_r+0x1b2>
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	3307      	adds	r3, #7
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	3308      	adds	r3, #8
 80047a0:	9303      	str	r3, [sp, #12]
 80047a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a4:	4433      	add	r3, r6
 80047a6:	9309      	str	r3, [sp, #36]	; 0x24
 80047a8:	e767      	b.n	800467a <_svfiprintf_r+0x4e>
 80047aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80047ae:	460c      	mov	r4, r1
 80047b0:	2001      	movs	r0, #1
 80047b2:	e7a5      	b.n	8004700 <_svfiprintf_r+0xd4>
 80047b4:	2300      	movs	r3, #0
 80047b6:	3401      	adds	r4, #1
 80047b8:	9305      	str	r3, [sp, #20]
 80047ba:	4619      	mov	r1, r3
 80047bc:	f04f 0c0a 	mov.w	ip, #10
 80047c0:	4620      	mov	r0, r4
 80047c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c6:	3a30      	subs	r2, #48	; 0x30
 80047c8:	2a09      	cmp	r2, #9
 80047ca:	d903      	bls.n	80047d4 <_svfiprintf_r+0x1a8>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0c5      	beq.n	800475c <_svfiprintf_r+0x130>
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	e7c3      	b.n	800475c <_svfiprintf_r+0x130>
 80047d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80047d8:	4604      	mov	r4, r0
 80047da:	2301      	movs	r3, #1
 80047dc:	e7f0      	b.n	80047c0 <_svfiprintf_r+0x194>
 80047de:	ab03      	add	r3, sp, #12
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	462a      	mov	r2, r5
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <_svfiprintf_r+0x1f8>)
 80047e6:	a904      	add	r1, sp, #16
 80047e8:	4638      	mov	r0, r7
 80047ea:	f3af 8000 	nop.w
 80047ee:	1c42      	adds	r2, r0, #1
 80047f0:	4606      	mov	r6, r0
 80047f2:	d1d6      	bne.n	80047a2 <_svfiprintf_r+0x176>
 80047f4:	89ab      	ldrh	r3, [r5, #12]
 80047f6:	065b      	lsls	r3, r3, #25
 80047f8:	f53f af2c 	bmi.w	8004654 <_svfiprintf_r+0x28>
 80047fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047fe:	b01d      	add	sp, #116	; 0x74
 8004800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004804:	ab03      	add	r3, sp, #12
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	462a      	mov	r2, r5
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <_svfiprintf_r+0x1f8>)
 800480c:	a904      	add	r1, sp, #16
 800480e:	4638      	mov	r0, r7
 8004810:	f000 f87a 	bl	8004908 <_printf_i>
 8004814:	e7eb      	b.n	80047ee <_svfiprintf_r+0x1c2>
 8004816:	bf00      	nop
 8004818:	08004fa9 	.word	0x08004fa9
 800481c:	08004fb3 	.word	0x08004fb3
 8004820:	00000000 	.word	0x00000000
 8004824:	08004575 	.word	0x08004575
 8004828:	08004faf 	.word	0x08004faf

0800482c <_printf_common>:
 800482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	4616      	mov	r6, r2
 8004832:	4699      	mov	r9, r3
 8004834:	688a      	ldr	r2, [r1, #8]
 8004836:	690b      	ldr	r3, [r1, #16]
 8004838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800483c:	4293      	cmp	r3, r2
 800483e:	bfb8      	it	lt
 8004840:	4613      	movlt	r3, r2
 8004842:	6033      	str	r3, [r6, #0]
 8004844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004848:	4607      	mov	r7, r0
 800484a:	460c      	mov	r4, r1
 800484c:	b10a      	cbz	r2, 8004852 <_printf_common+0x26>
 800484e:	3301      	adds	r3, #1
 8004850:	6033      	str	r3, [r6, #0]
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	0699      	lsls	r1, r3, #26
 8004856:	bf42      	ittt	mi
 8004858:	6833      	ldrmi	r3, [r6, #0]
 800485a:	3302      	addmi	r3, #2
 800485c:	6033      	strmi	r3, [r6, #0]
 800485e:	6825      	ldr	r5, [r4, #0]
 8004860:	f015 0506 	ands.w	r5, r5, #6
 8004864:	d106      	bne.n	8004874 <_printf_common+0x48>
 8004866:	f104 0a19 	add.w	sl, r4, #25
 800486a:	68e3      	ldr	r3, [r4, #12]
 800486c:	6832      	ldr	r2, [r6, #0]
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	42ab      	cmp	r3, r5
 8004872:	dc26      	bgt.n	80048c2 <_printf_common+0x96>
 8004874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004878:	1e13      	subs	r3, r2, #0
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	bf18      	it	ne
 800487e:	2301      	movne	r3, #1
 8004880:	0692      	lsls	r2, r2, #26
 8004882:	d42b      	bmi.n	80048dc <_printf_common+0xb0>
 8004884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004888:	4649      	mov	r1, r9
 800488a:	4638      	mov	r0, r7
 800488c:	47c0      	blx	r8
 800488e:	3001      	adds	r0, #1
 8004890:	d01e      	beq.n	80048d0 <_printf_common+0xa4>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	68e5      	ldr	r5, [r4, #12]
 8004896:	6832      	ldr	r2, [r6, #0]
 8004898:	f003 0306 	and.w	r3, r3, #6
 800489c:	2b04      	cmp	r3, #4
 800489e:	bf08      	it	eq
 80048a0:	1aad      	subeq	r5, r5, r2
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	6922      	ldr	r2, [r4, #16]
 80048a6:	bf0c      	ite	eq
 80048a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ac:	2500      	movne	r5, #0
 80048ae:	4293      	cmp	r3, r2
 80048b0:	bfc4      	itt	gt
 80048b2:	1a9b      	subgt	r3, r3, r2
 80048b4:	18ed      	addgt	r5, r5, r3
 80048b6:	2600      	movs	r6, #0
 80048b8:	341a      	adds	r4, #26
 80048ba:	42b5      	cmp	r5, r6
 80048bc:	d11a      	bne.n	80048f4 <_printf_common+0xc8>
 80048be:	2000      	movs	r0, #0
 80048c0:	e008      	b.n	80048d4 <_printf_common+0xa8>
 80048c2:	2301      	movs	r3, #1
 80048c4:	4652      	mov	r2, sl
 80048c6:	4649      	mov	r1, r9
 80048c8:	4638      	mov	r0, r7
 80048ca:	47c0      	blx	r8
 80048cc:	3001      	adds	r0, #1
 80048ce:	d103      	bne.n	80048d8 <_printf_common+0xac>
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d8:	3501      	adds	r5, #1
 80048da:	e7c6      	b.n	800486a <_printf_common+0x3e>
 80048dc:	18e1      	adds	r1, r4, r3
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	2030      	movs	r0, #48	; 0x30
 80048e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048e6:	4422      	add	r2, r4
 80048e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f0:	3302      	adds	r3, #2
 80048f2:	e7c7      	b.n	8004884 <_printf_common+0x58>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4622      	mov	r2, r4
 80048f8:	4649      	mov	r1, r9
 80048fa:	4638      	mov	r0, r7
 80048fc:	47c0      	blx	r8
 80048fe:	3001      	adds	r0, #1
 8004900:	d0e6      	beq.n	80048d0 <_printf_common+0xa4>
 8004902:	3601      	adds	r6, #1
 8004904:	e7d9      	b.n	80048ba <_printf_common+0x8e>
	...

08004908 <_printf_i>:
 8004908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	7e0f      	ldrb	r7, [r1, #24]
 800490e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004910:	2f78      	cmp	r7, #120	; 0x78
 8004912:	4691      	mov	r9, r2
 8004914:	4680      	mov	r8, r0
 8004916:	460c      	mov	r4, r1
 8004918:	469a      	mov	sl, r3
 800491a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800491e:	d807      	bhi.n	8004930 <_printf_i+0x28>
 8004920:	2f62      	cmp	r7, #98	; 0x62
 8004922:	d80a      	bhi.n	800493a <_printf_i+0x32>
 8004924:	2f00      	cmp	r7, #0
 8004926:	f000 80d8 	beq.w	8004ada <_printf_i+0x1d2>
 800492a:	2f58      	cmp	r7, #88	; 0x58
 800492c:	f000 80a3 	beq.w	8004a76 <_printf_i+0x16e>
 8004930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004938:	e03a      	b.n	80049b0 <_printf_i+0xa8>
 800493a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800493e:	2b15      	cmp	r3, #21
 8004940:	d8f6      	bhi.n	8004930 <_printf_i+0x28>
 8004942:	a101      	add	r1, pc, #4	; (adr r1, 8004948 <_printf_i+0x40>)
 8004944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004948:	080049a1 	.word	0x080049a1
 800494c:	080049b5 	.word	0x080049b5
 8004950:	08004931 	.word	0x08004931
 8004954:	08004931 	.word	0x08004931
 8004958:	08004931 	.word	0x08004931
 800495c:	08004931 	.word	0x08004931
 8004960:	080049b5 	.word	0x080049b5
 8004964:	08004931 	.word	0x08004931
 8004968:	08004931 	.word	0x08004931
 800496c:	08004931 	.word	0x08004931
 8004970:	08004931 	.word	0x08004931
 8004974:	08004ac1 	.word	0x08004ac1
 8004978:	080049e5 	.word	0x080049e5
 800497c:	08004aa3 	.word	0x08004aa3
 8004980:	08004931 	.word	0x08004931
 8004984:	08004931 	.word	0x08004931
 8004988:	08004ae3 	.word	0x08004ae3
 800498c:	08004931 	.word	0x08004931
 8004990:	080049e5 	.word	0x080049e5
 8004994:	08004931 	.word	0x08004931
 8004998:	08004931 	.word	0x08004931
 800499c:	08004aab 	.word	0x08004aab
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	602a      	str	r2, [r5, #0]
 80049a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0a3      	b.n	8004afc <_printf_i+0x1f4>
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	6829      	ldr	r1, [r5, #0]
 80049b8:	0606      	lsls	r6, r0, #24
 80049ba:	f101 0304 	add.w	r3, r1, #4
 80049be:	d50a      	bpl.n	80049d6 <_printf_i+0xce>
 80049c0:	680e      	ldr	r6, [r1, #0]
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	2e00      	cmp	r6, #0
 80049c6:	da03      	bge.n	80049d0 <_printf_i+0xc8>
 80049c8:	232d      	movs	r3, #45	; 0x2d
 80049ca:	4276      	negs	r6, r6
 80049cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d0:	485e      	ldr	r0, [pc, #376]	; (8004b4c <_printf_i+0x244>)
 80049d2:	230a      	movs	r3, #10
 80049d4:	e019      	b.n	8004a0a <_printf_i+0x102>
 80049d6:	680e      	ldr	r6, [r1, #0]
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049de:	bf18      	it	ne
 80049e0:	b236      	sxthne	r6, r6
 80049e2:	e7ef      	b.n	80049c4 <_printf_i+0xbc>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	6820      	ldr	r0, [r4, #0]
 80049e8:	1d19      	adds	r1, r3, #4
 80049ea:	6029      	str	r1, [r5, #0]
 80049ec:	0601      	lsls	r1, r0, #24
 80049ee:	d501      	bpl.n	80049f4 <_printf_i+0xec>
 80049f0:	681e      	ldr	r6, [r3, #0]
 80049f2:	e002      	b.n	80049fa <_printf_i+0xf2>
 80049f4:	0646      	lsls	r6, r0, #25
 80049f6:	d5fb      	bpl.n	80049f0 <_printf_i+0xe8>
 80049f8:	881e      	ldrh	r6, [r3, #0]
 80049fa:	4854      	ldr	r0, [pc, #336]	; (8004b4c <_printf_i+0x244>)
 80049fc:	2f6f      	cmp	r7, #111	; 0x6f
 80049fe:	bf0c      	ite	eq
 8004a00:	2308      	moveq	r3, #8
 8004a02:	230a      	movne	r3, #10
 8004a04:	2100      	movs	r1, #0
 8004a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a0a:	6865      	ldr	r5, [r4, #4]
 8004a0c:	60a5      	str	r5, [r4, #8]
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	bfa2      	ittt	ge
 8004a12:	6821      	ldrge	r1, [r4, #0]
 8004a14:	f021 0104 	bicge.w	r1, r1, #4
 8004a18:	6021      	strge	r1, [r4, #0]
 8004a1a:	b90e      	cbnz	r6, 8004a20 <_printf_i+0x118>
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	d04d      	beq.n	8004abc <_printf_i+0x1b4>
 8004a20:	4615      	mov	r5, r2
 8004a22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a26:	fb03 6711 	mls	r7, r3, r1, r6
 8004a2a:	5dc7      	ldrb	r7, [r0, r7]
 8004a2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a30:	4637      	mov	r7, r6
 8004a32:	42bb      	cmp	r3, r7
 8004a34:	460e      	mov	r6, r1
 8004a36:	d9f4      	bls.n	8004a22 <_printf_i+0x11a>
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d10b      	bne.n	8004a54 <_printf_i+0x14c>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	07de      	lsls	r6, r3, #31
 8004a40:	d508      	bpl.n	8004a54 <_printf_i+0x14c>
 8004a42:	6923      	ldr	r3, [r4, #16]
 8004a44:	6861      	ldr	r1, [r4, #4]
 8004a46:	4299      	cmp	r1, r3
 8004a48:	bfde      	ittt	le
 8004a4a:	2330      	movle	r3, #48	; 0x30
 8004a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a54:	1b52      	subs	r2, r2, r5
 8004a56:	6122      	str	r2, [r4, #16]
 8004a58:	f8cd a000 	str.w	sl, [sp]
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	aa03      	add	r2, sp, #12
 8004a60:	4621      	mov	r1, r4
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7ff fee2 	bl	800482c <_printf_common>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d14c      	bne.n	8004b06 <_printf_i+0x1fe>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	b004      	add	sp, #16
 8004a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a76:	4835      	ldr	r0, [pc, #212]	; (8004b4c <_printf_i+0x244>)
 8004a78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a7c:	6829      	ldr	r1, [r5, #0]
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a84:	6029      	str	r1, [r5, #0]
 8004a86:	061d      	lsls	r5, r3, #24
 8004a88:	d514      	bpl.n	8004ab4 <_printf_i+0x1ac>
 8004a8a:	07df      	lsls	r7, r3, #31
 8004a8c:	bf44      	itt	mi
 8004a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004a92:	6023      	strmi	r3, [r4, #0]
 8004a94:	b91e      	cbnz	r6, 8004a9e <_printf_i+0x196>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	f023 0320 	bic.w	r3, r3, #32
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	e7b0      	b.n	8004a04 <_printf_i+0xfc>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	f043 0320 	orr.w	r3, r3, #32
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	2378      	movs	r3, #120	; 0x78
 8004aac:	4828      	ldr	r0, [pc, #160]	; (8004b50 <_printf_i+0x248>)
 8004aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ab2:	e7e3      	b.n	8004a7c <_printf_i+0x174>
 8004ab4:	0659      	lsls	r1, r3, #25
 8004ab6:	bf48      	it	mi
 8004ab8:	b2b6      	uxthmi	r6, r6
 8004aba:	e7e6      	b.n	8004a8a <_printf_i+0x182>
 8004abc:	4615      	mov	r5, r2
 8004abe:	e7bb      	b.n	8004a38 <_printf_i+0x130>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6826      	ldr	r6, [r4, #0]
 8004ac4:	6961      	ldr	r1, [r4, #20]
 8004ac6:	1d18      	adds	r0, r3, #4
 8004ac8:	6028      	str	r0, [r5, #0]
 8004aca:	0635      	lsls	r5, r6, #24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0x1cc>
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <_printf_i+0x1d2>
 8004ad4:	0670      	lsls	r0, r6, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0x1c8>
 8004ad8:	8019      	strh	r1, [r3, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	6123      	str	r3, [r4, #16]
 8004ade:	4615      	mov	r5, r2
 8004ae0:	e7ba      	b.n	8004a58 <_printf_i+0x150>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	1d1a      	adds	r2, r3, #4
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	681d      	ldr	r5, [r3, #0]
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	2100      	movs	r1, #0
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7fb fbae 	bl	8000250 <memchr>
 8004af4:	b108      	cbz	r0, 8004afa <_printf_i+0x1f2>
 8004af6:	1b40      	subs	r0, r0, r5
 8004af8:	6060      	str	r0, [r4, #4]
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	2300      	movs	r3, #0
 8004b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b04:	e7a8      	b.n	8004a58 <_printf_i+0x150>
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	462a      	mov	r2, r5
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	47d0      	blx	sl
 8004b10:	3001      	adds	r0, #1
 8004b12:	d0ab      	beq.n	8004a6c <_printf_i+0x164>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	079b      	lsls	r3, r3, #30
 8004b18:	d413      	bmi.n	8004b42 <_printf_i+0x23a>
 8004b1a:	68e0      	ldr	r0, [r4, #12]
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	4298      	cmp	r0, r3
 8004b20:	bfb8      	it	lt
 8004b22:	4618      	movlt	r0, r3
 8004b24:	e7a4      	b.n	8004a70 <_printf_i+0x168>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4632      	mov	r2, r6
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	47d0      	blx	sl
 8004b30:	3001      	adds	r0, #1
 8004b32:	d09b      	beq.n	8004a6c <_printf_i+0x164>
 8004b34:	3501      	adds	r5, #1
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	9903      	ldr	r1, [sp, #12]
 8004b3a:	1a5b      	subs	r3, r3, r1
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	dcf2      	bgt.n	8004b26 <_printf_i+0x21e>
 8004b40:	e7eb      	b.n	8004b1a <_printf_i+0x212>
 8004b42:	2500      	movs	r5, #0
 8004b44:	f104 0619 	add.w	r6, r4, #25
 8004b48:	e7f5      	b.n	8004b36 <_printf_i+0x22e>
 8004b4a:	bf00      	nop
 8004b4c:	08004fba 	.word	0x08004fba
 8004b50:	08004fcb 	.word	0x08004fcb

08004b54 <memcpy>:
 8004b54:	440a      	add	r2, r1
 8004b56:	4291      	cmp	r1, r2
 8004b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b5c:	d100      	bne.n	8004b60 <memcpy+0xc>
 8004b5e:	4770      	bx	lr
 8004b60:	b510      	push	{r4, lr}
 8004b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b6a:	4291      	cmp	r1, r2
 8004b6c:	d1f9      	bne.n	8004b62 <memcpy+0xe>
 8004b6e:	bd10      	pop	{r4, pc}

08004b70 <memmove>:
 8004b70:	4288      	cmp	r0, r1
 8004b72:	b510      	push	{r4, lr}
 8004b74:	eb01 0402 	add.w	r4, r1, r2
 8004b78:	d902      	bls.n	8004b80 <memmove+0x10>
 8004b7a:	4284      	cmp	r4, r0
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	d807      	bhi.n	8004b90 <memmove+0x20>
 8004b80:	1e43      	subs	r3, r0, #1
 8004b82:	42a1      	cmp	r1, r4
 8004b84:	d008      	beq.n	8004b98 <memmove+0x28>
 8004b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b8e:	e7f8      	b.n	8004b82 <memmove+0x12>
 8004b90:	4402      	add	r2, r0
 8004b92:	4601      	mov	r1, r0
 8004b94:	428a      	cmp	r2, r1
 8004b96:	d100      	bne.n	8004b9a <memmove+0x2a>
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ba2:	e7f7      	b.n	8004b94 <memmove+0x24>

08004ba4 <_free_r>:
 8004ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ba6:	2900      	cmp	r1, #0
 8004ba8:	d044      	beq.n	8004c34 <_free_r+0x90>
 8004baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bae:	9001      	str	r0, [sp, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bb6:	bfb8      	it	lt
 8004bb8:	18e4      	addlt	r4, r4, r3
 8004bba:	f000 f913 	bl	8004de4 <__malloc_lock>
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <_free_r+0x94>)
 8004bc0:	9801      	ldr	r0, [sp, #4]
 8004bc2:	6813      	ldr	r3, [r2, #0]
 8004bc4:	b933      	cbnz	r3, 8004bd4 <_free_r+0x30>
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	6014      	str	r4, [r2, #0]
 8004bca:	b003      	add	sp, #12
 8004bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bd0:	f000 b90e 	b.w	8004df0 <__malloc_unlock>
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	d908      	bls.n	8004bea <_free_r+0x46>
 8004bd8:	6825      	ldr	r5, [r4, #0]
 8004bda:	1961      	adds	r1, r4, r5
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	bf01      	itttt	eq
 8004be0:	6819      	ldreq	r1, [r3, #0]
 8004be2:	685b      	ldreq	r3, [r3, #4]
 8004be4:	1949      	addeq	r1, r1, r5
 8004be6:	6021      	streq	r1, [r4, #0]
 8004be8:	e7ed      	b.n	8004bc6 <_free_r+0x22>
 8004bea:	461a      	mov	r2, r3
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	b10b      	cbz	r3, 8004bf4 <_free_r+0x50>
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	d9fa      	bls.n	8004bea <_free_r+0x46>
 8004bf4:	6811      	ldr	r1, [r2, #0]
 8004bf6:	1855      	adds	r5, r2, r1
 8004bf8:	42a5      	cmp	r5, r4
 8004bfa:	d10b      	bne.n	8004c14 <_free_r+0x70>
 8004bfc:	6824      	ldr	r4, [r4, #0]
 8004bfe:	4421      	add	r1, r4
 8004c00:	1854      	adds	r4, r2, r1
 8004c02:	42a3      	cmp	r3, r4
 8004c04:	6011      	str	r1, [r2, #0]
 8004c06:	d1e0      	bne.n	8004bca <_free_r+0x26>
 8004c08:	681c      	ldr	r4, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	6053      	str	r3, [r2, #4]
 8004c0e:	4421      	add	r1, r4
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	e7da      	b.n	8004bca <_free_r+0x26>
 8004c14:	d902      	bls.n	8004c1c <_free_r+0x78>
 8004c16:	230c      	movs	r3, #12
 8004c18:	6003      	str	r3, [r0, #0]
 8004c1a:	e7d6      	b.n	8004bca <_free_r+0x26>
 8004c1c:	6825      	ldr	r5, [r4, #0]
 8004c1e:	1961      	adds	r1, r4, r5
 8004c20:	428b      	cmp	r3, r1
 8004c22:	bf04      	itt	eq
 8004c24:	6819      	ldreq	r1, [r3, #0]
 8004c26:	685b      	ldreq	r3, [r3, #4]
 8004c28:	6063      	str	r3, [r4, #4]
 8004c2a:	bf04      	itt	eq
 8004c2c:	1949      	addeq	r1, r1, r5
 8004c2e:	6021      	streq	r1, [r4, #0]
 8004c30:	6054      	str	r4, [r2, #4]
 8004c32:	e7ca      	b.n	8004bca <_free_r+0x26>
 8004c34:	b003      	add	sp, #12
 8004c36:	bd30      	pop	{r4, r5, pc}
 8004c38:	200003c0 	.word	0x200003c0

08004c3c <sbrk_aligned>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	4e0e      	ldr	r6, [pc, #56]	; (8004c78 <sbrk_aligned+0x3c>)
 8004c40:	460c      	mov	r4, r1
 8004c42:	6831      	ldr	r1, [r6, #0]
 8004c44:	4605      	mov	r5, r0
 8004c46:	b911      	cbnz	r1, 8004c4e <sbrk_aligned+0x12>
 8004c48:	f000 f8bc 	bl	8004dc4 <_sbrk_r>
 8004c4c:	6030      	str	r0, [r6, #0]
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4628      	mov	r0, r5
 8004c52:	f000 f8b7 	bl	8004dc4 <_sbrk_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	d00a      	beq.n	8004c70 <sbrk_aligned+0x34>
 8004c5a:	1cc4      	adds	r4, r0, #3
 8004c5c:	f024 0403 	bic.w	r4, r4, #3
 8004c60:	42a0      	cmp	r0, r4
 8004c62:	d007      	beq.n	8004c74 <sbrk_aligned+0x38>
 8004c64:	1a21      	subs	r1, r4, r0
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 f8ac 	bl	8004dc4 <_sbrk_r>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d101      	bne.n	8004c74 <sbrk_aligned+0x38>
 8004c70:	f04f 34ff 	mov.w	r4, #4294967295
 8004c74:	4620      	mov	r0, r4
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	200003c4 	.word	0x200003c4

08004c7c <_malloc_r>:
 8004c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c80:	1ccd      	adds	r5, r1, #3
 8004c82:	f025 0503 	bic.w	r5, r5, #3
 8004c86:	3508      	adds	r5, #8
 8004c88:	2d0c      	cmp	r5, #12
 8004c8a:	bf38      	it	cc
 8004c8c:	250c      	movcc	r5, #12
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	4607      	mov	r7, r0
 8004c92:	db01      	blt.n	8004c98 <_malloc_r+0x1c>
 8004c94:	42a9      	cmp	r1, r5
 8004c96:	d905      	bls.n	8004ca4 <_malloc_r+0x28>
 8004c98:	230c      	movs	r3, #12
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca4:	4e2e      	ldr	r6, [pc, #184]	; (8004d60 <_malloc_r+0xe4>)
 8004ca6:	f000 f89d 	bl	8004de4 <__malloc_lock>
 8004caa:	6833      	ldr	r3, [r6, #0]
 8004cac:	461c      	mov	r4, r3
 8004cae:	bb34      	cbnz	r4, 8004cfe <_malloc_r+0x82>
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f7ff ffc2 	bl	8004c3c <sbrk_aligned>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	4604      	mov	r4, r0
 8004cbc:	d14d      	bne.n	8004d5a <_malloc_r+0xde>
 8004cbe:	6834      	ldr	r4, [r6, #0]
 8004cc0:	4626      	mov	r6, r4
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	d140      	bne.n	8004d48 <_malloc_r+0xcc>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4638      	mov	r0, r7
 8004ccc:	eb04 0803 	add.w	r8, r4, r3
 8004cd0:	f000 f878 	bl	8004dc4 <_sbrk_r>
 8004cd4:	4580      	cmp	r8, r0
 8004cd6:	d13a      	bne.n	8004d4e <_malloc_r+0xd2>
 8004cd8:	6821      	ldr	r1, [r4, #0]
 8004cda:	3503      	adds	r5, #3
 8004cdc:	1a6d      	subs	r5, r5, r1
 8004cde:	f025 0503 	bic.w	r5, r5, #3
 8004ce2:	3508      	adds	r5, #8
 8004ce4:	2d0c      	cmp	r5, #12
 8004ce6:	bf38      	it	cc
 8004ce8:	250c      	movcc	r5, #12
 8004cea:	4629      	mov	r1, r5
 8004cec:	4638      	mov	r0, r7
 8004cee:	f7ff ffa5 	bl	8004c3c <sbrk_aligned>
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d02b      	beq.n	8004d4e <_malloc_r+0xd2>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	442b      	add	r3, r5
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	e00e      	b.n	8004d1c <_malloc_r+0xa0>
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	1b52      	subs	r2, r2, r5
 8004d02:	d41e      	bmi.n	8004d42 <_malloc_r+0xc6>
 8004d04:	2a0b      	cmp	r2, #11
 8004d06:	d916      	bls.n	8004d36 <_malloc_r+0xba>
 8004d08:	1961      	adds	r1, r4, r5
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	6025      	str	r5, [r4, #0]
 8004d0e:	bf18      	it	ne
 8004d10:	6059      	strne	r1, [r3, #4]
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	bf08      	it	eq
 8004d16:	6031      	streq	r1, [r6, #0]
 8004d18:	5162      	str	r2, [r4, r5]
 8004d1a:	604b      	str	r3, [r1, #4]
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f104 060b 	add.w	r6, r4, #11
 8004d22:	f000 f865 	bl	8004df0 <__malloc_unlock>
 8004d26:	f026 0607 	bic.w	r6, r6, #7
 8004d2a:	1d23      	adds	r3, r4, #4
 8004d2c:	1af2      	subs	r2, r6, r3
 8004d2e:	d0b6      	beq.n	8004c9e <_malloc_r+0x22>
 8004d30:	1b9b      	subs	r3, r3, r6
 8004d32:	50a3      	str	r3, [r4, r2]
 8004d34:	e7b3      	b.n	8004c9e <_malloc_r+0x22>
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	42a3      	cmp	r3, r4
 8004d3a:	bf0c      	ite	eq
 8004d3c:	6032      	streq	r2, [r6, #0]
 8004d3e:	605a      	strne	r2, [r3, #4]
 8004d40:	e7ec      	b.n	8004d1c <_malloc_r+0xa0>
 8004d42:	4623      	mov	r3, r4
 8004d44:	6864      	ldr	r4, [r4, #4]
 8004d46:	e7b2      	b.n	8004cae <_malloc_r+0x32>
 8004d48:	4634      	mov	r4, r6
 8004d4a:	6876      	ldr	r6, [r6, #4]
 8004d4c:	e7b9      	b.n	8004cc2 <_malloc_r+0x46>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4638      	mov	r0, r7
 8004d54:	f000 f84c 	bl	8004df0 <__malloc_unlock>
 8004d58:	e7a1      	b.n	8004c9e <_malloc_r+0x22>
 8004d5a:	6025      	str	r5, [r4, #0]
 8004d5c:	e7de      	b.n	8004d1c <_malloc_r+0xa0>
 8004d5e:	bf00      	nop
 8004d60:	200003c0 	.word	0x200003c0

08004d64 <_realloc_r>:
 8004d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d68:	4680      	mov	r8, r0
 8004d6a:	4614      	mov	r4, r2
 8004d6c:	460e      	mov	r6, r1
 8004d6e:	b921      	cbnz	r1, 8004d7a <_realloc_r+0x16>
 8004d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	4611      	mov	r1, r2
 8004d76:	f7ff bf81 	b.w	8004c7c <_malloc_r>
 8004d7a:	b92a      	cbnz	r2, 8004d88 <_realloc_r+0x24>
 8004d7c:	f7ff ff12 	bl	8004ba4 <_free_r>
 8004d80:	4625      	mov	r5, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d88:	f000 f838 	bl	8004dfc <_malloc_usable_size_r>
 8004d8c:	4284      	cmp	r4, r0
 8004d8e:	4607      	mov	r7, r0
 8004d90:	d802      	bhi.n	8004d98 <_realloc_r+0x34>
 8004d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d96:	d812      	bhi.n	8004dbe <_realloc_r+0x5a>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	f7ff ff6e 	bl	8004c7c <_malloc_r>
 8004da0:	4605      	mov	r5, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d0ed      	beq.n	8004d82 <_realloc_r+0x1e>
 8004da6:	42bc      	cmp	r4, r7
 8004da8:	4622      	mov	r2, r4
 8004daa:	4631      	mov	r1, r6
 8004dac:	bf28      	it	cs
 8004dae:	463a      	movcs	r2, r7
 8004db0:	f7ff fed0 	bl	8004b54 <memcpy>
 8004db4:	4631      	mov	r1, r6
 8004db6:	4640      	mov	r0, r8
 8004db8:	f7ff fef4 	bl	8004ba4 <_free_r>
 8004dbc:	e7e1      	b.n	8004d82 <_realloc_r+0x1e>
 8004dbe:	4635      	mov	r5, r6
 8004dc0:	e7df      	b.n	8004d82 <_realloc_r+0x1e>
	...

08004dc4 <_sbrk_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d06      	ldr	r5, [pc, #24]	; (8004de0 <_sbrk_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc f9be 	bl	8001150 <_sbrk>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_sbrk_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_sbrk_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200003c8 	.word	0x200003c8

08004de4 <__malloc_lock>:
 8004de4:	4801      	ldr	r0, [pc, #4]	; (8004dec <__malloc_lock+0x8>)
 8004de6:	f000 b811 	b.w	8004e0c <__retarget_lock_acquire_recursive>
 8004dea:	bf00      	nop
 8004dec:	200003cc 	.word	0x200003cc

08004df0 <__malloc_unlock>:
 8004df0:	4801      	ldr	r0, [pc, #4]	; (8004df8 <__malloc_unlock+0x8>)
 8004df2:	f000 b80c 	b.w	8004e0e <__retarget_lock_release_recursive>
 8004df6:	bf00      	nop
 8004df8:	200003cc 	.word	0x200003cc

08004dfc <_malloc_usable_size_r>:
 8004dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e00:	1f18      	subs	r0, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bfbc      	itt	lt
 8004e06:	580b      	ldrlt	r3, [r1, r0]
 8004e08:	18c0      	addlt	r0, r0, r3
 8004e0a:	4770      	bx	lr

08004e0c <__retarget_lock_acquire_recursive>:
 8004e0c:	4770      	bx	lr

08004e0e <__retarget_lock_release_recursive>:
 8004e0e:	4770      	bx	lr

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
