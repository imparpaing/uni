
Micro-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eb8  08003eb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000070  08003f30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08003f30  00020394  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3ed  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4c  00000000  00000000  0002b48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002ced8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c92  00000000  00000000  0002de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa32  00000000  00000000  00054af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1371  00000000  00000000  0005f524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002074  00000000  00000000  001508e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08003d7c 	.word	0x08003d7c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08003d7c 	.word	0x08003d7c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Print single character to terminal
void uart_print(unsigned char x)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	USART3->TDR = (x);
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <uart_print+0x2c>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	6293      	str	r3, [r2, #40]	; 0x28
	while(!((USART3->ISR)&USART_ISR_TC)){;}
 800054c:	bf00      	nop
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <uart_print+0x2c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <uart_print+0x12>
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40004800 	.word	0x40004800

0800056c <char_is_endmessage>:

// --- Reception ---
uint8_t char_is_endmessage(char c)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if (c == '\r' || c == '\n')
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b0d      	cmp	r3, #13
 800057a:	d002      	beq.n	8000582 <char_is_endmessage+0x16>
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b0a      	cmp	r3, #10
 8000580:	d101      	bne.n	8000586 <char_is_endmessage+0x1a>
	{
		return 1;
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <char_is_endmessage+0x1c>
	}
	else return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <rx_has_data>:

uint8_t rx_has_data()
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if(rx_empty == rx_busy)
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <rx_has_data+0x24>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <rx_has_data+0x28>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d101      	bne.n	80005ac <rx_has_data+0x18>
	{
		return 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e000      	b.n	80005ae <rx_has_data+0x1a>
	}
	else return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	2000036a 	.word	0x2000036a
 80005bc:	2000036c 	.word	0x2000036c

080005c0 <increase_rx_empty>:

void increase_rx_empty()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	rx_empty++;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <increase_rx_empty+0x2c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <increase_rx_empty+0x2c>)
 80005d0:	801a      	strh	r2, [r3, #0]
	if(rx_empty>BUFFER_LENGTH)
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <increase_rx_empty+0x2c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	2b1e      	cmp	r3, #30
 80005da:	d902      	bls.n	80005e2 <increase_rx_empty+0x22>
	{
		rx_empty = 0;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <increase_rx_empty+0x2c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	}
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	2000036a 	.word	0x2000036a

080005f0 <increase_rx_busy>:

void increase_rx_busy()
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	rx_busy++;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <increase_rx_busy+0x2c>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	3301      	adds	r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <increase_rx_busy+0x2c>)
 8000600:	801a      	strh	r2, [r3, #0]
	if(rx_busy>BUFFER_LENGTH)
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <increase_rx_busy+0x2c>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	2b1e      	cmp	r3, #30
 800060a:	d902      	bls.n	8000612 <increase_rx_busy+0x22>
	{
		rx_busy = 0;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <increase_rx_busy+0x2c>)
 800060e:	2200      	movs	r2, #0
 8000610:	801a      	strh	r2, [r3, #0]
	}
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	2000036c 	.word	0x2000036c

08000620 <get_char>:

// Get character from the reception buffer
uint8_t get_char()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	uint8_t tmp;

	tmp = rx_buffer[rx_busy];
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <get_char+0x24>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <get_char+0x28>)
 8000630:	5c9b      	ldrb	r3, [r3, r2]
 8000632:	71fb      	strb	r3, [r7, #7]
	increase_rx_busy();
 8000634:	f7ff ffdc 	bl	80005f0 <increase_rx_busy>
	return tmp;
 8000638:	79fb      	ldrb	r3, [r7, #7]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000036c 	.word	0x2000036c
 8000648:	2000034c 	.word	0x2000034c

0800064c <get_message>:

// Get message from the reception buffer
uint16_t get_message(uint8_t *array)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	static uint8_t tmp_arr[BUFFER_LENGTH];
	static uint16_t idx = 0;
	__IO uint16_t message_length = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	81bb      	strh	r3, [r7, #12]

	// Collect data from the reception buffer
	while(rx_has_data() == 1)
 8000658:	e041      	b.n	80006de <get_message+0x92>
	{
		tmp_arr[idx] = get_char();
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <get_message+0xa8>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	461c      	mov	r4, r3
 8000660:	f7ff ffde 	bl	8000620 <get_char>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <get_message+0xac>)
 800066a:	551a      	strb	r2, [r3, r4]

		if (char_is_endmessage(tmp_arr[idx]))
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <get_message+0xa8>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <get_message+0xac>)
 8000674:	5c9b      	ldrb	r3, [r3, r2]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff78 	bl	800056c <char_is_endmessage>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d021      	beq.n	80006c6 <get_message+0x7a>
		{
			// Set character at endmessage index to null
			tmp_arr[idx] = '\0';
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <get_message+0xa8>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <get_message+0xac>)
 800068a:	2100      	movs	r1, #0
 800068c:	5499      	strb	r1, [r3, r2]

			// Assign collected data to passed array
			for (uint8_t i=0; i<idx; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e009      	b.n	80006a8 <get_message+0x5c>
			{
				array[i] = tmp_arr[i];
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	440b      	add	r3, r1
 800069c:	4916      	ldr	r1, [pc, #88]	; (80006f8 <get_message+0xac>)
 800069e:	5c8a      	ldrb	r2, [r1, r2]
 80006a0:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<idx; i++)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <get_message+0xa8>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3ef      	bcc.n	8000694 <get_message+0x48>
			}

			message_length = idx;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <get_message+0xa8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	81bb      	strh	r3, [r7, #12]
			idx = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <get_message+0xa8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	801a      	strh	r2, [r3, #0]
			return message_length;
 80006c0:	89bb      	ldrh	r3, [r7, #12]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	e011      	b.n	80006ea <get_message+0x9e>
		}
		else
		{
			idx++;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <get_message+0xa8>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <get_message+0xa8>)
 80006d0:	801a      	strh	r2, [r3, #0]
			if(idx>BUFFER_LENGTH) return 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <get_message+0xa8>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	2b1e      	cmp	r3, #30
 80006d8:	d901      	bls.n	80006de <get_message+0x92>
 80006da:	2300      	movs	r3, #0
 80006dc:	e005      	b.n	80006ea <get_message+0x9e>
	while(rx_has_data() == 1)
 80006de:	f7ff ff59 	bl	8000594 <rx_has_data>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d0b8      	beq.n	800065a <get_message+0xe>
		}
	}
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000036e 	.word	0x2000036e
 80006f8:	20000370 	.word	0x20000370

080006fc <get_frame>:

// Collect & validate frame content
uint16_t get_frame(uint8_t *message)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	/* Store last analyzed char position
	Set index to 1 to skip starting char */
	uint16_t collection_index = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	82fb      	strh	r3, [r7, #22]
//	uint8_t *str_ptr;


	// Get sender
	for (uint8_t i=0; i<3; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	757b      	strb	r3, [r7, #21]
 800070c:	e00c      	b.n	8000728 <get_frame+0x2c>
	{
		sender[i] = message[collection_index];
 800070e:	8afb      	ldrh	r3, [r7, #22]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	441a      	add	r2, r3
 8000714:	7d7b      	ldrb	r3, [r7, #21]
 8000716:	7811      	ldrb	r1, [r2, #0]
 8000718:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <get_frame+0xe8>)
 800071a:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 800071c:	8afb      	ldrh	r3, [r7, #22]
 800071e:	3301      	adds	r3, #1
 8000720:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 8000722:	7d7b      	ldrb	r3, [r7, #21]
 8000724:	3301      	adds	r3, #1
 8000726:	757b      	strb	r3, [r7, #21]
 8000728:	7d7b      	ldrb	r3, [r7, #21]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d9ef      	bls.n	800070e <get_frame+0x12>
	}

	// Get receiver
	for (uint8_t i=0; i<3; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	753b      	strb	r3, [r7, #20]
 8000732:	e00c      	b.n	800074e <get_frame+0x52>
	{
		receiver[i] = message[collection_index];
 8000734:	8afb      	ldrh	r3, [r7, #22]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	441a      	add	r2, r3
 800073a:	7d3b      	ldrb	r3, [r7, #20]
 800073c:	7811      	ldrb	r1, [r2, #0]
 800073e:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <get_frame+0xec>)
 8000740:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000742:	8afb      	ldrh	r3, [r7, #22]
 8000744:	3301      	adds	r3, #1
 8000746:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 8000748:	7d3b      	ldrb	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	753b      	strb	r3, [r7, #20]
 800074e:	7d3b      	ldrb	r3, [r7, #20]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d9ef      	bls.n	8000734 <get_frame+0x38>
	}

	// Get command length
	for (uint8_t i=0; i<3; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	74fb      	strb	r3, [r7, #19]
 8000758:	e00c      	b.n	8000774 <get_frame+0x78>
	{
		command_chars[i] = message[collection_index];
 800075a:	8afb      	ldrh	r3, [r7, #22]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	441a      	add	r2, r3
 8000760:	7cfb      	ldrb	r3, [r7, #19]
 8000762:	7811      	ldrb	r1, [r2, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <get_frame+0xf0>)
 8000766:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 8000768:	8afb      	ldrh	r3, [r7, #22]
 800076a:	3301      	adds	r3, #1
 800076c:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 800076e:	7cfb      	ldrb	r3, [r7, #19]
 8000770:	3301      	adds	r3, #1
 8000772:	74fb      	strb	r3, [r7, #19]
 8000774:	7cfb      	ldrb	r3, [r7, #19]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d9ef      	bls.n	800075a <get_frame+0x5e>
	}

	// Return command length
	// Use length to get characters from 'data' array in next step
//	command_length = strtol(command_chars, &str_ptr, 10);
	command_length = atoi(command_chars);
 800077a:	481c      	ldr	r0, [pc, #112]	; (80007ec <get_frame+0xf0>)
 800077c:	f003 fa3c 	bl	8003bf8 <atoi>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <get_frame+0xf4>)
 8000786:	801a      	strh	r2, [r3, #0]

	// Get data
	for (uint16_t i=0; i<command_length; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	823b      	strh	r3, [r7, #16]
 800078c:	e00c      	b.n	80007a8 <get_frame+0xac>
	{
		data[i] = message[collection_index];
 800078e:	8afb      	ldrh	r3, [r7, #22]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	441a      	add	r2, r3
 8000794:	8a3b      	ldrh	r3, [r7, #16]
 8000796:	7811      	ldrb	r1, [r2, #0]
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <get_frame+0xf8>)
 800079a:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 800079c:	8afb      	ldrh	r3, [r7, #22]
 800079e:	3301      	adds	r3, #1
 80007a0:	82fb      	strh	r3, [r7, #22]
	for (uint16_t i=0; i<command_length; i++)
 80007a2:	8a3b      	ldrh	r3, [r7, #16]
 80007a4:	3301      	adds	r3, #1
 80007a6:	823b      	strh	r3, [r7, #16]
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <get_frame+0xf4>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	8a3a      	ldrh	r2, [r7, #16]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d3ed      	bcc.n	800078e <get_frame+0x92>
	}

	// Get checksum
	for (uint8_t i=0; i<3; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e00c      	b.n	80007d2 <get_frame+0xd6>
	{
		checksum[i] = message[collection_index];
 80007b8:	8afb      	ldrh	r3, [r7, #22]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	441a      	add	r2, r3
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	7811      	ldrb	r1, [r2, #0]
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <get_frame+0xfc>)
 80007c4:	54d1      	strb	r1, [r2, r3]
		collection_index++;
 80007c6:	8afb      	ldrh	r3, [r7, #22]
 80007c8:	3301      	adds	r3, #1
 80007ca:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i=0; i<3; i++)
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	3301      	adds	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d9ef      	bls.n	80007b8 <get_frame+0xbc>
	}
	return 0;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000138 	.word	0x20000138
 80007e8:	2000013c 	.word	0x2000013c
 80007ec:	20000140 	.word	0x20000140
 80007f0:	20000144 	.word	0x20000144
 80007f4:	20000148 	.word	0x20000148
 80007f8:	20000348 	.word	0x20000348

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fa59 	bl	8000cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f824 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f8c0 	bl	800098c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800080c:	f000 f88e 	bl	800092c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &character, 1);
 8000810:	2201      	movs	r2, #1
 8000812:	490b      	ldr	r1, [pc, #44]	; (8000840 <main+0x44>)
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <main+0x48>)
 8000816:	f001 ffaf 	bl	8002778 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Retrieve the message
	  if (char_is_endmessage(character))
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <main+0x44>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fea4 	bl	800056c <char_is_endmessage>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f7      	beq.n	800081a <main+0x1e>
	  {
		  message_length = get_message(message);
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <main+0x4c>)
 800082c:	f7ff ff0e 	bl	800064c <get_message>
 8000830:	4603      	mov	r3, r0
 8000832:	461a      	mov	r2, r3
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <main+0x50>)
 8000836:	801a      	strh	r2, [r3, #0]
		  get_frame(message);
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <main+0x4c>)
 800083a:	f7ff ff5f 	bl	80006fc <get_frame>
	  if (char_is_endmessage(character))
 800083e:	e7ec      	b.n	800081a <main+0x1e>
 8000840:	20000114 	.word	0x20000114
 8000844:	2000008c 	.word	0x2000008c
 8000848:	20000118 	.word	0x20000118
 800084c:	20000136 	.word	0x20000136

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2234      	movs	r2, #52	; 0x34
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f9f8 	bl	8003c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <SystemClock_Config+0xd4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a2a      	ldr	r2, [pc, #168]	; (8000924 <SystemClock_Config+0xd4>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xd4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <SystemClock_Config+0xd8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a25      	ldr	r2, [pc, #148]	; (8000928 <SystemClock_Config+0xd8>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <SystemClock_Config+0xd8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	2301      	movs	r3, #1
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ac:	2310      	movs	r3, #16
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b0:	2302      	movs	r3, #2
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b8:	2308      	movs	r3, #8
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008bc:	23d8      	movs	r3, #216	; 0xd8
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 fe07 	bl	80014e4 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008dc:	f000 f8da 	bl	8000a94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e0:	f000 fdb0 	bl	8001444 <HAL_PWREx_EnableOverDrive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ea:	f000 f8d3 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2107      	movs	r1, #7
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f897 	bl	8001a40 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000918:	f000 f8bc 	bl	8000a94 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	; 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART3_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000970:	f001 feb4 	bl	80026dc <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f88b 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000008c 	.word	0x2000008c
 8000988:	40004800 	.word	0x40004800

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_GPIO_Init+0xa8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <MX_GPIO_Init+0xac>)
 80009f0:	f000 fd0e 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_button_Pin */
  GPIO_InitStruct.Pin = B1_button_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_GPIO_Init+0xb0>)
 8000a0a:	f000 fb55 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0xac>)
 8000a26:	f000 fb47 	bl	80010b8 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40020800 	.word	0x40020800

08000a40 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Collection callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	// Print character to terminal
	uart_print(character);
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_UART_RxCpltCallback+0x44>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd75 	bl	800053c <uart_print>

	// Check for correct USART port
	if(huart->Instance == USART3)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <HAL_UART_RxCpltCallback+0x48>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d10e      	bne.n	8000a7a <HAL_UART_RxCpltCallback+0x3a>
	{
		// Collect character to reception buffer
		rx_buffer[rx_empty] = character;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_UART_RxCpltCallback+0x4c>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <HAL_UART_RxCpltCallback+0x44>)
 8000a66:	7819      	ldrb	r1, [r3, #0]
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_UART_RxCpltCallback+0x50>)
 8000a6a:	5499      	strb	r1, [r3, r2]

		// Increase rx_empty index
		increase_rx_empty();
 8000a6c:	f7ff fda8 	bl	80005c0 <increase_rx_empty>

		// Continue data collection
		HAL_UART_Receive_IT(huart, &character, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	4904      	ldr	r1, [pc, #16]	; (8000a84 <HAL_UART_RxCpltCallback+0x44>)
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f001 fe7f 	bl	8002778 <HAL_UART_Receive_IT>
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000114 	.word	0x20000114
 8000a88:	40004800 	.word	0x40004800
 8000a8c:	2000036a 	.word	0x2000036a
 8000a90:	2000034c 	.word	0x2000034c

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_MspInit+0x54>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <HAL_MspInit+0x54>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x54>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_MspInit+0x54>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_MspInit+0x54>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fa1a 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2005      	movs	r0, #5
 8000ae2:	f000 fa20 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ae6:	2005      	movs	r0, #5
 8000ae8:	f000 fa39 	bl	8000f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	; 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2290      	movs	r2, #144	; 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 f89b 	bl	8003c54 <memset>
  if(huart->Instance==USART3)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <HAL_UART_MspInit+0xc4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d144      	bne.n	8000bb2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f9a8 	bl	8001e8c <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b42:	f7ff ffa7 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <HAL_UART_MspInit+0xc8>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <HAL_UART_MspInit+0xc8>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_UART_MspInit+0xc8>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_UART_MspInit+0xc8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_UART_MspInit+0xc8>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_UART_MspInit+0xc8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b90:	2307      	movs	r3, #7
 8000b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <HAL_UART_MspInit+0xcc>)
 8000b9e:	f000 fa8b 	bl	80010b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2027      	movs	r0, #39	; 0x27
 8000ba8:	f000 f9bd 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bac:	2027      	movs	r0, #39	; 0x27
 8000bae:	f000 f9d6 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	37b8      	adds	r7, #184	; 0xb8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40004800 	.word	0x40004800
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020c00 	.word	0x40020c00

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f88c 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <USART3_IRQHandler+0x10>)
 8000c32:	f001 fde5 	bl	8002800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000008c 	.word	0x2000008c

08000c40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f002 ffbb 	bl	8003c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fdb1 	bl	80007fc <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ca8:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 8000cac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb0:	20000394 	.word	0x20000394

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>

08000cb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f000 f928 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f805 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc6:	f7ff feeb 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f943 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f90b 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000390 	.word	0x20000390

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000390 	.word	0x20000390

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	05fa0000 	.word	0x05fa0000

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff feda 	bl	8000d58 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d008      	beq.n	8000fc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e052      	b.n	800106a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0216 	bic.w	r2, r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <HAL_DMA_Abort+0x62>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0208 	bic.w	r2, r2, #8
 8001002:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001014:	e013      	b.n	800103e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001016:	f7ff fe9f 	bl	8000d58 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b05      	cmp	r3, #5
 8001022:	d90c      	bls.n	800103e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e015      	b.n	800106a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e4      	bne.n	8001016 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001050:	223f      	movs	r2, #63	; 0x3f
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d004      	beq.n	8001090 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e00c      	b.n	80010aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e175      	b.n	80013c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8164 	bne.w	80013be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x56>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80be 	beq.w	80013be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	4b66      	ldr	r3, [pc, #408]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a65      	ldr	r2, [pc, #404]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_GPIO_Init+0x324>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800125a:	4a61      	ldr	r2, [pc, #388]	; (80013e0 <HAL_GPIO_Init+0x328>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a58      	ldr	r2, [pc, #352]	; (80013e4 <HAL_GPIO_Init+0x32c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d037      	beq.n	80012f6 <HAL_GPIO_Init+0x23e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a57      	ldr	r2, [pc, #348]	; (80013e8 <HAL_GPIO_Init+0x330>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d031      	beq.n	80012f2 <HAL_GPIO_Init+0x23a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x334>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d02b      	beq.n	80012ee <HAL_GPIO_Init+0x236>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a55      	ldr	r2, [pc, #340]	; (80013f0 <HAL_GPIO_Init+0x338>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d025      	beq.n	80012ea <HAL_GPIO_Init+0x232>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a54      	ldr	r2, [pc, #336]	; (80013f4 <HAL_GPIO_Init+0x33c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01f      	beq.n	80012e6 <HAL_GPIO_Init+0x22e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a53      	ldr	r2, [pc, #332]	; (80013f8 <HAL_GPIO_Init+0x340>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x22a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <HAL_GPIO_Init+0x344>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a51      	ldr	r2, [pc, #324]	; (8001400 <HAL_GPIO_Init+0x348>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a50      	ldr	r2, [pc, #320]	; (8001404 <HAL_GPIO_Init+0x34c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x350>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x21a>
 80012ce:	2309      	movs	r3, #9
 80012d0:	e012      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012d2:	230a      	movs	r3, #10
 80012d4:	e010      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012d6:	2308      	movs	r3, #8
 80012d8:	e00e      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012da:	2307      	movs	r3, #7
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012de:	2306      	movs	r3, #6
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x240>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	; (80013e0 <HAL_GPIO_Init+0x328>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b3d      	ldr	r3, [pc, #244]	; (800140c <HAL_GPIO_Init+0x354>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a34      	ldr	r2, [pc, #208]	; (800140c <HAL_GPIO_Init+0x354>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_GPIO_Init+0x354>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_GPIO_Init+0x354>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <HAL_GPIO_Init+0x354>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_GPIO_Init+0x354>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_GPIO_Init+0x354>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_GPIO_Init+0x354>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae86 	bls.w	80010d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40022000 	.word	0x40022000
 8001408:	40022400 	.word	0x40022400
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a22      	ldr	r2, [pc, #136]	; (80014dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_PWREx_EnableOverDrive+0x98>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001472:	f7ff fc71 	bl	8000d58 <HAL_GetTick>
 8001476:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001478:	e009      	b.n	800148e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800147a:	f7ff fc6d 	bl	8000d58 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001488:	d901      	bls.n	800148e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e022      	b.n	80014d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d1ee      	bne.n	800147a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a8:	f7ff fc56 	bl	8000d58 <HAL_GetTick>
 80014ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014ae:	e009      	b.n	80014c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b0:	f7ff fc52 	bl	8000d58 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014be:	d901      	bls.n	80014c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e007      	b.n	80014d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014d0:	d1ee      	bne.n	80014b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e29b      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8087 	beq.w	8001616 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001508:	4b96      	ldr	r3, [pc, #600]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b04      	cmp	r3, #4
 8001512:	d00c      	beq.n	800152e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001514:	4b93      	ldr	r3, [pc, #588]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d112      	bne.n	8001546 <HAL_RCC_OscConfig+0x62>
 8001520:	4b90      	ldr	r3, [pc, #576]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800152c:	d10b      	bne.n	8001546 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152e:	4b8d      	ldr	r3, [pc, #564]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d06c      	beq.n	8001614 <HAL_RCC_OscConfig+0x130>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d168      	bne.n	8001614 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e275      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x7a>
 8001550:	4b84      	ldr	r3, [pc, #528]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a83      	ldr	r2, [pc, #524]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e02e      	b.n	80015bc <HAL_RCC_OscConfig+0xd8>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x9c>
 8001566:	4b7f      	ldr	r3, [pc, #508]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7e      	ldr	r2, [pc, #504]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b7c      	ldr	r3, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a7b      	ldr	r2, [pc, #492]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0xd8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0xc0>
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a75      	ldr	r2, [pc, #468]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b73      	ldr	r3, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a72      	ldr	r2, [pc, #456]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xd8>
 80015a4:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a6b      	ldr	r2, [pc, #428]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fbc8 	bl	8000d58 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fbc4 	bl	8000d58 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e229      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xe8>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fbb4 	bl	8000d58 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fbb0 	bl	8000d58 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e215      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x110>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d069      	beq.n	80016f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001622:	4b50      	ldr	r3, [pc, #320]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d11c      	bne.n	8001674 <HAL_RCC_OscConfig+0x190>
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x17a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1e9      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	493d      	ldr	r1, [pc, #244]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	e040      	b.n	80016f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a38      	ldr	r2, [pc, #224]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb66 	bl	8000d58 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fb62 	bl	8000d58 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1c7      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4929      	ldr	r1, [pc, #164]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
 80016c2:	e018      	b.n	80016f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a26      	ldr	r2, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb42 	bl	8000d58 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fb3e 	bl	8000d58 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1a3      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d038      	beq.n	8001774 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d019      	beq.n	800173e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff fb1f 	bl	8000d58 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff fb1b 	bl	8000d58 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e180      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x23a>
 800173c:	e01a      	b.n	8001774 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fb05 	bl	8000d58 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff fb01 	bl	8000d58 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d903      	bls.n	8001768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e166      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
 8001764:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 800176a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ee      	bne.n	8001752 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a4 	beq.w	80018ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10d      	bne.n	80017aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a88      	ldr	r2, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b86      	ldr	r3, [pc, #536]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a6:	2301      	movs	r3, #1
 80017a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017aa:	4b83      	ldr	r3, [pc, #524]	; (80019b8 <HAL_RCC_OscConfig+0x4d4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d118      	bne.n	80017e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017b6:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x4d4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x4d4>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fac9 	bl	8000d58 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7ff fac5 	bl	8000d58 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e12a      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017dc:	4b76      	ldr	r3, [pc, #472]	; (80019b8 <HAL_RCC_OscConfig+0x4d4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x31a>
 80017f0:	4b70      	ldr	r3, [pc, #448]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a6f      	ldr	r2, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e02d      	b.n	800185a <HAL_RCC_OscConfig+0x376>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x33c>
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	; 0x70
 8001812:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a67      	ldr	r2, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	e01c      	b.n	800185a <HAL_RCC_OscConfig+0x376>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d10c      	bne.n	8001842 <HAL_RCC_OscConfig+0x35e>
 8001828:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a61      	ldr	r2, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a5e      	ldr	r2, [pc, #376]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
 8001840:	e00b      	b.n	800185a <HAL_RCC_OscConfig+0x376>
 8001842:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	4a5b      	ldr	r2, [pc, #364]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6713      	str	r3, [r2, #112]	; 0x70
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d015      	beq.n	800188e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fa79 	bl	8000d58 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	e00a      	b.n	8001880 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186a:	f7ff fa75 	bl	8000d58 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e0d8      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ee      	beq.n	800186a <HAL_RCC_OscConfig+0x386>
 800188c:	e014      	b.n	80018b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fa63 	bl	8000d58 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fa5f 	bl	8000d58 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0c2      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ee      	bne.n	8001896 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d105      	bne.n	80018ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80ae 	beq.w	8001a30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d06d      	beq.n	80019bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d14b      	bne.n	8001980 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa30 	bl	8000d58 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fa2c 	bl	8000d58 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e091      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	071b      	lsls	r3, r3, #28
 8001946:	491b      	ldr	r1, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff f9fe 	bl	8000d58 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f9fa 	bl	8000d58 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e05f      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x47c>
 800197e:	e057      	b.n	8001a30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f9e4 	bl	8000d58 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f9e0 	bl	8000d58 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e045      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x4b0>
 80019b2:	e03d      	b.n	8001a30 <HAL_RCC_OscConfig+0x54c>
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_RCC_OscConfig+0x558>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d030      	beq.n	8001a2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d129      	bne.n	8001a2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d122      	bne.n	8001a2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d119      	bne.n	8001a2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d10f      	bne.n	8001a2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d0      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 020f 	bic.w	r2, r3, #15
 8001a6e:	4965      	ldr	r1, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d040      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e073      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4936      	ldr	r1, [pc, #216]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b34:	f7ff f910 	bl	8000d58 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff f90c 	bl	8000d58 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e053      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 020f 	bic.w	r2, r3, #15
 8001b7a:	4922      	ldr	r1, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x1cc>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1d0>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1d4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f86c 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	08003d94 	.word	0x08003d94
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c1c:	b094      	sub	sp, #80	; 0x50
 8001c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	647b      	str	r3, [r7, #68]	; 0x44
 8001c24:	2300      	movs	r3, #0
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c28:	2300      	movs	r3, #0
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c30:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d00d      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	f200 80e1 	bhi.w	8001e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c4a:	e0db      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c50:	e0db      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c52:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c56:	e0d8      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c58:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c62:	4b6d      	ldr	r3, [pc, #436]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6e:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	099b      	lsrs	r3, r3, #6
 8001c74:	2200      	movs	r2, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
 8001c82:	2300      	movs	r3, #0
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
 8001c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	f04f 0000 	mov.w	r0, #0
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	0159      	lsls	r1, r3, #5
 8001c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c9c:	0150      	lsls	r0, r2, #5
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	1a51      	subs	r1, r2, r1
 8001ca6:	6139      	str	r1, [r7, #16]
 8001ca8:	4629      	mov	r1, r5
 8001caa:	eb63 0301 	sbc.w	r3, r3, r1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cbc:	4659      	mov	r1, fp
 8001cbe:	018b      	lsls	r3, r1, #6
 8001cc0:	4651      	mov	r1, sl
 8001cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cc6:	4651      	mov	r1, sl
 8001cc8:	018a      	lsls	r2, r1, #6
 8001cca:	4651      	mov	r1, sl
 8001ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8001cd0:	4659      	mov	r1, fp
 8001cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cea:	4690      	mov	r8, r2
 8001cec:	4699      	mov	r9, r3
 8001cee:	4623      	mov	r3, r4
 8001cf0:	eb18 0303 	adds.w	r3, r8, r3
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	462b      	mov	r3, r5
 8001cf8:	eb49 0303 	adc.w	r3, r9, r3
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	024b      	lsls	r3, r1, #9
 8001d0e:	4621      	mov	r1, r4
 8001d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d14:	4621      	mov	r1, r4
 8001d16:	024a      	lsls	r2, r1, #9
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d28:	f7fe fa86 	bl	8000238 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d34:	e058      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4611      	mov	r1, r2
 8001d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d50:	4642      	mov	r2, r8
 8001d52:	464b      	mov	r3, r9
 8001d54:	f04f 0000 	mov.w	r0, #0
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	0159      	lsls	r1, r3, #5
 8001d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d62:	0150      	lsls	r0, r2, #5
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4641      	mov	r1, r8
 8001d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d6e:	4649      	mov	r1, r9
 8001d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d88:	ebb2 040a 	subs.w	r4, r2, sl
 8001d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	00eb      	lsls	r3, r5, #3
 8001d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d9e:	00e2      	lsls	r2, r4, #3
 8001da0:	4614      	mov	r4, r2
 8001da2:	461d      	mov	r5, r3
 8001da4:	4643      	mov	r3, r8
 8001da6:	18e3      	adds	r3, r4, r3
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	464b      	mov	r3, r9
 8001dac:	eb45 0303 	adc.w	r3, r5, r3
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	028b      	lsls	r3, r1, #10
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc8:	4621      	mov	r1, r4
 8001dca:	028a      	lsls	r2, r1, #10
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	61fa      	str	r2, [r7, #28]
 8001dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ddc:	f7fe fa2c 	bl	8000238 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	3301      	adds	r3, #1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3750      	adds	r7, #80	; 0x50
 8001e10:	46bd      	mov	sp, r7
 8001e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a9b      	lsrs	r3, r3, #10
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	08003da4 	.word	0x08003da4

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffdc 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08003da4 	.word	0x08003da4

08001e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d012      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001eb4:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ebe:	6093      	str	r3, [r2, #8]
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec8:	4964      	ldr	r1, [pc, #400]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d017      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	4959      	ldr	r1, [pc, #356]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f04:	d101      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d017      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f22:	4b4e      	ldr	r3, [pc, #312]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	494a      	ldr	r1, [pc, #296]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f40:	d101      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 808b 	beq.w	8002086 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	4a39      	ldr	r2, [pc, #228]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f88:	4b35      	ldr	r3, [pc, #212]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a34      	ldr	r2, [pc, #208]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f94:	f7fe fee0 	bl	8000d58 <HAL_GetTick>
 8001f98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9c:	f7fe fedc 	bl	8000d58 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e38f      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fba:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d035      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d02e      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d114      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe fea4 	bl	8000d58 <HAL_GetTick>
 8002010:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002012:	e00a      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7fe fea0 	bl	8000d58 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e351      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0ee      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002042:	d111      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002052:	400b      	ands	r3, r1
 8002054:	4901      	ldr	r1, [pc, #4]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
 800205a:	e00b      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000
 8002064:	0ffffcff 	.word	0x0ffffcff
 8002068:	4bac      	ldr	r3, [pc, #688]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4aab      	ldr	r2, [pc, #684]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002072:	6093      	str	r3, [r2, #8]
 8002074:	4ba9      	ldr	r3, [pc, #676]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002076:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	49a6      	ldr	r1, [pc, #664]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002082:	4313      	orrs	r3, r2
 8002084:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	d010      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002092:	4ba2      	ldr	r3, [pc, #648]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002098:	4aa0      	ldr	r2, [pc, #640]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020a2:	4b9e      	ldr	r3, [pc, #632]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	499b      	ldr	r1, [pc, #620]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c0:	4b96      	ldr	r3, [pc, #600]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ce:	4993      	ldr	r1, [pc, #588]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020e2:	4b8e      	ldr	r3, [pc, #568]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f0:	498a      	ldr	r1, [pc, #552]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002104:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002112:	4982      	ldr	r1, [pc, #520]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002126:	4b7d      	ldr	r3, [pc, #500]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4979      	ldr	r1, [pc, #484]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002148:	4b74      	ldr	r3, [pc, #464]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4971      	ldr	r1, [pc, #452]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800216a:	4b6c      	ldr	r3, [pc, #432]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f023 020c 	bic.w	r2, r3, #12
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	4968      	ldr	r1, [pc, #416]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800218c:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4960      	ldr	r1, [pc, #384]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021bc:	4957      	ldr	r1, [pc, #348]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021d0:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	494f      	ldr	r1, [pc, #316]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4946      	ldr	r1, [pc, #280]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	493e      	ldr	r1, [pc, #248]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	4935      	ldr	r1, [pc, #212]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002266:	492d      	ldr	r1, [pc, #180]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d011      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002288:	4924      	ldr	r1, [pc, #144]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002298:	d101      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	4914      	ldr	r1, [pc, #80]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ec:	490b      	ldr	r1, [pc, #44]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00f      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	4902      	ldr	r1, [pc, #8]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002318:	e002      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800232c:	4b8a      	ldr	r3, [pc, #552]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800232e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002332:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	4986      	ldr	r1, [pc, #536]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00b      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002350:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002356:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002360:	497d      	ldr	r1, [pc, #500]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d006      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 80d6 	beq.w	8002528 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800237c:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a75      	ldr	r2, [pc, #468]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7fe fce6 	bl	8000d58 <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002390:	f7fe fce2 	bl	8000d58 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e195      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d021      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023c2:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023d0:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d6:	0e1b      	lsrs	r3, r3, #24
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	019a      	lsls	r2, r3, #6
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	071b      	lsls	r3, r3, #28
 80023f6:	4958      	ldr	r1, [pc, #352]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800241c:	2b00      	cmp	r3, #0
 800241e:	d02e      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002428:	d129      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800243e:	0f1b      	lsrs	r3, r3, #28
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	019a      	lsls	r2, r3, #6
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	071b      	lsls	r3, r3, #28
 800245e:	493e      	ldr	r1, [pc, #248]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800246c:	f023 021f 	bic.w	r2, r3, #31
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	3b01      	subs	r3, #1
 8002476:	4938      	ldr	r1, [pc, #224]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01d      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002490:	0e1b      	lsrs	r3, r3, #24
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249e:	0f1b      	lsrs	r3, r3, #28
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	019a      	lsls	r2, r3, #6
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	071b      	lsls	r3, r3, #28
 80024be:	4926      	ldr	r1, [pc, #152]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d011      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	019a      	lsls	r2, r3, #6
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	041b      	lsls	r3, r3, #16
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	071b      	lsls	r3, r3, #28
 80024ee:	491a      	ldr	r1, [pc, #104]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002502:	f7fe fc29 	bl	8000d58 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800250a:	f7fe fc25 	bl	8000d58 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d901      	bls.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0d8      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b01      	cmp	r3, #1
 800252c:	f040 80ce 	bne.w	80026cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe fc0c 	bl	8000d58 <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002542:	e00b      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002544:	f7fe fc08 	bl	8000d58 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d904      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0bb      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800255c:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002568:	d0ec      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002586:	2b00      	cmp	r3, #0
 8002588:	d02e      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12a      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025a0:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	0f1b      	lsrs	r3, r3, #28
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	019a      	lsls	r2, r3, #6
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	071b      	lsls	r3, r3, #28
 80025c6:	4944      	ldr	r1, [pc, #272]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025ce:	4b42      	ldr	r3, [pc, #264]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	493d      	ldr	r1, [pc, #244]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d022      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025fc:	d11d      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025fe:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	0e1b      	lsrs	r3, r3, #24
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800260c:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	0f1b      	lsrs	r3, r3, #28
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	019a      	lsls	r2, r3, #6
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	431a      	orrs	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	4929      	ldr	r1, [pc, #164]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d028      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	0e1b      	lsrs	r3, r3, #24
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002654:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	019a      	lsls	r2, r3, #6
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	431a      	orrs	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	071b      	lsls	r3, r3, #28
 800267a:	4917      	ldr	r1, [pc, #92]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	4911      	ldr	r1, [pc, #68]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe fb58 	bl	8000d58 <HAL_GetTick>
 80026a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026ac:	f7fe fb54 	bl	8000d58 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e007      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ca:	d1ef      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e040      	b.n	8002770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe f9fa 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fb82 	bl	8002e24 <UART_SetConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e022      	b.n	8002770 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fdda 	bl	80032ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fe61 	bl	8003430 <UART_CheckIdleState>
 800276e:	4603      	mov	r3, r0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800278c:	2b20      	cmp	r3, #32
 800278e:	d132      	bne.n	80027f6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_UART_Receive_IT+0x24>
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e02b      	b.n	80027f8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d018      	beq.n	80027e6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	e853 3f00 	ldrex	r3, [r3]
 80027c0:	613b      	str	r3, [r7, #16]
   return(result);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d6:	69f9      	ldr	r1, [r7, #28]
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	e841 2300 	strex	r3, r2, [r1]
 80027de:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1e6      	bne.n	80027b4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 ff33 	bl	8003658 <UART_Start_Receive_IT>
 80027f2:	4603      	mov	r3, r0
 80027f4:	e000      	b.n	80027f8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b0ba      	sub	sp, #232	; 0xe8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002826:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800282a:	f640 030f 	movw	r3, #2063	; 0x80f
 800282e:	4013      	ands	r3, r2
 8002830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d115      	bne.n	8002868 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800283c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00f      	beq.n	8002868 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 82ac 	beq.w	8002db6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
      }
      return;
 8002866:	e2a6      	b.n	8002db6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8117 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800287e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002882:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <HAL_UART_IRQHandler+0x298>)
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 810a 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800288c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d011      	beq.n	80028bc <HAL_UART_IRQHandler+0xbc>
 8002898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d011      	beq.n	80028ec <HAL_UART_IRQHandler+0xec>
 80028c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2202      	movs	r2, #2
 80028da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d011      	beq.n	800291c <HAL_UART_IRQHandler+0x11c>
 80028f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2204      	movs	r2, #4
 800290a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002912:	f043 0202 	orr.w	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800291c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d017      	beq.n	8002958 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002938:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2208      	movs	r2, #8
 8002946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294e:	f043 0208 	orr.w	r2, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <HAL_UART_IRQHandler+0x18a>
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00c      	beq.n	800298a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8212 	beq.w	8002dba <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d005      	beq.n	80029e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04f      	beq.n	8002a82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fefe 	bl	80037e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d141      	bne.n	8002a7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3308      	adds	r3, #8
 80029fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1d9      	bne.n	80029f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d013      	beq.n	8002a72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <HAL_UART_IRQHandler+0x29c>)
 8002a50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fb0b 	bl	8001072 <HAL_DMA_Abort_IT>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d017      	beq.n	8002a92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	e00f      	b.n	8002a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9b6 	bl	8002de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a78:	e00b      	b.n	8002a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f9b2 	bl	8002de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	e007      	b.n	8002a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f9ae 	bl	8002de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002a90:	e193      	b.n	8002dba <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a92:	bf00      	nop
    return;
 8002a94:	e191      	b.n	8002dba <HAL_UART_IRQHandler+0x5ba>
 8002a96:	bf00      	nop
 8002a98:	04000120 	.word	0x04000120
 8002a9c:	080038ad 	.word	0x080038ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	f040 814c 	bne.w	8002d42 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8145 	beq.w	8002d42 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 813e 	beq.w	8002d42 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2210      	movs	r2, #16
 8002acc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	f040 80b6 	bne.w	8002c4a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8165 	beq.w	8002dbe <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002afe:	429a      	cmp	r2, r3
 8002b00:	f080 815d 	bcs.w	8002dbe <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b18:	f000 8086 	beq.w	8002c28 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1da      	bne.n	8002b1c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3308      	adds	r3, #8
 8002b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e1      	bne.n	8002b66 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e3      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf8:	f023 0310 	bic.w	r3, r3, #16
 8002bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e4      	bne.n	8002be8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f9b5 	bl	8000f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8d8 	bl	8002df8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c48:	e0b9      	b.n	8002dbe <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80ab 	beq.w	8002dc2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a6 	beq.w	8002dc2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e4      	bne.n	8002c76 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	623b      	str	r3, [r7, #32]
   return(result);
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cd0:	633a      	str	r2, [r7, #48]	; 0x30
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e3      	bne.n	8002cac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	e853 3f00 	ldrex	r3, [r3]
 8002d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f023 0310 	bic.w	r3, r3, #16
 8002d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	617b      	str	r3, [r7, #20]
   return(result);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e4      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f85c 	bl	8002df8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d40:	e03f      	b.n	8002dc2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00e      	beq.n	8002d6c <HAL_UART_IRQHandler+0x56c>
 8002d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f853 	bl	8002e10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d6a:	e02d      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00e      	beq.n	8002d96 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01c      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
    }
    return;
 8002d94:	e017      	b.n	8002dc6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
 8002da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fd92 	bl	80038d8 <UART_EndTransmit_IT>
    return;
 8002db4:	e008      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002db6:	bf00      	nop
 8002db8:	e006      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002dba:	bf00      	nop
 8002dbc:	e004      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002dc6:	bf00      	nop
  }

}
 8002dc8:	37e8      	adds	r7, #232	; 0xe8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop

08002dd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4ba6      	ldr	r3, [pc, #664]	; (80030e8 <UART_SetConfig+0x2c4>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a94      	ldr	r2, [pc, #592]	; (80030ec <UART_SetConfig+0x2c8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d120      	bne.n	8002ee2 <UART_SetConfig+0xbe>
 8002ea0:	4b93      	ldr	r3, [pc, #588]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d816      	bhi.n	8002edc <UART_SetConfig+0xb8>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <UART_SetConfig+0x90>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ed1 	.word	0x08002ed1
 8002ebc:	08002ecb 	.word	0x08002ecb
 8002ec0:	08002ed7 	.word	0x08002ed7
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e150      	b.n	800316c <UART_SetConfig+0x348>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e14d      	b.n	800316c <UART_SetConfig+0x348>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e14a      	b.n	800316c <UART_SetConfig+0x348>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	77fb      	strb	r3, [r7, #31]
 8002eda:	e147      	b.n	800316c <UART_SetConfig+0x348>
 8002edc:	2310      	movs	r3, #16
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e144      	b.n	800316c <UART_SetConfig+0x348>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a83      	ldr	r2, [pc, #524]	; (80030f4 <UART_SetConfig+0x2d0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d132      	bne.n	8002f52 <UART_SetConfig+0x12e>
 8002eec:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d828      	bhi.n	8002f4c <UART_SetConfig+0x128>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <UART_SetConfig+0xdc>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f4d 	.word	0x08002f4d
 8002f08:	08002f4d 	.word	0x08002f4d
 8002f0c:	08002f4d 	.word	0x08002f4d
 8002f10:	08002f41 	.word	0x08002f41
 8002f14:	08002f4d 	.word	0x08002f4d
 8002f18:	08002f4d 	.word	0x08002f4d
 8002f1c:	08002f4d 	.word	0x08002f4d
 8002f20:	08002f3b 	.word	0x08002f3b
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	08002f4d 	.word	0x08002f4d
 8002f2c:	08002f4d 	.word	0x08002f4d
 8002f30:	08002f47 	.word	0x08002f47
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e118      	b.n	800316c <UART_SetConfig+0x348>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e115      	b.n	800316c <UART_SetConfig+0x348>
 8002f40:	2304      	movs	r3, #4
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e112      	b.n	800316c <UART_SetConfig+0x348>
 8002f46:	2308      	movs	r3, #8
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e10f      	b.n	800316c <UART_SetConfig+0x348>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e10c      	b.n	800316c <UART_SetConfig+0x348>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a68      	ldr	r2, [pc, #416]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d120      	bne.n	8002f9e <UART_SetConfig+0x17a>
 8002f5c:	4b64      	ldr	r3, [pc, #400]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f66:	2b30      	cmp	r3, #48	; 0x30
 8002f68:	d013      	beq.n	8002f92 <UART_SetConfig+0x16e>
 8002f6a:	2b30      	cmp	r3, #48	; 0x30
 8002f6c:	d814      	bhi.n	8002f98 <UART_SetConfig+0x174>
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d009      	beq.n	8002f86 <UART_SetConfig+0x162>
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d810      	bhi.n	8002f98 <UART_SetConfig+0x174>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <UART_SetConfig+0x15c>
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d006      	beq.n	8002f8c <UART_SetConfig+0x168>
 8002f7e:	e00b      	b.n	8002f98 <UART_SetConfig+0x174>
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e0f2      	b.n	800316c <UART_SetConfig+0x348>
 8002f86:	2302      	movs	r3, #2
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e0ef      	b.n	800316c <UART_SetConfig+0x348>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e0ec      	b.n	800316c <UART_SetConfig+0x348>
 8002f92:	2308      	movs	r3, #8
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	e0e9      	b.n	800316c <UART_SetConfig+0x348>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e0e6      	b.n	800316c <UART_SetConfig+0x348>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a56      	ldr	r2, [pc, #344]	; (80030fc <UART_SetConfig+0x2d8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d120      	bne.n	8002fea <UART_SetConfig+0x1c6>
 8002fa8:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb4:	d013      	beq.n	8002fde <UART_SetConfig+0x1ba>
 8002fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb8:	d814      	bhi.n	8002fe4 <UART_SetConfig+0x1c0>
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d009      	beq.n	8002fd2 <UART_SetConfig+0x1ae>
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d810      	bhi.n	8002fe4 <UART_SetConfig+0x1c0>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <UART_SetConfig+0x1a8>
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d006      	beq.n	8002fd8 <UART_SetConfig+0x1b4>
 8002fca:	e00b      	b.n	8002fe4 <UART_SetConfig+0x1c0>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e0cc      	b.n	800316c <UART_SetConfig+0x348>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e0c9      	b.n	800316c <UART_SetConfig+0x348>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e0c6      	b.n	800316c <UART_SetConfig+0x348>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e0c3      	b.n	800316c <UART_SetConfig+0x348>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e0c0      	b.n	800316c <UART_SetConfig+0x348>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a44      	ldr	r2, [pc, #272]	; (8003100 <UART_SetConfig+0x2dc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d125      	bne.n	8003040 <UART_SetConfig+0x21c>
 8002ff4:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003002:	d017      	beq.n	8003034 <UART_SetConfig+0x210>
 8003004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003008:	d817      	bhi.n	800303a <UART_SetConfig+0x216>
 800300a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300e:	d00b      	beq.n	8003028 <UART_SetConfig+0x204>
 8003010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003014:	d811      	bhi.n	800303a <UART_SetConfig+0x216>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <UART_SetConfig+0x1fe>
 800301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301e:	d006      	beq.n	800302e <UART_SetConfig+0x20a>
 8003020:	e00b      	b.n	800303a <UART_SetConfig+0x216>
 8003022:	2300      	movs	r3, #0
 8003024:	77fb      	strb	r3, [r7, #31]
 8003026:	e0a1      	b.n	800316c <UART_SetConfig+0x348>
 8003028:	2302      	movs	r3, #2
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e09e      	b.n	800316c <UART_SetConfig+0x348>
 800302e:	2304      	movs	r3, #4
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	e09b      	b.n	800316c <UART_SetConfig+0x348>
 8003034:	2308      	movs	r3, #8
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e098      	b.n	800316c <UART_SetConfig+0x348>
 800303a:	2310      	movs	r3, #16
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e095      	b.n	800316c <UART_SetConfig+0x348>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2f      	ldr	r2, [pc, #188]	; (8003104 <UART_SetConfig+0x2e0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d125      	bne.n	8003096 <UART_SetConfig+0x272>
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <UART_SetConfig+0x2cc>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003054:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003058:	d017      	beq.n	800308a <UART_SetConfig+0x266>
 800305a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800305e:	d817      	bhi.n	8003090 <UART_SetConfig+0x26c>
 8003060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003064:	d00b      	beq.n	800307e <UART_SetConfig+0x25a>
 8003066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306a:	d811      	bhi.n	8003090 <UART_SetConfig+0x26c>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <UART_SetConfig+0x254>
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003074:	d006      	beq.n	8003084 <UART_SetConfig+0x260>
 8003076:	e00b      	b.n	8003090 <UART_SetConfig+0x26c>
 8003078:	2301      	movs	r3, #1
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e076      	b.n	800316c <UART_SetConfig+0x348>
 800307e:	2302      	movs	r3, #2
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e073      	b.n	800316c <UART_SetConfig+0x348>
 8003084:	2304      	movs	r3, #4
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e070      	b.n	800316c <UART_SetConfig+0x348>
 800308a:	2308      	movs	r3, #8
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e06d      	b.n	800316c <UART_SetConfig+0x348>
 8003090:	2310      	movs	r3, #16
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e06a      	b.n	800316c <UART_SetConfig+0x348>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1b      	ldr	r2, [pc, #108]	; (8003108 <UART_SetConfig+0x2e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d138      	bne.n	8003112 <UART_SetConfig+0x2ee>
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <UART_SetConfig+0x2cc>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030ae:	d017      	beq.n	80030e0 <UART_SetConfig+0x2bc>
 80030b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030b4:	d82a      	bhi.n	800310c <UART_SetConfig+0x2e8>
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	d00b      	beq.n	80030d4 <UART_SetConfig+0x2b0>
 80030bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c0:	d824      	bhi.n	800310c <UART_SetConfig+0x2e8>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <UART_SetConfig+0x2aa>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	d006      	beq.n	80030da <UART_SetConfig+0x2b6>
 80030cc:	e01e      	b.n	800310c <UART_SetConfig+0x2e8>
 80030ce:	2300      	movs	r3, #0
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e04b      	b.n	800316c <UART_SetConfig+0x348>
 80030d4:	2302      	movs	r3, #2
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e048      	b.n	800316c <UART_SetConfig+0x348>
 80030da:	2304      	movs	r3, #4
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e045      	b.n	800316c <UART_SetConfig+0x348>
 80030e0:	2308      	movs	r3, #8
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e042      	b.n	800316c <UART_SetConfig+0x348>
 80030e6:	bf00      	nop
 80030e8:	efff69f3 	.word	0xefff69f3
 80030ec:	40011000 	.word	0x40011000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40004400 	.word	0x40004400
 80030f8:	40004800 	.word	0x40004800
 80030fc:	40004c00 	.word	0x40004c00
 8003100:	40005000 	.word	0x40005000
 8003104:	40011400 	.word	0x40011400
 8003108:	40007800 	.word	0x40007800
 800310c:	2310      	movs	r3, #16
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e02c      	b.n	800316c <UART_SetConfig+0x348>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <UART_SetConfig+0x4bc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d125      	bne.n	8003168 <UART_SetConfig+0x344>
 800311c:	4b71      	ldr	r3, [pc, #452]	; (80032e4 <UART_SetConfig+0x4c0>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003126:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800312a:	d017      	beq.n	800315c <UART_SetConfig+0x338>
 800312c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003130:	d817      	bhi.n	8003162 <UART_SetConfig+0x33e>
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003136:	d00b      	beq.n	8003150 <UART_SetConfig+0x32c>
 8003138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313c:	d811      	bhi.n	8003162 <UART_SetConfig+0x33e>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <UART_SetConfig+0x326>
 8003142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003146:	d006      	beq.n	8003156 <UART_SetConfig+0x332>
 8003148:	e00b      	b.n	8003162 <UART_SetConfig+0x33e>
 800314a:	2300      	movs	r3, #0
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e00d      	b.n	800316c <UART_SetConfig+0x348>
 8003150:	2302      	movs	r3, #2
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e00a      	b.n	800316c <UART_SetConfig+0x348>
 8003156:	2304      	movs	r3, #4
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e007      	b.n	800316c <UART_SetConfig+0x348>
 800315c:	2308      	movs	r3, #8
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e004      	b.n	800316c <UART_SetConfig+0x348>
 8003162:	2310      	movs	r3, #16
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e001      	b.n	800316c <UART_SetConfig+0x348>
 8003168:	2310      	movs	r3, #16
 800316a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003174:	d15b      	bne.n	800322e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d828      	bhi.n	80031ce <UART_SetConfig+0x3aa>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x360>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031b1 	.word	0x080031b1
 800318c:	080031b9 	.word	0x080031b9
 8003190:	080031cf 	.word	0x080031cf
 8003194:	080031bf 	.word	0x080031bf
 8003198:	080031cf 	.word	0x080031cf
 800319c:	080031cf 	.word	0x080031cf
 80031a0:	080031cf 	.word	0x080031cf
 80031a4:	080031c7 	.word	0x080031c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7fe fe48 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 80031ac:	61b8      	str	r0, [r7, #24]
        break;
 80031ae:	e013      	b.n	80031d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b0:	f7fe fe58 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 80031b4:	61b8      	str	r0, [r7, #24]
        break;
 80031b6:	e00f      	b.n	80031d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b8:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <UART_SetConfig+0x4c4>)
 80031ba:	61bb      	str	r3, [r7, #24]
        break;
 80031bc:	e00c      	b.n	80031d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031be:	f7fe fd2b 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 80031c2:	61b8      	str	r0, [r7, #24]
        break;
 80031c4:	e008      	b.n	80031d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ca:	61bb      	str	r3, [r7, #24]
        break;
 80031cc:	e004      	b.n	80031d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	77bb      	strb	r3, [r7, #30]
        break;
 80031d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d074      	beq.n	80032c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	005a      	lsls	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	441a      	add	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	d916      	bls.n	8003228 <UART_SetConfig+0x404>
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d212      	bcs.n	8003228 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f023 030f 	bic.w	r3, r3, #15
 800320a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	b29a      	uxth	r2, r3
 8003218:	89fb      	ldrh	r3, [r7, #14]
 800321a:	4313      	orrs	r3, r2
 800321c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	89fa      	ldrh	r2, [r7, #14]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	e04f      	b.n	80032c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	77bb      	strb	r3, [r7, #30]
 800322c:	e04c      	b.n	80032c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800322e:	7ffb      	ldrb	r3, [r7, #31]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d828      	bhi.n	8003286 <UART_SetConfig+0x462>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <UART_SetConfig+0x418>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003261 	.word	0x08003261
 8003240:	08003269 	.word	0x08003269
 8003244:	08003271 	.word	0x08003271
 8003248:	08003287 	.word	0x08003287
 800324c:	08003277 	.word	0x08003277
 8003250:	08003287 	.word	0x08003287
 8003254:	08003287 	.word	0x08003287
 8003258:	08003287 	.word	0x08003287
 800325c:	0800327f 	.word	0x0800327f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7fe fdec 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8003264:	61b8      	str	r0, [r7, #24]
        break;
 8003266:	e013      	b.n	8003290 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7fe fdfc 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 800326c:	61b8      	str	r0, [r7, #24]
        break;
 800326e:	e00f      	b.n	8003290 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <UART_SetConfig+0x4c4>)
 8003272:	61bb      	str	r3, [r7, #24]
        break;
 8003274:	e00c      	b.n	8003290 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003276:	f7fe fccf 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 800327a:	61b8      	str	r0, [r7, #24]
        break;
 800327c:	e008      	b.n	8003290 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003282:	61bb      	str	r3, [r7, #24]
        break;
 8003284:	e004      	b.n	8003290 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	77bb      	strb	r3, [r7, #30]
        break;
 800328e:	bf00      	nop
    }

    if (pclk != 0U)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d018      	beq.n	80032c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085a      	lsrs	r2, r3, #1
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	441a      	add	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b0f      	cmp	r3, #15
 80032ae:	d909      	bls.n	80032c4 <UART_SetConfig+0x4a0>
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d205      	bcs.n	80032c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	e001      	b.n	80032c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40007c00 	.word	0x40007c00
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400

080032ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01a      	beq.n	8003402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ea:	d10a      	bne.n	8003402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003440:	f7fd fc8a 	bl	8000d58 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b08      	cmp	r3, #8
 8003452:	d10e      	bne.n	8003472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f831 	bl	80034ca <UART_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e027      	b.n	80034c2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d10e      	bne.n	800349e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f81b 	bl	80034ca <UART_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e011      	b.n	80034c2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b09c      	sub	sp, #112	; 0x70
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034da:	e0a7      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	f000 80a3 	beq.w	800362c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7fd fc37 	bl	8000d58 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <UART_WaitOnFlagUntilTimeout+0x32>
 80034f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d13f      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800350a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003510:	667b      	str	r3, [r7, #100]	; 0x64
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800351a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800351c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003520:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e6      	bne.n	80034fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	663b      	str	r3, [r7, #96]	; 0x60
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800354e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e068      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d050      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003598:	d148      	bne.n	800362c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
 80035c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e6      	bne.n	80035a4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3308      	adds	r3, #8
 80035dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	613b      	str	r3, [r7, #16]
   return(result);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3308      	adds	r3, #8
 80035f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035f6:	623a      	str	r2, [r7, #32]
 80035f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	61bb      	str	r3, [r7, #24]
   return(result);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e010      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	f43f af48 	beq.w	80034dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3770      	adds	r7, #112	; 0x70
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003658:	b480      	push	{r7}
 800365a:	b097      	sub	sp, #92	; 0x5c
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	d10e      	bne.n	80036aa <UART_Start_Receive_IT+0x52>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <UART_Start_Receive_IT+0x48>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f240 12ff 	movw	r2, #511	; 0x1ff
 800369a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800369e:	e02d      	b.n	80036fc <UART_Start_Receive_IT+0xa4>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036a8:	e028      	b.n	80036fc <UART_Start_Receive_IT+0xa4>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10d      	bne.n	80036ce <UART_Start_Receive_IT+0x76>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <UART_Start_Receive_IT+0x6c>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036c2:	e01b      	b.n	80036fc <UART_Start_Receive_IT+0xa4>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	227f      	movs	r2, #127	; 0x7f
 80036c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036cc:	e016      	b.n	80036fc <UART_Start_Receive_IT+0xa4>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036d6:	d10d      	bne.n	80036f4 <UART_Start_Receive_IT+0x9c>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d104      	bne.n	80036ea <UART_Start_Receive_IT+0x92>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	227f      	movs	r2, #127	; 0x7f
 80036e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036e8:	e008      	b.n	80036fc <UART_Start_Receive_IT+0xa4>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	223f      	movs	r2, #63	; 0x3f
 80036ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f2:	e003      	b.n	80036fc <UART_Start_Receive_IT+0xa4>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2222      	movs	r2, #34	; 0x22
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3308      	adds	r3, #8
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	657b      	str	r3, [r7, #84]	; 0x54
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800372c:	64ba      	str	r2, [r7, #72]	; 0x48
 800372e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800373a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d107      	bne.n	800375a <UART_Start_Receive_IT+0x102>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a21      	ldr	r2, [pc, #132]	; (80037dc <UART_Start_Receive_IT+0x184>)
 8003756:	669a      	str	r2, [r3, #104]	; 0x68
 8003758:	e002      	b.n	8003760 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a20      	ldr	r2, [pc, #128]	; (80037e0 <UART_Start_Receive_IT+0x188>)
 800375e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d019      	beq.n	800379c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800377c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
 8003788:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800378c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e6      	bne.n	8003768 <UART_Start_Receive_IT+0x110>
 800379a:	e018      	b.n	80037ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	613b      	str	r3, [r7, #16]
   return(result);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	653b      	str	r3, [r7, #80]	; 0x50
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	69f9      	ldr	r1, [r7, #28]
 80037c0:	6a3a      	ldr	r2, [r7, #32]
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	375c      	adds	r7, #92	; 0x5c
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	08003a93 	.word	0x08003a93
 80037e0:	0800392d 	.word	0x0800392d

080037e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b095      	sub	sp, #84	; 0x54
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003800:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380a:	643b      	str	r3, [r7, #64]	; 0x40
 800380c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e6      	bne.n	80037ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3308      	adds	r3, #8
 8003824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	61fb      	str	r3, [r7, #28]
   return(result);
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	64bb      	str	r3, [r7, #72]	; 0x48
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800383e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e5      	bne.n	800381e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	2b01      	cmp	r3, #1
 8003858:	d118      	bne.n	800388c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	60bb      	str	r3, [r7, #8]
   return(result);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f023 0310 	bic.w	r3, r3, #16
 800386e:	647b      	str	r3, [r7, #68]	; 0x44
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6979      	ldr	r1, [r7, #20]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	613b      	str	r3, [r7, #16]
   return(result);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e6      	bne.n	800385a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038a0:	bf00      	nop
 80038a2:	3754      	adds	r7, #84	; 0x54
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fa8a 	bl	8002de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6979      	ldr	r1, [r7, #20]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	613b      	str	r3, [r7, #16]
   return(result);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e6      	bne.n	80038e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fa56 	bl	8002dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003924:	bf00      	nop
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b096      	sub	sp, #88	; 0x58
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800393a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003944:	2b22      	cmp	r3, #34	; 0x22
 8003946:	f040 8098 	bne.w	8003a7a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003954:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003958:	b2d9      	uxtb	r1, r3
 800395a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800395e:	b2da      	uxtb	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	400a      	ands	r2, r1
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d17b      	bne.n	8003a8a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
 80039b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e6      	bne.n	8003992 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3308      	adds	r3, #8
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	623b      	str	r3, [r7, #32]
   return(result);
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039e4:	633a      	str	r2, [r7, #48]	; 0x30
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d12e      	bne.n	8003a72 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	617b      	str	r3, [r7, #20]
   return(result);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e6      	bne.n	8003a1a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d103      	bne.n	8003a62 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2210      	movs	r2, #16
 8003a60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff f9c4 	bl	8002df8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a70:	e00b      	b.n	8003a8a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fc ffe4 	bl	8000a40 <HAL_UART_RxCpltCallback>
}
 8003a78:	e007      	b.n	8003a8a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0208 	orr.w	r2, r2, #8
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	3758      	adds	r7, #88	; 0x58
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b096      	sub	sp, #88	; 0x58
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003aa0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aaa:	2b22      	cmp	r3, #34	; 0x22
 8003aac:	f040 8098 	bne.w	8003be0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ac0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ac4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ace:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	1c9a      	adds	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d17b      	bne.n	8003bf0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b16:	643b      	str	r3, [r7, #64]	; 0x40
 8003b18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12e      	bne.n	8003bd8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f023 0310 	bic.w	r3, r3, #16
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6979      	ldr	r1, [r7, #20]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e6      	bne.n	8003b80 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d103      	bne.n	8003bc8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff f911 	bl	8002df8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bd6:	e00b      	b.n	8003bf0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fc ff31 	bl	8000a40 <HAL_UART_RxCpltCallback>
}
 8003bde:	e007      	b.n	8003bf0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0208 	orr.w	r2, r2, #8
 8003bee:	619a      	str	r2, [r3, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	3758      	adds	r7, #88	; 0x58
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <atoi>:
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f000 b8b4 	b.w	8003d68 <strtol>

08003c00 <__errno>:
 8003c00:	4b01      	ldr	r3, [pc, #4]	; (8003c08 <__errno+0x8>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <__libc_init_array>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	4d0d      	ldr	r5, [pc, #52]	; (8003c44 <__libc_init_array+0x38>)
 8003c10:	4c0d      	ldr	r4, [pc, #52]	; (8003c48 <__libc_init_array+0x3c>)
 8003c12:	1b64      	subs	r4, r4, r5
 8003c14:	10a4      	asrs	r4, r4, #2
 8003c16:	2600      	movs	r6, #0
 8003c18:	42a6      	cmp	r6, r4
 8003c1a:	d109      	bne.n	8003c30 <__libc_init_array+0x24>
 8003c1c:	4d0b      	ldr	r5, [pc, #44]	; (8003c4c <__libc_init_array+0x40>)
 8003c1e:	4c0c      	ldr	r4, [pc, #48]	; (8003c50 <__libc_init_array+0x44>)
 8003c20:	f000 f8ac 	bl	8003d7c <_init>
 8003c24:	1b64      	subs	r4, r4, r5
 8003c26:	10a4      	asrs	r4, r4, #2
 8003c28:	2600      	movs	r6, #0
 8003c2a:	42a6      	cmp	r6, r4
 8003c2c:	d105      	bne.n	8003c3a <__libc_init_array+0x2e>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c34:	4798      	blx	r3
 8003c36:	3601      	adds	r6, #1
 8003c38:	e7ee      	b.n	8003c18 <__libc_init_array+0xc>
 8003c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3e:	4798      	blx	r3
 8003c40:	3601      	adds	r6, #1
 8003c42:	e7f2      	b.n	8003c2a <__libc_init_array+0x1e>
 8003c44:	08003eb8 	.word	0x08003eb8
 8003c48:	08003eb8 	.word	0x08003eb8
 8003c4c:	08003eb8 	.word	0x08003eb8
 8003c50:	08003ebc 	.word	0x08003ebc

08003c54 <memset>:
 8003c54:	4402      	add	r2, r0
 8003c56:	4603      	mov	r3, r0
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d100      	bne.n	8003c5e <memset+0xa>
 8003c5c:	4770      	bx	lr
 8003c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c62:	e7f9      	b.n	8003c58 <memset+0x4>

08003c64 <_strtol_l.constprop.0>:
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6a:	d001      	beq.n	8003c70 <_strtol_l.constprop.0+0xc>
 8003c6c:	2b24      	cmp	r3, #36	; 0x24
 8003c6e:	d906      	bls.n	8003c7e <_strtol_l.constprop.0+0x1a>
 8003c70:	f7ff ffc6 	bl	8003c00 <__errno>
 8003c74:	2316      	movs	r3, #22
 8003c76:	6003      	str	r3, [r0, #0]
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003d64 <_strtol_l.constprop.0+0x100>
 8003c82:	460d      	mov	r5, r1
 8003c84:	462e      	mov	r6, r5
 8003c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c8a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003c8e:	f017 0708 	ands.w	r7, r7, #8
 8003c92:	d1f7      	bne.n	8003c84 <_strtol_l.constprop.0+0x20>
 8003c94:	2c2d      	cmp	r4, #45	; 0x2d
 8003c96:	d132      	bne.n	8003cfe <_strtol_l.constprop.0+0x9a>
 8003c98:	782c      	ldrb	r4, [r5, #0]
 8003c9a:	2701      	movs	r7, #1
 8003c9c:	1cb5      	adds	r5, r6, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d05b      	beq.n	8003d5a <_strtol_l.constprop.0+0xf6>
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d109      	bne.n	8003cba <_strtol_l.constprop.0+0x56>
 8003ca6:	2c30      	cmp	r4, #48	; 0x30
 8003ca8:	d107      	bne.n	8003cba <_strtol_l.constprop.0+0x56>
 8003caa:	782c      	ldrb	r4, [r5, #0]
 8003cac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003cb0:	2c58      	cmp	r4, #88	; 0x58
 8003cb2:	d14d      	bne.n	8003d50 <_strtol_l.constprop.0+0xec>
 8003cb4:	786c      	ldrb	r4, [r5, #1]
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	3502      	adds	r5, #2
 8003cba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003cbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cc2:	f04f 0c00 	mov.w	ip, #0
 8003cc6:	fbb8 f9f3 	udiv	r9, r8, r3
 8003cca:	4666      	mov	r6, ip
 8003ccc:	fb03 8a19 	mls	sl, r3, r9, r8
 8003cd0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003cd4:	f1be 0f09 	cmp.w	lr, #9
 8003cd8:	d816      	bhi.n	8003d08 <_strtol_l.constprop.0+0xa4>
 8003cda:	4674      	mov	r4, lr
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	dd24      	ble.n	8003d2a <_strtol_l.constprop.0+0xc6>
 8003ce0:	f1bc 0f00 	cmp.w	ip, #0
 8003ce4:	db1e      	blt.n	8003d24 <_strtol_l.constprop.0+0xc0>
 8003ce6:	45b1      	cmp	r9, r6
 8003ce8:	d31c      	bcc.n	8003d24 <_strtol_l.constprop.0+0xc0>
 8003cea:	d101      	bne.n	8003cf0 <_strtol_l.constprop.0+0x8c>
 8003cec:	45a2      	cmp	sl, r4
 8003cee:	db19      	blt.n	8003d24 <_strtol_l.constprop.0+0xc0>
 8003cf0:	fb06 4603 	mla	r6, r6, r3, r4
 8003cf4:	f04f 0c01 	mov.w	ip, #1
 8003cf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cfc:	e7e8      	b.n	8003cd0 <_strtol_l.constprop.0+0x6c>
 8003cfe:	2c2b      	cmp	r4, #43	; 0x2b
 8003d00:	bf04      	itt	eq
 8003d02:	782c      	ldrbeq	r4, [r5, #0]
 8003d04:	1cb5      	addeq	r5, r6, #2
 8003d06:	e7ca      	b.n	8003c9e <_strtol_l.constprop.0+0x3a>
 8003d08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003d0c:	f1be 0f19 	cmp.w	lr, #25
 8003d10:	d801      	bhi.n	8003d16 <_strtol_l.constprop.0+0xb2>
 8003d12:	3c37      	subs	r4, #55	; 0x37
 8003d14:	e7e2      	b.n	8003cdc <_strtol_l.constprop.0+0x78>
 8003d16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003d1a:	f1be 0f19 	cmp.w	lr, #25
 8003d1e:	d804      	bhi.n	8003d2a <_strtol_l.constprop.0+0xc6>
 8003d20:	3c57      	subs	r4, #87	; 0x57
 8003d22:	e7db      	b.n	8003cdc <_strtol_l.constprop.0+0x78>
 8003d24:	f04f 3cff 	mov.w	ip, #4294967295
 8003d28:	e7e6      	b.n	8003cf8 <_strtol_l.constprop.0+0x94>
 8003d2a:	f1bc 0f00 	cmp.w	ip, #0
 8003d2e:	da05      	bge.n	8003d3c <_strtol_l.constprop.0+0xd8>
 8003d30:	2322      	movs	r3, #34	; 0x22
 8003d32:	6003      	str	r3, [r0, #0]
 8003d34:	4646      	mov	r6, r8
 8003d36:	b942      	cbnz	r2, 8003d4a <_strtol_l.constprop.0+0xe6>
 8003d38:	4630      	mov	r0, r6
 8003d3a:	e79e      	b.n	8003c7a <_strtol_l.constprop.0+0x16>
 8003d3c:	b107      	cbz	r7, 8003d40 <_strtol_l.constprop.0+0xdc>
 8003d3e:	4276      	negs	r6, r6
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	d0f9      	beq.n	8003d38 <_strtol_l.constprop.0+0xd4>
 8003d44:	f1bc 0f00 	cmp.w	ip, #0
 8003d48:	d000      	beq.n	8003d4c <_strtol_l.constprop.0+0xe8>
 8003d4a:	1e69      	subs	r1, r5, #1
 8003d4c:	6011      	str	r1, [r2, #0]
 8003d4e:	e7f3      	b.n	8003d38 <_strtol_l.constprop.0+0xd4>
 8003d50:	2430      	movs	r4, #48	; 0x30
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1b1      	bne.n	8003cba <_strtol_l.constprop.0+0x56>
 8003d56:	2308      	movs	r3, #8
 8003d58:	e7af      	b.n	8003cba <_strtol_l.constprop.0+0x56>
 8003d5a:	2c30      	cmp	r4, #48	; 0x30
 8003d5c:	d0a5      	beq.n	8003caa <_strtol_l.constprop.0+0x46>
 8003d5e:	230a      	movs	r3, #10
 8003d60:	e7ab      	b.n	8003cba <_strtol_l.constprop.0+0x56>
 8003d62:	bf00      	nop
 8003d64:	08003dad 	.word	0x08003dad

08003d68 <strtol>:
 8003d68:	4613      	mov	r3, r2
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	4802      	ldr	r0, [pc, #8]	; (8003d78 <strtol+0x10>)
 8003d70:	6800      	ldr	r0, [r0, #0]
 8003d72:	f7ff bf77 	b.w	8003c64 <_strtol_l.constprop.0>
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
